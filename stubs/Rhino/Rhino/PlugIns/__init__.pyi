from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from Rhino import PersistentSettings
from Rhino import RhinoDoc
from Rhino.DocObjects import Material
from Rhino.Geometry import Point3d
from Rhino.Geometry import Ray3d
from Rhino.Render import RenderTexture
from Rhino.Render import RenderWindow
from Rhino.Runtime import Mode
from Rhino.UI import MouseButton
from System import AsyncCallback
from System import DateTime
from System import EventHandler
from System import Guid
from System import IAsyncResult
from System import IFormatProvider
from System import IntPtr
from System import TypeCode
from System.Collections.Generic import Dictionary
from System.Drawing import Bitmap
from System.Drawing import Icon
from System.Drawing import Size
from System.Reflection import Assembly
from System.Reflection import MethodInfo
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext




class CustomRenderSaveFileTypes:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RegisterFileType(self, extensions: Iterable[str], description: str, saveFileHandler: SaveFileHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DescriptionType(Enum):
    Organization = 0
    Address = 1
    Country = 2
    Phone = 3
    WebSite = 4
    Email = 5
    UpdateUrl = 6
    Fax = 7
    Icon = 8


class DigitizerPlugIn(PlugIn):
    @overload
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    @overload
    def DisplayHelp(self, windowHandle: IntPtr) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AddToHelpMenu(self) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    @overload
    def GetCommands(self) -> Iterable[Command]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPlugInObject(self) -> object: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Icon(self, size: Size) -> Bitmap: ...
    @overload
    def IsTextureSupported(self, texture: RenderTexture) -> bool: ...
    @overload
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    def SaveSettings(self) -> None: ...
    @overload
    def SendPoint(self, point: Point3d, mousebuttons: MouseButton, shiftKey: bool, controlKey: bool) -> None: ...
    @overload
    def SendRay(self, ray: Ray3d, mousebuttons: MouseButton, shiftKey: bool, controlKey: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FileExportPlugIn(PlugIn):
    @overload
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    @overload
    def DisplayHelp(self, windowHandle: IntPtr) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AddToHelpMenu(self) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    @overload
    def GetCommands(self) -> Iterable[Command]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPlugInObject(self) -> object: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Icon(self, size: Size) -> Bitmap: ...
    @overload
    def IsTextureSupported(self, texture: RenderTexture) -> bool: ...
    @overload
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    def SaveSettings(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FileImportPlugIn(PlugIn):
    @overload
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    @overload
    def DisplayHelp(self, windowHandle: IntPtr) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AddToHelpMenu(self) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    @overload
    def GetCommands(self) -> Iterable[Command]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPlugInObject(self) -> object: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Icon(self, size: Size) -> Bitmap: ...
    @overload
    def IsTextureSupported(self, texture: RenderTexture) -> bool: ...
    @overload
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    def SaveSettings(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FileTypeList:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, description: str, extension: str): ...
    @overload
    def __init__(self, description: str, extension: str, showOptionsButtonInFileDialog: bool): ...
    @overload
    def AddFileType(self, description: str, extension: str) -> int: ...
    @overload
    def AddFileType(self, description: str, extensions: Iterable[str]) -> int: ...
    @overload
    def AddFileType(self, description: str, extension: str, showOptionsButtonInFileDialog: bool) -> int: ...
    @overload
    def AddFileType(self, description: str, extension1: str, extension2: str) -> int: ...
    @overload
    def AddFileType(self, description: str, extensions: Iterable[str], showOptionsButtonInFileDialog: bool) -> int: ...
    @overload
    def AddFileType(self, description: str, extension1: str, extension2: str, showOptionsButtonInFileDialog: bool) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class LicenseBuildType(Enum):
    Unspecified = 0
    Release = 100
    Evaluation = 200
    Beta = 300


class LicenseCapabilities(Enum):
    NoCapabilities = 0
    CanBePurchased = 1
    CanBeSpecified = 2
    CanBeEvaluated = 4
    EvaluationIsExpired = 8
    SupportsRhinoAccounts = 16
    SupportsStandalone = 32
    SupportsZooPerUser = 64
    SupportsZooPerCore = 128
    SupportsLicenseDiscovery = 256


class LicenseChangedEventArgs:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class LicenseData:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: DateTime | None): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: DateTime | None, productIcon: Icon): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: DateTime | None, productIcon: Icon, requiresOnlineValidation: bool, isUpgradeFromPreviousVersion: bool): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BuildType(self) -> LicenseBuildType: ...
    @property
    def DateToExpire(self) -> DateTime | None: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def IsUpgradeFromPreviousVersion(self) -> bool: ...
    @property
    def LicenseCount(self) -> int: ...
    @property
    def LicenseExpires(self) -> bool: ...
    @property
    def LicenseTitle(self) -> str: ...
    @property
    def ProductIcon(self) -> Icon: ...
    @property
    def ProductLicense(self) -> str: ...
    @property
    def RequiresOnlineValidation(self) -> bool: ...
    @property
    def SerialNumber(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsNotValid(data: LicenseData) -> bool: ...
    @overload
    def IsValid(self) -> bool: ...
    @overload
    @staticmethod
    def IsValid(data: LicenseData) -> bool: ...
    @overload
    def IsValid(self, ignoreExpirationDate: bool) -> bool: ...
    @BuildType.setter
    def BuildType(self, value: LicenseBuildType) -> None: ...
    @DateToExpire.setter
    def DateToExpire(self, value: DateTime | None) -> None: ...
    @ErrorMessage.setter
    def ErrorMessage(self, value: str) -> None: ...
    @IsUpgradeFromPreviousVersion.setter
    def IsUpgradeFromPreviousVersion(self, value: bool) -> None: ...
    @LicenseCount.setter
    def LicenseCount(self, value: int) -> None: ...
    @LicenseTitle.setter
    def LicenseTitle(self, value: str) -> None: ...
    @ProductIcon.setter
    def ProductIcon(self, value: Icon) -> None: ...
    @ProductLicense.setter
    def ProductLicense(self, value: str) -> None: ...
    @RequiresOnlineValidation.setter
    def RequiresOnlineValidation(self, value: bool) -> None: ...
    @SerialNumber.setter
    def SerialNumber(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class LicenseIdAttribute:
    @overload
    def __init__(self, value: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def TypeId(self) -> object: ...
    @property
    def Value(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class LicenseLease:
    @overload
    def __init__(self, unmanagedPointer: IntPtr): ...
    @overload
    def __init__(self, productId: str, groupName: str, groupId: str, userName: str, userId: str, productTitle: str, productVersion: str, productEdition: str, leaseId: str, iat: DateTime, exp: DateTime): ...
    @overload
    def __init__(self, productId: str, groupName: str, groupId: str, userName: str, userId: str, productTitle: str, productVersion: str, productEdition: str, leaseId: str, iat: DateTime, exp: DateTime, renewable_until: DateTime): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Expiration(self) -> DateTime: ...
    @property
    def GroupId(self) -> str: ...
    @property
    def GroupName(self) -> str: ...
    @property
    def IssuedAt(self) -> DateTime: ...
    @property
    def LeaseId(self) -> str: ...
    @property
    def ProductEdition(self) -> str: ...
    @property
    def ProductId(self) -> str: ...
    @property
    def ProductTitle(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RenewableUntil(self) -> DateTime | None: ...
    @property
    def UserId(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class LicenseLeaseChangedEventArgs:
    @overload
    def __init__(self, lease: LicenseLease): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Lease(self) -> LicenseLease: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class LicenseStatus:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BuildType(self) -> LicenseBuildType: ...
    @property
    def CheckOutExpirationDate(self) -> DateTime | None: ...
    @property
    def CloudZooLeaseExpiration(self) -> DateTime | None: ...
    @property
    def CloudZooLeaseIsValid(self) -> bool: ...
    @property
    def ExpirationDate(self) -> DateTime | None: ...
    @property
    def LicenseTitle(self) -> str: ...
    @property
    def LicenseType(self) -> LicenseType: ...
    @property
    def PluginId(self) -> Guid: ...
    @property
    def ProductIcon(self) -> Icon: ...
    @property
    def ProductId(self) -> Guid: ...
    @property
    def RegisteredOrganization(self) -> str: ...
    @property
    def RegisteredOwner(self) -> str: ...
    @property
    def SerialNumber(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @BuildType.setter
    def BuildType(self, value: LicenseBuildType) -> None: ...
    @CheckOutExpirationDate.setter
    def CheckOutExpirationDate(self, value: DateTime | None) -> None: ...
    @CloudZooLeaseExpiration.setter
    def CloudZooLeaseExpiration(self, value: DateTime | None) -> None: ...
    @CloudZooLeaseIsValid.setter
    def CloudZooLeaseIsValid(self, value: bool) -> None: ...
    @ExpirationDate.setter
    def ExpirationDate(self, value: DateTime | None) -> None: ...
    @LicenseTitle.setter
    def LicenseTitle(self, value: str) -> None: ...
    @LicenseType.setter
    def LicenseType(self, value: LicenseType) -> None: ...
    @PluginId.setter
    def PluginId(self, value: Guid) -> None: ...
    @ProductIcon.setter
    def ProductIcon(self, value: Icon) -> None: ...
    @ProductId.setter
    def ProductId(self, value: Guid) -> None: ...
    @RegisteredOrganization.setter
    def RegisteredOrganization(self, value: str) -> None: ...
    @RegisteredOwner.setter
    def RegisteredOwner(self, value: str) -> None: ...
    @SerialNumber.setter
    def SerialNumber(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class LicenseType(Enum):
    Standalone = 0
    Network = 1
    NetworkLoanedOut = 2
    NetworkCheckedOut = 3
    CloudZoo = 4


class LicenseUtils:
    @overload
    @staticmethod
    def AskUserForLicense(productType: int, standAlone: bool, parentWindow: object, textMask: str, validateProductKeyDelegate: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, product_path: str, product_title: str, pluginId: Guid, licenseId: Guid, capabilities: LicenseCapabilities) -> bool: ...
    @overload
    @staticmethod
    def AskUserForLicense(productType: int, standAlone: bool, parentWindow: object, textMask: str, validateProductKeyDelegate: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate, product_path: str, product_title: str, pluginId: Guid, licenseId: Guid, capabilities: LicenseCapabilities) -> bool: ...
    @overload
    @staticmethod
    def CheckInLicense(productId: Guid) -> bool: ...
    @overload
    @staticmethod
    def CheckOutLicense(productId: Guid) -> bool: ...
    @overload
    @staticmethod
    def ConvertLicense(productId: Guid) -> bool: ...
    @overload
    @staticmethod
    def DeleteLicense(productId: Guid) -> bool: ...
    @overload
    @staticmethod
    def Echo(message: str) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetLicense(validateProductKeyDelegate: ValidateProductKeyDelegate, leaseChangedDelegate: OnLeaseChangedDelegate, product_type: int, capabilities: int, textMask: str, product_path: str, product_title: str, pluginId: Guid, licenseId: Guid) -> bool: ...
    @overload
    @staticmethod
    def GetLicense(validateProductKeyDelegate: ValidateProductKeyDelegate, leaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate, product_type: int, capabilities: int, textMask: str, product_path: str, product_title: str, pluginId: Guid, licenseId: Guid) -> bool: ...
    @overload
    @staticmethod
    def GetLicenseCapabilities(filter: int) -> LicenseCapabilities: ...
    @overload
    @staticmethod
    def GetLicenseStatus() -> Iterable[LicenseStatus]: ...
    @overload
    @staticmethod
    def GetLicenseType(productId: Guid) -> int: ...
    @overload
    @staticmethod
    def GetOneLicenseStatus(productid: Guid) -> LicenseStatus: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Initialize() -> bool: ...
    @overload
    @staticmethod
    def IsCheckOutEnabled() -> bool: ...
    @overload
    @staticmethod
    def LicenseOptionsHandler(pluginId: Guid, licenseId: Guid, productTitle: str, standAlone: bool) -> bool: ...
    @overload
    @staticmethod
    def LoginToCloudZoo() -> bool: ...
    @overload
    @staticmethod
    def LogoutOfCloudZoo() -> bool: ...
    @overload
    @staticmethod
    def ReturnLicense(productId: Guid) -> bool: ...
    @overload
    @staticmethod
    def ShowBuyLicenseUi(productId: Guid) -> None: ...
    @overload
    @staticmethod
    def ShowLicenseValidationUi(cdkey: str) -> bool: ...
    @overload
    @staticmethod
    def ShowRhinoExpiredMessage(mode: Mode, result: int) -> tuple[bool, int]: ...
    @overload
    def ToString(self) -> str: ...


class LoadPlugInResult(Enum):
    Success = 0
    SuccessAlreadyLoaded = 1
    ErrorUnknown = 2


class LoadReturnCode(Enum):
    ErrorShowDialog = 0
    Success = 1
    ErrorNoDialog = -1


class OnLeaseChangedDelegate:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, args: LicenseLeaseChangedEventArgs, callback: AsyncCallback, object: object) -> tuple[IAsyncResult, Icon]: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> tuple[Icon]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, args: LicenseLeaseChangedEventArgs) -> tuple[Icon]: ...
    @overload
    def ToString(self) -> str: ...


class PlugIn:
    @overload
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_UnknownUserData(value: EventHandler) -> None: ...
    @overload
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    @overload
    def DisplayHelp(self, windowHandle: IntPtr) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Find(pluginAssembly: Assembly) -> PlugIn: ...
    @overload
    @staticmethod
    def Find(plugInId: Guid) -> PlugIn: ...
    @overload
    @staticmethod
    def FlushSettingsSavedQueue() -> None: ...
    @property
    def AddToHelpMenu(self) -> bool: ...
    @property
    @classmethod
    def AskOnLoadProtection(cls) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    @classmethod
    def InstalledPlugInCount(cls) -> int: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    @overload
    def GetCommands(self) -> Iterable[Command]: ...
    @overload
    @staticmethod
    def GetEnglishCommandNames(pluginId: Guid) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetInstalledPlugInFolders() -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames() -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames(typeFilter: PlugInType, loaded: bool, unloaded: bool) -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames(typeFilter: PlugInType, loaded: bool, unloaded: bool, localizedPlugInName: bool) -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugIns() -> Dictionary: ...
    @overload
    @staticmethod
    def GetInstalledPlugIns(localizedPlugInName: bool) -> Dictionary: ...
    @overload
    @staticmethod
    def GetLoadProtection(pluginId: Guid) -> tuple[bool, bool]: ...
    @overload
    @staticmethod
    def GetPlugInInfo(pluginId: Guid) -> PlugInInfo: ...
    @overload
    def GetPlugInObject(self) -> object: ...
    @overload
    @staticmethod
    def GetPluginSettings(plugInId: Guid, load: bool) -> PersistentSettings: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Icon(self, size: Size) -> Bitmap: ...
    @overload
    @staticmethod
    def IdFromFileName(filename: str) -> Guid: ...
    @overload
    @staticmethod
    def IdFromName(pluginName: str) -> Guid: ...
    @overload
    @staticmethod
    def IdFromPath(pluginPath: str) -> Guid: ...
    @overload
    def IsTextureSupported(self, texture: RenderTexture) -> bool: ...
    @overload
    @staticmethod
    def LoadComputeExtensionPlugins() -> None: ...
    @overload
    @staticmethod
    def LoadPlugIn(pluginId: Guid) -> bool: ...
    @overload
    @staticmethod
    def LoadPlugIn(path: str) -> tuple[LoadPlugInResult, Guid]: ...
    @overload
    @staticmethod
    def LoadPlugIn(pluginId: Guid, loadQuietly: bool, forceLoad: bool) -> bool: ...
    @overload
    @staticmethod
    def NameFromPath(pluginPath: str) -> str: ...
    @overload
    @staticmethod
    def PathFromId(pluginId: Guid) -> str: ...
    @overload
    @staticmethod
    def PathFromName(pluginName: str) -> str: ...
    @overload
    @staticmethod
    def PlugInExists(id: Guid) -> tuple[bool, bool, bool]: ...
    @overload
    @staticmethod
    def RaiseOnPlugInSettingsSavedEvent() -> None: ...
    @overload
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_UnknownUserData(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def SavePluginSettings(plugInId: Guid) -> None: ...
    @overload
    def SaveSettings(self) -> None: ...
    @AskOnLoadProtection.setter
    @classmethod
    def AskOnLoadProtection(clsvalue: bool) -> None: ...
    @overload
    @staticmethod
    def SetLoadProtection(pluginId: Guid, loadSilently: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PlugInDescriptionAttribute:
    @overload
    def __init__(self, descriptionType: DescriptionType, value: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DescriptionType(self) -> DescriptionType: ...
    @property
    def TypeId(self) -> object: ...
    @property
    def Value(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PlugInInfo:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Address(self) -> str: ...
    @property
    def CommandNames(self) -> Iterable[str]: ...
    @property
    def Country(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Email(self) -> str: ...
    @property
    def Fax(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileTypeDescriptions(self) -> Iterable[str]: ...
    @property
    def FileTypeExtensions(self) -> Iterable[str]: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDotNet(self) -> bool: ...
    @property
    def IsLoaded(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Organization(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def PlugInLoadTime(self) -> PlugInLoadTime: ...
    @property
    def PlugInType(self) -> PlugInType: ...
    @property
    def RegistryPath(self) -> str: ...
    @property
    def ShipsWithRhino(self) -> bool: ...
    @property
    def UpdateUrl(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WebSite(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Icon(self, size: Size) -> Bitmap: ...
    @overload
    def IsLoadProtected(self) -> tuple[bool, bool]: ...
    @overload
    def ToString(self) -> str: ...


class PlugInLoadTime(Enum):
    Disabled = 0
    AtStartup = 1
    WhenNeeded = 2
    WhenNeededIgnoreDockingBars = 6
    WhenNeededOrOptionsDialog = 10
    WhenNeededOrTabbedDockBar = 18


class PlugInType(Enum):
    # None = 0
    Render = 1
    FileImport = 2
    FileExport = 4
    Digitizer = 8
    Utility = 16
    DisplayPipeline = 32
    DisplayEngine = 64
    Any = 127


class PreviewNotification:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def NotifyIntermediateUpdate(self, rw: RenderWindow) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PreviewRenderTypes(Enum):
    # None = 0
    ThreeSeparateImages = 1
    SingleImage = 2
    Progressive = 3


class RenderFeature(Enum):
    Materials = 0
    Environments = 1
    Textures = 2
    PostEffects = 3
    Sun = 4
    CustomRenderMeshes = 5
    Decals = 6
    GroundPlane = 7
    SkyLight = 8
    CustomDecalProperties = 9
    LinearWorkflow = 10
    Exposure = 11
    ShadowOnlyGroundPlane = 12
    RenderBlowup = 13
    RenderWindow = 14
    RenderInWindow = 15
    FocalBlur = 17
    RenderArctic = 18
    RenderViewSource = 19
    CustomSkylightEnvironment = 20
    CustomReflectionEnvironment = 21
    RenderChannels = 22
    LightMaterials = 23


class RenderPlugIn(PlugIn):
    @overload
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    @overload
    @staticmethod
    def CurrentRendererSupportsFeature(feature: RenderFeature) -> bool: ...
    @overload
    def DisplayHelp(self, windowHandle: IntPtr) -> bool: ...
    @overload
    def EnableAssignMaterialButton(self) -> bool: ...
    @overload
    def EnableCreateMaterialButton(self) -> bool: ...
    @overload
    def EnableEditMaterialButton(self, doc: RhinoDoc, material: Material) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AddToHelpMenu(self) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def PerferBasicContent(self) -> bool: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    @overload
    def GetCommands(self) -> Iterable[Command]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPlugInObject(self) -> object: ...
    @overload
    def GetRenderSettingsSections(self) -> MutableSequence[Guid]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Icon(self, size: Size) -> Bitmap: ...
    @overload
    def IsTextureSupported(self, texture: RenderTexture) -> bool: ...
    @overload
    def OnAssignMaterial(self, parent: IntPtr, doc: RhinoDoc, material: Material) -> tuple[bool, Material]: ...
    @overload
    def OnCreateMaterial(self, parent: IntPtr, doc: RhinoDoc, material: Material) -> tuple[bool, Material]: ...
    @overload
    def OnEditMaterial(self, parent: IntPtr, doc: RhinoDoc, material: Material) -> tuple[bool, Material]: ...
    @overload
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    @overload
    def RenderSettingsCustomSections(self, sections: MutableSequence[ICollapsibleSection]) -> None: ...
    @overload
    def SaveSettings(self) -> None: ...
    @PerferBasicContent.setter
    def PerferBasicContent(self, value: bool) -> None: ...
    @overload
    def SunCustomSections(self, sections: MutableSequence[ICollapsibleSection]) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SaveFileHandler:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, fileName: str, includeAlpha: bool, renderWindow: RenderWindow, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, fileName: str, includeAlpha: bool, renderWindow: RenderWindow) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class UnknownUserDataEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ValidateProductKeyDelegate:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, productKey: str, callback: AsyncCallback, object: object) -> tuple[IAsyncResult, LicenseData]: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> tuple[ValidateResult, LicenseData]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, productKey: str) -> tuple[ValidateResult, LicenseData]: ...
    @overload
    def ToString(self) -> str: ...


class ValidateResult(Enum):
    ErrorShowMessage = 0
    Success = 1
    ErrorHideMessage = -1


class VerifyLicenseKeyDelegate:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, licenseKey: str, validationCode: str, validationCodeInstallDate: DateTime, gracePeriodExpired: bool, callback: AsyncCallback, object: object) -> tuple[IAsyncResult, LicenseData]: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> tuple[ValidateResult, LicenseData]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, licenseKey: str, validationCode: str, validationCodeInstallDate: DateTime, gracePeriodExpired: bool) -> tuple[ValidateResult, LicenseData]: ...
    @overload
    def ToString(self) -> str: ...


class VerifyPreviousVersionLicenseDelegate:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, license: str, previousVersionLicense: str, callback: AsyncCallback, object: object) -> tuple[IAsyncResult, str]: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> tuple[bool, str]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, license: str, previousVersionLicense: str) -> tuple[bool, str]: ...
    @overload
    def ToString(self) -> str: ...


class WriteFileResult(Enum):
    Failure = 0
    Success = 1
    Cancel = -1
