from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum



from Rhino.DocObjects import ModelComponentType
from Rhino.DocObjects import BitmapEntry
from Rhino import RhinoDoc
from System import Guid
class BitmapTable:
    def __iter__(self) -> Iterator[BitmapEntry]: ...
    def __getitem__(self, index: int) -> BitmapEntry: ...
    def __setitem__(self, index: int, value: BitmapEntry): ...
    @overload
    def AddBitmap(self, bitmapFilename: str, replaceExisting: bool) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: BitmapEntry) -> bool: ...
    @overload
    def DeleteBitmap(self, bitmapFilename: str) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExportToFile(self, index: int, path: str) -> bool: ...
    @overload
    def ExportToFiles(self, directoryPath: str, overwrite: int) -> int: ...
    @overload
    def Find(self, name: str, createFile: bool) -> tuple[BitmapEntry, str]: ...
    @overload
    def FindId(self, id: Guid) -> BitmapEntry: ...
    @overload
    def FindIndex(self, index: int) -> BitmapEntry: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[BitmapEntry]: ...
    @overload
    def GetEnumerator(self) -> Iterator[BitmapEntry]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import DimensionStyle
from System import Guid
from Rhino.DocObjects import ModelComponentType
from Rhino.Geometry import AnnotationBase
from Rhino import RhinoDoc
class DimStyleTable:
    def __iter__(self) -> Iterator[DimensionStyle]: ...
    def __getitem__(self, index: int) -> DimensionStyle: ...
    def __setitem__(self, index: int, value: DimensionStyle): ...
    @overload
    def Add(self, name: str) -> int: ...
    @overload
    def Add(self, dimstyle: DimensionStyle, reference: bool) -> int: ...
    @overload
    def Add(self, name: str, reference: bool) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: DimensionStyle) -> bool: ...
    @overload
    def Delete(self, index: int, quiet: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, styleId: Guid, ignoreDeleted: bool) -> DimensionStyle: ...
    @overload
    def FindId(self, id: Guid) -> DimensionStyle: ...
    @overload
    def FindIndex(self, index: int) -> DimensionStyle: ...
    @overload
    def FindName(self, name: str) -> DimensionStyle: ...
    @overload
    def FindRoot(self, styleId: Guid, ignoreDeleted: bool) -> DimensionStyle: ...
    @property
    def BuiltInStyles(self) -> Iterable[DimensionStyle]: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Current(self) -> DimensionStyle: ...
    @property
    def CurrentDimensionStyle(self) -> DimensionStyle: ...
    @property
    def CurrentId(self) -> Guid: ...
    @property
    def CurrentIndex(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[DimensionStyle]: ...
    @overload
    def GetEnumerator(self) -> Iterator[DimensionStyle]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUnusedStyleName(self) -> str: ...
    @overload
    def GetUnusedStyleName(self, rootName: str) -> str: ...
    @overload
    def Modify(self, dimstyle: DimensionStyle, annotation: AnnotationBase) -> ModifyType: ...
    @overload
    def Modify(self, newSettings: DimensionStyle, dimstyleIndex: int, quiet: bool) -> bool: ...
    @overload
    def Modify(self, newSettings: DimensionStyle, dimstyleId: Guid, quiet: bool) -> bool: ...
    @overload
    def SetCurrent(self, index: int, quiet: bool) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import DimensionStyle
class DimStyleTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> DimStyleTableEventType: ...
    @property
    def Index(self) -> int: ...
    @property
    def NewState(self) -> DimensionStyle: ...
    @property
    def OldState(self) -> DimensionStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class DimStyleTableEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5


from Rhino import RhinoDoc
from Rhino.DocObjects import Font
from Rhino.DocObjects import DimensionStyle
class FontTable:
    def __iter__(self) -> Iterator[Font]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindOrCreate(self, face: str, bold: bool, italic: bool) -> int: ...
    @overload
    def FindOrCreate(self, face: str, bold: bool, italic: bool, template_style: DimensionStyle) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentIndex(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[Font]: ...
    @overload
    def GetEnumerator(self) -> Iterator[Font]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import ModelComponentType
from Rhino.DocObjects import Group
from Rhino.FileIO import NameHash
from System import Guid
from System.Collections.Generic import Dictionary
from Rhino import RhinoDoc
class GroupTable:
    def __iter__(self) -> Iterator[Group]: ...
    def __getitem__(self, index: int) -> Group: ...
    def __setitem__(self, index: int, value: Group): ...
    @overload
    def Add(self) -> int: ...
    @overload
    def Add(self, objectIds: Iterable[Guid]) -> int: ...
    @overload
    def Add(self, groupName: str) -> int: ...
    @overload
    def Add(self, groupName: str, objectIds: Iterable[Guid]) -> int: ...
    @overload
    def AddToGroup(self, groupIndex: int, objectIds: Iterable[Guid]) -> bool: ...
    @overload
    def AddToGroup(self, groupIndex: int, objectId: Guid) -> bool: ...
    @overload
    def ChangeGroupName(self, groupIndex: int, newName: str) -> bool: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, groupIndex: int) -> bool: ...
    @overload
    def Delete(self, item: Group) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, groupName: str) -> int: ...
    @overload
    def FindId(self, id: Guid) -> Group: ...
    @overload
    def FindIndex(self, index: int) -> Group: ...
    @overload
    def FindName(self, name: str) -> Group: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Group: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[Group]: ...
    @overload
    def GetEnumerator(self) -> Iterator[Group]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GroupMembers(self, groupIndex: int) -> Iterable[RhinoObject]: ...
    @overload
    def GroupName(self, groupIndex: int) -> str: ...
    @overload
    def GroupNames(self, ignoreDeletedGroups: bool) -> Iterable[str]: ...
    @overload
    def GroupObjectCount(self, groupIndex: int) -> int: ...
    @overload
    def Hide(self, groupIndex: int) -> int: ...
    @overload
    def IsDeleted(self, groupIndex: int) -> bool: ...
    @overload
    def Lock(self, groupIndex: int) -> int: ...
    @overload
    def RemapObjects(self, rhinoObjects: Iterable[RhinoObject]) -> int: ...
    @overload
    def RemapObjects(self, rhinoObjects: Iterable[RhinoObject]) -> tuple[int, Dictionary]: ...
    @overload
    def Show(self, groupIndex: int) -> int: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Undelete(self, groupIndex: int) -> bool: ...
    @overload
    def Unlock(self, groupIndex: int) -> int: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import Group
class GroupTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> GroupTableEventType: ...
    @property
    def GroupIndex(self) -> int: ...
    @property
    def NewState(self) -> Group: ...
    @property
    def OldState(self) -> Group: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GroupTableEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4


from Rhino.DocObjects import HatchPattern
from Rhino.DocObjects import ModelComponentType
from Rhino.FileIO import NameHash
from Rhino import RhinoDoc
from System import Guid
class HatchPatternTable:
    def __iter__(self) -> Iterator[HatchPattern]: ...
    def __getitem__(self, index: int) -> HatchPattern: ...
    def __setitem__(self, index: int, value: HatchPattern): ...
    @overload
    def Add(self, pattern: HatchPattern) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, hatchPatternIndex: int) -> bool: ...
    @overload
    def Delete(self, item: HatchPattern) -> bool: ...
    @overload
    def Delete(self, item: HatchPattern, quiet: bool) -> bool: ...
    @overload
    def Delete(self, hatchPatternIndex: int, quiet: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> HatchPattern: ...
    @overload
    def FindIndex(self, index: int) -> HatchPattern: ...
    @overload
    def FindName(self, name: str) -> HatchPattern: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> HatchPattern: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentHatchPatternIndex(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[HatchPattern]: ...
    @overload
    def GetEnumerator(self) -> Iterator[HatchPattern]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Modify(self, hatchPattern: HatchPattern, hatchPatternIndex: int, quiet: bool) -> bool: ...
    @overload
    def Rename(self, item: HatchPattern, hatchPatternName: str) -> bool: ...
    @overload
    def Rename(self, hatchPatternIndex: int, hatchPatternName: str) -> bool: ...
    @CurrentHatchPatternIndex.setter
    def CurrentHatchPatternIndex(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import HatchPattern
class HatchPatternTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> HatchPatternTableEventType: ...
    @property
    def HatchPatternIndex(self) -> int: ...
    @property
    def NewState(self) -> HatchPattern: ...
    @property
    def OldState(self) -> HatchPattern: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class HatchPatternTableEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5


from Rhino import RhinoDoc
from Rhino.DocObjects import ModelComponentType
from Rhino.DocObjects import InstanceDefinition
from System import Guid
from Rhino.Geometry import Point3d
from Rhino.Geometry import GeometryBase
from Rhino.DocObjects import ObjectAttributes
from Rhino.DocObjects.Custom import UserData
from Rhino.DocObjects import InstanceDefinitionUpdateType
from Rhino.FileIO import FileReference
class InstanceDefinitionTable:
    def __iter__(self) -> Iterator[InstanceDefinition]: ...
    def __getitem__(self, index: int) -> InstanceDefinition: ...
    def __setitem__(self, index: int, value: InstanceDefinition): ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: Iterable[GeometryBase]) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: GeometryBase, attributes: ObjectAttributes) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: Iterable[GeometryBase], attributes: Iterable[ObjectAttributes]) -> int: ...
    @overload
    def Add(self, name: str, description: str, url: str, urlTag: str, basePoint: Point3d, geometry: Iterable[GeometryBase], attributes: Iterable[ObjectAttributes]) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Compact(self, ignoreUndoReferences: bool) -> None: ...
    @overload
    def Delete(self, item: InstanceDefinition) -> bool: ...
    @overload
    def Delete(self, idefIndex: int, deleteReferences: bool, quiet: bool) -> bool: ...
    @overload
    def DestroySourceArchive(self, definition: InstanceDefinition, quiet: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, instanceDefinitionName: str) -> InstanceDefinition: ...
    @overload
    def Find(self, instanceId: Guid, ignoreDeletedInstanceDefinitions: bool) -> InstanceDefinition: ...
    @overload
    def FindId(self, id: Guid) -> InstanceDefinition: ...
    @property
    def ActiveCount(self) -> int: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[InstanceDefinition]: ...
    @overload
    def GetEnumerator(self) -> Iterator[InstanceDefinition]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetList(self, ignoreDeleted: bool) -> Iterable[InstanceDefinition]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUnusedInstanceDefinitionName(self) -> str: ...
    @overload
    def GetUnusedInstanceDefinitionName(self, root: str) -> str: ...
    @overload
    def InstanceDefinitionIndex(self, instanceId: Guid, ignoreDeletedInstanceDefinitions: bool) -> int: ...
    @overload
    def Modify(self, idefIndex: int, userData: UserData, quiet: bool) -> bool: ...
    @overload
    def Modify(self, idef: InstanceDefinition, newName: str, newDescription: str, quiet: bool) -> bool: ...
    @overload
    def Modify(self, idefIndex: int, newName: str, newDescription: str, quiet: bool) -> bool: ...
    @overload
    def Modify(self, idef: InstanceDefinition, newName: str, newDescription: str, newUrl: str, newUrlTag: str, quiet: bool) -> bool: ...
    @overload
    def Modify(self, idefIndex: int, newName: str, newDescription: str, newUrl: str, newUrlTag: str, quiet: bool) -> bool: ...
    @overload
    def ModifyGeometry(self, idefIndex: int, newGeometry: Iterable[GeometryBase]) -> bool: ...
    @overload
    def ModifyGeometry(self, idefIndex: int, newGeometry: Iterable[GeometryBase], newAttributes: Iterable[ObjectAttributes]) -> bool: ...
    @overload
    def ModifyGeometry(self, idefIndex: int, newGeometry: GeometryBase, newAttributes: ObjectAttributes) -> bool: ...
    @overload
    def ModifySourceArchive(self, idefIndex: int, sourceArchive: FileReference, updateType: InstanceDefinitionUpdateType, quiet: bool) -> bool: ...
    @overload
    def Purge(self, idefIndex: int) -> bool: ...
    @overload
    def RefreshLinkedBlock(self, definition: InstanceDefinition) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Undelete(self, idefIndex: int) -> bool: ...
    @overload
    def UndoModify(self, idefIndex: int) -> bool: ...
    @overload
    def UpdateLinkedInstanceDefinition(self, idefIndex: int, filename: str, updateNestedLinks: bool, quiet: bool) -> bool: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import InstanceDefinition
from Rhino.Geometry import InstanceDefinitionGeometry
class InstanceDefinitionTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> InstanceDefinitionTableEventType: ...
    @property
    def InstanceDefinitionIndex(self) -> int: ...
    @property
    def NewState(self) -> InstanceDefinition: ...
    @property
    def OldState(self) -> InstanceDefinitionGeometry: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class InstanceDefinitionTableEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4


from Rhino import RhinoDoc
from Rhino.DocObjects import Layer
from Rhino.DocObjects import ModelComponentType
from System import Guid
from Rhino.FileIO import NameHash
from System.Drawing import Color
class LayerTable:
    def __iter__(self) -> Iterator[Layer]: ...
    def __getitem__(self, index: int) -> Layer: ...
    def __setitem__(self, index: int, value: Layer): ...
    @overload
    def Add(self) -> int: ...
    @overload
    def Add(self, layer: Layer) -> int: ...
    @overload
    def Add(self, layerName: str, layerColor: Color) -> int: ...
    @overload
    def AddPath(self, layerPath: str) -> int: ...
    @overload
    def AddPath(self, layerPath: str, layerColor: Color) -> int: ...
    @overload
    def AddReferenceLayer(self) -> int: ...
    @overload
    def AddReferenceLayer(self, layer: Layer) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def CreateLayer(self, newLayer: Layer, layerType: LayerType, worksessionReferenceModelSerialNumber: int, linkedInstanceDefinitionSerialNumber: int) -> int: ...
    @overload
    def Delete(self, layer: Layer) -> bool: ...
    @overload
    def Delete(self, layerId: Guid, quiet: bool) -> bool: ...
    @overload
    def Delete(self, layer: Layer, quiet: bool) -> bool: ...
    @overload
    def Delete(self, layerIndices: Iterable[int], quiet: bool) -> int: ...
    @overload
    def Delete(self, layerIndex: int, quiet: bool) -> bool: ...
    @overload
    def Duplicate(self, layerIndex: int, duplicateObjects: bool, duplicateSublayers: bool) -> Iterable[int]: ...
    @overload
    def Duplicate(self, layerIndices: Iterable[int], duplicateObjects: bool, duplicateSublayers: bool) -> Iterable[int]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, parentId: Guid, layerName: str, notFoundReturnValue: int) -> int: ...
    @overload
    def Find(self, layerId: Guid, ignoreDeletedLayers: bool, notFoundReturnValue: int) -> int: ...
    @overload
    def FindByFullPath(self, layerPath: str, notFoundReturnValue: int) -> int: ...
    @overload
    def FindId(self, id: Guid) -> Layer: ...
    @overload
    def FindIndex(self, index: int) -> Layer: ...
    @overload
    def FindName(self, layerName: str) -> Layer: ...
    @overload
    def FindName(self, layerName: str, startIndex: int) -> Layer: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Layer: ...
    @overload
    def FindNext(self, index: int, layerName: str) -> Layer: ...
    @overload
    def ForceLayerVisible(self, layerId: Guid) -> bool: ...
    @overload
    def ForceLayerVisible(self, layerIndex: int) -> bool: ...
    @property
    def ActiveCount(self) -> int: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentLayer(self) -> Layer: ...
    @property
    def CurrentLayerIndex(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[Layer]: ...
    @overload
    def GetEnumerator(self) -> Iterator[Layer]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelected(self) -> tuple[bool, MutableSequence[Any]]: ...
    @overload
    def GetSorted(self) -> Iterable[int]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUnusedLayerName(self) -> str: ...
    @overload
    def Modify(self, newSettings: Layer, layerId: Guid, quiet: bool) -> bool: ...
    @overload
    def Modify(self, newSettings: Layer, layerIndex: int, quiet: bool) -> bool: ...
    @overload
    def Purge(self, layerIndex: int, quiet: bool) -> bool: ...
    @overload
    def Purge(self, layerId: Guid, quiet: bool) -> bool: ...
    @overload
    def Select(self, layerIndices: Iterable[int], bDeselect: bool) -> bool: ...
    @overload
    def SetCurrentLayerIndex(self, layerIndex: int, quiet: bool) -> bool: ...
    @overload
    def Sort(self, layerIndices: Iterable[int]) -> None: ...
    @overload
    def SortByLayerName(self, bAscending: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Undelete(self, layerIndex: int) -> bool: ...
    @overload
    def UndoModify(self, layerIndex: int) -> bool: ...
    @overload
    def UndoModify(self, layerId: Guid) -> bool: ...
    @overload
    def UndoModify(self, layerIndex: int, undoRecordSerialNumber: int) -> bool: ...
    @overload
    def UndoModify(self, layerId: Guid, undoRecordSerialNumber: int) -> bool: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import Layer
class LayerTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> LayerTableEventType: ...
    @property
    def LayerIndex(self) -> int: ...
    @property
    def NewState(self) -> Layer: ...
    @property
    def OldState(self) -> Layer: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class LayerTableEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5


class LayerType(Enum):
    NormalLayer = 0
    LinkedInstanceDefinitionParentLayer = 2
    WorkSessionParentLayer = 4


from Rhino import RhinoDoc
from Rhino.Render import Sun
from Rhino.Render import Skylight
from Rhino.DocObjects import ModelComponentType
from Rhino.DocObjects import LightObject
from System import Guid
from Rhino.FileIO import NameHash
from Rhino.Geometry import Light
from Rhino.DocObjects import ObjectAttributes
class LightTable:
    def __iter__(self) -> Iterator[LightObject]: ...
    def __getitem__(self, index: int) -> LightObject: ...
    def __setitem__(self, index: int, value: LightObject): ...
    @overload
    def Add(self, light: Light) -> int: ...
    @overload
    def Add(self, light: Light, attributes: ObjectAttributes) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: LightObject) -> bool: ...
    @overload
    def Delete(self, index: int, quiet: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, id: Guid, ignoreDeleted: bool) -> int: ...
    @overload
    def FindId(self, id: Guid) -> LightObject: ...
    @overload
    def FindIndex(self, index: int) -> LightObject: ...
    @overload
    def FindName(self, name: str) -> LightObject: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> LightObject: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[LightObject]: ...
    @property
    def Skylight(self) -> Skylight: ...
    @property
    def Sun(self) -> Sun: ...
    @overload
    def GetEnumerator(self) -> Iterator[LightObject]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Modify(self, id: Guid, light: Light) -> bool: ...
    @overload
    def Modify(self, index: int, light: Light) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Undelete(self, index: int) -> bool: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import LightObject
from Rhino.Geometry import Light
class LightTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> LightTableEventType: ...
    @property
    def LightIndex(self) -> int: ...
    @property
    def NewState(self) -> LightObject: ...
    @property
    def OldState(self) -> Light: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class LightTableEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4


from Rhino import RhinoDoc
from Rhino.DocObjects import Linetype
from Rhino.DocObjects import ObjectLinetypeSource
from Rhino.DocObjects import RhinoObject
from System import Guid
from Rhino.DocObjects import ModelComponentType
class LinetypeTable:
    def __iter__(self) -> Iterator[Linetype]: ...
    def __getitem__(self, index: int) -> Linetype: ...
    def __setitem__(self, index: int, value: Linetype): ...
    @overload
    def Add(self, linetype: Linetype) -> int: ...
    @overload
    def Add(self, name: str, segmentLengths: Iterable[float]) -> int: ...
    @overload
    def AddReferenceLinetype(self, linetype: Linetype) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Linetype) -> bool: ...
    @overload
    def Delete(self, indices: Iterable[int], quiet: bool) -> bool: ...
    @overload
    def Delete(self, index: int, quiet: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, name: str) -> int: ...
    @overload
    def Find(self, id: Guid, ignoreDeletedLinetypes: bool) -> int: ...
    @overload
    def FindId(self, id: Guid) -> Linetype: ...
    @overload
    def FindIndex(self, index: int) -> Linetype: ...
    @overload
    def FindName(self, name: str) -> Linetype: ...
    @property
    def ActiveCount(self) -> int: ...
    @property
    def ByLayerLinetypeName(self) -> str: ...
    @property
    def ByParentLinetypeName(self) -> str: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def ContinuousLinetypeName(self) -> str: ...
    @property
    def Count(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentLinetype(self) -> Linetype: ...
    @property
    def CurrentLinetypeIndex(self) -> int: ...
    @property
    def CurrentLinetypeSource(self) -> ObjectLinetypeSource: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[Linetype]: ...
    @property
    def LinetypeScale(self) -> float: ...
    @overload
    def GetEnumerator(self) -> Iterator[Linetype]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUnusedLinetypeName(self) -> str: ...
    @overload
    def LinetypeIndexForObject(self, rhinoObject: RhinoObject) -> int: ...
    @overload
    def LoadDefaultLinetypes(self) -> int: ...
    @overload
    def LoadDefaultLinetypes(self, ignoreDeleted: bool) -> int: ...
    @overload
    def Modify(self, linetype: Linetype, index: int, quiet: bool) -> bool: ...
    @CurrentLinetypeSource.setter
    def CurrentLinetypeSource(self, value: ObjectLinetypeSource) -> None: ...
    @LinetypeScale.setter
    def LinetypeScale(self, value: float) -> None: ...
    @overload
    def SetCurrentLinetypeIndex(self, linetypeIndex: int, quiet: bool) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Undelete(self, index: int) -> bool: ...
    @overload
    def UndoModify(self, index: int) -> bool: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import Linetype
class LinetypeTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> LinetypeTableEventType: ...
    @property
    def LinetypeIndex(self) -> int: ...
    @property
    def NewState(self) -> Linetype: ...
    @property
    def OldState(self) -> Linetype: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class LinetypeTableEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5


from Rhino.DocObjects import Material
from Rhino.DocObjects import ObjectMaterialSource
from Rhino.DocObjects import ModelComponentType
from System import Guid
from Rhino import RhinoDoc
class MaterialTable:
    def __iter__(self) -> Iterator[Material]: ...
    def __getitem__(self, index: int) -> Material: ...
    def __setitem__(self, index: int, value: Material): ...
    @overload
    def Add(self) -> int: ...
    @overload
    def Add(self, material: Material) -> int: ...
    @overload
    def Add(self, material: Material, reference: bool) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Material) -> bool: ...
    @overload
    def DeleteAt(self, materialIndex: int) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, material: Material, ignoreDeletedMaterials: bool) -> int: ...
    @overload
    def Find(self, materialName: str, ignoreDeletedMaterials: bool) -> int: ...
    @overload
    def Find(self, materialId: Guid, ignoreDeletedMaterials: bool) -> int: ...
    @overload
    def FindId(self, id: Guid) -> Material: ...
    @overload
    def FindIndex(self, index: int) -> Material: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def CurrentMaterialIndex(self) -> int: ...
    @property
    def CurrentMaterialSource(self) -> ObjectMaterialSource: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[Material]: ...
    @overload
    def GetEnumerator(self) -> Iterator[Material]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Modify(self, newSettings: Material, materialIndex: int, quiet: bool) -> bool: ...
    @overload
    def ResetMaterial(self, materialIndex: int) -> bool: ...
    @CurrentMaterialIndex.setter
    def CurrentMaterialIndex(self, value: int) -> None: ...
    @CurrentMaterialSource.setter
    def CurrentMaterialSource(self, value: ObjectMaterialSource) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import Material
class MaterialTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> MaterialTableEventType: ...
    @property
    def Index(self) -> int: ...
    @property
    def OldSettings(self) -> Material: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class MaterialTableEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5


class ModifyType(Enum):
    Modify = 0
    Override = 1
    NotSaved = 2


from Rhino import RhinoDoc
from Rhino.DocObjects import ConstructionPlane
from Rhino.Geometry import Plane
class NamedConstructionPlaneTable:
    def __iter__(self) -> Iterator[ConstructionPlane]: ...
    @overload
    def Add(self, constructionPlane: ConstructionPlane) -> int: ...
    @overload
    def Add(self, name: str, plane: Plane) -> int: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, name: str) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, name: str) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[ConstructionPlane]: ...
    @overload
    def GetEnumerator(self) -> Iterator[ConstructionPlane]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from System import Guid
class NamedLayerStateTable:
    @overload
    def Delete(self, name: str) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindName(self, name: str) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Names(self) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Import(self, filename: str) -> int: ...
    @overload
    def Rename(self, oldName: str, newName: str) -> bool: ...
    @overload
    def Restore(self, name: str, properties: RestoreLayerProperties) -> bool: ...
    @overload
    def Restore(self, name: str, properties: RestoreLayerProperties, viewportId: Guid) -> bool: ...
    @overload
    def Save(self, name: str) -> int: ...
    @overload
    def Save(self, name: str, viewportId: Guid) -> int: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from System import Guid
from Rhino.DocObjects import RhinoObject
from Rhino.Geometry import Transform
class NamedPositionTable:
    @overload
    def Append(self, name: str, objects: Iterable[RhinoObject]) -> bool: ...
    @overload
    def Append(self, id: Guid, objects: Iterable[RhinoObject]) -> bool: ...
    @overload
    def Append(self, name: str, objectIds: Iterable[Guid]) -> bool: ...
    @overload
    def Append(self, id: Guid, objectIds: Iterable[Guid]) -> bool: ...
    @overload
    def Delete(self, name: str) -> bool: ...
    @overload
    def Delete(self, id: Guid) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Ids(self) -> Iterable[Guid]: ...
    @property
    def Names(self) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Id(self, name: str) -> Guid: ...
    @overload
    def Name(self, id: Guid) -> str: ...
    @overload
    def ObjectIds(self, name: str) -> Iterable[Guid]: ...
    @overload
    def ObjectIds(self, id: Guid) -> Iterable[Guid]: ...
    @overload
    def Objects(self, name: str) -> Iterable[RhinoObject]: ...
    @overload
    def Objects(self, id: Guid) -> Iterable[RhinoObject]: ...
    @overload
    def ObjectXform(self, id: Guid, objId: Guid, xform: Transform) -> tuple[bool, Transform]: ...
    @overload
    def ObjectXform(self, id: Guid, obj: RhinoObject, xform: Transform) -> tuple[bool, Transform]: ...
    @overload
    def Rename(self, id: Guid, name: str) -> bool: ...
    @overload
    def Rename(self, oldName: str, name: str) -> bool: ...
    @overload
    def Restore(self, name: str) -> bool: ...
    @overload
    def Restore(self, id: Guid) -> bool: ...
    @overload
    def Save(self, name: str, objects: Iterable[RhinoObject]) -> Guid: ...
    @overload
    def Save(self, name: str, objectIds: Iterable[Guid]) -> Guid: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self, id: Guid) -> bool: ...
    @overload
    def Update(self, name: str) -> bool: ...


from Rhino import RhinoDoc
from Rhino.DocObjects import ViewInfo
from System import Guid
from Rhino.Display import RhinoViewport
from Rhino.Display import RhinoView
class NamedViewTable:
    def __iter__(self) -> Iterator[ViewInfo]: ...
    @overload
    def Add(self, view: ViewInfo) -> int: ...
    @overload
    def Add(self, name: str, viewportId: Guid) -> int: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, name: str) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindByName(self, name: str) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self) -> Sequence[ViewInfo]: ...
    @property
    def Selection(self) -> Iterable[str]: ...
    @overload
    def GetEnumerator(self) -> Iterator[ViewInfo]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Rename(self, index: int, newName: str) -> bool: ...
    @overload
    def Rename(self, oldName: str, newName: str) -> bool: ...
    @overload
    def Restore(self, index: int, viewport: RhinoViewport) -> bool: ...
    @overload
    def RestoreAnimatedConstantSpeed(self, index: int, viewport: RhinoViewport, units_per_frame: float, ms_delay: int) -> bool: ...
    @overload
    def RestoreAnimatedConstantTime(self, index: int, viewport: RhinoViewport, frames: int, ms_delay: int) -> bool: ...
    @overload
    def RestoreWithAspectRatio(self, index: int, viewport: RhinoViewport) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import RhinoObject
from System import Guid
from Rhino.Geometry import BoundingBox
from Rhino.DocObjects import ModelComponentType
from Rhino.DocObjects import ObjRef
from Rhino.Geometry import Transform
from Rhino.Input.Custom import PickContext
from Rhino.DocObjects import ObjectEnumeratorSettings
from Rhino.DocObjects import ObjectType
from Rhino.Geometry import Surface
from Rhino.DocObjects import ObjectAttributes
from Rhino.DocObjects import HistoryRecord
from Rhino.Geometry import Extrusion
from Rhino.Geometry import ClippingPlaneSurface
from Rhino.Geometry import Mesh
from Rhino.Geometry import Brep
from Rhino.DocObjects import InstanceObject
from Rhino.Geometry import Plane
from Rhino.Geometry import Hatch
from Rhino.Geometry import MorphControl
from Rhino.DocObjects import GripObject
from Rhino.Render import RenderMaterial
from Rhino.Render import TextureMapping
from Rhino.Geometry import GeometryBase
from Rhino.Geometry import Point3d
from Rhino.Geometry import Point
from Rhino.Geometry import TextEntity
from Rhino.Geometry import Leader
from Rhino.Geometry import TextDot
from Rhino.Geometry import Line
from Rhino.Geometry import Circle
from Rhino.Geometry import Arc
from Rhino.Geometry import Polyline
from Rhino.Geometry import Curve
from Rhino.Geometry import SubD
from Rhino.Geometry import PointCloud
from Rhino import RhinoDoc
from Rhino.DocObjects import Layer
from System.Drawing import Color
from Rhino.Display import RhinoViewport
from Rhino.Geometry import Point2d
from Rhino.DocObjects.Custom import CustomMeshObject
from Rhino.DocObjects import MeshObject
from Rhino.DocObjects.Custom import CustomBrepObject
from Rhino.DocObjects import BrepObject
from Rhino.DocObjects.Custom import CustomPointObject
from Rhino.DocObjects import PointObject
from Rhino.DocObjects import CurveObject
from Rhino.DocObjects.Custom import CustomCurveObject
from Rhino.Geometry import Point3f
from Rhino.Collections import RhinoList
from Rhino.Geometry import RadialDimension
from Rhino.Geometry import Rectangle3d
from Rhino.Geometry import Box
from Rhino.Geometry import Ellipse
from Rhino.Geometry import Sphere
from Rhino.Geometry import LinearDimension
from Rhino.Geometry import AngularDimension
from Rhino.Geometry import OrdinateDimension
from Rhino.Geometry import Centermark
from Rhino.Display import Text3d
from Rhino.Geometry import TextJustification
class ObjectTable:
    def __iter__(self) -> Iterator[RhinoObject]: ...
    def __getitem__(self, index: int) -> RhinoObject: ...
    def __setitem__(self, index: int, value: RhinoObject): ...
    @overload
    def Add(self, geometry: GeometryBase) -> Guid: ...
    @overload
    def Add(self, geometry: GeometryBase, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def Add(self, geometry: GeometryBase, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddAngularDimension(self, dimension: AngularDimension) -> Guid: ...
    @overload
    def AddAngularDimension(self, dimension: AngularDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddAngularDimension(self, dimension: AngularDimension, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddArc(self, arc: Arc) -> Guid: ...
    @overload
    def AddArc(self, arc: Arc, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddArc(self, arc: Arc, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddBox(self, box: Box) -> Guid: ...
    @overload
    def AddBox(self, box: Box, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddBox(self, box: Box, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddBrep(self, brep: Brep) -> Guid: ...
    @overload
    def AddBrep(self, brep: Brep, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddBrep(self, brep: Brep, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddBrep(self, brep: Brep, attributes: ObjectAttributes, history: HistoryRecord, reference: bool, splitKinkySurfaces: bool) -> Guid: ...
    @overload
    def AddCentermark(self, centermark: Centermark, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddCircle(self, circle: Circle) -> Guid: ...
    @overload
    def AddCircle(self, circle: Circle, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddCircle(self, circle: Circle, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid]) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: Guid) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid], attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: Guid, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddClippingPlaneSurface(self, clippingPlane: ClippingPlaneSurface, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddCurve(self, curve: Curve) -> Guid: ...
    @overload
    def AddCurve(self, curve: Curve, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddCurve(self, curve: Curve, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddEllipse(self, ellipse: Ellipse) -> Guid: ...
    @overload
    def AddEllipse(self, ellipse: Ellipse, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddEllipse(self, ellipse: Ellipse, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddExplodedInstancePieces(self, instance: InstanceObject, explodeNestedInstances: bool, deleteInstance: bool) -> Iterable[Guid]: ...
    @overload
    def AddExtrusion(self, extrusion: Extrusion) -> Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Extrusion, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Extrusion, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddHatch(self, hatch: Hatch) -> Guid: ...
    @overload
    def AddHatch(self, hatch: Hatch, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddHatch(self, hatch: Hatch, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Transform) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Transform, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Transform, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddLeader(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddLeader(self, leader: Leader) -> Guid: ...
    @overload
    def AddLeader(self, plane: Plane, points: Iterable[Point2d]) -> Guid: ...
    @overload
    def AddLeader(self, text: str, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddLeader(self, leader: Leader, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLeader(self, plane: Plane, points: Iterable[Point2d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Plane, points: Iterable[Point2d]) -> Guid: ...
    @overload
    def AddLeader(self, leader: Leader, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Plane, points: Iterable[Point2d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Plane, points: Iterable[Point2d], attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddLine(self, line: Line) -> Guid: ...
    @overload
    def AddLine(self, line: Line, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLine(self, from_: Point3d, to: Point3d) -> Guid: ...
    @overload
    def AddLine(self, from_: Point3d, to: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLine(self, from_: Point3d, to: Point3d, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddLinearDimension(self, dimension: LinearDimension) -> Guid: ...
    @overload
    def AddLinearDimension(self, dimension: LinearDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLinearDimension(self, dimension: LinearDimension, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddMesh(self, mesh: Mesh) -> Guid: ...
    @overload
    def AddMesh(self, mesh: Mesh, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddMesh(self, mesh: Mesh, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddMesh(self, mesh: Mesh, attributes: ObjectAttributes, history: HistoryRecord, reference: bool, requireValidMesh: bool) -> Guid: ...
    @overload
    def AddMorphControl(self, morphControl: MorphControl) -> Guid: ...
    @overload
    def AddMorphControl(self, morphControl: MorphControl, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddMorphControl(self, morphControl: MorphControl, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddOrderedPointCloud(self, xCt: int, yCt: int, zCt: int, min: Point3d, max: Point3d, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddOrdinateDimension(self, dimordinate: OrdinateDimension, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddPictureFrame(self, plane: Plane, texturePath: str, asMesh: bool, width: float, height: float, selfIllumination: bool, embedBitmap: bool) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3f) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3d) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3f, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoint(self, x: float, y: float, z: float) -> Guid: ...
    @overload
    def AddPoint(self, point: Point, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3d, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddPointCloud(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddPointCloud(self, cloud: PointCloud) -> Guid: ...
    @overload
    def AddPointCloud(self, cloud: PointCloud, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPointCloud(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPointCloud(self, points: Iterable[Point3d], attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddPointCloud(self, cloud: PointCloud, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d]) -> RhinoList: ...
    @overload
    def AddPoints(self, points: Iterable[Point3f]) -> RhinoList: ...
    @overload
    def AddPoints(self, points: Iterable[Point3f], attributes: ObjectAttributes) -> RhinoList: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> RhinoList: ...
    @overload
    def AddPolyline(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddPolyline(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPolyline(self, points: Iterable[Point3d], attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddRadialDimension(self, dimension: RadialDimension) -> Guid: ...
    @overload
    def AddRadialDimension(self, dimension: RadialDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddRadialDimension(self, dimension: RadialDimension, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddRectangle(self, rectangle: Rectangle3d) -> Guid: ...
    @overload
    def AddRectangle(self, rectangle: Rectangle3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddRectangle(self, rectangle: Rectangle3d, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddRhinoObject(self, pointObject: CustomPointObject) -> None: ...
    @overload
    def AddRhinoObject(self, brepObject: CustomBrepObject) -> None: ...
    @overload
    def AddRhinoObject(self, meshObject: CustomMeshObject) -> None: ...
    @overload
    def AddRhinoObject(self, meshObject: CustomMeshObject, history: HistoryRecord) -> None: ...
    @overload
    def AddRhinoObject(self, curveObject: CustomCurveObject, history: HistoryRecord) -> None: ...
    @overload
    def AddRhinoObject(self, curveObject: CurveObject, curve: Curve) -> None: ...
    @overload
    def AddRhinoObject(self, pointObject: PointObject, point: Point) -> None: ...
    @overload
    def AddRhinoObject(self, pointObject: CustomPointObject, history: HistoryRecord) -> None: ...
    @overload
    def AddRhinoObject(self, brepObject: CustomBrepObject, history: HistoryRecord) -> None: ...
    @overload
    def AddRhinoObject(self, meshObject: MeshObject, mesh: Mesh) -> None: ...
    @overload
    def AddRhinoObject(self, brepObject: BrepObject, brep: Brep) -> None: ...
    @overload
    def AddSphere(self, sphere: Sphere) -> Guid: ...
    @overload
    def AddSphere(self, sphere: Sphere, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSphere(self, sphere: Sphere, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddSubD(self, subD: SubD) -> Guid: ...
    @overload
    def AddSubD(self, subD: SubD, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSubD(self, subD: SubD, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddSurface(self, surface: Surface) -> Guid: ...
    @overload
    def AddSurface(self, surface: Surface, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSurface(self, surface: Surface, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddText(self, text: TextEntity) -> Guid: ...
    @overload
    def AddText(self, text3d: Text3d) -> Guid: ...
    @overload
    def AddText(self, text3d: Text3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text: TextEntity, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text: TextEntity, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AddTextDot(self, dot: TextDot) -> Guid: ...
    @overload
    def AddTextDot(self, dot: TextDot, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Point3d) -> Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddTextDot(self, dot: TextDot, attributes: ObjectAttributes, history: HistoryRecord, reference: bool) -> Guid: ...
    @overload
    def AllObjectsSince(self, runtimeSerialNumber: int) -> Iterable[RhinoObject]: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: RhinoObject) -> bool: ...
    @overload
    def Delete(self, objectId: Guid, quiet: bool) -> bool: ...
    @overload
    def Delete(self, objectIds: Iterable[Guid], quiet: bool) -> int: ...
    @overload
    def Delete(self, objref: ObjRef, quiet: bool) -> bool: ...
    @overload
    def Delete(self, obj: RhinoObject, quiet: bool) -> bool: ...
    @overload
    def Delete(self, objref: ObjRef, quiet: bool, ignoreModes: bool) -> bool: ...
    @overload
    def Delete(self, obj: RhinoObject, quiet: bool, ignoreModes: bool) -> bool: ...
    @overload
    def DeleteGrip(self, grip: GripObject) -> bool: ...
    @overload
    def DeleteGrip(self, gripId: Guid) -> bool: ...
    @overload
    def DeleteGrip(self, gripRef: ObjRef) -> bool: ...
    @overload
    def DeleteGrips(self, gripIds: Iterable[Guid]) -> int: ...
    @overload
    def DeleteGrips(self, grips: Iterable[GripObject]) -> int: ...
    @overload
    def DeleteGrips(self, gripRefs: Iterable[ObjRef]) -> int: ...
    @overload
    def DeleteGrips(self, owner: RhinoObject, gripIndices: Iterable[int]) -> int: ...
    @overload
    def Duplicate(self, objectId: Guid) -> Guid: ...
    @overload
    def Duplicate(self, obj: RhinoObject) -> Guid: ...
    @overload
    def Duplicate(self, objref: ObjRef) -> Guid: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, objectId: Guid) -> RhinoObject: ...
    @overload
    def Find(self, runtimeSerialNumber: int) -> RhinoObject: ...
    @overload
    def FindByCrossingWindowRegion(self, viewport: RhinoViewport, region: Iterable[Point3d], inside: bool, filter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def FindByCrossingWindowRegion(self, viewport: RhinoViewport, screen1: Point2d, screen2: Point2d, inside: bool, filter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def FindByDrawColor(self, drawColor: Color, includeLights: bool) -> Iterable[RhinoObject]: ...
    @overload
    def FindByFilter(self, filter: ObjectEnumeratorSettings) -> Iterable[RhinoObject]: ...
    @overload
    def FindByGroup(self, groupIndex: int) -> Iterable[RhinoObject]: ...
    @overload
    def FindByLayer(self, layerName: str) -> Iterable[RhinoObject]: ...
    @overload
    def FindByLayer(self, layer: Layer) -> Iterable[RhinoObject]: ...
    @overload
    def FindByObjectType(self, typeFilter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def FindByUserString(self, key: str, value: str, caseSensitive: bool) -> Iterable[RhinoObject]: ...
    @overload
    def FindByUserString(self, key: str, value: str, caseSensitive: bool, searchGeometry: bool, searchAttributes: bool, filter: ObjectEnumeratorSettings) -> Iterable[RhinoObject]: ...
    @overload
    def FindByUserString(self, key: str, value: str, caseSensitive: bool, searchGeometry: bool, searchAttributes: bool, filter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def FindByWindowRegion(self, viewport: RhinoViewport, region: Iterable[Point3d], inside: bool, filter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def FindByWindowRegion(self, viewport: RhinoViewport, screen1: Point2d, screen2: Point2d, inside: bool, filter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def FindClippingPlanesForViewport(self, viewport: RhinoViewport) -> Iterable[ClippingPlaneObject]: ...
    @overload
    def FindGeometry(self, id: Guid) -> GeometryBase: ...
    @overload
    def FindId(self, id: Guid) -> RhinoObject: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def BoundingBoxVisible(self) -> BoundingBox: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def HistoryRecordCount(self) -> int: ...
    @overload
    def GetEnumerator(self) -> Iterator[RhinoObject]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectList(self, settings: ObjectEnumeratorSettings) -> Iterable[RhinoObject]: ...
    @overload
    def GetObjectList(self, typeFilter: type) -> Iterable[RhinoObject]: ...
    @overload
    def GetObjectList(self, typeFilter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def GetObjectsByType(self) -> Iterable[T]: ...
    @overload
    def GetObjectsByType(self, settings: ObjectEnumeratorSettings) -> Iterable[T]: ...
    @overload
    def GetSelectedObjectCount(self, checkSubObjects: bool) -> int: ...
    @overload
    def GetSelectedObjects(self, includeLights: bool, includeGrips: bool) -> Iterable[RhinoObject]: ...
    @overload
    def GetSelectedObjectTypes(self) -> ObjectType: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GripUpdate(self, obj: RhinoObject, deleteOriginal: bool) -> RhinoObject: ...
    @overload
    def Hide(self, objref: ObjRef, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Hide(self, obj: RhinoObject, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Hide(self, objectId: Guid, ignoreLayerMode: bool) -> bool: ...
    @overload
    def InvalidateBoundingBox(self) -> None: ...
    @overload
    def Lock(self, objectId: Guid, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Lock(self, obj: RhinoObject, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Lock(self, objref: ObjRef, ignoreLayerMode: bool) -> bool: ...
    @overload
    def ModifyAttributes(self, objref: ObjRef, newAttributes: ObjectAttributes, quiet: bool) -> bool: ...
    @overload
    def ModifyAttributes(self, objectId: Guid, newAttributes: ObjectAttributes, quiet: bool) -> bool: ...
    @overload
    def ModifyAttributes(self, obj: RhinoObject, newAttributes: ObjectAttributes, quiet: bool) -> bool: ...
    @overload
    def ModifyRenderMaterial(self, objRef: ObjRef, material: RenderMaterial) -> bool: ...
    @overload
    def ModifyRenderMaterial(self, obj: RhinoObject, material: RenderMaterial) -> bool: ...
    @overload
    def ModifyRenderMaterial(self, objectId: Guid, material: RenderMaterial) -> bool: ...
    @overload
    def ModifyTextureMapping(self, objRef: ObjRef, channel: int, mapping: TextureMapping) -> bool: ...
    @overload
    def ModifyTextureMapping(self, obj: RhinoObject, channel: int, mapping: TextureMapping) -> bool: ...
    @overload
    def ModifyTextureMapping(self, objId: Guid, channel: int, mapping: TextureMapping) -> bool: ...
    @overload
    def MostRecentObject(self) -> RhinoObject: ...
    @overload
    def ObjectCount(self, filter: ObjectEnumeratorSettings) -> int: ...
    @overload
    def PickObjects(self, pickContext: PickContext) -> Iterable[ObjRef]: ...
    @overload
    def Purge(self, rhinoObject: RhinoObject) -> bool: ...
    @overload
    def Purge(self, runtimeSerialNumber: int) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, extrusion: Extrusion) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, dot: TextDot) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, circle: Circle) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, circle: Circle) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, line: Line) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, line: Line) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, hatch: Hatch) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, hatch: Hatch) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, dot: TextDot) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, arc: Arc) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, leader: Leader) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, text: TextEntity) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, text: TextEntity) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, point: Point) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, point: Point) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, point: Point3d) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, point: Point3d) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, newObject: RhinoObject) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, leader: Leader) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, arc: Arc) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, pointcloud: PointCloud) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, polyline: Polyline) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, curve: Curve) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, curve: Curve) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, surface: Surface) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, surface: Surface) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, brep: Brep) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, brep: Brep) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, polyline: Polyline) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, pointcloud: PointCloud) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, extrusion: Extrusion) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, mesh: Mesh) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, subD: SubD) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, mesh: Mesh) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, subD: SubD) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, geometry: GeometryBase, ignoreModes: bool) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, geometry: GeometryBase, ignoreModes: bool) -> bool: ...
    @overload
    def Replace(self, objref: ObjRef, brep: Brep, splitKinkySurfaces: bool) -> bool: ...
    @overload
    def Replace(self, objectId: Guid, brep: Brep, splitKinkySurfaces: bool) -> bool: ...
    @overload
    def ReplaceInstanceObject(self, objectId: Guid, instanceDefinitionIndex: int) -> bool: ...
    @overload
    def ReplaceInstanceObject(self, objref: ObjRef, instanceDefinitionIndex: int) -> bool: ...
    @overload
    def Select(self, objref: ObjRef) -> bool: ...
    @overload
    def Select(self, objRefs: Iterable[ObjRef]) -> int: ...
    @overload
    def Select(self, objectIds: Iterable[Guid]) -> int: ...
    @overload
    def Select(self, objectId: Guid) -> bool: ...
    @overload
    def Select(self, objref: ObjRef, select: bool) -> bool: ...
    @overload
    def Select(self, objRefs: Iterable[ObjRef], select: bool) -> int: ...
    @overload
    def Select(self, objectId: Guid, select: bool) -> bool: ...
    @overload
    def Select(self, objectIds: Iterable[Guid], select: bool) -> int: ...
    @overload
    def Select(self, objref: ObjRef, select: bool, syncHighlight: bool) -> bool: ...
    @overload
    def Select(self, objectId: Guid, select: bool, syncHighlight: bool) -> bool: ...
    @overload
    def Select(self, objectId: Guid, select: bool, syncHighlight: bool, persistentSelect: bool) -> bool: ...
    @overload
    def Select(self, objref: ObjRef, select: bool, syncHighlight: bool, persistentSelect: bool) -> bool: ...
    @overload
    def Select(self, objectId: Guid, select: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def Select(self, objref: ObjRef, select: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def SelectedObjectsExist(self, objectType: ObjectType, checkSubObjects: bool) -> bool: ...
    @overload
    def Show(self, objref: ObjRef, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Show(self, objectId: Guid, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Show(self, obj: RhinoObject, ignoreLayerMode: bool) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Transform(self, objectId: Guid, xform: Transform, deleteOriginal: bool) -> Guid: ...
    @overload
    def Transform(self, obj: RhinoObject, xform: Transform, deleteOriginal: bool) -> Guid: ...
    @overload
    def Transform(self, objref: ObjRef, xform: Transform, deleteOriginal: bool) -> Guid: ...
    @overload
    def TransformWithHistory(self, objectId: Guid, xform: Transform) -> Guid: ...
    @overload
    def TransformWithHistory(self, obj: RhinoObject, xform: Transform) -> Guid: ...
    @overload
    def TransformWithHistory(self, objref: ObjRef, xform: Transform) -> Guid: ...
    @overload
    def TryFindPoint(self, id: Guid) -> tuple[bool, Point3d]: ...
    @overload
    def Undelete(self, rhinoObject: RhinoObject) -> bool: ...
    @overload
    def Undelete(self, runtimeSerialNumber: int) -> bool: ...
    @overload
    def Unlock(self, objref: ObjRef, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Unlock(self, objectId: Guid, ignoreLayerMode: bool) -> bool: ...
    @overload
    def Unlock(self, obj: RhinoObject, ignoreLayerMode: bool) -> bool: ...
    @overload
    def UnselectAll(self) -> int: ...
    @overload
    def UnselectAll(self, ignorePersistentSelections: bool) -> int: ...


class RestoreLayerProperties(Enum):
    # None = 0
    Current = 1
    Visible = 2
    Locked = 4
    Color = 8
    Linetype = 16
    PrintColor = 32
    PrintWidth = 64
    ViewportVisible = 128
    ViewportColor = 256
    ViewportPrintColor = 512
    ViewportPrintWidth = 1024
    RenderMaterial = 2048
    SectionStyle = 4096
    NewDetailOn = 8192
    Expanded = 16384
    All = 4294967295




from Rhino import RhinoDoc
from System.Collections.Generic import IEqualityComparer
from System.Collections.Generic import KeyCollection
from System.Collections.Generic import ValueCollection
from System.Collections.Generic import Enumerator
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
class RuntimeDocumentDataTable:
    def __iter__(self) -> Iterator[KeyValuePair]: ...
    @overload
    def Add(self, key: object, value: object) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ContainsKey(self, key: object) -> bool: ...
    @overload
    def ContainsValue(self, value: object) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Comparer(self) -> IEqualityComparer: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Item(self, key: object) -> object: ...
    @property
    def Keys(self) -> KeyCollection: ...
    @property
    def Values(self) -> ValueCollection: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self, key: object, newT: Callable[..., Any]) -> T: ...
    @overload
    def OnDeserialization(self, sender: object) -> None: ...
    @overload
    def Remove(self, key: object) -> bool: ...
    @Item.setter
    def Item(self, key: object, value: object) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetValue(self, key: object) -> T: ...
    @overload
    def TryGetValue(self, key: object) -> tuple[bool, object]: ...


from Rhino import RhinoDoc
class SnapshotTable:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Names(self) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
class StringTable:
    @overload
    def Delete(self, key: str) -> None: ...
    @overload
    def Delete(self, section: str, entry: str) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentDataCount(self) -> int: ...
    @property
    def DocumentUserTextCount(self) -> int: ...
    @overload
    def GetEntryNames(self, section: str) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetKey(self, i: int) -> str: ...
    @overload
    def GetSectionNames(self) -> Iterable[str]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self, key: str) -> str: ...
    @overload
    def GetValue(self, i: int) -> str: ...
    @overload
    def GetValue(self, section: str, entry: str) -> str: ...
    @overload
    def SetString(self, key: str, value: str) -> str: ...
    @overload
    def SetString(self, section: str, entry: str, value: str) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from Rhino.Display import RhinoView
from Rhino.Display import ViewTypeFilter
from System import Guid
from Rhino.Display import DefinedViewportProjection
from System.Drawing import Rectangle
from Rhino.Display import RhinoPageView
class ViewTable:
    def __iter__(self) -> Iterator[RhinoView]: ...
    @overload
    def Add(self, title: str, projection: DefinedViewportProjection, position: Rectangle, floating: bool) -> RhinoView: ...
    @overload
    def AddPageView(self, title: str) -> RhinoPageView: ...
    @overload
    def AddPageView(self, title: str, pageWidth: float, pageHeight: float) -> RhinoPageView: ...
    @overload
    def DefaultViewLayout(self) -> None: ...
    @overload
    def EnableCameraIcon(self, view: RhinoView) -> None: ...
    @overload
    def EnableRedraw(self, enable: bool, redrawDocument: bool, redrawLayers: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, mainViewportId: Guid) -> RhinoView: ...
    @overload
    def Find(self, mainViewportName: str, compareCase: bool) -> RhinoView: ...
    @overload
    def FlashObjects(self, list: Iterable[RhinoObject], useSelectionColor: bool) -> None: ...
    @overload
    def FourViewLayout(self, useMatchingViews: bool) -> None: ...
    @property
    def ActiveView(self) -> RhinoView: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def ModelSpaceIsActive(self) -> bool: ...
    @property
    def RedrawEnabled(self) -> bool: ...
    @overload
    def GetEnumerator(self) -> Iterator[RhinoView]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPageViews(self) -> Iterable[RhinoPageView]: ...
    @overload
    def GetStandardRhinoViews(self) -> Iterable[RhinoView]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetViewList(self, filter: ViewTypeFilter) -> Iterable[RhinoView]: ...
    @overload
    def IsCameraIconVisible(self, view: RhinoView) -> bool: ...
    @overload
    def Redraw(self) -> None: ...
    @ActiveView.setter
    def ActiveView(self, value: RhinoView) -> None: ...
    @RedrawEnabled.setter
    def RedrawEnabled(self, value: bool) -> None: ...
    @overload
    def ThreeViewLayout(self, useMatchingViews: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
