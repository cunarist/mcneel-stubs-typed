from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Custom
import SnapShots
import Tables

__all__ = ['Custom', 'SnapShots', 'Tables']


class ActiveSpace(Enum):
    # None = 0
    ModelSpace = 1
    PageSpace = 2
    UVEditorSpace = 3
    BlockEditorSpace = 4


class AngleDisplayFormat(Enum):
    DecimalDegrees = 0
    DegMinSec = 1
    Radians = 2
    Grads = 3


class AngleDisplayMode(Enum):
    Degrees = 0
    DMS = 1
    Grads = 2


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class AngularDimensionObject(DimensionObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AngularDimensionGeometry(self) -> AngularDimension: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DimensionStyle(self) -> DimensionStyle: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
class AnimationProperties:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source: AnimationProperties): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnimationName(self) -> str: ...
    @property
    def CameraPathId(self) -> Guid: ...
    @property
    def CameraPoints(self) -> Iterable[Point3d]: ...
    @property
    def CaptureMethod(self) -> str: ...
    @property
    def CaptureType(self) -> CaptureTypes: ...
    @property
    def CurrentFrame(self) -> int: ...
    @property
    def Dates(self) -> Iterable[str]: ...
    @property
    def DaysBetweenFrames(self) -> int: ...
    @property
    def DisplayMode(self) -> Guid: ...
    @property
    def EndDay(self) -> int: ...
    @property
    def EndHour(self) -> int: ...
    @property
    def EndMinutes(self) -> int: ...
    @property
    def EndMonth(self) -> int: ...
    @property
    def EndSeconds(self) -> int: ...
    @property
    def EndYear(self) -> int: ...
    @property
    def FileExtension(self) -> str: ...
    @property
    def FolderName(self) -> str: ...
    @property
    def FrameCount(self) -> int: ...
    @property
    def HtmlFileName(self) -> str: ...
    @property
    def HtmlFullPath(self) -> str: ...
    @property
    def Images(self) -> Iterable[str]: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def LightIndex(self) -> int: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def MinutesBetweenFrames(self) -> int: ...
    @property
    def NorthAngle(self) -> float: ...
    @property
    def RenderFull(self) -> bool: ...
    @property
    def RenderPreview(self) -> bool: ...
    @property
    def StartDay(self) -> int: ...
    @property
    def StartHour(self) -> int: ...
    @property
    def StartMinutes(self) -> int: ...
    @property
    def StartMonth(self) -> int: ...
    @property
    def StartSeconds(self) -> int: ...
    @property
    def StartYear(self) -> int: ...
    @property
    def TargetPathId(self) -> Guid: ...
    @property
    def TargetPoints(self) -> Iterable[Point3d]: ...
    @property
    def ViewportName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @AnimationName.setter
    def AnimationName(self, value: str) -> None: ...
    @CameraPathId.setter
    def CameraPathId(self, value: Guid) -> None: ...
    @CameraPoints.setter
    def CameraPoints(self, value: Iterable[Point3d]) -> None: ...
    @CaptureMethod.setter
    def CaptureMethod(self, value: str) -> None: ...
    @CaptureType.setter
    def CaptureType(self, value: CaptureTypes) -> None: ...
    @CurrentFrame.setter
    def CurrentFrame(self, value: int) -> None: ...
    @Dates.setter
    def Dates(self, value: Iterable[str]) -> None: ...
    @DaysBetweenFrames.setter
    def DaysBetweenFrames(self, value: int) -> None: ...
    @DisplayMode.setter
    def DisplayMode(self, value: Guid) -> None: ...
    @EndDay.setter
    def EndDay(self, value: int) -> None: ...
    @EndHour.setter
    def EndHour(self, value: int) -> None: ...
    @EndMinutes.setter
    def EndMinutes(self, value: int) -> None: ...
    @EndMonth.setter
    def EndMonth(self, value: int) -> None: ...
    @EndSeconds.setter
    def EndSeconds(self, value: int) -> None: ...
    @EndYear.setter
    def EndYear(self, value: int) -> None: ...
    @FileExtension.setter
    def FileExtension(self, value: str) -> None: ...
    @FolderName.setter
    def FolderName(self, value: str) -> None: ...
    @FrameCount.setter
    def FrameCount(self, value: int) -> None: ...
    @HtmlFileName.setter
    def HtmlFileName(self, value: str) -> None: ...
    @Images.setter
    def Images(self, value: Iterable[str]) -> None: ...
    @Latitude.setter
    def Latitude(self, value: float) -> None: ...
    @LightIndex.setter
    def LightIndex(self, value: int) -> None: ...
    @Longitude.setter
    def Longitude(self, value: float) -> None: ...
    @MinutesBetweenFrames.setter
    def MinutesBetweenFrames(self, value: int) -> None: ...
    @NorthAngle.setter
    def NorthAngle(self, value: float) -> None: ...
    @RenderFull.setter
    def RenderFull(self, value: bool) -> None: ...
    @RenderPreview.setter
    def RenderPreview(self, value: bool) -> None: ...
    @StartDay.setter
    def StartDay(self, value: int) -> None: ...
    @StartHour.setter
    def StartHour(self, value: int) -> None: ...
    @StartMinutes.setter
    def StartMinutes(self, value: int) -> None: ...
    @StartMonth.setter
    def StartMonth(self, value: int) -> None: ...
    @StartSeconds.setter
    def StartSeconds(self, value: int) -> None: ...
    @StartYear.setter
    def StartYear(self, value: int) -> None: ...
    @TargetPathId.setter
    def TargetPathId(self, value: Guid) -> None: ...
    @TargetPoints.setter
    def TargetPoints(self, value: Iterable[Point3d]) -> None: ...
    @ViewportName.setter
    def ViewportName(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class AnnotationObjectBase(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class ArrowFit(Enum):
    Auto = 0
    ArrowsInside = 1
    ArrowsOutside = 2


class ArrowType(Enum):
    # None = 0
    UserBlock = 1
    SolidTriangle = 2
    Dot = 3
    Tick = 4
    ShortTriangle = 5
    OpenArrow = 6
    Rectangle = 7
    LongTriangle = 8
    LongerTriangle = 9


class BackgroundProjections(Enum):
    Planar = 0
    Spherical = 1
    Emap = 2
    Box = 3
    Automatic = 4
    LightProbe = 5
    CubeMap = 6
    VerticalCrossCubeMap = 7
    HorizontalCrossCubeMap = 8
    Hemispherical = 9


from System import Guid
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class BitmapEntry(ModelComponent):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def Save(self, fileName: str) -> bool: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class BRDFs(Enum):
    GGX = 0
    Ward = 1


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class BrepObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateBrepGeometry(self) -> Brep: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def BrepGeometry(self) -> Brep: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class CaptureTypes(Enum):
    Path = 0
    Turntable = 1
    Flythrough = 2
    DaySunStudy = 3
    SeasonalSunStudy = 4
    # None = 5


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class CentermarkObject(DimensionObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def CentermarkGeometry(self) -> Centermark: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DimensionStyle(self) -> DimensionStyle: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class CenterMarkStyle(Enum):
    # None = 0
    Mark = 1
    MarkAndLines = 2


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ClippingPlaneObject(RhinoObject):
    @overload
    def AddClipViewport(self, viewport: RhinoViewport, commit: bool) -> bool: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ClippingPlaneGeometry(self) -> ClippingPlaneSurface: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RemoveClipViewport(self, viewport: RhinoViewport, commit: bool) -> bool: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class ConstructionPlane:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DepthBuffered(self) -> bool: ...
    @property
    def GridLineCount(self) -> int: ...
    @property
    def GridSpacing(self) -> float: ...
    @property
    def GridXColor(self) -> Color: ...
    @property
    def GridYColor(self) -> Color: ...
    @property
    def GridZColor(self) -> Color: ...
    @property
    def Name(self) -> str: ...
    @property
    def Plane(self) -> Plane: ...
    @property
    def ShowAxes(self) -> bool: ...
    @property
    def ShowGrid(self) -> bool: ...
    @property
    def ShowZAxis(self) -> bool: ...
    @property
    def SnapSpacing(self) -> float: ...
    @property
    def ThickLineColor(self) -> Color: ...
    @property
    def ThickLineFrequency(self) -> int: ...
    @property
    def ThinLineColor(self) -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @DepthBuffered.setter
    def DepthBuffered(self, value: bool) -> None: ...
    @GridLineCount.setter
    def GridLineCount(self, value: int) -> None: ...
    @GridSpacing.setter
    def GridSpacing(self, value: float) -> None: ...
    @GridXColor.setter
    def GridXColor(self, value: Color) -> None: ...
    @GridYColor.setter
    def GridYColor(self, value: Color) -> None: ...
    @GridZColor.setter
    def GridZColor(self, value: Color) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Plane.setter
    def Plane(self, value: Plane) -> None: ...
    @ShowAxes.setter
    def ShowAxes(self, value: bool) -> None: ...
    @ShowGrid.setter
    def ShowGrid(self, value: bool) -> None: ...
    @ShowZAxis.setter
    def ShowZAxis(self, value: bool) -> None: ...
    @SnapSpacing.setter
    def SnapSpacing(self, value: float) -> None: ...
    @ThickLineColor.setter
    def ThickLineColor(self, value: Color) -> None: ...
    @ThickLineFrequency.setter
    def ThickLineFrequency(self, value: int) -> None: ...
    @ThinLineColor.setter
    def ThinLineColor(self, value: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ConstructionPlaneGridDefaults:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def GridLineCount(self) -> int: ...
    @property
    def GridSpacing(self) -> float: ...
    @property
    def GridThickFrequency(self) -> int: ...
    @property
    def ShowGrid(self) -> bool: ...
    @property
    def ShowGridAxes(self) -> bool: ...
    @property
    def ShowWorldAxes(self) -> bool: ...
    @property
    def SnapSpacing(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @GridLineCount.setter
    def GridLineCount(self, value: int) -> None: ...
    @GridSpacing.setter
    def GridSpacing(self, value: float) -> None: ...
    @GridThickFrequency.setter
    def GridThickFrequency(self, value: int) -> None: ...
    @ShowGrid.setter
    def ShowGrid(self, value: bool) -> None: ...
    @ShowGridAxes.setter
    def ShowGridAxes(self, value: bool) -> None: ...
    @ShowWorldAxes.setter
    def ShowWorldAxes(self, value: bool) -> None: ...
    @SnapSpacing.setter
    def SnapSpacing(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CoordinateSystem(Enum):
    World = 0
    Camera = 1
    Clip = 2
    Screen = 3


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class CurveObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateCurveGeometry(self) -> Curve: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def CurveGeometry(self) -> Curve: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetLinetypeSegments(self) -> Iterable[GeometryBase]: ...
    @overload
    def GetLinetypeSegments(self, viewport: RhinoViewport) -> Iterable[GeometryBase]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class Defaults:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def Dash(cls) -> HatchPattern: ...
    @property
    @classmethod
    def Grid(cls) -> HatchPattern: ...
    @property
    @classmethod
    def Grid60(cls) -> HatchPattern: ...
    @property
    @classmethod
    def Hatch1(cls) -> HatchPattern: ...
    @property
    @classmethod
    def Hatch2(cls) -> HatchPattern: ...
    @property
    @classmethod
    def Hatch3(cls) -> HatchPattern: ...
    @property
    @classmethod
    def Plus(cls) -> HatchPattern: ...
    @property
    @classmethod
    def Solid(cls) -> HatchPattern: ...
    @property
    @classmethod
    def Squares(cls) -> HatchPattern: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class DetailViewObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CommitViewportChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DescriptiveTitle(self) -> str: ...
    @property
    def DetailGeometry(self) -> DetailView: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def PageToWorldTransform(self) -> Transform: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @property
    def WorldToPageTransform(self) -> Transform: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetFormattedScale(self, format: ScaleFormat) -> Tuple[bool, str]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @IsActive.setter
    def IsActive(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def TryGetModelLength(self, paper: float) -> Tuple[bool, float]: ...
    @overload
    def TryGetPaperLength(self, model: float) -> Tuple[bool, float]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class DimensionObject(AnnotationObjectBase):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DimensionStyle(self) -> DimensionStyle: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from .Specialized import NameValueCollection
from Rhino import ScaleValue
from Rhino import UnitSystem
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class DimensionStyle(ModelComponent):
    @overload
    def __init__(self): ...
    @overload
    def AlternateDimensionLengthDisplayUnit(self, model_serial_number: int) -> UnitSystem: ...
    @overload
    def ClearAllFieldOverrides(self) -> None: ...
    @overload
    def ClearFieldOverride(self, field: Field) -> None: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CopyFrom(self, source: DimensionStyle) -> None: ...
    @overload
    def CreatePreviewBitmap(self, width: int, height: int) -> Bitmap: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def DeleteAllUserStrings(self) -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def DimensionLengthDisplayUnit(self, model_serial_number: int) -> UnitSystem: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Duplicate(self) -> DimensionStyle: ...
    @overload
    def Duplicate(self, newName: str, newId: Guid, newParentId: Guid) -> DimensionStyle: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AlternateBelowLine(self) -> bool: ...
    @property
    def AlternateDimensionLengthDisplay(self) -> LengthDisplay: ...
    @property
    def AlternateLengthFactor(self) -> float: ...
    @property
    def AlternateLengthResolution(self) -> int: ...
    @property
    def AlternatePrefix(self) -> str: ...
    @property
    def AlternateRoundoff(self) -> float: ...
    @property
    def AlternateSuffix(self) -> str: ...
    @property
    def AlternateToleranceResolution(self) -> int: ...
    @property
    def AlternateUnitsDisplay(self) -> bool: ...
    @property
    def AlternateZeroSuppress(self) -> ZeroSuppression: ...
    @property
    def AngleFormat(self) -> AngleDisplayFormat: ...
    @property
    def AngleResolution(self) -> int: ...
    @property
    def AngleZeroSuppress(self) -> ZeroSuppression: ...
    @property
    def AngularRoundoff(self) -> float: ...
    @property
    def ArcLengthSymbol(self) -> int: ...
    @property
    def ArrowBlockId1(self) -> Guid: ...
    @property
    def ArrowBlockId2(self) -> Guid: ...
    @property
    def ArrowLength(self) -> float: ...
    @property
    def ArrowType1(self) -> ArrowType: ...
    @property
    def ArrowType2(self) -> ArrowType: ...
    @property
    def BaselineSpacing(self) -> float: ...
    @property
    def CentermarkSize(self) -> float: ...
    @property
    def CenterMarkType(self) -> CenterMarkStyle: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DecimalSeparator(self) -> str: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DimensionLengthDisplay(self) -> LengthDisplay: ...
    @property
    def DimensionLineExtension(self) -> float: ...
    @property
    def DimensionScale(self) -> float: ...
    @property
    def DimensionScaleValue(self) -> ScaleValue: ...
    @property
    def DimRadialTextAngleType(self) -> LeaderContentAngleStyle: ...
    @property
    def DimRadialTextLocation(self) -> TextLocation: ...
    @property
    def DimRadialTextOrientation(self) -> TextOrientation: ...
    @property
    def DimTextAngleType(self) -> LeaderContentAngleStyle: ...
    @property
    def DimTextLocation(self) -> TextLocation: ...
    @property
    def DimTextOrientation(self) -> TextOrientation: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def DrawForward(self) -> bool: ...
    @property
    def DrawTextMask(self) -> bool: ...
    @property
    def ExtensionLineExtension(self) -> float: ...
    @property
    def ExtensionLineOffset(self) -> float: ...
    @property
    def FitArrow(self) -> ArrowFit: ...
    @property
    def FitText(self) -> TextFit: ...
    @property
    def FixedExtensionLength(self) -> float: ...
    @property
    def FixedExtensionOn(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForceDimensionLineBetweenExtensionLines(self) -> bool: ...
    @property
    def HasFieldOverrides(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsChild(self) -> bool: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LeaderArrowBlockId(self) -> Guid: ...
    @property
    def LeaderArrowLength(self) -> float: ...
    @property
    def LeaderArrowType(self) -> ArrowType: ...
    @property
    def LeaderContentAngleType(self) -> LeaderContentAngleStyle: ...
    @property
    def LeaderCurveType(self) -> LeaderCurveStyle: ...
    @property
    def LeaderHasLanding(self) -> bool: ...
    @property
    def LeaderLandingLength(self) -> float: ...
    @property
    def LeaderTextHorizontalAlignment(self) -> TextHorizontalAlignment: ...
    @property
    def LeaderTextOrientation(self) -> TextOrientation: ...
    @property
    def LeaderTextRotationDegrees(self) -> float: ...
    @property
    def LeaderTextRotationRadians(self) -> float: ...
    @property
    def LeaderTextVerticalAlignment(self) -> TextVerticalAlignment: ...
    @property
    def LengthFactor(self) -> float: ...
    @property
    def LengthResolution(self) -> int: ...
    @property
    def MaskColor(self) -> Color: ...
    @property
    def MaskColorSource(self) -> MaskType: ...
    @property
    def MaskFrameType(self) -> MaskFrame: ...
    @property
    def MaskOffset(self) -> float: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ParentId(self) -> Guid: ...
    @property
    def Prefix(self) -> str: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def Roundoff(self) -> float: ...
    @property
    def ScaleLeftLengthMillimeters(self) -> float: ...
    @property
    def ScaleRightLengthMillimeters(self) -> float: ...
    @property
    def StackFractionFormat(self) -> StackDisplayFormat: ...
    @property
    def StackHeightScale(self) -> float: ...
    @property
    def Suffix(self) -> str: ...
    @property
    def SuppressArrow1(self) -> bool: ...
    @property
    def SuppressArrow2(self) -> bool: ...
    @property
    def SuppressExtension1(self) -> bool: ...
    @property
    def SuppressExtension2(self) -> bool: ...
    @property
    def TextGap(self) -> float: ...
    @property
    def TextHeight(self) -> float: ...
    @property
    def TextHorizontalAlignment(self) -> TextHorizontalAlignment: ...
    @property
    def TextMoveLeader(self) -> int: ...
    @property
    def TextOrientation(self) -> TextOrientation: ...
    @property
    def TextRotation(self) -> float: ...
    @property
    def TextUnderlined(self) -> bool: ...
    @property
    def TextVerticalAlignment(self) -> TextVerticalAlignment: ...
    @property
    def ToleranceFormat(self) -> ToleranceDisplayFormat: ...
    @property
    def ToleranceHeightScale(self) -> float: ...
    @property
    def ToleranceLowerValue(self) -> float: ...
    @property
    def ToleranceResolution(self) -> int: ...
    @property
    def ToleranceUpperValue(self) -> float: ...
    @property
    def ToleranceZeroSuppress(self) -> ZeroSuppression: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UserStringCount(self) -> int: ...
    @property
    def ZeroSuppress(self) -> ZeroSuppression: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def IsChildOf(self, parentId: Guid) -> bool: ...
    @overload
    def IsFieldOverriden(self, field: Field) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def ScaleLengthValues(self, scale: float) -> None: ...
    @AlternateBelowLine.setter
    def AlternateBelowLine(self, value: bool) -> None: ...
    @AlternateDimensionLengthDisplay.setter
    def AlternateDimensionLengthDisplay(self, value: LengthDisplay) -> None: ...
    @AlternateLengthFactor.setter
    def AlternateLengthFactor(self, value: float) -> None: ...
    @AlternateLengthResolution.setter
    def AlternateLengthResolution(self, value: int) -> None: ...
    @AlternatePrefix.setter
    def AlternatePrefix(self, value: str) -> None: ...
    @AlternateRoundoff.setter
    def AlternateRoundoff(self, value: float) -> None: ...
    @AlternateSuffix.setter
    def AlternateSuffix(self, value: str) -> None: ...
    @AlternateToleranceResolution.setter
    def AlternateToleranceResolution(self, value: int) -> None: ...
    @AlternateUnitsDisplay.setter
    def AlternateUnitsDisplay(self, value: bool) -> None: ...
    @AlternateZeroSuppress.setter
    def AlternateZeroSuppress(self, value: ZeroSuppression) -> None: ...
    @AngleFormat.setter
    def AngleFormat(self, value: AngleDisplayFormat) -> None: ...
    @AngleResolution.setter
    def AngleResolution(self, value: int) -> None: ...
    @AngleZeroSuppress.setter
    def AngleZeroSuppress(self, value: ZeroSuppression) -> None: ...
    @AngularRoundoff.setter
    def AngularRoundoff(self, value: float) -> None: ...
    @ArcLengthSymbol.setter
    def ArcLengthSymbol(self, value: int) -> None: ...
    @ArrowBlockId1.setter
    def ArrowBlockId1(self, value: Guid) -> None: ...
    @ArrowBlockId2.setter
    def ArrowBlockId2(self, value: Guid) -> None: ...
    @ArrowLength.setter
    def ArrowLength(self, value: float) -> None: ...
    @ArrowType1.setter
    def ArrowType1(self, value: ArrowType) -> None: ...
    @ArrowType2.setter
    def ArrowType2(self, value: ArrowType) -> None: ...
    @BaselineSpacing.setter
    def BaselineSpacing(self, value: float) -> None: ...
    @CentermarkSize.setter
    def CentermarkSize(self, value: float) -> None: ...
    @CenterMarkType.setter
    def CenterMarkType(self, value: CenterMarkStyle) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @DecimalSeparator.setter
    def DecimalSeparator(self, value: str) -> None: ...
    @DimensionLengthDisplay.setter
    def DimensionLengthDisplay(self, value: LengthDisplay) -> None: ...
    @DimensionLineExtension.setter
    def DimensionLineExtension(self, value: float) -> None: ...
    @DimensionScale.setter
    def DimensionScale(self, value: float) -> None: ...
    @DimensionScaleValue.setter
    def DimensionScaleValue(self, value: ScaleValue) -> None: ...
    @DimRadialTextAngleType.setter
    def DimRadialTextAngleType(self, value: LeaderContentAngleStyle) -> None: ...
    @DimRadialTextLocation.setter
    def DimRadialTextLocation(self, value: TextLocation) -> None: ...
    @DimRadialTextOrientation.setter
    def DimRadialTextOrientation(self, value: TextOrientation) -> None: ...
    @DimTextAngleType.setter
    def DimTextAngleType(self, value: LeaderContentAngleStyle) -> None: ...
    @DimTextLocation.setter
    def DimTextLocation(self, value: TextLocation) -> None: ...
    @DimTextOrientation.setter
    def DimTextOrientation(self, value: TextOrientation) -> None: ...
    @DrawForward.setter
    def DrawForward(self, value: bool) -> None: ...
    @DrawTextMask.setter
    def DrawTextMask(self, value: bool) -> None: ...
    @ExtensionLineExtension.setter
    def ExtensionLineExtension(self, value: float) -> None: ...
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, value: float) -> None: ...
    @FitArrow.setter
    def FitArrow(self, value: ArrowFit) -> None: ...
    @FitText.setter
    def FitText(self, value: TextFit) -> None: ...
    @FixedExtensionLength.setter
    def FixedExtensionLength(self, value: float) -> None: ...
    @FixedExtensionOn.setter
    def FixedExtensionOn(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForceDimensionLineBetweenExtensionLines.setter
    def ForceDimensionLineBetweenExtensionLines(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @LeaderArrowBlockId.setter
    def LeaderArrowBlockId(self, value: Guid) -> None: ...
    @LeaderArrowLength.setter
    def LeaderArrowLength(self, value: float) -> None: ...
    @LeaderArrowType.setter
    def LeaderArrowType(self, value: ArrowType) -> None: ...
    @LeaderContentAngleType.setter
    def LeaderContentAngleType(self, value: LeaderContentAngleStyle) -> None: ...
    @LeaderCurveType.setter
    def LeaderCurveType(self, value: LeaderCurveStyle) -> None: ...
    @LeaderHasLanding.setter
    def LeaderHasLanding(self, value: bool) -> None: ...
    @LeaderLandingLength.setter
    def LeaderLandingLength(self, value: float) -> None: ...
    @LeaderTextHorizontalAlignment.setter
    def LeaderTextHorizontalAlignment(self, value: TextHorizontalAlignment) -> None: ...
    @LeaderTextOrientation.setter
    def LeaderTextOrientation(self, value: TextOrientation) -> None: ...
    @LeaderTextRotationDegrees.setter
    def LeaderTextRotationDegrees(self, value: float) -> None: ...
    @LeaderTextRotationRadians.setter
    def LeaderTextRotationRadians(self, value: float) -> None: ...
    @LeaderTextVerticalAlignment.setter
    def LeaderTextVerticalAlignment(self, value: TextVerticalAlignment) -> None: ...
    @LengthFactor.setter
    def LengthFactor(self, value: float) -> None: ...
    @LengthResolution.setter
    def LengthResolution(self, value: int) -> None: ...
    @MaskColor.setter
    def MaskColor(self, value: Color) -> None: ...
    @MaskColorSource.setter
    def MaskColorSource(self, value: MaskType) -> None: ...
    @MaskFrameType.setter
    def MaskFrameType(self, value: MaskFrame) -> None: ...
    @MaskOffset.setter
    def MaskOffset(self, value: float) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ParentId.setter
    def ParentId(self, value: Guid) -> None: ...
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @Roundoff.setter
    def Roundoff(self, value: float) -> None: ...
    @ScaleLeftLengthMillimeters.setter
    def ScaleLeftLengthMillimeters(self, value: float) -> None: ...
    @ScaleRightLengthMillimeters.setter
    def ScaleRightLengthMillimeters(self, value: float) -> None: ...
    @StackFractionFormat.setter
    def StackFractionFormat(self, value: StackDisplayFormat) -> None: ...
    @StackHeightScale.setter
    def StackHeightScale(self, value: float) -> None: ...
    @Suffix.setter
    def Suffix(self, value: str) -> None: ...
    @SuppressArrow1.setter
    def SuppressArrow1(self, value: bool) -> None: ...
    @SuppressArrow2.setter
    def SuppressArrow2(self, value: bool) -> None: ...
    @SuppressExtension1.setter
    def SuppressExtension1(self, value: bool) -> None: ...
    @SuppressExtension2.setter
    def SuppressExtension2(self, value: bool) -> None: ...
    @TextGap.setter
    def TextGap(self, value: float) -> None: ...
    @TextHeight.setter
    def TextHeight(self, value: float) -> None: ...
    @TextHorizontalAlignment.setter
    def TextHorizontalAlignment(self, value: TextHorizontalAlignment) -> None: ...
    @TextMoveLeader.setter
    def TextMoveLeader(self, value: int) -> None: ...
    @TextOrientation.setter
    def TextOrientation(self, value: TextOrientation) -> None: ...
    @TextRotation.setter
    def TextRotation(self, value: float) -> None: ...
    @TextUnderlined.setter
    def TextUnderlined(self, value: bool) -> None: ...
    @TextVerticalAlignment.setter
    def TextVerticalAlignment(self, value: TextVerticalAlignment) -> None: ...
    @ToleranceFormat.setter
    def ToleranceFormat(self, value: ToleranceDisplayFormat) -> None: ...
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, value: float) -> None: ...
    @ToleranceLowerValue.setter
    def ToleranceLowerValue(self, value: float) -> None: ...
    @ToleranceResolution.setter
    def ToleranceResolution(self, value: int) -> None: ...
    @ToleranceUpperValue.setter
    def ToleranceUpperValue(self, value: float) -> None: ...
    @ToleranceZeroSuppress.setter
    def ToleranceZeroSuppress(self, value: ZeroSuppression) -> None: ...
    @ZeroSuppress.setter
    def ZeroSuppress(self, value: ZeroSuppression) -> None: ...
    @overload
    def SetFieldOverride(self, field: Field) -> None: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class DisplayMode(Enum):
    Default = 0
    Wireframe = 1
    Shaded = 2
    RenderPreview = 3


class DistanceDisplayMode(Enum):
    Decimal = 0
    Feet = 1
    FeetAndInches = 2


from Rhino import UnitSystem
class EarthAnchorPoint:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EarthLocationIsSet(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def EarthBasepointElevation(self) -> float: ...
    @property
    def EarthBasepointElevationCoordinateSystem(self) -> EarthCoordinateSystem: ...
    @property
    def EarthBasepointElevationZero(self) -> BasepointZero: ...
    @property
    def EarthBasepointLatitude(self) -> float: ...
    @property
    def EarthBasepointLongitude(self) -> float: ...
    @property
    def KMLOrientationHeadingAngleDegrees(self) -> float: ...
    @property
    def KMLOrientationHeadingAngleRadians(self) -> float: ...
    @property
    def KMLOrientationRollAngleDegrees(self) -> float: ...
    @property
    def KMLOrientationRollAngleRadians(self) -> float: ...
    @property
    def KMLOrientationTiltAngleDegrees(self) -> float: ...
    @property
    def KMLOrientationTiltAngleRadians(self) -> float: ...
    @property
    def ModelBasePoint(self) -> Point3d: ...
    @property
    def ModelEast(self) -> Vector3d: ...
    @property
    def ModelNorth(self) -> Vector3d: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetEarthAnchorPlane(self) -> Tuple[Plane, Vector3d]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetModelCompass(self) -> Plane: ...
    @overload
    def GetModelToEarthTransform(self, modelUnitSystem: UnitSystem) -> Transform: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ModelLocationIsSet(self) -> bool: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @EarthBasepointElevation.setter
    def EarthBasepointElevation(self, value: float) -> None: ...
    @EarthBasepointElevationCoordinateSystem.setter
    def EarthBasepointElevationCoordinateSystem(self, value: EarthCoordinateSystem) -> None: ...
    @EarthBasepointElevationZero.setter
    def EarthBasepointElevationZero(self, value: BasepointZero) -> None: ...
    @EarthBasepointLatitude.setter
    def EarthBasepointLatitude(self, value: float) -> None: ...
    @EarthBasepointLongitude.setter
    def EarthBasepointLongitude(self, value: float) -> None: ...
    @ModelBasePoint.setter
    def ModelBasePoint(self, value: Point3d) -> None: ...
    @ModelEast.setter
    def ModelEast(self, value: Vector3d) -> None: ...
    @ModelNorth.setter
    def ModelNorth(self, value: Vector3d) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class EarthCoordinateSystem(Enum):
    Unset = 0
    GroundLevel = 1
    MeanSeaLevel = 2
    CenterOfEarth = 3
    WGS1984 = 5
    EGM2008 = 6


from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class Environment(CommonObject):
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Texture: ...
    @property
    def BackgroundProjection(self) -> BackgroundProjections: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ExtrusionObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateExtrusionGeometry(self) -> Extrusion: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def ExtrusionGeometry(self) -> Extrusion: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class Field(Enum):
    Unset = 0
    Name = 1
    Index = 2
    ExtensionLineExtension = 3
    ExtensionLineOffset = 4
    Arrowsize = 5
    LeaderArrowsize = 6
    Centermark = 7
    TextGap = 8
    TextHeight = 9
    DimTextLocation = 10
    MaskFrameType = 11
    LengthResolution = 12
    AngleFormat = 13
    AngleResolution = 14
    Font = 15
    LengthFactor = 16
    Alternate = 17
    AlternateLengthFactor = 18
    AlternateLengthResolution = 20
    Prefix = 21
    Suffix = 22
    AlternatePrefix = 23
    AlternateSuffix = 24
    DimensionLineExtension = 25
    SuppressExtension1 = 26
    SuppressExtension2 = 27
    ExtLineColorSource = 28
    DimLineColorSource = 29
    ArrowColorSource = 30
    TextColorSource = 31
    ExtLineColor = 32
    DimLineColor = 33
    ArrowColor = 34
    TextColor = 35
    ExtLinePlotColorSource = 36
    DimLinePlotColorSource = 37
    ArrowPlotColorSource = 38
    TextPlotColorSource = 39
    ExtLinePlotColor = 40
    DimLinePlotColor = 41
    ArrowPlotColor = 42
    TextPlotColor = 43
    ExtLinePlotWeightSource = 44
    DimLinePlotWeightSource = 45
    ExtLinePlotWeight_mm = 46
    DimLinePlotWeight_mm = 47
    ToleranceFormat = 48
    ToleranceResolution = 49
    ToleranceUpperValue = 50
    ToleranceLowerValue = 51
    AltToleranceResolution = 52
    ToleranceHeightScale = 53
    BaselineSpacing = 54
    DrawMask = 55
    MaskColorSource = 56
    MaskColor = 57
    MaskBorder = 58
    DimensionScale = 59
    DimscaleSource = 60
    FixedExtensionLength = 61
    FixedExtensionOn = 62
    TextRotation = 63
    SuppressArrow1 = 64
    SuppressArrow2 = 65
    TextmoveLeader = 66
    ArclengthSymbol = 67
    StackTextheightScale = 68
    StackFormat = 69
    AltRound = 70
    Round = 71
    AngularRound = 72
    AltZeroSuppress = 73
    AngleZeroSuppress = 75
    ZeroSuppress = 76
    AltBelow = 77
    ArrowType1 = 78
    ArrowType2 = 79
    LeaderArrowType = 80
    ArrowBlockId1 = 81
    ArrowBlockId2 = 82
    LeaderArrowBlock = 83
    DimRadialTextLocation = 84
    TextVerticalAlignment = 85
    LeaderTextVerticalAlignment = 86
    LeaderContentAngleStyle = 87
    LeaderCurveType = 88
    LeaderContentAngle = 89
    LeaderHasLanding = 90
    LeaderLandingLength = 91
    MaskFlags = 92
    CentermarkStyle = 93
    TextHorizontalAlignment = 94
    LeaderTextHorizontalAlignment = 95
    DrawForward = 96
    SignedOrdinate = 97
    UnitSystem = 98
    TextMask = 99
    TextOrientation = 100
    LeaderTextOrientation = 101
    DimTextOrientation = 102
    DimRadialTextOrientation = 103
    DimTextAngleStyle = 104
    DimRadialTextAngleStyle = 105
    TextUnderlined = 106
    DimensionLengthDisplay = 109
    AlternateDimensionLengthDisplay = 110
    ForceDimLine = 111
    ArrowFit = 112
    TextFit = 113
    DecimalSeparator = 114
    Count = 115


from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class Font:
    @overload
    def __init__(self, familyName: str): ...
    @overload
    def __init__(self, familyName: str, weight: FontWeight, style: FontStyle, underlined: bool, strikethrough: bool): ...
    @overload
    def __init__(self, familyName: str, weight: FontWeight, style: FontStyle, stretch: FontStretch, underlined: bool, strikethrough: bool): ...
    @overload
    @staticmethod
    def AvailableFontFaceNames() -> Iterable[str]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromQuartetProperties(quartetName: str, bold: bool, italic: bool) -> Font: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def EnglishFaceName(self) -> str: ...
    @property
    def EnglishFamilyName(self) -> str: ...
    @property
    def EnglishQuartetName(self) -> str: ...
    @property
    def FaceName(self) -> str: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def FamilyPlusFaceName(self) -> str: ...
    @property
    def IsEngravingFont(self) -> bool: ...
    @property
    def IsInstalled(self) -> bool: ...
    @property
    def IsSimulated(self) -> bool: ...
    @property
    def IsSingleStrokeFont(self) -> bool: ...
    @property
    def IsSymbolFont(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def LogfontName(self) -> str: ...
    @property
    def PointSize(self) -> float: ...
    @property
    def PostScriptName(self) -> str: ...
    @property
    def QuartetName(self) -> str: ...
    @property
    def RichTextFontName(self) -> str: ...
    @property
    def Stretch(self) -> FontStretch: ...
    @property
    def Strikeout(self) -> bool: ...
    @property
    def Style(self) -> FontStyle: ...
    @property
    def Underlined(self) -> bool: ...
    @property
    def Weight(self) -> FontWeight: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetSubstituteFont(self) -> Font: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def InstalledFonts() -> Iterable[Font]: ...
    @overload
    @staticmethod
    def InstalledFonts(familyName: str) -> Iterable[Font]: ...
    @overload
    @staticmethod
    def InstalledFontsAsQuartets() -> Iterable[FontQuartet]: ...
    @overload
    def ToString(self) -> str: ...


class FontOrigin(Enum):
    Unset = 0
    Unknown = 1
    WindowsFont = 2
    AppleFont = 3


class FontQuartet:
    @overload
    def __init__(self, name: str, supportsRegular: bool, supportsBold: bool, supportsItalic: bool, supportsBoldItalic: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def HasBoldFont(self) -> bool: ...
    @property
    def HasBoldItalicFont(self) -> bool: ...
    @property
    def HasItalicFont(self) -> bool: ...
    @property
    def HasRegularFont(self) -> bool: ...
    @property
    def QuartetName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class FontStretch(Enum):
    Unset = 0
    Ultracondensed = 1
    Extracondensed = 2
    Condensed = 3
    Semicondensed = 4
    Medium = 5
    Semiexpanded = 6
    Expanded = 7
    Extraexpanded = 8
    Ultraexpanded = 9


class FontStyle(Enum):
    Unset = 0
    Upright = 1
    Italic = 2
    Oblique = 3


class FontType(Enum):
    Unset = 0
    ManagedFont = 1
    InstalledFont = 2


class FontWeight(Enum):
    Unset = 0
    Thin = 1
    Ultralight = 2
    Light = 3
    Normal = 4
    Medium = 5
    Semibold = 6
    Bold = 7
    Ultrabold = 8
    Heavy = 9


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class GripObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def CurrentLocation(self) -> Point3d: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Moved(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def OriginalLocation(self) -> Point3d: ...
    @property
    def OwnerId(self) -> Guid: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Weight(self) -> float: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCageParameters(self) -> Tuple[bool, float, float, float]: ...
    @overload
    def GetCurveCVIndices(self) -> Tuple[int, Iterable[int]]: ...
    @overload
    def GetCurveParameters(self) -> Tuple[bool, float]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGripDirections(self) -> Tuple[bool, Vector3d, Vector3d, Vector3d]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetSurfaceCVIndices(self) -> Tuple[int, Iterable[Tuple]]: ...
    @overload
    def GetSurfaceParameters(self) -> Tuple[bool, float, float]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def Move(self, xform: Transform) -> None: ...
    @overload
    def Move(self, delta: Vector3d) -> None: ...
    @overload
    def Move(self, newLocation: Point3d) -> None: ...
    @overload
    def NeighborGrip(self, directionR: int, directionS: int, directionT: int, wrap: bool) -> GripObject: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @CurrentLocation.setter
    def CurrentLocation(self, value: Point3d) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @Weight.setter
    def Weight(self, value: float) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UndoMove(self) -> None: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from .Specialized import NameValueCollection
from System import Guid
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class Group(ModelComponent):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def DeleteAllUserStrings(self) -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UserStringCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class HatchLine:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, hatchLine: HatchLine): ...
    @overload
    def AppendDash(self, dash: float) -> None: ...
    @overload
    def DashAt(self, dashIndex: int) -> float: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Angle(self) -> float: ...
    @property
    def BasePoint(self) -> Point2d: ...
    @property
    def DashCount(self) -> int: ...
    @property
    def GetDashes(self) -> Iterable[float]: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Offset(self) -> Vector2d: ...
    @property
    def PatternLength(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Angle.setter
    def Angle(self, value: float) -> None: ...
    @BasePoint.setter
    def BasePoint(self, value: Point2d) -> None: ...
    @Offset.setter
    def Offset(self, value: Vector2d) -> None: ...
    @overload
    def SetDashes(self, dashes: Iterable[float]) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class HatchObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def HatchGeometry(self) -> Hatch: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from .Specialized import NameValueCollection
from System import Guid
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class HatchPattern(ModelComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: HatchPattern): ...
    @overload
    def AddHatchLine(self, hatchLine: HatchLine) -> int: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CreatePreviewGeometry(self, width: int, height: int, angle: float) -> Iterable[Line]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def DeleteAllUserStrings(self) -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def FillType(self) -> HatchPatternFillType: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def HatchLineCount(self) -> int: ...
    @property
    def HatchLines(self) -> Iterable[HatchLine]: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def InUse(self) -> bool: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UserStringCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def HatchLineAt(self, hatchLineIndex: int) -> HatchLine: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    @staticmethod
    def ReadFromFile(filename: str, quiet: bool) -> Iterable[HatchPattern]: ...
    @overload
    def RemoveAllHatchLines(self) -> None: ...
    @overload
    def RemoveHatchLine(self, hatchLineIndex: int) -> bool: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @FillType.setter
    def FillType(self, value: HatchPatternFillType) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def SetHatchLines(self, hatchLines: Iterable[HatchLine]) -> int: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def WriteToFile(filename: str, hatchPatterns: Iterable[HatchPattern]) -> bool: ...
    @overload
    @staticmethod
    def WriteToFile(filename: str, hatchPattern: HatchPattern) -> bool: ...


class HatchPatternFillType(Enum):
    Solid = 0
    Lines = 1
    Gradient = 2


from System import IntPtr
from System import Guid
class HistoryRecord:
    @overload
    def __init__(self, command: Command, version: int): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CopyOnReplaceObject(self) -> bool: ...
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @CopyOnReplaceObject.setter
    def CopyOnReplaceObject(self, value: bool) -> None: ...
    @overload
    def SetBool(self, id: int, value: bool) -> bool: ...
    @overload
    def SetBools(self, id: int, values: Iterable[bool]) -> bool: ...
    @overload
    def SetBrep(self, id: int, value: Brep) -> bool: ...
    @overload
    def SetColor(self, id: int, value: Color) -> bool: ...
    @overload
    def SetColors(self, id: int, values: Iterable[Color]) -> bool: ...
    @overload
    def SetCurve(self, id: int, value: Curve) -> bool: ...
    @overload
    def SetDouble(self, id: int, value: float) -> bool: ...
    @overload
    def SetDoubles(self, id: int, values: Iterable[float]) -> bool: ...
    @overload
    def SetGuid(self, id: int, value: Guid) -> bool: ...
    @overload
    def SetGuids(self, id: int, values: Iterable[Guid]) -> bool: ...
    @overload
    def SetHistoryVersion(self, historyVersion: int) -> bool: ...
    @overload
    def SetInt(self, id: int, value: int) -> bool: ...
    @overload
    def SetInts(self, id: int, values: Iterable[int]) -> bool: ...
    @overload
    def SetMesh(self, id: int, value: Mesh) -> bool: ...
    @overload
    def SetObjRef(self, id: int, value: ObjRef) -> bool: ...
    @overload
    def SetPoint3d(self, id: int, value: Point3d) -> bool: ...
    @overload
    def SetPoint3dOnObject(self, id: int, objref: ObjRef, value: Point3d) -> bool: ...
    @overload
    def SetPoint3ds(self, id: int, values: Iterable[Point3d]) -> bool: ...
    @overload
    def SetString(self, id: int, value: str) -> bool: ...
    @overload
    def SetStrings(self, id: int, values: Iterable[str]) -> bool: ...
    @overload
    def SetSurface(self, id: int, value: Surface) -> bool: ...
    @overload
    def SetTransorm(self, id: int, value: Transform) -> bool: ...
    @overload
    def SetVector3d(self, id: int, value: Vector3d) -> bool: ...
    @overload
    def SetVector3ds(self, id: int, values: Iterable[Vector3d]) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import UnitSystem
from System import Guid
from .Specialized import NameValueCollection
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class InstanceDefinition(InstanceDefinitionGeometry):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CreatePreviewBitmap(self, definedViewportProjection: DefinedViewportProjection, bitmapSize: Size) -> Bitmap: ...
    @overload
    def CreatePreviewBitmap(self, definedViewportProjection: DefinedViewportProjection, displayMode: DisplayMode, bitmapSize: Size) -> Bitmap: ...
    @overload
    def CreatePreviewBitmap(self, definedViewportProjection: DefinedViewportProjection, bitmapSize: Size, applyDpiScaling: bool) -> Bitmap: ...
    @overload
    def CreatePreviewBitmap(self, definedViewportProjection: DefinedViewportProjection, displayMode: DisplayMode, bitmapSize: Size, applyDpiScaling: bool) -> Bitmap: ...
    @overload
    def CreatePreviewBitmap(self, definitionObjectId: Guid, viewportProjection: DefinedViewportProjection, displayMode: DisplayMode, bitmapSize: Size, applyDpiScaling: bool) -> Bitmap: ...
    @overload
    def CreatePreviewBitmap(self, displayModeId: Guid, viewportProjection: DefinedViewportProjection, isometricCamera: IsometricCamera, drawDecorations: bool, bitmapSize: Size, applyDpiScaling: bool) -> Bitmap: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def DeleteAllUserStrings(self) -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ArchiveFileStatus(self) -> InstanceDefinitionArchiveFileStatus: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsTenuous(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LayerStyle(self) -> InstanceDefinitionLayerStyle: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def SkipNestedLinkedDefinitions(self) -> bool: ...
    @property
    def SourceArchive(self) -> str: ...
    @property
    def SourceArchive(self) -> str: ...
    @property
    def UnitSystem(self) -> UnitSystem: ...
    @property
    def UpdateType(self) -> InstanceDefinitionUpdateType: ...
    @property
    def Url(self) -> str: ...
    @property
    def UrlDescription(self) -> str: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UserStringCount(self) -> int: ...
    @overload
    def GetContainers(self) -> Iterable[InstanceDefinition]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetObjectIds(self) -> Iterable[Guid]: ...
    @overload
    def GetObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetReferences(self, wheretoLook: int) -> Iterable[InstanceObject]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def InUse(self, wheretoLook: int) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def Object(self, index: int) -> RhinoObject: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @LayerStyle.setter
    def LayerStyle(self, value: InstanceDefinitionLayerStyle) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SkipNestedLinkedDefinitions.setter
    def SkipNestedLinkedDefinitions(self, value: bool) -> None: ...
    @UnitSystem.setter
    def UnitSystem(self, value: UnitSystem) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...
    @UrlDescription.setter
    def UrlDescription(self, value: str) -> None: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UseCount(self) -> int: ...
    @overload
    def UseCount(self) -> Tuple[int, int, int]: ...
    @overload
    def UsesDefinition(self, otherIdefIndex: int) -> int: ...
    @overload
    def UsesLayer(self, layerIndex: int) -> bool: ...
    @overload
    def UsesLinetype(self, linetypeIndex: int) -> bool: ...


class InstanceDefinitionArchiveFileStatus(Enum):
    LinkedFileIsUpToDate = 0
    LinkedFileIsNewer = 1
    LinkedFileIsOlder = 2
    LinkedFileIsDifferent = 3
    NotALinkedInstanceDefinition = -3
    LinkedFileNotReadable = -2
    LinkedFileNotFound = -1


class InstanceDefinitionLayerStyle(Enum):
    # None = 0
    Active = 1
    Reference = 2


class InstanceDefinitionUpdateType(Enum):
    Static = 0
    Embedded = 1
    LinkedAndEmbedded = 2
    Linked = 3


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class InstanceObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Explode(self, explodeNestedInstances: bool) -> Tuple[Iterable[RhinoObject], Iterable[ObjectAttributes], Iterable[Transform]]: ...
    @overload
    def Explode(self, skipHiddenPieces: bool, viewportId: Guid, explodeNestedInstances: bool) -> Tuple[Iterable[RhinoObject], Iterable[ObjectAttributes], Iterable[Transform]]: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InsertionPoint(self) -> Point3d: ...
    @property
    def InstanceDefinition(self) -> InstanceDefinition: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def InstanceXform(self) -> Transform: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def SubObjectFromComponentIndex(self, ci: ComponentIndex) -> RhinoObject: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...
    @overload
    def UsesDefinition(self, definitionIndex: int) -> Tuple[bool, int]: ...


from System import Guid
from .Specialized import NameValueCollection
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class Layer(ModelComponent):
    @overload
    def __init__(self): ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CopyAttributesFrom(self, otherLayer: Layer) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Default(self) -> None: ...
    @overload
    def DeleteAllUserStrings(self) -> None: ...
    @overload
    def DeleteModelVisible(self) -> None: ...
    @overload
    def DeletePerViewportColor(self, viewportId: Guid) -> None: ...
    @overload
    def DeletePerViewportPlotColor(self, viewportId: Guid) -> None: ...
    @overload
    def DeletePerViewportPlotWeight(self, viewportId: Guid) -> None: ...
    @overload
    def DeletePerViewportSettings(self, viewportId: Guid) -> None: ...
    @overload
    def DeletePerViewportVisible(self, viewportId: Guid) -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Layer) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def FullPath(self) -> str: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def IgesLevel(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsCurrent(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsExpanded(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsReferenceParentLayer(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def IsVisibleInUserInterface(self) -> bool: ...
    @property
    def LayerIndex(self) -> int: ...
    @property
    def LinetypeIndex(self) -> int: ...
    @property
    def ModelIsVisible(self) -> bool: ...
    @property
    def ModelPersistentVisibility(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ParentLayerId(self) -> Guid: ...
    @property
    @classmethod
    def PathSeparator(cls) -> str: ...
    @property
    def PersistentVisibility(self) -> bool: ...
    @property
    def PerViewportIsVisibleInNewDetails(self) -> bool: ...
    @property
    def PlotColor(self) -> Color: ...
    @property
    def PlotWeight(self) -> float: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RenderMaterialIndex(self) -> int: ...
    @property
    def SortIndex(self) -> int: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UserStringCount(self) -> int: ...
    @overload
    def GetChildren(self) -> Iterable[Layer]: ...
    @overload
    def GetChildren(self, allChildren: bool) -> Iterable[Layer]: ...
    @overload
    def GetCustomSectionStyle(self) -> SectionStyle: ...
    @overload
    @staticmethod
    def GetDefaultLayerProperties() -> Layer: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetLeafName(layer: Layer) -> str: ...
    @overload
    @staticmethod
    def GetLeafName(fullPath: str) -> str: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    @staticmethod
    def GetParentName(layer: Layer) -> str: ...
    @overload
    @staticmethod
    def GetParentName(fullPath: str) -> str: ...
    @overload
    def GetPersistentLocking(self) -> bool: ...
    @overload
    def GetPersistentVisibility(self) -> bool: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def HasPerViewportSettings(self, viewportId: Guid) -> bool: ...
    @overload
    def HasSelectedObjects(self, checkSubObjects: bool) -> bool: ...
    @overload
    def IsChildOf(self, otherLayer: Layer) -> bool: ...
    @overload
    def IsChildOf(self, otherlayerId: Guid) -> bool: ...
    @overload
    def IsChildOf(self, layerIndex: int) -> bool: ...
    @overload
    def IsParentOf(self, layerIndex: int) -> bool: ...
    @overload
    def IsParentOf(self, otherLayer: Layer) -> bool: ...
    @overload
    def IsParentOf(self, otherLayer: Guid) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def __eq__(left: Layer, right: Layer) -> bool: ...
    @overload
    def __ne__(left: Layer, right: Layer) -> bool: ...
    @overload
    def ParentLayer(self, rootLevelParent: bool) -> Layer: ...
    @overload
    def PerViewportColor(self, viewportId: Guid) -> Color: ...
    @overload
    def PerViewportIsVisible(self, viewportId: Guid) -> bool: ...
    @overload
    def PerViewportPersistentVisibility(self, viewportId: Guid) -> bool: ...
    @overload
    def PerViewportPlotColor(self, viewportId: Guid) -> Color: ...
    @overload
    def PerViewportPlotWeight(self, viewportId: Guid) -> float: ...
    @overload
    def RemoveCustomSectionStyle(self) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @IgesLevel.setter
    def IgesLevel(self, value: int) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @IsExpanded.setter
    def IsExpanded(self, value: bool) -> None: ...
    @IsLocked.setter
    def IsLocked(self, value: bool) -> None: ...
    @IsVisible.setter
    def IsVisible(self, value: bool) -> None: ...
    @IsVisibleInUserInterface.setter
    def IsVisibleInUserInterface(self, value: bool) -> None: ...
    @LayerIndex.setter
    def LayerIndex(self, value: int) -> None: ...
    @LinetypeIndex.setter
    def LinetypeIndex(self, value: int) -> None: ...
    @ModelIsVisible.setter
    def ModelIsVisible(self, value: bool) -> None: ...
    @ModelPersistentVisibility.setter
    def ModelPersistentVisibility(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ParentLayerId.setter
    def ParentLayerId(self, value: Guid) -> None: ...
    @PersistentVisibility.setter
    def PersistentVisibility(self, value: bool) -> None: ...
    @PerViewportIsVisibleInNewDetails.setter
    def PerViewportIsVisibleInNewDetails(self, value: bool) -> None: ...
    @PlotColor.setter
    def PlotColor(self, value: Color) -> None: ...
    @PlotWeight.setter
    def PlotWeight(self, value: float) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @RenderMaterialIndex.setter
    def RenderMaterialIndex(self, value: int) -> None: ...
    @overload
    def SetCustomSectionStyle(self, sectionStyle: SectionStyle) -> None: ...
    @overload
    def SetPersistentLocking(self, persistentLocking: bool) -> None: ...
    @overload
    def SetPersistentVisibility(self, persistentVisibility: bool) -> None: ...
    @overload
    def SetPerViewportColor(self, viewportId: Guid, color: Color) -> None: ...
    @overload
    def SetPerViewportPersistentVisibility(self, viewportId: Guid, persistentVisibility: bool) -> None: ...
    @overload
    def SetPerViewportPlotColor(self, viewportId: Guid, color: Color) -> None: ...
    @overload
    def SetPerViewportPlotWeight(self, viewportId: Guid, plotWeight: float) -> None: ...
    @overload
    def SetPerViewportVisible(self, viewportId: Guid, visible: bool) -> None: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UnsetModelPersistentVisibility(self) -> None: ...
    @overload
    def UnsetPersistentLocking(self) -> None: ...
    @overload
    def UnsetPersistentVisibility(self) -> None: ...
    @overload
    def UnsetPerViewportPersistentVisibility(self, viewportId: Guid) -> None: ...


class LeaderContentAngleStyle(Enum):
    Horizontal = 0
    Aligned = 1
    Rotated = 2


class LeaderCurveStyle(Enum):
    # None = 0
    Polyline = 1
    Spline = 2


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class LeaderObject(AnnotationObjectBase):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LeaderGeometry(self) -> Leader: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class LengthDisplay(Enum):
    ModelUnits = 0
    InchesFractional = 1
    FeetAndInches = 2
    Millmeters = 3
    Centimeters = 4
    Meters = 5
    Kilometers = 6
    InchesDecimal = 7
    FeetDecimal = 8
    Miles = 9


class LengthDisplayFormat(Enum):
    Decimal = 0
    Fractional = 1
    FeetInches = 2
    FeetDecimalInches = 3


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class LightObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def DuplicateLightGeometry(self) -> Light: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LightGeometry(self) -> Light: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class LinearDimensionObject(DimensionObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DimensionStyle(self) -> DimensionStyle: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LinearDimensionGeometry(self) -> LinearDimension: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class LineCapStyle(Enum):
    Round = 0
    Flat = 1
    Square = 2


class LineJoinStyle(Enum):
    Round = 0
    Miter = 1
    Bevel = 2


from Rhino import UnitSystem
from .Specialized import NameValueCollection
from System import Guid
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class Linetype(ModelComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Linetype): ...
    @overload
    def AppendSegment(self, length: float, isSolid: bool) -> int: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    @staticmethod
    def CreateFromPatternString(patternString: str, millimeters: bool) -> Linetype: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Default(self) -> None: ...
    @overload
    def DeleteAllUserStrings(self) -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateLinetype(self) -> Linetype: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AlwaysModelDistances(self) -> bool: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def InUse(self) -> bool: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def IsPatternLocked(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LineCapStyle(self) -> LineCapStyle: ...
    @property
    def LineJoinStyle(self) -> LineJoinStyle: ...
    @property
    def LinetypeIndex(self) -> int: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def PatternLength(self) -> float: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def SegmentCount(self) -> int: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UserStringCount(self) -> int: ...
    @property
    def Width(self) -> float: ...
    @property
    def WidthUnits(self) -> UnitSystem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetSegment(self, index: int) -> Tuple[float, bool]: ...
    @overload
    def GetTaperPoints(self) -> Iterable[Point2d]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def PatternString(self, millimeters: bool) -> str: ...
    @overload
    @staticmethod
    def ReadFromFile(path: str) -> Iterable[Linetype]: ...
    @overload
    def RemoveSegment(self, index: int) -> bool: ...
    @overload
    def RemoveTaper(self) -> None: ...
    @AlwaysModelDistances.setter
    def AlwaysModelDistances(self, value: bool) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @LineCapStyle.setter
    def LineCapStyle(self, value: LineCapStyle) -> None: ...
    @LineJoinStyle.setter
    def LineJoinStyle(self, value: LineJoinStyle) -> None: ...
    @LinetypeIndex.setter
    def LinetypeIndex(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Width.setter
    def Width(self, value: float) -> None: ...
    @WidthUnits.setter
    def WidthUnits(self, value: UnitSystem) -> None: ...
    @overload
    def SetSegment(self, index: int, length: float, isSolid: bool) -> bool: ...
    @overload
    def SetSegments(self, segments: Iterable[float]) -> bool: ...
    @overload
    def SetTaper(self, startWidth: float, endWidth: float) -> None: ...
    @overload
    def SetTaper(self, startWidth: float, taperPoint: Point2d, endWidth: float) -> None: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class MaskFrame(Enum):
    NoFrame = 0
    RectFrame = 1
    CapsuleFrame = 2


class MaskType(Enum):
    BackgroundColor = 0
    MaskColor = 1


from System import Guid
from .Specialized import NameValueCollection
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class Material(ModelComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: Material): ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearMaterialChannels(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyFrom(self, other: Material) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Default(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AlphaTransparency(self) -> bool: ...
    @property
    def AmbientColor(self) -> Color: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    @classmethod
    def DefaultMaterial(cls) -> Material: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DiffuseColor(self) -> Color: ...
    @property
    def DisableLighting(self) -> bool: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def EmissionColor(self) -> Color: ...
    @property
    def FresnelIndexOfRefraction(self) -> float: ...
    @property
    def FresnelReflections(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def IndexOfRefraction(self) -> float: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDefaultMaterial(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsPhysicallyBased(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MaterialIndex(self) -> int: ...
    @property
    @classmethod
    def MaxShine(cls) -> float: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def PhysicallyBased(self) -> PhysicallyBasedMaterial: ...
    @property
    def PreviewColor(self) -> Color: ...
    @property
    def RDKMaterialID(self) -> Guid: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def ReflectionColor(self) -> Color: ...
    @property
    def ReflectionGlossiness(self) -> float: ...
    @property
    def Reflectivity(self) -> float: ...
    @property
    def RefractionGlossiness(self) -> float: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RenderMaterialInstanceId(self) -> Guid: ...
    @property
    def RenderPlugInId(self) -> Guid: ...
    @property
    def Shine(self) -> float: ...
    @property
    def SpecularColor(self) -> Color: ...
    @property
    def Transparency(self) -> float: ...
    @property
    def TransparentColor(self) -> Color: ...
    @property
    def UseCount(self) -> int: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UserStringCount(self) -> int: ...
    @overload
    def GetBitmapTexture(self) -> Texture: ...
    @overload
    def GetBumpTexture(self) -> Texture: ...
    @overload
    def GetEnvironmentTexture(self) -> Texture: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetTexture(self, which: TextureType) -> Texture: ...
    @overload
    def GetTextures(self) -> Iterable[Texture]: ...
    @overload
    def GetTransparencyTexture(self) -> Texture: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MaterialChannelIdFromIndex(self, material_channel_index: int) -> Guid: ...
    @overload
    def MaterialChannelIndexFromId(self, material_channel_id: Guid, bAddIdIfNotPresent: bool) -> int: ...
    @AlphaTransparency.setter
    def AlphaTransparency(self, value: bool) -> None: ...
    @AmbientColor.setter
    def AmbientColor(self, value: Color) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @DiffuseColor.setter
    def DiffuseColor(self, value: Color) -> None: ...
    @DisableLighting.setter
    def DisableLighting(self, value: bool) -> None: ...
    @EmissionColor.setter
    def EmissionColor(self, value: Color) -> None: ...
    @FresnelIndexOfRefraction.setter
    def FresnelIndexOfRefraction(self, value: float) -> None: ...
    @FresnelReflections.setter
    def FresnelReflections(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @IndexOfRefraction.setter
    def IndexOfRefraction(self, value: float) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ReflectionColor.setter
    def ReflectionColor(self, value: Color) -> None: ...
    @ReflectionGlossiness.setter
    def ReflectionGlossiness(self, value: float) -> None: ...
    @Reflectivity.setter
    def Reflectivity(self, value: float) -> None: ...
    @RefractionGlossiness.setter
    def RefractionGlossiness(self, value: float) -> None: ...
    @RenderMaterialInstanceId.setter
    def RenderMaterialInstanceId(self, value: Guid) -> None: ...
    @RenderPlugInId.setter
    def RenderPlugInId(self, value: Guid) -> None: ...
    @Shine.setter
    def Shine(self, value: float) -> None: ...
    @SpecularColor.setter
    def SpecularColor(self, value: Color) -> None: ...
    @Transparency.setter
    def Transparency(self, value: float) -> None: ...
    @TransparentColor.setter
    def TransparentColor(self, value: Color) -> None: ...
    @overload
    def SetBitmapTexture(self, filename: str) -> bool: ...
    @overload
    def SetBitmapTexture(self, texture: Texture) -> bool: ...
    @overload
    def SetBumpTexture(self, filename: str) -> bool: ...
    @overload
    def SetBumpTexture(self, texture: Texture) -> bool: ...
    @overload
    def SetEnvironmentTexture(self, texture: Texture) -> bool: ...
    @overload
    def SetEnvironmentTexture(self, filename: str) -> bool: ...
    @overload
    def SetTexture(self, texture: Texture, which: TextureType) -> bool: ...
    @overload
    def SetTransparencyTexture(self, filename: str) -> bool: ...
    @overload
    def SetTransparencyTexture(self, texture: Texture) -> bool: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToPhysicallyBased(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class MaterialRef:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BackFaceMaterialId(self) -> Guid: ...
    @property
    def BackFaceMaterialIndex(self) -> int: ...
    @property
    def FrontFaceMaterialId(self) -> Guid: ...
    @property
    def FrontFaceMaterialIndex(self) -> int: ...
    @property
    def MaterialSource(self) -> ObjectMaterialSource: ...
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class MaterialRefCreateParams:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BackFaceMaterialId(self) -> Guid: ...
    @property
    def BackFaceMaterialIndex(self) -> int: ...
    @property
    def FrontFaceMaterialId(self) -> Guid: ...
    @property
    def FrontFaceMaterialIndex(self) -> int: ...
    @property
    def MaterialSource(self) -> ObjectMaterialSource: ...
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @BackFaceMaterialId.setter
    def BackFaceMaterialId(self, value: Guid) -> None: ...
    @BackFaceMaterialIndex.setter
    def BackFaceMaterialIndex(self, value: int) -> None: ...
    @FrontFaceMaterialId.setter
    def FrontFaceMaterialId(self, value: Guid) -> None: ...
    @FrontFaceMaterialIndex.setter
    def FrontFaceMaterialIndex(self, value: int) -> None: ...
    @MaterialSource.setter
    def MaterialSource(self, value: ObjectMaterialSource) -> None: ...
    @PlugInId.setter
    def PlugInId(self, value: Guid) -> None: ...
    @overload
    def ToString(self) -> str: ...


from .Generic import KeyValuePair
from System import Guid
from .Generic import ICollection
class MaterialRefs:
    def __iter__(self) -> Iterator[KeyValuePair]: ...
    @overload
    def Add(self, item: KeyValuePair) -> None: ...
    @overload
    def Add(self, key: Guid, value: MaterialRef) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: KeyValuePair) -> bool: ...
    @overload
    def ContainsKey(self, key: Guid) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[KeyValuePair], arrayIndex: int) -> None: ...
    @overload
    def Create(self, createParams: MaterialRefCreateParams) -> MaterialRef: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Item(self, key: Guid) -> MaterialRef: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def Values(self) -> ICollection: ...
    @overload
    def GetEnumerator(self) -> Iterator[KeyValuePair]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Remove(self, item: KeyValuePair) -> bool: ...
    @overload
    def Remove(self, key: Guid) -> bool: ...
    @Item.setter
    def Item(self, key: Guid, value: MaterialRef) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetValue(self, key: Guid) -> Tuple[bool, MaterialRef]: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class MeshObject(RhinoObject):
    @overload
    @staticmethod
    def CheckMeshes(meshObjects: Iterable[MeshObject], textLog: TextLog, parameters: MeshCheckParameters) -> Tuple[bool, MeshCheckParameters]: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def DuplicateMeshGeometry(self) -> Mesh: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsCustomObject(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeshGeometry(self) -> Mesh: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ModelComponent(CommonObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    @classmethod
    def NamePathSeparator(cls) -> str: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsValidComponentName(name: str) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    @staticmethod
    def ModelComponentTypeIgnoresCase(type: ModelComponentType) -> bool: ...
    @overload
    @staticmethod
    def ModelComponentTypeIncludesParent(type: ModelComponentType) -> bool: ...
    @overload
    @staticmethod
    def ModelComponentTypeRequiresUniqueName(type: ModelComponentType) -> bool: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ModelComponentType(Enum):
    Unset = 0
    Image = 1
    TextureMapping = 2
    Material = 3
    RenderMaterial = 3
    LinePattern = 4
    Layer = 5
    Group = 6
    TextStyle = 7
    DimStyle = 8
    RenderLight = 9
    HatchPattern = 10
    InstanceDefinition = 11
    ModelGeometry = 12
    HistoryRecord = 13
    RenderContent = 14
    EmbeddedFile = 15
    ObsoleteValue = 16
    SectionStyle = 17
    NumOf = 18
    Mixed = 254


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class MorphControlObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class NamedViewWidgetObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AssociatedNamedView(self) -> str: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from Rhino import RhinoDoc
from .Specialized import NameValueCollection
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ObjectAttributes(CommonObject):
    @overload
    def __init__(self): ...
    @overload
    def AddHideInDetailOverride(self, detailId: Guid) -> bool: ...
    @overload
    def AddToGroup(self, groupIndex: int) -> None: ...
    @overload
    def ComputedPlotColor(self, document: RhinoDoc) -> Color: ...
    @overload
    def ComputedPlotColor(self, document: RhinoDoc, viewportId: Guid) -> Color: ...
    @overload
    def ComputedPlotWeight(self, document: RhinoDoc) -> float: ...
    @overload
    def ComputedPlotWeight(self, document: RhinoDoc, viewportId: Guid) -> float: ...
    @overload
    def DeleteAllUserStrings(self) -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DrawColor(self, document: RhinoDoc) -> Color: ...
    @overload
    def DrawColor(self, document: RhinoDoc, viewportId: Guid) -> Color: ...
    @overload
    def Duplicate(self) -> ObjectAttributes: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CastsShadows(self) -> bool: ...
    @property
    def ClippingPlaneLabelStyle(self) -> SectionLabelStyle: ...
    @property
    def ColorSource(self) -> ObjectColorSource: ...
    @property
    def CustomMeshingParameters(self) -> MeshingParameters: ...
    @property
    def Decals(self) -> Decals: ...
    @property
    def DisplayOrder(self) -> int: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def File3dmMeshModifiers(self) -> File3dmMeshModifiers: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasMapping(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def HatchBackgroundFillColor(self) -> Color: ...
    @property
    def HatchBoundaryVisible(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsInstanceDefinitionObject(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LayerIndex(self) -> int: ...
    @property
    def LinetypeIndex(self) -> int: ...
    @property
    def LinetypePatternScale(self) -> float: ...
    @property
    def LinetypeSource(self) -> ObjectLinetypeSource: ...
    @property
    def MaterialIndex(self) -> int: ...
    @property
    def MaterialRefs(self) -> MaterialRefs: ...
    @property
    def MaterialSource(self) -> ObjectMaterialSource: ...
    @property
    def Mode(self) -> ObjectMode: ...
    @property
    def Name(self) -> str: ...
    @property
    def ObjectColor(self) -> Color: ...
    @property
    def ObjectDecoration(self) -> ObjectDecoration: ...
    @property
    def ObjectId(self) -> Guid: ...
    @property
    @classmethod
    def OCSMappingChannelId(cls) -> int: ...
    @property
    def PlotColor(self) -> Color: ...
    @property
    def PlotColorSource(self) -> ObjectPlotColorSource: ...
    @property
    def PlotWeight(self) -> float: ...
    @property
    def PlotWeightSource(self) -> ObjectPlotWeightSource: ...
    @property
    def ReceivesShadows(self) -> bool: ...
    @property
    def SectionAttributesSource(self) -> ObjectSectionAttributesSource: ...
    @property
    def Space(self) -> ActiveSpace: ...
    @property
    def Url(self) -> str: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UserStringCount(self) -> int: ...
    @property
    def ViewportId(self) -> Guid: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WireDensity(self) -> int: ...
    @overload
    def GetCustomLinetype(self) -> Linetype: ...
    @overload
    def GetCustomSectionStyle(self) -> SectionStyle: ...
    @overload
    def GetDisplayModeOverride(self, viewportId: Guid) -> Guid: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHideInDetailOverrides(self) -> Iterable[Guid]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def HasDisplayModeOverride(self, viewportId: Guid) -> bool: ...
    @overload
    def HasHideInDetailOverrideSet(self, detailId: Guid) -> bool: ...
    @overload
    def IsInGroup(self, groupIndex: int) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def RemoveCustomLinetype(self) -> None: ...
    @overload
    def RemoveCustomSectionStyle(self) -> None: ...
    @overload
    def RemoveDisplayModeOverride(self) -> None: ...
    @overload
    def RemoveDisplayModeOverride(self, rhinoViewportId: Guid) -> None: ...
    @overload
    def RemoveFromAllGroups(self) -> None: ...
    @overload
    def RemoveFromGroup(self, groupIndex: int) -> None: ...
    @overload
    def RemoveHideInDetailOverride(self, detailId: Guid) -> bool: ...
    @CastsShadows.setter
    def CastsShadows(self, value: bool) -> None: ...
    @ClippingPlaneLabelStyle.setter
    def ClippingPlaneLabelStyle(self, value: SectionLabelStyle) -> None: ...
    @ColorSource.setter
    def ColorSource(self, value: ObjectColorSource) -> None: ...
    @CustomMeshingParameters.setter
    def CustomMeshingParameters(self, value: MeshingParameters) -> None: ...
    @DisplayOrder.setter
    def DisplayOrder(self, value: int) -> None: ...
    @HatchBackgroundFillColor.setter
    def HatchBackgroundFillColor(self, value: Color) -> None: ...
    @HatchBoundaryVisible.setter
    def HatchBoundaryVisible(self, value: bool) -> None: ...
    @LayerIndex.setter
    def LayerIndex(self, value: int) -> None: ...
    @LinetypeIndex.setter
    def LinetypeIndex(self, value: int) -> None: ...
    @LinetypePatternScale.setter
    def LinetypePatternScale(self, value: float) -> None: ...
    @LinetypeSource.setter
    def LinetypeSource(self, value: ObjectLinetypeSource) -> None: ...
    @MaterialIndex.setter
    def MaterialIndex(self, value: int) -> None: ...
    @MaterialSource.setter
    def MaterialSource(self, value: ObjectMaterialSource) -> None: ...
    @Mode.setter
    def Mode(self, value: ObjectMode) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @ObjectColor.setter
    def ObjectColor(self, value: Color) -> None: ...
    @ObjectDecoration.setter
    def ObjectDecoration(self, value: ObjectDecoration) -> None: ...
    @ObjectId.setter
    def ObjectId(self, value: Guid) -> None: ...
    @PlotColor.setter
    def PlotColor(self, value: Color) -> None: ...
    @PlotColorSource.setter
    def PlotColorSource(self, value: ObjectPlotColorSource) -> None: ...
    @PlotWeight.setter
    def PlotWeight(self, value: float) -> None: ...
    @PlotWeightSource.setter
    def PlotWeightSource(self, value: ObjectPlotWeightSource) -> None: ...
    @ReceivesShadows.setter
    def ReceivesShadows(self, value: bool) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @SectionAttributesSource.setter
    def SectionAttributesSource(self, value: ObjectSectionAttributesSource) -> None: ...
    @Space.setter
    def Space(self, value: ActiveSpace) -> None: ...
    @Url.setter
    def Url(self, value: str) -> None: ...
    @ViewportId.setter
    def ViewportId(self, value: Guid) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @WireDensity.setter
    def WireDensity(self, value: int) -> None: ...
    @overload
    def SetCustomLinetype(self, linetype: Linetype) -> None: ...
    @overload
    def SetCustomSectionStyle(self, sectionStyle: SectionStyle) -> None: ...
    @overload
    def SetDisplayModeOverride(self, mode: DisplayModeDescription) -> bool: ...
    @overload
    def SetDisplayModeOverride(self, mode: DisplayModeDescription, rhinoViewportId: Guid) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Transform(self, xform: Transform) -> bool: ...


class ObjectColorSource(Enum):
    ColorFromLayer = 0
    ColorFromObject = 1
    ColorFromMaterial = 2
    ColorFromParent = 3


class ObjectDecoration(Enum):
    # None = 0
    StartArrowhead = 8
    EndArrowhead = 16
    BothArrowhead = 24


class ObjectEnumeratorSettings:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ActiveObjects(self) -> bool: ...
    @property
    def ClassTypeFilter(self) -> type: ...
    @property
    def DeletedObjects(self) -> bool: ...
    @property
    def HiddenObjects(self) -> bool: ...
    @property
    def IdefObjects(self) -> bool: ...
    @property
    def IncludeGrips(self) -> bool: ...
    @property
    def IncludeLights(self) -> bool: ...
    @property
    def IncludePhantoms(self) -> bool: ...
    @property
    def LayerIndexFilter(self) -> int: ...
    @property
    def LockedObjects(self) -> bool: ...
    @property
    def NameFilter(self) -> str: ...
    @property
    def NormalObjects(self) -> bool: ...
    @property
    def ObjectTypeFilter(self) -> ObjectType: ...
    @property
    def ReferenceObjects(self) -> bool: ...
    @property
    def SelectedObjectsFilter(self) -> bool: ...
    @property
    def SubObjectSelected(self) -> bool: ...
    @property
    def ViewportFilter(self) -> RhinoViewport: ...
    @property
    def VisibleFilter(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @ActiveObjects.setter
    def ActiveObjects(self, value: bool) -> None: ...
    @ClassTypeFilter.setter
    def ClassTypeFilter(self, value: type) -> None: ...
    @DeletedObjects.setter
    def DeletedObjects(self, value: bool) -> None: ...
    @HiddenObjects.setter
    def HiddenObjects(self, value: bool) -> None: ...
    @IdefObjects.setter
    def IdefObjects(self, value: bool) -> None: ...
    @IncludeGrips.setter
    def IncludeGrips(self, value: bool) -> None: ...
    @IncludeLights.setter
    def IncludeLights(self, value: bool) -> None: ...
    @IncludePhantoms.setter
    def IncludePhantoms(self, value: bool) -> None: ...
    @LayerIndexFilter.setter
    def LayerIndexFilter(self, value: int) -> None: ...
    @LockedObjects.setter
    def LockedObjects(self, value: bool) -> None: ...
    @NameFilter.setter
    def NameFilter(self, value: str) -> None: ...
    @NormalObjects.setter
    def NormalObjects(self, value: bool) -> None: ...
    @ObjectTypeFilter.setter
    def ObjectTypeFilter(self, value: ObjectType) -> None: ...
    @ReferenceObjects.setter
    def ReferenceObjects(self, value: bool) -> None: ...
    @SelectedObjectsFilter.setter
    def SelectedObjectsFilter(self, value: bool) -> None: ...
    @SubObjectSelected.setter
    def SubObjectSelected(self, value: bool) -> None: ...
    @ViewportFilter.setter
    def ViewportFilter(self, value: RhinoViewport) -> None: ...
    @VisibleFilter.setter
    def VisibleFilter(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ObjectFrameFlags(Enum):
    Standard = 0
    IncludeScaleTransforms = 1
    ReturnUnset = 2


class ObjectFrameFlags(Enum):
    Standard = 0
    IncludeScaleTransforms = 1
    ReturnUnset = 2


class ObjectLinetypeSource(Enum):
    LinetypeFromLayer = 0
    LinetypeFromObject = 1
    LinetypeFromParent = 3


class ObjectMaterialSource(Enum):
    MaterialFromLayer = 0
    MaterialFromObject = 1
    MaterialFromParent = 3


class ObjectMode(Enum):
    Normal = 0
    Hidden = 1
    Locked = 2
    InstanceDefinitionObject = 3


class ObjectPlotColorSource(Enum):
    PlotColorFromLayer = 0
    PlotColorFromObject = 1
    PlotColorFromDisplay = 2
    PlotColorFromParent = 3


class ObjectPlotWeightSource(Enum):
    PlotWeightFromLayer = 0
    PlotWeightFromObject = 1
    PlotWeightFromParent = 3


class ObjectSectionAttributesSource(Enum):
    FromLayer = 0
    FromObject = 1
    FromParent = 2
    FromSectioner = 3


class ObjectSectionFillRule(Enum):
    ClosedCurves = 0
    SolidObjects = 1


class ObjectType(Enum):
    # None = 0
    Point = 1
    PointSet = 2
    Curve = 4
    Surface = 8
    Brep = 16
    Mesh = 32
    Light = 256
    Annotation = 512
    InstanceDefinition = 2048
    InstanceReference = 4096
    TextDot = 8192
    Grip = 16384
    Detail = 32768
    Hatch = 65536
    MorphControl = 131072
    SubD = 262144
    BrepLoop = 524288
    BrepVertex = 1048576
    PolysrfFilter = 2097152
    EdgeFilter = 4194304
    PolyedgeFilter = 8388608
    MeshVertex = 16777216
    MeshEdge = 33554432
    MeshFace = 67108864
    Cage = 134217728
    Phantom = 268435456
    ClipPlane = 536870912
    Extrusion = 1073741824
    AnyObject = 4294967295


from System import Guid
from Rhino import RhinoDoc
from .Custom import PickContext
class ObjRef:
    @overload
    def __init__(self, other: ObjRef): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    def __init__(self, rhinoObject: RhinoObject): ...
    @overload
    def __init__(self, doc: RhinoDoc, id: Guid): ...
    @overload
    def __init__(self, id: Guid, ci: ComponentIndex): ...
    @overload
    def __init__(self, rhinoObject: RhinoObject, pickContext: PickContext): ...
    @overload
    def __init__(self, doc: RhinoDoc, id: Guid, ci: ComponentIndex): ...
    @overload
    def Brep(self) -> Brep: ...
    @overload
    def ClippingPlaneSurface(self) -> ClippingPlaneSurface: ...
    @overload
    def Curve(self) -> Curve: ...
    @overload
    def CurveParameter(self) -> Tuple[Curve, float]: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Edge(self) -> BrepEdge: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Face(self) -> BrepFace: ...
    @overload
    def Geometry(self) -> GeometryBase: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def GeometryComponentIndex(self) -> ComponentIndex: ...
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hatch(self) -> Hatch: ...
    @overload
    def InstanceDefinitionPart(self) -> RhinoObject: ...
    @overload
    def Light(self) -> Light: ...
    @overload
    def Mesh(self) -> Mesh: ...
    @overload
    def Object(self) -> RhinoObject: ...
    @overload
    def Point(self) -> Point: ...
    @overload
    def PointCloud(self) -> PointCloud: ...
    @overload
    def SelectionMethod(self) -> SelectionMethod: ...
    @overload
    def SelectionPoint(self) -> Point3d: ...
    @overload
    def SelectionView(self) -> RhinoView: ...
    @overload
    def SelectionViewDetailSerialNumber(self) -> int: ...
    @overload
    def SetSelectionComponent(self, componentIndex: ComponentIndex) -> None: ...
    @overload
    def SubD(self) -> SubD: ...
    @overload
    def SubDEdge(self) -> SubDEdge: ...
    @overload
    def SubDFace(self) -> SubDFace: ...
    @overload
    def SubDVertex(self) -> SubDVertex: ...
    @overload
    def Surface(self) -> Surface: ...
    @overload
    def SurfaceParameter(self) -> Tuple[Surface, float, float]: ...
    @overload
    def TextDot(self) -> TextDot: ...
    @overload
    def TextEntity(self) -> TextEntity: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Trim(self) -> BrepTrim: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class OrdinateDimensionObject(DimensionObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DimensionStyle(self) -> DimensionStyle: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def OrdinateDimensionGeometry(self) -> OrdinateDimension: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class PhysicallyBasedMaterial:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Alpha(self) -> float: ...
    @property
    def Anisotropic(self) -> float: ...
    @property
    def AnisotropicRotation(self) -> float: ...
    @property
    def BaseColor(self) -> Color4f: ...
    @property
    def BRDF(self) -> BRDFs: ...
    @property
    def Clearcoat(self) -> float: ...
    @property
    def ClearcoatRoughness(self) -> float: ...
    @property
    def Emission(self) -> Color4f: ...
    @property
    def Material(self) -> Material: ...
    @property
    def Metallic(self) -> float: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OpacityIOR(self) -> float: ...
    @property
    def OpacityRoughness(self) -> float: ...
    @property
    def ReflectiveIOR(self) -> float: ...
    @property
    def Roughness(self) -> float: ...
    @property
    def Sheen(self) -> float: ...
    @property
    def SheenTint(self) -> float: ...
    @property
    def Specular(self) -> float: ...
    @property
    def SpecularTint(self) -> float: ...
    @property
    def Subsurface(self) -> float: ...
    @property
    def SubsurfaceScatteringColor(self) -> Color4f: ...
    @property
    def SubsurfaceScatteringRadius(self) -> float: ...
    @property
    def UseBaseColorTextureAlphaForObjectAlphaTransparencyTexture(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetTexture(self, which: TextureType) -> Texture: ...
    @overload
    def GetTextures(self) -> Iterable[Texture]: ...
    @overload
    def GetType(self) -> type: ...
    @Alpha.setter
    def Alpha(self, value: float) -> None: ...
    @Anisotropic.setter
    def Anisotropic(self, value: float) -> None: ...
    @AnisotropicRotation.setter
    def AnisotropicRotation(self, value: float) -> None: ...
    @BaseColor.setter
    def BaseColor(self, value: Color4f) -> None: ...
    @BRDF.setter
    def BRDF(self, value: BRDFs) -> None: ...
    @Clearcoat.setter
    def Clearcoat(self, value: float) -> None: ...
    @ClearcoatRoughness.setter
    def ClearcoatRoughness(self, value: float) -> None: ...
    @Emission.setter
    def Emission(self, value: Color4f) -> None: ...
    @Metallic.setter
    def Metallic(self, value: float) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @OpacityIOR.setter
    def OpacityIOR(self, value: float) -> None: ...
    @OpacityRoughness.setter
    def OpacityRoughness(self, value: float) -> None: ...
    @ReflectiveIOR.setter
    def ReflectiveIOR(self, value: float) -> None: ...
    @Roughness.setter
    def Roughness(self, value: float) -> None: ...
    @Sheen.setter
    def Sheen(self, value: float) -> None: ...
    @SheenTint.setter
    def SheenTint(self, value: float) -> None: ...
    @Specular.setter
    def Specular(self, value: float) -> None: ...
    @SpecularTint.setter
    def SpecularTint(self, value: float) -> None: ...
    @Subsurface.setter
    def Subsurface(self, value: float) -> None: ...
    @SubsurfaceScatteringColor.setter
    def SubsurfaceScatteringColor(self, value: Color4f) -> None: ...
    @SubsurfaceScatteringRadius.setter
    def SubsurfaceScatteringRadius(self, value: float) -> None: ...
    @UseBaseColorTextureAlphaForObjectAlphaTransparencyTexture.setter
    def UseBaseColorTextureAlphaForObjectAlphaTransparencyTexture(self, value: bool) -> None: ...
    @overload
    def SetTexture(self, texture: Texture, which: TextureType) -> bool: ...
    @overload
    def SynchronizeLegacyMaterial(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class PointCloudObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def DuplicatePointCloudGeometry(self) -> PointCloud: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def PointCloudGeometry(self) -> PointCloud: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class PointObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def DuplicatePointGeometry(self) -> Point: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def PointGeometry(self) -> Point: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ProxyObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class RadialDimensionObject(DimensionObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DimensionStyle(self) -> DimensionStyle: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def RadialDimensionGeometry(self) -> RadialDimension: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from Rhino import RhinoDoc
from System import Guid
class ReplayHistoryData:
    @overload
    def AppendHistoryResult(self) -> ReplayHistoryResult: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def HistoryVersion(self) -> int: ...
    @property
    def RecordId(self) -> Guid: ...
    @property
    def Results(self) -> Iterable[ReplayHistoryResult]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRhinoObjRef(self, id: int) -> ObjRef: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetBool(self, id: int) -> Tuple[bool, bool]: ...
    @overload
    def TryGetColor(self, id: int) -> Tuple[bool, Color]: ...
    @overload
    def TryGetDouble(self, id: int) -> Tuple[bool, float]: ...
    @overload
    def TryGetDoubles(self, id: int) -> Tuple[bool, Iterable[float]]: ...
    @overload
    def TryGetGuid(self, id: int) -> Tuple[bool, Guid]: ...
    @overload
    def TryGetGuids(self, id: int) -> Tuple[bool, Iterable[Guid]]: ...
    @overload
    def TryGetInt(self, id: int) -> Tuple[bool, int]: ...
    @overload
    def TryGetPoint3d(self, id: int) -> Tuple[bool, Point3d]: ...
    @overload
    def TryGetPoint3dOnObject(self, id: int) -> Tuple[bool, Point3d]: ...
    @overload
    def TryGetString(self, id: int) -> Tuple[bool, str]: ...
    @overload
    def TryGetTransform(self, id: int) -> Tuple[bool, Transform]: ...
    @overload
    def TryGetVector3d(self, id: int) -> Tuple[bool, Vector3d]: ...
    @overload
    def UpdateResultArray(self, newResults: Iterable[ReplayHistoryResult]) -> None: ...


from System import Guid
class ReplayHistoryResult:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ExistingObject(self) -> RhinoObject: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateToAngularDimension(self, dimension: AngularDimension, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToArc(self, arc: Arc, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToBrep(self, brep: Brep, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToCircle(self, circle: Circle, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid], attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: Guid, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToCurve(self, curve: Curve, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToEllipse(self, ellipse: Ellipse, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToExtrusion(self, extrusion: Extrusion, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToHatch(self, hatch: Hatch, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToInstanceReferenceGeometry(self, instanceReference: InstanceReferenceGeometry, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToLeader(self, leader: Leader, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToLine(self, from_: Point3d, to: Point3d, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToLinearDimension(self, dimension: LinearDimension, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToMesh(self, mesh: Mesh, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToPoint(self, point: Point3d, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToPointCloud(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToPointCloud(self, cloud: PointCloud, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToPolyline(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToRadialDimension(self, dimension: RadialDimension, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToSphere(self, sphere: Sphere, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToSubD(self, subD: SubD, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToSurface(self, surface: Surface, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToText(self, text: TextEntity, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification, attributes: ObjectAttributes) -> bool: ...
    @overload
    def UpdateToTextDot(self, dot: TextDot, attributes: ObjectAttributes) -> bool: ...


class RhinoAfterTransformObjectsEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def TransformEventId(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
class RhinoDeselectAllObjectsEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def ObjectCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
class RhinoModifyObjectAttributesEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def NewAttributes(self) -> ObjectAttributes: ...
    @property
    def OldAttributes(self) -> ObjectAttributes: ...
    @property
    def RhinoObject(self) -> RhinoObject: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class RhinoObject(ModelComponent):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromRuntimeSerialNumber(serialNumber: int) -> RhinoObject: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    @classmethod
    def NextRuntimeSerialNumber(cls) -> int: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    @staticmethod
    def GetFillSurfaces(rhinoObject: RhinoObject, clippingPlaneObjects: Iterable[ClippingPlaneObject]) -> Iterable[Brep]: ...
    @overload
    @staticmethod
    def GetFillSurfaces(rhinoObject: RhinoObject, clippingPlaneObject: ClippingPlaneObject) -> Iterable[Brep]: ...
    @overload
    @staticmethod
    def GetFillSurfaces(rhinoObject: RhinoObject, clippingPlaneObjects: Iterable[ClippingPlaneObject], unclippedFills: bool) -> Iterable[Brep]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    @staticmethod
    def GetTightBoundingBox(rhinoObjects: Iterable[RhinoObject]) -> Tuple[bool, BoundingBox]: ...
    @overload
    @staticmethod
    def GetTightBoundingBox(rhinoObjects: Iterable[RhinoObject], plane: Plane) -> Tuple[bool, BoundingBox]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    @staticmethod
    def MeshObjects(rhinoObjects: Iterable[RhinoObject], parameters: MeshingParameters) -> Tuple[Result, Iterable[Mesh], Iterable[ObjectAttributes]]: ...
    @overload
    @staticmethod
    def MeshObjects(rhinoObjects: Iterable[RhinoObject], parameters: MeshingParameters, useWorkerThread: bool) -> Tuple[Result, Iterable[Mesh], Iterable[ObjectAttributes]]: ...
    @overload
    @staticmethod
    def MeshObjects(rhinoObjects: Iterable[RhinoObject], parameters: MeshingParameters, simpleDialog: bool) -> Tuple[Result, MeshingParameters, bool, Iterable[Mesh], Iterable[ObjectAttributes]]: ...
    @overload
    @staticmethod
    def MeshObjects(rhinoObjects: Iterable[RhinoObject], parameters: MeshingParameters, uiStyle: int, xform: Transform) -> Tuple[Result, MeshingParameters, int, Iterable[Mesh], Iterable[ObjectAttributes]]: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
class RhinoObjectEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def TheObject(self) -> RhinoObject: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
class RhinoObjectSelectionEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def RhinoObjectCount(self) -> int: ...
    @property
    def RhinoObjects(self) -> Iterable[RhinoObject]: ...
    @property
    def Selected(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from Rhino import RhinoDoc
class RhinoReplaceObjectEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def NewRhinoObject(self) -> RhinoObject: ...
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def OldRhinoObject(self) -> RhinoObject: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class RhinoTransformObjectsEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def GripCount(self) -> int: ...
    @property
    def GripOwnerCount(self) -> int: ...
    @property
    def GripOwners(self) -> Iterable[RhinoObject]: ...
    @property
    def Grips(self) -> Iterable[GripObject]: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> Iterable[RhinoObject]: ...
    @property
    def ObjectsWillBeCopied(self) -> bool: ...
    @property
    def Transform(self) -> Transform: ...
    @property
    def TransformEventId(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ScaleFormat(Enum):
    # None = 0
    PageLengthToOne = 1
    OneToModelLength = 2
    OneInchToModelLengthFeet = 3
    ModelLengthInchToOneFoot = 4
    ModelLengthInchToOneFootInch = 5


class SectionBackgroundFillMode(Enum):
    # None = 0
    Viewport = 1
    SolidColor = 2


class SectionLabelStyle(Enum):
    # None = 0
    TextDotFromName = 1
    TextFromName = 2


from System import Guid
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SectionStyle(ModelComponent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: SectionStyle): ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BackgroundFillColor(self) -> Color: ...
    @property
    def BackgroundFillMode(self) -> SectionBackgroundFillMode: ...
    @property
    def BackgroundFillPrintColor(self) -> Color: ...
    @property
    def BoundaryColor(self) -> Color: ...
    @property
    def BoundaryPrintColor(self) -> Color: ...
    @property
    def BoundaryVisible(self) -> bool: ...
    @property
    def BoundaryWidthScale(self) -> float: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def HatchIndex(self) -> int: ...
    @property
    def HatchPatternColor(self) -> Color: ...
    @property
    def HatchPatternPrintColor(self) -> Color: ...
    @property
    def HatchRotationRadians(self) -> float: ...
    @property
    def HatchScale(self) -> float: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def SectionFillRule(self) -> ObjectSectionFillRule: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetBoundaryLinetype(self) -> Linetype: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def RemoveBoundaryLinetype(self) -> None: ...
    @BackgroundFillColor.setter
    def BackgroundFillColor(self, value: Color) -> None: ...
    @BackgroundFillMode.setter
    def BackgroundFillMode(self, value: SectionBackgroundFillMode) -> None: ...
    @BackgroundFillPrintColor.setter
    def BackgroundFillPrintColor(self, value: Color) -> None: ...
    @BoundaryColor.setter
    def BoundaryColor(self, value: Color) -> None: ...
    @BoundaryPrintColor.setter
    def BoundaryPrintColor(self, value: Color) -> None: ...
    @BoundaryVisible.setter
    def BoundaryVisible(self, value: bool) -> None: ...
    @BoundaryWidthScale.setter
    def BoundaryWidthScale(self, value: float) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @HatchIndex.setter
    def HatchIndex(self, value: int) -> None: ...
    @HatchPatternColor.setter
    def HatchPatternColor(self, value: Color) -> None: ...
    @HatchPatternPrintColor.setter
    def HatchPatternPrintColor(self, value: Color) -> None: ...
    @HatchRotationRadians.setter
    def HatchRotationRadians(self, value: float) -> None: ...
    @HatchScale.setter
    def HatchScale(self, value: float) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SectionFillRule.setter
    def SectionFillRule(self, value: ObjectSectionFillRule) -> None: ...
    @overload
    def SetBoundaryLinetype(self, linetype: Linetype) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class SelectionMethod(Enum):
    Other = 0
    MousePick = 1
    WindowBox = 2
    CrossingBox = 3


class StackDisplayFormat(Enum):
    # None = 0
    StackHorizontal = 1
    StackDiagonal = 2


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SubDObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SurfaceObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def DuplicateSurfaceGeometry(self) -> Surface: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def SurfaceGeometry(self) -> Surface: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class TextDisplayAlignment(Enum):
    Normal = 0
    Horizontal = 1
    AboveLine = 2
    InLine = 3


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class TextDotObject(RhinoObject):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class TextFit(Enum):
    Auto = 0
    TextInside = 1
    TextRight = 2
    TextLeft = 3
    TextHintRight = 4
    TextHintLeft = 5


class TextHorizontalAlignment(Enum):
    Left = 0
    Center = 1
    Right = 2
    Auto = 3


class TextLocation(Enum):
    AboveDimLine = 0
    InDimLine = 1
    BelowDimLine = 2


from System import Guid
from System import IConvertible
from Rhino import RhinoDoc
from .Custom import CustomObjectGrips
from .Gumball import GumballFrame
from .CustomRenderMeshes import Flags
from .CustomRenderMeshes import RenderMeshes
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class TextObject(AnnotationObjectBase):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def CommitChanges(self) -> bool: ...
    @overload
    def CopyHistoryOnReplace(self) -> bool: ...
    @overload
    def CreateMeshes(self, meshType: MeshType, parameters: MeshingParameters, ignoreCustomParameters: bool) -> int: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags, BoundingBox]: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Description(self, textLog: TextLog) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DuplicateGeometry(self) -> GeometryBase: ...
    @overload
    def EnableCustomGrips(self, customGrips: CustomObjectGrips) -> bool: ...
    @overload
    def EnableVisualAnalysisMode(self, mode: VisualAnalysisMode, enable: bool) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AnnotationGeometry(self) -> AnnotationBase: ...
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def DisplayText(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geometry(self) -> GeometryBase: ...
    @property
    def GripsOn(self) -> bool: ...
    @property
    def GripsSelected(self) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def HasDynamicTransform(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasMeasurableTextFields(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasSubobjectMaterials(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeletable(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsHidden(self) -> bool: ...
    @property
    def IsInstanceDefinitionGeometry(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsNormal(self) -> bool: ...
    @property
    def IsPictureFrame(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def ObjectType(self) -> ObjectType: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def SubobjectMaterialComponents(self) -> Iterable[ComponentIndex]: ...
    @property
    def TextGeometry(self) -> TextEntity: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def WorksessionReferenceSerialNumber(self) -> int: ...
    @overload
    def GetActiveVisualAnalysisModes(self) -> Iterable[VisualAnalysisMode]: ...
    @overload
    def GetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str) -> IConvertible: ...
    @overload
    def GetDynamicTransform(self) -> Tuple[bool, Transform]: ...
    @overload
    def GetGrips(self) -> Iterable[GripObject]: ...
    @overload
    def GetGroupList(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHighlightedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetMaterial(self, frontMaterial: bool) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> Material: ...
    @overload
    def GetMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> Material: ...
    @overload
    def GetMeshes(self, meshType: MeshType) -> Iterable[Mesh]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetRenderMaterial(self, frontMaterial: bool) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid) -> RenderMaterial: ...
    @overload
    def GetRenderMaterial(self, componentIndex: ComponentIndex, plugInId: Guid, attributes: ObjectAttributes) -> RenderMaterial: ...
    @overload
    def GetRenderMeshParameters(self) -> MeshingParameters: ...
    @overload
    def GetRenderMeshParameters(self, returnDocumentParametersIfUnset: bool) -> MeshingParameters: ...
    @overload
    def GetSelectedSubObjects(self) -> Iterable[ComponentIndex]: ...
    @overload
    def GetSubObjects(self) -> Iterable[RhinoObject]: ...
    @overload
    def GetTextCorners(self, viewport: RhinoViewport) -> Iterable[Point3d]: ...
    @overload
    def GetTextureChannels(self) -> Iterable[int]: ...
    @overload
    def GetTextureMapping(self, channel: int) -> TextureMapping: ...
    @overload
    def GetTextureMapping(self, channel: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def HasHistoryRecord(self) -> bool: ...
    @overload
    def HasTextureMapping(self) -> bool: ...
    @overload
    def Highlight(self, enable: bool) -> bool: ...
    @overload
    def HighlightSubObject(self, componentIndex: ComponentIndex, highlight: bool) -> bool: ...
    @overload
    def HistoryChildren(self) -> Iterable[Guid]: ...
    @overload
    def HistoryParents(self) -> Iterable[Guid]: ...
    @overload
    def InVisualAnalysisMode(self) -> bool: ...
    @overload
    def InVisualAnalysisMode(self, mode: VisualAnalysisMode) -> bool: ...
    @overload
    def IsActiveInViewport(self, viewport: RhinoViewport) -> bool: ...
    @overload
    def IsHighlighted(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsMeshable(self, meshType: MeshType) -> bool: ...
    @overload
    def IsSelectable(self) -> bool: ...
    @overload
    def IsSelectable(self, ignoreSelectionState: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> bool: ...
    @overload
    def IsSelected(self, checkSubObjects: bool) -> int: ...
    @overload
    def IsSubObjectHighlighted(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsSubObjectSelectable(self, componentIndex: ComponentIndex, ignoreSelectionState: bool) -> bool: ...
    @overload
    def IsSubObjectSelected(self, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def MemoryEstimate(self) -> int: ...
    @overload
    def MeshCount(self, meshType: MeshType, parameters: MeshingParameters) -> int: ...
    @overload
    def ObjectFrame(self) -> Plane: ...
    @overload
    def ObjectFrame(self, flags: ObjectFrameFlags) -> Plane: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, ancestry: MutableSequence[InstanceObject], flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def Select(self, on: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool) -> int: ...
    @overload
    def Select(self, on: bool, syncHighlight: bool, persistentSelect: bool, ignoreGripsState: bool, ignoreLayerLocking: bool, ignoreLayerVisibility: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool) -> int: ...
    @overload
    def SelectSubObject(self, componentIndex: ComponentIndex, select: bool, syncHighlight: bool, persistentSelect: bool) -> int: ...
    @Attributes.setter
    def Attributes(self, value: ObjectAttributes) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @GripsOn.setter
    def GripsOn(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @RenderMaterial.setter
    def RenderMaterial(self, value: RenderMaterial) -> None: ...
    @overload
    def SetCopyHistoryOnReplace(self, bCopy: bool) -> None: ...
    @overload
    def SetCustomRenderMeshParameter(self, providerId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def SetHistory(self, history: HistoryRecord) -> bool: ...
    @overload
    def SetObjectFrame(self, xform: Transform) -> None: ...
    @overload
    def SetObjectFrame(self, plane: Plane) -> None: ...
    @overload
    def SetRenderMeshParameters(self, mp: MeshingParameters) -> bool: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping) -> int: ...
    @overload
    def SetTextureMapping(self, channel: int, tm: TextureMapping, objectTransform: Transform) -> int: ...
    @overload
    def ShortDescription(self, plural: bool) -> str: ...
    @overload
    def ShortDescriptionWithClosedStatus(self, prepend: bool, plural: bool) -> Tuple[str, int]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetGumballFrame(self) -> Tuple[bool, GumballFrame]: ...
    @overload
    def UnhighlightAllSubObjects(self) -> int: ...
    @overload
    def UnselectAllSubObjects(self) -> int: ...


class TextOrientation(Enum):
    InPlane = 0
    InView = 1


from System import Guid
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class Texture(CommonObject):
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ApplyUvwTransform(self) -> bool: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileReference(self) -> FileReference: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MagFilter(self) -> TextureFilter: ...
    @property
    def MappingChannelId(self) -> int: ...
    @property
    def MinFilter(self) -> TextureFilter: ...
    @property
    def Offset(self) -> Vector2d: ...
    @property
    def ProjectionMode(self) -> TextureProjectionModes: ...
    @property
    def Repeat(self) -> Vector2d: ...
    @property
    def Rotation(self) -> float: ...
    @property
    def TextureCombineMode(self) -> TextureCombineMode: ...
    @property
    def TextureType(self) -> TextureType: ...
    @property
    def TreatAsLinear(self) -> bool: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UvwTransform(self) -> Transform: ...
    @property
    def WcsBoxProjected(self) -> bool: ...
    @property
    def WcsProjected(self) -> bool: ...
    @property
    def WrapU(self) -> TextureUvwWrapping: ...
    @property
    def WrapV(self) -> TextureUvwWrapping: ...
    @property
    def WrapW(self) -> TextureUvwWrapping: ...
    @overload
    def GetAlphaBlendValues(self) -> Tuple[float, float, float, float, float]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @ApplyUvwTransform.setter
    def ApplyUvwTransform(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
    @FileReference.setter
    def FileReference(self, value: FileReference) -> None: ...
    @MagFilter.setter
    def MagFilter(self, value: TextureFilter) -> None: ...
    @MinFilter.setter
    def MinFilter(self, value: TextureFilter) -> None: ...
    @Offset.setter
    def Offset(self, value: Vector2d) -> None: ...
    @ProjectionMode.setter
    def ProjectionMode(self, value: TextureProjectionModes) -> None: ...
    @Repeat.setter
    def Repeat(self, value: Vector2d) -> None: ...
    @Rotation.setter
    def Rotation(self, value: float) -> None: ...
    @TextureCombineMode.setter
    def TextureCombineMode(self, value: TextureCombineMode) -> None: ...
    @TextureType.setter
    def TextureType(self, value: TextureType) -> None: ...
    @TreatAsLinear.setter
    def TreatAsLinear(self, value: bool) -> None: ...
    @UvwTransform.setter
    def UvwTransform(self, value: Transform) -> None: ...
    @WrapU.setter
    def WrapU(self, value: TextureUvwWrapping) -> None: ...
    @WrapV.setter
    def WrapV(self, value: TextureUvwWrapping) -> None: ...
    @WrapW.setter
    def WrapW(self, value: TextureUvwWrapping) -> None: ...
    @overload
    def SetAlphaBlendValues(self, constant: float, a0: float, a1: float, a2: float, a3: float) -> None: ...
    @overload
    def SetRGBBlendValues(self, color: Color, a0: float, a1: float, a2: float, a3: float) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class TextureCombineMode(Enum):
    # None = 0
    Modulate = 1
    Decal = 2
    Blend = 3


class TextureFilter(Enum):
    Nearest = 0
    Linear = 1


class TextureProjectionModes(Enum):
    Undefined = 0
    MappingChannel = 1
    ScreenBased = 2
    Wcs = 3
    WcsBox = 4
    EnvironmentMapBox = 5
    EnvironmentMapLightProbe = 6
    EnvironmentMapSpherical = 7
    EnvironmentMapCube = 8
    EnvironmentMapVCrossCube = 9
    EnvironmentMapHCrossCube = 10
    EnvironmentMapHemispherical = 11
    EnvironmentMapEmap = 12
    SurfaceParameterization = 13


class TextureType(Enum):
    # None = 0
    Diffuse = 1
    Bitmap = 1
    PBR_BaseColor = 1
    Bump = 2
    Opacity = 3
    Transparency = 3
    PBR_Subsurface = 10
    PBR_SubsurfaceScattering = 11
    PBR_SubsurfaceScatteringRadius = 12
    PBR_Metallic = 13
    PBR_Specular = 14
    PBR_SpecularTint = 15
    PBR_Roughness = 16
    PBR_Anisotropic = 17
    PBR_Anisotropic_Rotation = 18
    PBR_Sheen = 19
    PBR_SheenTint = 20
    PBR_Clearcoat = 21
    PBR_ClearcoatRoughness = 22
    PBR_OpacityIor = 23
    PBR_OpacityRoughness = 24
    PBR_Emission = 25
    PBR_AmbientOcclusion = 26
    PBR_Displacement = 28
    PBR_ClearcoatBump = 29
    PBR_Alpha = 30
    Emap = 86


class TextureUvwWrapping(Enum):
    Repeat = 0
    Clamp = 1


class TextVerticalAlignment(Enum):
    Top = 0
    MiddleOfTop = 1
    BottomOfTop = 2
    Middle = 3
    MiddleOfBottom = 4
    Bottom = 5
    BottomOfBoundingBox = 6


class ToleranceDisplayFormat(Enum):
    # None = 0
    Symmetrical = 1
    Deviation = 2
    Limits = 3


from System import Guid
class ViewInfo:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rhinoViewPort: RhinoViewport): ...
    @overload
    def __init__(self, docRuntimeSerialNumber: int): ...
    @overload
    def ClippingPlaneSurfaces(self) -> Iterable[ClippingPlaneSurface]: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ClippingPlanesIds(self) -> Iterable[Guid]: ...
    @property
    def FocalBlurAperture(self) -> float: ...
    @property
    def FocalBlurDistance(self) -> float: ...
    @property
    def FocalBlurJitter(self) -> float: ...
    @property
    def FocalBlurMode(self) -> ViewInfoFocalBlurModes: ...
    @property
    def FocalBlurSampleCount(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamedViewId(self) -> Guid: ...
    @property
    def SectionBehavior(self) -> ViewSectionBehavior: ...
    @property
    def ShowWallpaperInGrayScale(self) -> bool: ...
    @property
    def Viewport(self) -> ViewportInfo: ...
    @property
    def WallpaperFilename(self) -> str: ...
    @property
    def WallpaperHidden(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @FocalBlurAperture.setter
    def FocalBlurAperture(self, value: float) -> None: ...
    @FocalBlurDistance.setter
    def FocalBlurDistance(self, value: float) -> None: ...
    @FocalBlurJitter.setter
    def FocalBlurJitter(self, value: float) -> None: ...
    @FocalBlurMode.setter
    def FocalBlurMode(self, value: ViewInfoFocalBlurModes) -> None: ...
    @FocalBlurSampleCount.setter
    def FocalBlurSampleCount(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @SectionBehavior.setter
    def SectionBehavior(self, value: ViewSectionBehavior) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ViewInfoFocalBlurModes(Enum):
    # None = 0
    Automatic = 1
    Manual = 2


from System import Guid
from .Custom import UserDataList
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ViewportInfo(CommonObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: ViewportInfo): ...
    @overload
    def __init__(self, rhinoViewport: RhinoViewport): ...
    @overload
    @staticmethod
    def CalculateCameraRotationAngle(direction: Vector3d, up: Vector3d) -> float: ...
    @overload
    @staticmethod
    def CalculateCameraUpDirection(location: Point3d, direction: Vector3d, angle: float) -> Vector3d: ...
    @overload
    def ChangeToParallelProjection(self, symmetricFrustum: bool) -> bool: ...
    @overload
    def ChangeToParallelReflectedProjection(self) -> bool: ...
    @overload
    def ChangeToPerspectiveProjection(self, targetDistance: float, symmetricFrustum: bool, lensLength: float) -> bool: ...
    @overload
    def ChangeToSymmetricFrustum(self, isLeftRightSymmetric: bool, isTopBottomSymmetric: bool, targetDistance: float) -> bool: ...
    @overload
    def ChangeToTwoPointPerspectiveProjection(self, targetDistance: float, up: Vector3d, lensLength: float) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DollyCamera(self, dollyVector: Vector3d) -> bool: ...
    @overload
    def DollyExtents(self, cameraCoordinateBoundingBox: BoundingBox, border: float) -> bool: ...
    @overload
    def DollyExtents(self, geometry: Iterable[GeometryBase], border: float) -> bool: ...
    @overload
    def DollyFrustum(self, dollyDistance: float) -> bool: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Extents(self, halfViewAngleRadians: float, bbox: BoundingBox) -> bool: ...
    @overload
    def Extents(self, halfViewAngleRadians: float, sphere: Sphere) -> bool: ...
    @overload
    def FrustumCenterPoint(self, targetDistance: float) -> Point3d: ...
    @property
    def Camera35mmLensLength(self) -> float: ...
    @property
    def CameraAngle(self) -> float: ...
    @property
    def CameraDirection(self) -> Vector3d: ...
    @property
    def CameraLocation(self) -> Point3d: ...
    @property
    def CameraUp(self) -> Vector3d: ...
    @property
    def CameraX(self) -> Vector3d: ...
    @property
    def CameraY(self) -> Vector3d: ...
    @property
    def CameraZ(self) -> Vector3d: ...
    @property
    @classmethod
    def DefaultCameraDirection(cls) -> Vector3d: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def FrustumAspect(self) -> float: ...
    @property
    def FrustumBottom(self) -> float: ...
    @property
    def FrustumBottomPlane(self) -> Plane: ...
    @property
    def FrustumCenter(self) -> Point3d: ...
    @property
    def FrustumFar(self) -> float: ...
    @property
    def FrustumFarPlane(self) -> Plane: ...
    @property
    def FrustumHeight(self) -> float: ...
    @property
    def FrustumLeft(self) -> float: ...
    @property
    def FrustumLeftPlane(self) -> Plane: ...
    @property
    def FrustumMaximumDiameter(self) -> float: ...
    @property
    def FrustumMinimumDiameter(self) -> float: ...
    @property
    def FrustumNear(self) -> float: ...
    @property
    def FrustumNearPlane(self) -> Plane: ...
    @property
    def FrustumRight(self) -> float: ...
    @property
    def FrustumRightPlane(self) -> Plane: ...
    @property
    def FrustumTop(self) -> float: ...
    @property
    def FrustumTopPlane(self) -> Plane: ...
    @property
    def FrustumWidth(self) -> float: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsCameraDirectionLocked(self) -> bool: ...
    @property
    def IsCameraLocationLocked(self) -> bool: ...
    @property
    def IsCameraUpLocked(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsFrustumLeftRightSymmetric(self) -> bool: ...
    @property
    def IsFrustumTopBottomSymmetric(self) -> bool: ...
    @property
    def IsParallelProjection(self) -> bool: ...
    @property
    def IsPerspectiveProjection(self) -> bool: ...
    @property
    def IsTwoPointPerspectiveProjection(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidCamera(self) -> bool: ...
    @property
    def IsValidFrustum(self) -> bool: ...
    @property
    def PerspectiveMinNearDist(self) -> float: ...
    @property
    def PerspectiveMinNearOverFar(self) -> float: ...
    @property
    def ScreenPort(self) -> Rectangle: ...
    @property
    def ScreenPortAspect(self) -> float: ...
    @property
    def TargetPoint(self) -> Point3d: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def ViewScale(self) -> SizeF: ...
    @overload
    def GetBoundingBoxDepth(self, bbox: BoundingBox) -> Tuple[bool, float, float]: ...
    @overload
    def GetCameraAngles(self) -> Tuple[bool, float, float, float]: ...
    @overload
    def GetCameraFrame(self) -> Tuple[bool, Point3d, Vector3d, Vector3d, Vector3d]: ...
    @overload
    def GetDollyCameraVector(self, screen0: Point, screen1: Point, projectionPlaneDistance: float) -> Vector3d: ...
    @overload
    def GetDollyCameraVector(self, screenX0: int, screenY0: int, screenX1: int, screenY1: int, projectionPlaneDistance: float) -> Vector3d: ...
    @overload
    def GetFarPlaneCorners(self) -> Iterable[Point3d]: ...
    @overload
    def GetFramePlaneCorners(self, depth: float) -> Iterable[Point3d]: ...
    @overload
    def GetFrustum(self) -> Tuple[bool, float, float, float, float, float, float]: ...
    @overload
    def GetFrustumLine(self, screenPoint: Point) -> Line: ...
    @overload
    def GetFrustumLine(self, screenPoint: PointF) -> Line: ...
    @overload
    def GetFrustumLine(self, screenX: float, screenY: float) -> Line: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNearPlaneCorners(self) -> Iterable[Point3d]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetPointDepth(self, point: Point3d) -> Tuple[bool, float]: ...
    @overload
    def GetScreenPort(self) -> Rectangle: ...
    @overload
    def GetScreenPort(self) -> Tuple[Rectangle, int, int]: ...
    @overload
    def GetScreenPortLocation(self) -> Tuple[int, int, int, int]: ...
    @overload
    def GetSphereDepth(self, sphere: Sphere) -> Tuple[bool, float, float]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetViewScale(self) -> Iterable[float]: ...
    @overload
    def GetWorldToScreenScale(self, pointInFrustum: Point3d) -> float: ...
    @overload
    def GetXform(self, sourceSystem: CoordinateSystem, destinationSystem: CoordinateSystem) -> Transform: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def RotateCamera(self, rotationAngleRadians: float, rotationAxis: Vector3d, rotationCenter: Point3d) -> bool: ...
    @Camera35mmLensLength.setter
    def Camera35mmLensLength(self, value: float) -> None: ...
    @CameraAngle.setter
    def CameraAngle(self, value: float) -> None: ...
    @FrustumAspect.setter
    def FrustumAspect(self, value: float) -> None: ...
    @IsCameraDirectionLocked.setter
    def IsCameraDirectionLocked(self, value: bool) -> None: ...
    @IsCameraLocationLocked.setter
    def IsCameraLocationLocked(self, value: bool) -> None: ...
    @IsCameraUpLocked.setter
    def IsCameraUpLocked(self, value: bool) -> None: ...
    @IsFrustumLeftRightSymmetric.setter
    def IsFrustumLeftRightSymmetric(self, value: bool) -> None: ...
    @IsFrustumTopBottomSymmetric.setter
    def IsFrustumTopBottomSymmetric(self, value: bool) -> None: ...
    @IsParallelProjection.setter
    def IsParallelProjection(self, value: bool) -> None: ...
    @IsPerspectiveProjection.setter
    def IsPerspectiveProjection(self, value: bool) -> None: ...
    @PerspectiveMinNearDist.setter
    def PerspectiveMinNearDist(self, value: float) -> None: ...
    @PerspectiveMinNearOverFar.setter
    def PerspectiveMinNearOverFar(self, value: float) -> None: ...
    @ScreenPort.setter
    def ScreenPort(self, value: Rectangle) -> None: ...
    @TargetPoint.setter
    def TargetPoint(self, value: Point3d) -> None: ...
    @ViewScale.setter
    def ViewScale(self, value: SizeF) -> None: ...
    @overload
    def SetCameraDirection(self, direction: Vector3d) -> bool: ...
    @overload
    def SetCameraLocation(self, location: Point3d) -> bool: ...
    @overload
    def SetCameraUp(self, up: Vector3d) -> bool: ...
    @overload
    def SetFrustum(self, left: float, right: float, bottom: float, top: float, nearDistance: float, farDistance: float) -> bool: ...
    @overload
    def SetFrustumNearFar(self, boundingBox: BoundingBox) -> bool: ...
    @overload
    def SetFrustumNearFar(self, center: Point3d, radius: float) -> bool: ...
    @overload
    def SetFrustumNearFar(self, nearDistance: float, farDistance: float) -> bool: ...
    @overload
    def SetFrustumNearFar(self, nearDistance: float, farDistance: float, minNearDistance: float, minNearOverFar: float, targetDistance: float) -> bool: ...
    @overload
    def SetScreenPort(self, windowRectangle: Rectangle) -> bool: ...
    @overload
    def SetScreenPort(self, windowRectangle: Rectangle, near: int, far: int) -> bool: ...
    @overload
    def SetScreenPort(self, left: int, right: int, bottom: int, top: int, near: int, far: int) -> bool: ...
    @overload
    def SetViewScale(self, scaleX: float, scaleY: float, scaleZ: float) -> None: ...
    @overload
    def TargetDistance(self, useFrustumCenterFallback: bool) -> float: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TransformCamera(self, xform: Transform) -> bool: ...
    @overload
    def UnlockCamera(self) -> None: ...
    @overload
    def UnlockFrustumSymmetry(self) -> None: ...
    @overload
    def ZoomToScreenRect(self, windowRectangle: Rectangle) -> bool: ...
    @overload
    def ZoomToScreenRect(self, left: int, top: int, right: int, bottom: int) -> bool: ...


class ViewSectionBehavior(Enum):
    ClipAndSection = 0
    SectionOnly = 1


from Rhino import RhinoDoc
class Worksession:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FileNameFromRuntimeSerialNumber(runtimeSerialNumber: int) -> str: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def FileName(self) -> str: ...
    @property
    def ModelCount(self) -> int: ...
    @property
    def ModelPaths(self) -> Iterable[str]: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ModelPathFromSerialNumber(self, modelSerialNumber: int) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ZeroSuppression(Enum):
    # None = 0
    SuppressLeading = 1
    SuppressTrailing = 2
    SuppressLeadingAndTrailing = 3
    SuppressZeroFeet = 4
    SuppressZeroInches = 8
    SuppressZeroFeetAndZeroInches = 12
