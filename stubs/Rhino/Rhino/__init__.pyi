from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

from . import ApplicationSettings
from . import Collections
from . import Commands
from . import Display
from . import DocObjects
from . import FileIO
from . import Geometry
from . import Input
from . import NodeInCode
from . import PlugIns
from . import Render
from . import Runtime
from . import UI

__all__ = ['ApplicationSettings', 'Collections', 'Commands', 'Display', 'DocObjects', 'FileIO', 'Geometry', 'Input', 'NodeInCode', 'PlugIns', 'Render', 'Runtime', 'UI']


class AngleUnitSystem(Enum):
    # None = 0
    Turns = 1
    Radians = 2
    Degrees = 3
    Minutes = 4
    Seconds = 5
    Gradians = 6
    Unset = 255


class AntialiasLevel(Enum):
    # None = 0
    Draft = 1
    Good = 2
    High = 3


from System.Drawing import Bitmap
from Rhino.FileIO import FileReference
class BitmapExtensions:
    @overload
    @staticmethod
    def BitmapAsTextureFileReference(bitmap: Bitmap, crc: int) -> FileReference: ...
    @overload
    @staticmethod
    def ConvertToNormalMap(bitmap: Bitmap, bLossyCompressionSource: bool) -> tuple[Bitmap, bool]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsNormalMap(bitmap: Bitmap, bLossyCompressionSource: bool) -> tuple[bool, bool]: ...
    @overload
    def ToString(self) -> str: ...


from System.Text import Encoding
from System import IFormatProvider
from System import Decimal
from System.Threading.Tasks import Task
from System.Runtime.Remoting import ObjRef
class CommandLineTextWriter:
    @overload
    def __init__(self): ...
    @overload
    def Close(self) -> None: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Flush(self) -> None: ...
    @overload
    def FlushAsync(self) -> Task: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def FormatProvider(self) -> IFormatProvider: ...
    @property
    def NewLine(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @NewLine.setter
    def NewLine(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def write(self, str: str) -> None: ...
    @overload
    def Write(self, value: float) -> None: ...
    @overload
    def Write(self, value: int) -> None: ...
    @overload
    def Write(self, value: int) -> None: ...
    @overload
    def Write(self, value: bool) -> None: ...
    @overload
    def Write(self, value: int) -> None: ...
    @overload
    def Write(self, buffer: Iterable[str]) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: int) -> None: ...
    @overload
    def Write(self, value: object) -> None: ...
    @overload
    def Write(self, value: Decimal) -> None: ...
    @overload
    def Write(self, value: float) -> None: ...
    @overload
    def Write(self, format: str, arg: Iterable[object]) -> None: ...
    @overload
    def Write(self, format: str, arg0: object) -> None: ...
    @overload
    def Write(self, format: str, arg0: object, arg1: object) -> None: ...
    @overload
    def Write(self, buffer: Iterable[str], index: int, count: int) -> None: ...
    @overload
    def Write(self, format: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    def WriteAsync(self, value: str) -> Task: ...
    @overload
    def WriteAsync(self, buffer: Iterable[str]) -> Task: ...
    @overload
    def WriteAsync(self, value: str) -> Task: ...
    @overload
    def WriteAsync(self, buffer: Iterable[str], index: int, count: int) -> Task: ...
    @overload
    def WriteLine(self) -> None: ...
    @overload
    def WriteLine(self, value: int) -> None: ...
    @overload
    def WriteLine(self, value: float) -> None: ...
    @overload
    def WriteLine(self, value: str) -> None: ...
    @overload
    def WriteLine(self, value: object) -> None: ...
    @overload
    def WriteLine(self, value: str) -> None: ...
    @overload
    def WriteLine(self, value: Decimal) -> None: ...
    @overload
    def WriteLine(self, buffer: Iterable[str]) -> None: ...
    @overload
    def WriteLine(self, value: bool) -> None: ...
    @overload
    def WriteLine(self, value: int) -> None: ...
    @overload
    def WriteLine(self, value: int) -> None: ...
    @overload
    def WriteLine(self, value: float) -> None: ...
    @overload
    def WriteLine(self, value: int) -> None: ...
    @overload
    def WriteLine(self, format: str, arg0: object) -> None: ...
    @overload
    def WriteLine(self, format: str, arg: Iterable[object]) -> None: ...
    @overload
    def WriteLine(self, buffer: Iterable[str], index: int, count: int) -> None: ...
    @overload
    def WriteLine(self, format: str, arg0: object, arg1: object) -> None: ...
    @overload
    def WriteLine(self, format: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    def WriteLineAsync(self) -> Task: ...
    @overload
    def WriteLineAsync(self, buffer: Iterable[str]) -> Task: ...
    @overload
    def WriteLineAsync(self, value: str) -> Task: ...
    @overload
    def WriteLineAsync(self, value: str) -> Task: ...
    @overload
    def WriteLineAsync(self, buffer: Iterable[str], index: int, count: int) -> Task: ...


class DisplayDeviceInfo:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def GpuDeviceInfos() -> MutableSequence[GpuDeviceInfo]: ...
    @overload
    @staticmethod
    def GpuNames() -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class DocumentEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def DocumentSerialNumber(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class DocumentOpenEventArgs(DocumentEventArgs):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def DocumentSerialNumber(self) -> int: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Merge(self) -> bool: ...
    @property
    def Reference(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class DocumentSaveEventArgs(DocumentEventArgs):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def DocumentSerialNumber(self) -> int: ...
    @property
    def ExportSelected(self) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GpuDeviceInfo:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DriverDateAsString(self) -> str: ...
    @property
    def Memory(self) -> int: ...
    @property
    def MemoryAsString(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Vendor(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...






class IndexPair:
    @overload
    def __init__(self, i: int, j: int): ...
    def __iter__(self) -> Iterator[int]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: int): ...
    @overload
    def Contains(self, item: int) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[int], arrayIndex: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def I(self) -> int: ...
    @property
    def J(self) -> int: ...
    @overload
    def GetEnumerator(self) -> Iterator[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: int) -> int: ...
    @I.setter
    def I(self, value: int) -> None: ...
    @property
    def Item(self) -> MutableSequence[int]: ...
    @J.setter
    def J(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class IRhinoDocObserver:
    @overload
    def ActiveRhinoDocChanged(self, e: RhinoDocObserverArgs) -> None: ...
    @overload
    def RhinoDocClosed(self, e: RhinoDocObserverArgs) -> None: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Reflection import MethodInfo
class KeyboardHookEvent:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, key: int, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, key: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Input import StringParserSettings
class LengthValue:
    @overload
    def ChangeLength(self, newLength: float) -> LengthValue: ...
    @overload
    def ChangeUnitSystem(self, newUnits: UnitSystem) -> LengthValue: ...
    @overload
    @staticmethod
    def Create(s: str, ps: StringParserSettings) -> tuple[LengthValue, bool]: ...
    @overload
    @staticmethod
    def Create(length: float, us: UnitSystem, format: StringFormat) -> LengthValue: ...
    @overload
    @staticmethod
    def Create(length: float, us: UnitSystem, format: StringFormat, localeId: int) -> LengthValue: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ContextAngleUnitSystem(self) -> AngleUnitSystem: ...
    @property
    def ContextLocaleId(self) -> int: ...
    @property
    def LengthString(self) -> str: ...
    @property
    def LengthStringFormat(self) -> StringFormat: ...
    @property
    def ParseSettings(self) -> StringParserSettings: ...
    @property
    def UnitSystem(self) -> UnitSystem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsUnset(self) -> bool: ...
    @overload
    def Length(self) -> float: ...
    @overload
    def Length(self, units: UnitSystem) -> float: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Point
from Rhino.Geometry import Point3d
from System.Drawing import Size
from System.Drawing import Rectangle
from System import DateTime
from System.Drawing import Color
from System import Guid
from System.Collections.Generic import ICollection
from System import EventHandler
class PersistentSettings:
    @overload
    def AddChild(self, key: str) -> PersistentSettings: ...
    @overload
    def ClearChangedFlag(self) -> None: ...
    @overload
    def ContainsChangedValues(self) -> bool: ...
    @overload
    def ContainsModifiedValues(self, allUserSettings: PersistentSettings) -> bool: ...
    @overload
    def DeleteChild(self, key: str) -> None: ...
    @overload
    def DeleteItem(self, key: str) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromPlugInId(pluginId: Guid) -> PersistentSettings: ...
    @property
    def ChildKeys(self) -> ICollection: ...
    @property
    def HiddenFromUserInterface(self) -> bool: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    @classmethod
    def RhinoAppSettings(cls) -> PersistentSettings: ...
    @property
    @classmethod
    def StringListRootKey(cls) -> str: ...
    @overload
    def GetBool(self, key: str) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool, legacyKeyList: Iterable[str]) -> bool: ...
    @overload
    def GetByte(self, key: str) -> int: ...
    @overload
    def GetByte(self, key: str, defaultValue: int) -> int: ...
    @overload
    def GetByte(self, key: str, defaultValue: int, legacyKeyList: Iterable[str]) -> int: ...
    @overload
    def GetChar(self, key: str) -> str: ...
    @overload
    def GetChar(self, key: str, defaultValue: str) -> str: ...
    @overload
    def GetChar(self, key: str, defaultValue: str, legacyKeyList: Iterable[str]) -> str: ...
    @overload
    def GetChild(self, key: str) -> PersistentSettings: ...
    @overload
    def GetColor(self, key: str) -> Color: ...
    @overload
    def GetColor(self, key: str, defaultValue: Color | None) -> Color | None: ...
    @overload
    def GetColor(self, key: str, defaultValue: Color) -> Color: ...
    @overload
    def GetColor(self, key: str, defaultValue: Color | None, legacyKeyList: Iterable[str]) -> Color | None: ...
    @overload
    def GetColor(self, key: str, defaultValue: Color, legacyKeyList: Iterable[str]) -> Color: ...
    @overload
    def GetDate(self, key: str) -> DateTime: ...
    @overload
    def GetDate(self, key: str, defaultValue: DateTime) -> DateTime: ...
    @overload
    def GetDate(self, key: str, defaultValue: DateTime, legacyKeyList: Iterable[str]) -> DateTime: ...
    @overload
    def GetDouble(self, key: str) -> float: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float) -> float: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float, legacyKeyList: Iterable[str]) -> float: ...
    @overload
    def GetEnumValue(self, key: str) -> T: ...
    @overload
    def GetEnumValue(self, defaultValue: T) -> T: ...
    @overload
    def GetEnumValue(self, key: str, defaultValue: T) -> T: ...
    @overload
    def GetGuid(self, key: str) -> Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: Guid) -> Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: Guid, legacyKeyList: Iterable[str]) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInteger(self, key: str) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, legacyKeyList: Iterable[str]) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, lowerBound: int, upperBound: int) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, bound: int, boundIsLower: bool) -> int: ...
    @overload
    def GetPoint(self, key: str) -> Point: ...
    @overload
    def GetPoint(self, key: str, defaultValue: Point) -> Point: ...
    @overload
    def GetPoint(self, key: str, defaultValue: Point, legacyKeyList: Iterable[str]) -> Point: ...
    @overload
    def GetPoint3d(self, key: str) -> Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Point3d) -> Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Point3d, legacyKeyList: Iterable[str]) -> Point3d: ...
    @overload
    def GetRectangle(self, key: str) -> Rectangle: ...
    @overload
    def GetRectangle(self, key: str, defaultValue: Rectangle) -> Rectangle: ...
    @overload
    def GetRectangle(self, key: str, defaultValue: Rectangle, legacyKeyList: Iterable[str]) -> Rectangle: ...
    @overload
    def GetSettingIsHiddenFromUserInterface(self, key: str) -> bool: ...
    @overload
    def GetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Iterable[str]) -> bool: ...
    @overload
    def GetSettingIsReadOnly(self, key: str) -> bool: ...
    @overload
    def GetSettingType(self, key: str) -> type: ...
    @overload
    def GetSize(self, key: str) -> Size: ...
    @overload
    def GetSize(self, key: str, defaultValue: Size) -> Size: ...
    @overload
    def GetSize(self, key: str, defaultValue: Size, legacyKeyList: Iterable[str]) -> Size: ...
    @overload
    def GetString(self, key: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str, legacyKeyList: Iterable[str]) -> str: ...
    @overload
    def GetStringDictionary(self, key: str) -> Iterable[KeyValuePair]: ...
    @overload
    def GetStringDictionary(self, key: str, defaultValue: Iterable[KeyValuePair]) -> Iterable[KeyValuePair]: ...
    @overload
    def GetStringDictionary(self, key: str, defaultValue: Iterable[KeyValuePair], legacyKeyList: Iterable[str]) -> Iterable[KeyValuePair]: ...
    @overload
    def GetStringList(self, key: str) -> Iterable[str]: ...
    @overload
    def GetStringList(self, key: str, defaultValue: Iterable[str]) -> Iterable[str]: ...
    @overload
    def GetStringList(self, key: str, defaultValue: Iterable[str], legacyKeyList: Iterable[str]) -> Iterable[str]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUnsignedInteger(self, key: str) -> int: ...
    @overload
    def GetUnsignedInteger(self, key: str, defaultValue: int) -> int: ...
    @overload
    def GetUnsignedInteger(self, key: str, defaultValue: int, legacyKeyList: Iterable[str]) -> int: ...
    @overload
    def GetValidator(self, key: str) -> EventHandler: ...
    @overload
    def HideSettingFromUserInterface(self, key: str) -> None: ...
    @overload
    def RegisterSettingsValidator(self, key: str, validator: EventHandler) -> None: ...
    @HiddenFromUserInterface.setter
    def HiddenFromUserInterface(self, value: bool) -> None: ...
    @overload
    def SetBool(self, key: str, value: bool) -> None: ...
    @overload
    def SetByte(self, key: str, value: int) -> None: ...
    @overload
    def SetChar(self, key: str, value: str) -> None: ...
    @overload
    def SetColor(self, key: str, value: Color) -> None: ...
    @overload
    def SetColor(self, key: str, value: Color | None) -> None: ...
    @overload
    def SetDate(self, key: str, value: DateTime) -> None: ...
    @overload
    def SetDefault(self, key: str, value: int) -> None: ...
    @overload
    def SetDefault(self, key: str, value: float) -> None: ...
    @overload
    def SetDefault(self, key: str, value: str) -> None: ...
    @overload
    def SetDefault(self, key: str, value: int) -> None: ...
    @overload
    def SetDefault(self, key: str, value: bool) -> None: ...
    @overload
    def SetDefault(self, key: str, value: str) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Iterable[KeyValuePair]) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Iterable[str]) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Color) -> None: ...
    @overload
    def SetDefault(self, key: str, value: DateTime) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Color | None) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Rectangle) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Size) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Point) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Point3d) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Guid) -> None: ...
    @overload
    def SetDouble(self, key: str, value: float) -> None: ...
    @overload
    def SetEnumValue(self, enumValue: T) -> None: ...
    @overload
    def SetEnumValue(self, key: str, value: T) -> None: ...
    @overload
    def SetGuid(self, key: str, value: Guid) -> None: ...
    @overload
    def SetInteger(self, key: str, value: int) -> None: ...
    @overload
    def SetPoint(self, key: str, value: Point) -> None: ...
    @overload
    def SetPoint3d(self, key: str, value: Point3d) -> None: ...
    @overload
    def SetRectangle(self, key: str, value: Rectangle) -> None: ...
    @overload
    def SetSize(self, key: str, value: Size) -> None: ...
    @overload
    def SetString(self, key: str, value: str) -> None: ...
    @overload
    def SetStringDictionary(self, key: str, value: Iterable[KeyValuePair]) -> None: ...
    @overload
    def SetStringList(self, key: str, value: Iterable[str]) -> None: ...
    @overload
    def SetUnsignedInteger(self, key: str, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetBool(self, key: str) -> tuple[bool, bool]: ...
    @overload
    def TryGetBool(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, bool]: ...
    @overload
    def TryGetByte(self, key: str) -> tuple[bool, int]: ...
    @overload
    def TryGetByte(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, int]: ...
    @overload
    def TryGetChar(self, key: str) -> tuple[bool, str]: ...
    @overload
    def TryGetChar(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, str]: ...
    @overload
    def TryGetChild(self, key: str) -> tuple[bool, PersistentSettings]: ...
    @overload
    def TryGetColor(self, key: str) -> tuple[bool, None]: ...
    @overload
    def TryGetColor(self, key: str) -> tuple[bool, Color]: ...
    @overload
    def TryGetColor(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, None]: ...
    @overload
    def TryGetColor(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, Color]: ...
    @overload
    def TryGetDate(self, key: str) -> tuple[bool, DateTime]: ...
    @overload
    def TryGetDate(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, DateTime]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, int]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, Point3d]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, Size]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, DateTime]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, Iterable[str]]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, Rectangle]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, str]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, str]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, Color]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, bool]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, int]: ...
    @overload
    def TryGetDefault(self, key: str) -> tuple[bool, float]: ...
    @overload
    def TryGetDouble(self, key: str) -> tuple[bool, float]: ...
    @overload
    def TryGetDouble(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, float]: ...
    @overload
    def TryGetEnumValue(self, key: str) -> tuple[bool, T]: ...
    @overload
    def TryGetGuid(self, key: str) -> tuple[bool, Guid]: ...
    @overload
    def TryGetGuid(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, Guid]: ...
    @overload
    def TryGetInteger(self, key: str) -> tuple[bool, int]: ...
    @overload
    def TryGetInteger(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, int]: ...
    @overload
    def TryGetPoint(self, key: str) -> tuple[bool, Point]: ...
    @overload
    def TryGetPoint(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, Point]: ...
    @overload
    def TryGetPoint3d(self, key: str) -> tuple[bool, Point3d]: ...
    @overload
    def TryGetPoint3d(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, Point3d]: ...
    @overload
    def TryGetRectangle(self, key: str) -> tuple[bool, Rectangle]: ...
    @overload
    def TryGetRectangle(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, Rectangle]: ...
    @overload
    def TryGetSettingIsHiddenFromUserInterface(self, key: str) -> tuple[bool, bool]: ...
    @overload
    def TryGetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, bool]: ...
    @overload
    def TryGetSettingIsReadOnly(self, key: str) -> tuple[bool, bool]: ...
    @overload
    def TryGetSettingType(self, key: str) -> tuple[bool, type]: ...
    @overload
    def TryGetSize(self, key: str) -> tuple[bool, Size]: ...
    @overload
    def TryGetSize(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, Size]: ...
    @overload
    def TryGetString(self, key: str) -> tuple[bool, str]: ...
    @overload
    def TryGetString(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, str]: ...
    @overload
    def TryGetStringDictionary(self, key: str) -> tuple[bool, Iterable[KeyValuePair]]: ...
    @overload
    def TryGetStringDictionary(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, Iterable[KeyValuePair]]: ...
    @overload
    def TryGetStringList(self, key: str) -> tuple[bool, Iterable[str]]: ...
    @overload
    def TryGetStringList(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, Iterable[str]]: ...
    @overload
    def TryGetUnsignedInteger(self, key: str) -> tuple[bool, int]: ...
    @overload
    def TryGetUnsignedInteger(self, key: str, legacyKeyList: Iterable[str]) -> tuple[bool, int]: ...


class PersistentSettingsConverter:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsStringDictionary(s: str) -> bool: ...
    @overload
    @staticmethod
    def IsStringList(s: str) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def ToString(values: Iterable[str]) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Iterable[KeyValuePair]) -> str: ...
    @overload
    @staticmethod
    def ToString(value: float) -> str: ...
    @overload
    @staticmethod
    def TryParseDouble(s: str) -> tuple[bool, float]: ...
    @overload
    @staticmethod
    def TryParseEnum(type: type, intValueAsString: str) -> tuple[bool, str]: ...
    @overload
    @staticmethod
    def TryParseEnum(type: type, enumValueName: str) -> tuple[bool, int]: ...
    @overload
    @staticmethod
    def TryParseStringDictionary(s: str) -> tuple[bool, Iterable[KeyValuePair]]: ...
    @overload
    @staticmethod
    def TryParseStringList(s: str) -> tuple[bool, Iterable[str]]: ...


class PersistentSettingsEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Cancel(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...




class PersistentSettingsSavedEventArgs:
    @overload
    def CommandSettings(self, englishCommandName: str) -> PersistentSettings: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def PlugInSettings(self) -> PersistentSettings: ...
    @property
    def SavedByThisRhino(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ReadFileResult(Enum):
    Unset = 0
    Completed = 1
    CompletedWithErrors = 2
    Failed = 3


class RenderContentTableEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> RenderContentTableEventType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class RenderContentTableEventType(Enum):
    Loaded = 0
    Clearing = 1
    Cleared = 2
    MaterialAssignmentChanged = 3


from System import Guid
class RenderMaterialAssignmentChangedEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> RenderContentTableEventType: ...
    @property
    def IsLayer(self) -> bool: ...
    @property
    def IsObject(self) -> bool: ...
    @property
    def LayerId(self) -> Guid: ...
    @property
    def NewRenderMaterial(self) -> Guid: ...
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def OldRenderMaterial(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import EventHandler
from Rhino.UI import ToolbarFileCollection
from Rhino.DocObjects import Font
from Rhino.DocObjects import RhinoObject
from Rhino.DocObjects import InstanceObject
from System import DateTime
from System import Version
from Rhino.ApplicationSettings import LicenseNode
from Rhino.ApplicationSettings import Installation
from System.IO import DirectoryInfo
from System import Guid
from Rhino.Commands import Result
from System import Delegate
from System import Action
from System import IntPtr
from System.Windows.Forms import IWin32Window
from System.Drawing import Image
class RhinoApp:
    @overload
    @staticmethod
    def add_AppSettingsChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Closing(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_EscapeKeyPressed(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Idle(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Initialized(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_KeyboardEvent(value: KeyboardHookEvent) -> None: ...
    @overload
    @staticmethod
    def add_LicenseStateChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_MainLoop(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RdkCacheImageChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RdkGlobalSettingsChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RdkNewDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RdkPlugInUnloading(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RdkUpdateAllPreviews(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RendererChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def AskUserForRhinoLicense(standAlone: bool, parentWindow: object) -> bool: ...
    @overload
    @staticmethod
    def CapturedCommandWindowStrings(clearBuffer: bool) -> Iterable[str]: ...
    @overload
    @staticmethod
    def ChangeLicenseKey(pluginId: Guid) -> bool: ...
    @overload
    @staticmethod
    def ClearCommandHistoryWindow() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def ExecuteCommand(document: RhinoDoc, commandName: str) -> Result: ...
    @overload
    @staticmethod
    def Exit() -> None: ...
    @overload
    @staticmethod
    def Exit(allowCancel: bool) -> None: ...
    @property
    @classmethod
    def BuildDate(cls) -> DateTime: ...
    @property
    @classmethod
    def CanSave(cls) -> bool: ...
    @property
    @classmethod
    def CheckNewObject(cls) -> bool: ...
    @property
    @classmethod
    def CommandHistoryWindowText(cls) -> str: ...
    @property
    @classmethod
    def CommandLineOut(cls) -> CommandLineTextWriter: ...
    @property
    @classmethod
    def CommandPrompt(cls) -> str: ...
    @property
    @classmethod
    def CommandWindowCaptureEnabled(cls) -> bool: ...
    @property
    @classmethod
    def CurrentRhinoId(cls) -> Guid: ...
    @property
    @classmethod
    def DaysUntilExpiration(cls) -> int: ...
    @property
    @classmethod
    def DefaultUiFont(cls) -> Font: ...
    @property
    @classmethod
    def ExeServiceRelease(cls) -> int: ...
    @property
    @classmethod
    def ExeVersion(cls) -> int: ...
    @property
    @classmethod
    def InCommand(cls) -> int: ...
    @property
    @classmethod
    def InstallationType(cls) -> Installation: ...
    @property
    @classmethod
    def InstallationTypeString(cls) -> str: ...
    @property
    @classmethod
    def InvokeRequired(cls) -> bool: ...
    @property
    @classmethod
    def IsClosing(cls) -> bool: ...
    @property
    @classmethod
    def IsCloudZooNode(cls) -> bool: ...
    @property
    @classmethod
    def IsExiting(cls) -> bool: ...
    @property
    @classmethod
    def IsInternetAccessAllowed(cls) -> bool: ...
    @property
    @classmethod
    def IsLicenseValidated(cls) -> bool: ...
    @property
    @classmethod
    def IsOnMainThread(cls) -> bool: ...
    @property
    @classmethod
    def IsParentDesktop(cls) -> bool: ...
    @property
    @classmethod
    def IsPreRelease(cls) -> bool: ...
    @property
    @classmethod
    def IsRunningAutomated(cls) -> bool: ...
    @property
    @classmethod
    def IsRunningHeadless(cls) -> bool: ...
    @property
    @classmethod
    def IsSafeModeEnabled(cls) -> bool: ...
    @property
    @classmethod
    def IsSkinned(cls) -> bool: ...
    @property
    @classmethod
    def LicenseExpires(cls) -> bool: ...
    @property
    @classmethod
    def LicenseUserName(cls) -> str: ...
    @property
    @classmethod
    def LicenseUserOrganization(cls) -> str: ...
    @property
    @classmethod
    def LoggedInUserAvatar(cls) -> Image: ...
    @property
    @classmethod
    def LoggedInUserName(cls) -> str: ...
    @property
    @classmethod
    def MainApplicationWindow(cls) -> RhinoWindow: ...
    @property
    @classmethod
    def Name(cls) -> str: ...
    @property
    @classmethod
    def NodeType(cls) -> LicenseNode: ...
    @property
    @classmethod
    def Rhino2Id(cls) -> Guid: ...
    @property
    @classmethod
    def Rhino3Id(cls) -> Guid: ...
    @property
    @classmethod
    def Rhino4Id(cls) -> Guid: ...
    @property
    @classmethod
    def Rhino5Id(cls) -> Guid: ...
    @property
    @classmethod
    def Rhino6Id(cls) -> Guid: ...
    @property
    @classmethod
    def Rhino7Id(cls) -> Guid: ...
    @property
    @classmethod
    def SchemeName(cls) -> str: ...
    @property
    @classmethod
    def SdkServiceRelease(cls) -> int: ...
    @property
    @classmethod
    def SdkVersion(cls) -> int: ...
    @property
    @classmethod
    def SendWriteToConsole(cls) -> bool: ...
    @property
    @classmethod
    def SerialNumber(cls) -> str: ...
    @property
    @classmethod
    def ToolbarFiles(cls) -> ToolbarFileCollection: ...
    @property
    @classmethod
    def UpdatesAndStatisticsStatus(cls) -> int: ...
    @property
    @classmethod
    def UserIsLoggedIn(cls) -> bool: ...
    @property
    @classmethod
    def ValidationGracePeriodDaysLeft(cls) -> int: ...
    @property
    @classmethod
    def Version(cls) -> Version: ...
    @property
    @classmethod
    def VersionControlRevision(cls) -> str: ...
    @overload
    @staticmethod
    def GetDataDirectory(localUser: bool, forceDirectoryCreation: bool) -> str: ...
    @overload
    @staticmethod
    def GetDataDirectory(localUser: bool, forceDirectoryCreation: bool, subDirectory: str) -> str: ...
    @overload
    @staticmethod
    def GetExecutableDirectory() -> DirectoryInfo: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetPlugInObject(plugin: str) -> object: ...
    @overload
    @staticmethod
    def GetPlugInObject(pluginId: Guid) -> object: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def InFullScreen() -> bool: ...
    @overload
    @staticmethod
    def InvokeAndWait(action: Action) -> None: ...
    @overload
    @staticmethod
    def InvokeOnUiThread(method: Delegate, args: Iterable[object]) -> None: ...
    @overload
    @staticmethod
    def IsInstallationBeta(licenseType: Installation) -> bool: ...
    @overload
    @staticmethod
    def IsInstallationCommercial(licenseType: Installation) -> bool: ...
    @overload
    @staticmethod
    def IsInstallationEvaluation(licenseType: Installation) -> bool: ...
    @overload
    @staticmethod
    def LoginToCloudZoo() -> bool: ...
    @overload
    @staticmethod
    def MainWindowHandle() -> IntPtr: ...
    @overload
    @staticmethod
    def OutputDebugString(str: str) -> None: ...
    @overload
    @staticmethod
    def ParseTextField(formula: str, obj: RhinoObject, topParentObject: RhinoObject) -> str: ...
    @overload
    @staticmethod
    def ParseTextField(formula: str, obj: RhinoObject, topParentObject: RhinoObject, immediateParent: InstanceObject) -> str: ...
    @overload
    @staticmethod
    def PostCancelEvent(runtimeDocSerialNumber: int) -> None: ...
    @overload
    @staticmethod
    def PostEnterEvent(runtimeDocSerialNumber: int, bRepeatedEnter: bool) -> None: ...
    @overload
    @staticmethod
    def RefreshRhinoLicense() -> bool: ...
    @overload
    @staticmethod
    def ReleaseMouseCapture() -> bool: ...
    @overload
    @staticmethod
    def remove_AppSettingsChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Closing(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_EscapeKeyPressed(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Idle(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Initialized(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_KeyboardEvent(value: KeyboardHookEvent) -> None: ...
    @overload
    @staticmethod
    def remove_LicenseStateChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_MainLoop(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RdkCacheImageChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RdkGlobalSettingsChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RdkNewDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RdkPlugInUnloading(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RdkUpdateAllPreviews(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RendererChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def RunMenuScript(script: str) -> bool: ...
    @overload
    @staticmethod
    def RunningInRdp() -> bool: ...
    @overload
    @staticmethod
    def RunningOnVMWare() -> bool: ...
    @overload
    @staticmethod
    def RunScript(script: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(documentSerialNumber: int, script: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(script: str, mruDisplayString: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(documentSerialNumber: int, script: str, mruDisplayString: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def SendKeystrokes(characters: str, appendReturn: bool) -> None: ...
    @CheckNewObject.setter
    @classmethod
    def CheckNewObject(clsvalue: bool) -> None: ...
    @CommandPrompt.setter
    @classmethod
    def CommandPrompt(clsvalue: str) -> None: ...
    @CommandWindowCaptureEnabled.setter
    @classmethod
    def CommandWindowCaptureEnabled(clsvalue: bool) -> None: ...
    @SendWriteToConsole.setter
    @classmethod
    def SendWriteToConsole(clsvalue: bool) -> None: ...
    @overload
    @staticmethod
    def SetCommandPrompt(prompt: str) -> None: ...
    @overload
    @staticmethod
    def SetCommandPrompt(prompt: str, promptDefault: str) -> None: ...
    @overload
    @staticmethod
    def SetCommandPromptMessage(prompt: str) -> None: ...
    @overload
    @staticmethod
    def SetFocusToMainWindow() -> None: ...
    @overload
    @staticmethod
    def SetFocusToMainWindow(doc: RhinoDoc) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Wait() -> None: ...
    @overload
    @staticmethod
    def Write(message: str) -> None: ...
    @overload
    @staticmethod
    def Write(format: str, arg0: object) -> None: ...
    @overload
    @staticmethod
    def Write(format: str, arg0: object, arg1: object) -> None: ...
    @overload
    @staticmethod
    def Write(format: str, arg0: object, arg1: object, arg2: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine() -> None: ...
    @overload
    @staticmethod
    def WriteLine(message: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format: str, arg0: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format: str, arg0: object, arg1: object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format: str, arg0: object, arg1: object, arg2: object) -> None: ...


from System import EventHandler
from Rhino.DocObjects.Tables import ViewTable
from Rhino.DocObjects.Tables import ObjectTable
from Rhino.FileIO import ManifestTable
from Rhino.DocObjects import ObjectAttributes
from Rhino.DocObjects.Tables import BitmapTable
from Rhino.DocObjects.Tables import MaterialTable
from Rhino.DocObjects.Tables import LinetypeTable
from Rhino.DocObjects.Tables import LayerTable
from Rhino.DocObjects.Tables import GroupTable
from Rhino.DocObjects.Tables import FontTable
from Rhino.DocObjects.Tables import DimStyleTable
from Rhino.DocObjects.Tables import LightTable
from Rhino.DocObjects.Tables import HatchPatternTable
from Rhino.DocObjects.Tables import InstanceDefinitionTable
from Rhino.DocObjects.Tables import NamedConstructionPlaneTable
from Rhino.DocObjects.Tables import NamedViewTable
from Rhino.DocObjects.Tables import StringTable
from Rhino.DocObjects.Tables import RuntimeDocumentDataTable
from Rhino.DocObjects.Tables import NamedPositionTable
from Rhino.DocObjects.Tables import SnapshotTable
from Rhino.DocObjects.Tables import NamedLayerStateTable
from Rhino.Render import RenderMaterialTable
from Rhino.Render import RenderEnvironmentTable
from Rhino.Render import RenderTextureTable
from Rhino.Render import ICurrentEnvironment
from Rhino.Render.PostEffects import IPostEffects
from Rhino.DocObjects import ViewportInfo
from System import Guid
from Rhino.Geometry import MeshType
from Rhino.Render.CustomRenderMeshes import Flags
from Rhino.PlugIns import PlugIn
from Rhino.Display import DisplayPipelineAttributes
from Rhino.Geometry import BoundingBox
from Rhino.Render import GroundPlane
from Rhino.FileIO import TextLog
from System.Drawing import Bitmap
from Rhino.Render import RenderContentCollection
from Rhino.Render import RenderPrimitiveList
from Rhino.FileIO import FileReadOptions
from Rhino.Collections import ArchivableDictionary
from Rhino.FileIO import FileWriteOptions
from System import DateTime
from Rhino.Geometry import Plane
from Rhino.Geometry import Point3d
from Rhino.Geometry import SubDComponentLocation
from Rhino.DocObjects import ConstructionPlaneGridDefaults
from Rhino.DocObjects import ActiveSpace
from Rhino.DocObjects import EarthAnchorPoint
from Rhino.Render import RenderSettings
from Rhino.DocObjects import AnimationProperties
from Rhino.Geometry import MeshingParameterStyle
from Rhino.Geometry import MeshingParameters
from Rhino.DocObjects import Worksession
class RhinoDoc:
    @overload
    @staticmethod
    def add_ActiveDocumentChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_AddRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_AfterTransformObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_BeforeTransformObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_BeginOpenDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_BeginSaveDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_CloseDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DeleteRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DeselectAllObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DeselectObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DimensionStyleTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DocumentPropertiesChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_EndOpenDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_EndOpenDocumentInitialiViewUpdate(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_EndOpenDocumentInitialViewUpdate(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_EndSaveDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_GroupTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_HatchPatternTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_InstanceDefinitionTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_LayerTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_LightTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_LinetypeTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_MaterialTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ModifyObjectAttributes(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_NewDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_PurgeRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RenderEnvironmentTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RenderMaterialsTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_RenderTextureTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ReplaceRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_SelectObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_TextureMappingEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_UndeleteRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_UnitsChangedWithScaling(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_UserStringChanged(value: EventHandler) -> None: ...
    @overload
    def AddCustomUndoEvent(self, description: str, handler: EventHandler) -> bool: ...
    @overload
    def AddCustomUndoEvent(self, description: str, handler: EventHandler, tag: object) -> bool: ...
    @overload
    def AdjustModelUnitSystem(self, newUnitSystem: UnitSystem, scale: bool) -> None: ...
    @overload
    def AdjustPageUnitSystem(self, newUnitSystem: UnitSystem, scale: bool) -> None: ...
    @overload
    def Audit(self, textLog: TextLog, attemptRepair: bool) -> bool: ...
    @overload
    def BeginUndoRecord(self, description: str) -> int: ...
    @overload
    def ClearRedoRecords(self) -> None: ...
    @overload
    def ClearUndoRecords(self, purgeDeletedObjects: bool) -> None: ...
    @overload
    def ClearUndoRecords(self, undoSerialNumber: int, purgeDeletedObjects: bool) -> None: ...
    @overload
    @staticmethod
    def Create(modelTemplateFileName: str) -> RhinoDoc: ...
    @overload
    def CreateDefaultAttributes(self) -> ObjectAttributes: ...
    @overload
    @staticmethod
    def CreateHeadless(file3dmTemplatePath: str) -> RhinoDoc: ...
    @overload
    def CustomRenderMeshesBoundingBox(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> tuple[bool, Flags, BoundingBox]: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndUndoRecord(self, undoRecordSerialNumber: int) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Export(self, filePath: str) -> bool: ...
    @overload
    def Export(self, filePath: str, options: ArchivableDictionary) -> bool: ...
    @overload
    def ExportSelected(self, filePath: str) -> bool: ...
    @overload
    def ExportSelected(self, filePath: str, options: ArchivableDictionary) -> bool: ...
    @overload
    @staticmethod
    def ExtractPreviewImage(path: str) -> Bitmap: ...
    @overload
    def FindFile(self, filename: str) -> str: ...
    @overload
    def FormatNumber(self, value: float) -> str: ...
    @overload
    def FormatNumber(self, value: float, appendUnitSystemName: bool, abbreviate: bool) -> str: ...
    @overload
    @staticmethod
    def FromFilePath(filePath: str) -> RhinoDoc: ...
    @overload
    @staticmethod
    def FromRuntimeSerialNumber(serialNumber: int) -> RhinoDoc: ...
    @property
    def ActiveCommandId(self) -> Guid: ...
    @property
    @classmethod
    def ActiveDoc(cls) -> RhinoDoc: ...
    @property
    def ActiveSpace(self) -> ActiveSpace: ...
    @property
    def AnimationProperties(self) -> AnimationProperties: ...
    @property
    def Bitmaps(self) -> BitmapTable: ...
    @property
    def CurrentEnvironment(self) -> ICurrentEnvironment: ...
    @property
    def CurrentUndoRecordSerialNumber(self) -> int: ...
    @property
    def CustomRenderSizes(self) -> MutableSequence[Size]: ...
    @property
    def DateCreated(self) -> DateTime: ...
    @property
    def DateLastEdited(self) -> DateTime: ...
    @property
    def DimStyles(self) -> DimStyleTable: ...
    @property
    def DistanceDisplayPrecision(self) -> int: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def EarthAnchorPoint(self) -> EarthAnchorPoint: ...
    @property
    def Fonts(self) -> FontTable: ...
    @property
    def GroundPlane(self) -> GroundPlane: ...
    @property
    def Groups(self) -> GroupTable: ...
    @property
    def HatchPatterns(self) -> HatchPatternTable: ...
    @property
    def InGetPoint(self) -> bool: ...
    @property
    def InstanceDefinitions(self) -> InstanceDefinitionTable: ...
    @property
    def IsAvailable(self) -> bool: ...
    @property
    def IsClosing(self) -> bool: ...
    @property
    def IsCommandRunning(self) -> bool: ...
    @property
    def IsCreating(self) -> bool: ...
    @property
    def IsHeadless(self) -> bool: ...
    @property
    def IsInitializing(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsOpening(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSendingMail(self) -> bool: ...
    @property
    def Layers(self) -> LayerTable: ...
    @property
    def LayoutSpaceAnnotationScalingEnabled(self) -> bool: ...
    @property
    def Lights(self) -> LightTable: ...
    @property
    def Linetypes(self) -> LinetypeTable: ...
    @property
    def Manifest(self) -> ManifestTable: ...
    @property
    def Materials(self) -> MaterialTable: ...
    @property
    def MeshingParameterStyle(self) -> MeshingParameterStyle: ...
    @property
    def ModelAbsoluteTolerance(self) -> float: ...
    @property
    def ModelAngleToleranceDegrees(self) -> float: ...
    @property
    def ModelAngleToleranceRadians(self) -> float: ...
    @property
    def ModelBasepoint(self) -> Point3d: ...
    @property
    def ModelDistanceDisplayPrecision(self) -> int: ...
    @property
    def ModelRelativeTolerance(self) -> float: ...
    @property
    def ModelSpaceAnnotationScalingEnabled(self) -> bool: ...
    @property
    def ModelSpaceHatchScale(self) -> float: ...
    @property
    def ModelSpaceHatchScalingEnabled(self) -> bool: ...
    @property
    def ModelSpaceTextScale(self) -> float: ...
    @property
    def ModelUnitSystem(self) -> UnitSystem: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamedConstructionPlanes(self) -> NamedConstructionPlaneTable: ...
    @property
    def NamedLayerStates(self) -> NamedLayerStateTable: ...
    @property
    def NamedPositions(self) -> NamedPositionTable: ...
    @property
    def NamedViews(self) -> NamedViewTable: ...
    @property
    def NextUndoRecordSerialNumber(self) -> int: ...
    @property
    def Notes(self) -> str: ...
    @property
    def NotesLocked(self) -> bool: ...
    @property
    def Objects(self) -> ObjectTable: ...
    @property
    def PageAbsoluteTolerance(self) -> float: ...
    @property
    def PageAngleToleranceDegrees(self) -> float: ...
    @property
    def PageAngleToleranceRadians(self) -> float: ...
    @property
    def PageDistanceDisplayPrecision(self) -> int: ...
    @property
    def PageRelativeTolerance(self) -> float: ...
    @property
    def PageUnitSystem(self) -> UnitSystem: ...
    @property
    def Path(self) -> str: ...
    @property
    def PostEffects(self) -> IPostEffects: ...
    @property
    def RedoActive(self) -> bool: ...
    @property
    def RenderEnvironments(self) -> RenderEnvironmentTable: ...
    @property
    def RenderMaterials(self) -> RenderMaterialTable: ...
    @property
    def RenderSettings(self) -> RenderSettings: ...
    @property
    def RenderTextures(self) -> RenderTextureTable: ...
    @property
    def RuntimeData(self) -> RuntimeDocumentDataTable: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @property
    def Snapshots(self) -> SnapshotTable: ...
    @property
    def Strings(self) -> StringTable: ...
    @property
    def SubDAppearance(self) -> SubDComponentLocation: ...
    @property
    def TemplateFileUsed(self) -> str: ...
    @property
    def UndoActive(self) -> bool: ...
    @property
    def UndoRecordingEnabled(self) -> bool: ...
    @property
    def UndoRecordingIsActive(self) -> bool: ...
    @property
    def Views(self) -> ViewTable: ...
    @property
    def Worksession(self) -> Worksession: ...
    @overload
    def GetAnalysisMeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetCurrentMeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetCustomUnitSystem(self, modelUnits: bool) -> tuple[bool, str, float]: ...
    @overload
    def GetEmbeddedFilesList(self, missingOnly: bool) -> Iterable[str]: ...
    @overload
    def GetGridDefaults(self) -> ConstructionPlaneGridDefaults: ...
    @overload
    def GetGumballPlane(self) -> tuple[bool, Plane]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMeshingParameters(self, style: MeshingParameterStyle) -> MeshingParameters: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUnitSystemName(self, modelUnits: bool, capitalize: bool, singular: bool, abbreviate: bool) -> str: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> tuple[bool, Flags]: ...
    @overload
    def Import(self, filePath: str) -> bool: ...
    @overload
    def Import(self, filePath: str, options: ArchivableDictionary) -> bool: ...
    @overload
    def InCommand(self, bIgnoreScriptRunnerCommands: bool) -> int: ...
    @overload
    def IsMetricUnitSystem(self, modelUnits: bool) -> bool: ...
    @overload
    @staticmethod
    def Open(filePath: str) -> tuple[RhinoDoc, bool]: ...
    @overload
    @staticmethod
    def OpenDocuments() -> Iterable[RhinoDoc]: ...
    @overload
    @staticmethod
    def OpenDocuments(includeHeadless: bool) -> Iterable[RhinoDoc]: ...
    @overload
    @staticmethod
    def OpenHeadless(file3dmPath: str) -> RhinoDoc: ...
    @overload
    @staticmethod
    def ReadFile(path: str, options: FileReadOptions) -> bool: ...
    @overload
    def ReadFileVersion(self) -> int: ...
    @overload
    def Redo(self) -> bool: ...
    @overload
    @staticmethod
    def remove_ActiveDocumentChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_AddRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_AfterTransformObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_BeforeTransformObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_BeginOpenDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_BeginSaveDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_CloseDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DeleteRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DeselectAllObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DeselectObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DimensionStyleTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DocumentPropertiesChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_EndOpenDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_EndOpenDocumentInitialiViewUpdate(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_EndOpenDocumentInitialViewUpdate(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_EndSaveDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_GroupTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_HatchPatternTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_InstanceDefinitionTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_LayerTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_LightTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_LinetypeTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_MaterialTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ModifyObjectAttributes(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_NewDocument(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_PurgeRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RenderEnvironmentTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RenderMaterialsTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_RenderTextureTableEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ReplaceRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_SelectObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_TextureMappingEvent(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_UndeleteRhinoObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_UnitsChangedWithScaling(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_UserStringChanged(value: EventHandler) -> None: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> tuple[Iterable[RenderMeshes], Flags]: ...
    @overload
    def Save(self) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str, version: int) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str, version: int, saveSmall: bool, saveTextures: bool, saveGeometryOnly: bool, savePluginData: bool) -> bool: ...
    @overload
    def SaveAsTemplate(self, file3dmTemplatePath: str) -> bool: ...
    @overload
    def SaveAsTemplate(self, file3dmTemplatePath: str, version: int) -> bool: ...
    @overload
    def SelectRenderContentInEditor(self, collection: RenderContentCollection, append: bool) -> None: ...
    @ActiveDoc.setter
    @classmethod
    def ActiveDoc(clsvalue: RhinoDoc) -> None: ...
    @AnimationProperties.setter
    def AnimationProperties(self, value: AnimationProperties) -> None: ...
    @EarthAnchorPoint.setter
    def EarthAnchorPoint(self, value: EarthAnchorPoint) -> None: ...
    @LayoutSpaceAnnotationScalingEnabled.setter
    def LayoutSpaceAnnotationScalingEnabled(self, value: bool) -> None: ...
    @MeshingParameterStyle.setter
    def MeshingParameterStyle(self, value: MeshingParameterStyle) -> None: ...
    @ModelAbsoluteTolerance.setter
    def ModelAbsoluteTolerance(self, value: float) -> None: ...
    @ModelAngleToleranceDegrees.setter
    def ModelAngleToleranceDegrees(self, value: float) -> None: ...
    @ModelAngleToleranceRadians.setter
    def ModelAngleToleranceRadians(self, value: float) -> None: ...
    @ModelBasepoint.setter
    def ModelBasepoint(self, value: Point3d) -> None: ...
    @ModelDistanceDisplayPrecision.setter
    def ModelDistanceDisplayPrecision(self, value: int) -> None: ...
    @ModelRelativeTolerance.setter
    def ModelRelativeTolerance(self, value: float) -> None: ...
    @ModelSpaceAnnotationScalingEnabled.setter
    def ModelSpaceAnnotationScalingEnabled(self, value: bool) -> None: ...
    @ModelSpaceHatchScale.setter
    def ModelSpaceHatchScale(self, value: float) -> None: ...
    @ModelSpaceHatchScalingEnabled.setter
    def ModelSpaceHatchScalingEnabled(self, value: bool) -> None: ...
    @ModelSpaceTextScale.setter
    def ModelSpaceTextScale(self, value: float) -> None: ...
    @ModelUnitSystem.setter
    def ModelUnitSystem(self, value: UnitSystem) -> None: ...
    @Modified.setter
    def Modified(self, value: bool) -> None: ...
    @Notes.setter
    def Notes(self, value: str) -> None: ...
    @NotesLocked.setter
    def NotesLocked(self, value: bool) -> None: ...
    @PageAbsoluteTolerance.setter
    def PageAbsoluteTolerance(self, value: float) -> None: ...
    @PageAngleToleranceDegrees.setter
    def PageAngleToleranceDegrees(self, value: float) -> None: ...
    @PageAngleToleranceRadians.setter
    def PageAngleToleranceRadians(self, value: float) -> None: ...
    @PageDistanceDisplayPrecision.setter
    def PageDistanceDisplayPrecision(self, value: int) -> None: ...
    @PageRelativeTolerance.setter
    def PageRelativeTolerance(self, value: float) -> None: ...
    @PageUnitSystem.setter
    def PageUnitSystem(self, value: UnitSystem) -> None: ...
    @RenderSettings.setter
    def RenderSettings(self, value: RenderSettings) -> None: ...
    @SubDAppearance.setter
    def SubDAppearance(self, value: SubDComponentLocation) -> None: ...
    @UndoRecordingEnabled.setter
    def UndoRecordingEnabled(self, value: bool) -> None: ...
    @overload
    def SetCustomMeshingParameters(self, mp: MeshingParameters) -> None: ...
    @overload
    def SetCustomUnitSystem(self, modelUnits: bool, customUnitName: str, metersPerCustomUnit: float, scale: bool) -> bool: ...
    @overload
    def SetGridDefaults(self, defaults: ConstructionPlaneGridDefaults) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Undo(self) -> bool: ...
    @overload
    def Write3dmFile(self, path: str, options: FileWriteOptions) -> bool: ...
    @overload
    def WriteFile(self, path: str, options: FileWriteOptions) -> bool: ...


class RhinoDocObserverArgs:
    @overload
    def __init__(self, doc: RhinoDoc): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Doc(self) -> RhinoDoc: ...
    @property
    def RuntimeSerialNumber(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class RhinoFileWatcherChangeReason(Enum):
    Created = 1
    Deleted = 2
    Changed = 4
    Renamed = 5


from Rhino.Geometry import Vector3d
class RhinoMath:
    HalfPI: float
    QuarterPI: float
    TwoPI: float
    Tau: float
    ZeroTolerance: float
    UnsetValue: float
    Epsilon: float
    SqrtEpsilon: float
    DefaultAngleTolerance: float
    DefaultDistanceToleranceMillimeters: float
    UnsetSingle: float
    UnsetIntIndex: int
    @overload
    @staticmethod
    def Clamp(value: float, bound1: float, bound2: float) -> float: ...
    @overload
    @staticmethod
    def Clamp(value: int, bound1: int, bound2: int) -> int: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: int, value: int) -> int: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: int, buffer: Iterable[int]) -> int: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: int, value: float) -> int: ...
    @overload
    @staticmethod
    def EpsilonEquals(x: float, y: float, epsilon: float) -> bool: ...
    @overload
    @staticmethod
    def EpsilonEquals(x: float, y: float, epsilon: float) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def EvaluateNormal(limitDirection: int, ds: Vector3d, dt: Vector3d, dss: Vector3d, dst: Vector3d, dtt: Vector3d) -> tuple[bool, Vector3d]: ...
    @overload
    @staticmethod
    def EvaluateNormalPartials(ds: Vector3d, dt: Vector3d, dss: Vector3d, dst: Vector3d, dtt: Vector3d) -> tuple[bool, Vector3d, Vector3d]: ...
    @overload
    @staticmethod
    def EvaluateSectionalCurvature(ds: Vector3d, dt: Vector3d, dss: Vector3d, dst: Vector3d, dtt: Vector3d, planeNormal: Vector3d) -> tuple[bool, Vector3d]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IntIndexToString(index: int) -> str: ...
    @overload
    @staticmethod
    def IsValidDouble(x: float) -> bool: ...
    @overload
    @staticmethod
    def IsValidSingle(x: float) -> bool: ...
    @overload
    @staticmethod
    def MetersPerUnit(units: UnitSystem) -> float: ...
    @overload
    @staticmethod
    def ParseNumber(expression: str) -> float: ...
    @overload
    @staticmethod
    def ToDegrees(radians: float) -> float: ...
    @overload
    @staticmethod
    def ToRadians(degrees: float) -> float: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TryParseNumber(expression: str) -> tuple[bool, float]: ...
    @overload
    @staticmethod
    def UnitScale(from_: UnitSystem, to: UnitSystem) -> float: ...
    @overload
    @staticmethod
    def UnitScale(from_: UnitSystem, fromMetersPerUnit: float, to: UnitSystem, toMetersPerUnit: float) -> float: ...
    @overload
    @staticmethod
    def Wrap(value: float, bound1: float, bound2: float) -> float: ...


from System import IntPtr
from System import Delegate
class RhinoWindow:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, method: Delegate) -> None: ...
    @overload
    def ToString(self) -> str: ...


class RuntimeEnvironment(Enum):
    Unset = 0
    # None = 1
    Windows = 2
    Apple = 3
    Android = 4
    Linux = 5
    WebAssembly = 6


class ScaleStringFormat(Enum):
    # None = 0
    RatioFormat = 1
    EquationFormat = 2
    FractionFormat = 3
    Unset = 255


from Rhino.Input import StringParserSettings
class ScaleValue:
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def Create(s: str, ps: StringParserSettings) -> ScaleValue: ...
    @overload
    @staticmethod
    def Create(left: LengthValue, right: LengthValue, format: ScaleStringFormat) -> ScaleValue: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def LeftToRightScale(self) -> float: ...
    @property
    def RightToLeftScale(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsUnset(self) -> bool: ...
    @overload
    def LeftLengthValue(self) -> LengthValue: ...
    @overload
    @staticmethod
    def OneToOne() -> ScaleValue: ...
    @overload
    def RightLengthValue(self) -> LengthValue: ...
    @overload
    def ToString(self) -> str: ...


class StringFormat(Enum):
    ExactDecimal = 0
    ExactProperFraction = 1
    ExactImproperFraction = 2
    CleanDecimal = 3
    CleanProperFraction = 4
    CleanImproperFraction = 5


class Symbols:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def DegreeSymbol(cls) -> str: ...
    @property
    @classmethod
    def DiameterSymbol(cls) -> str: ...
    @property
    @classmethod
    def PlusMinusSymbol(cls) -> str: ...
    @property
    @classmethod
    def RadiusSymbol(cls) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Render import TextureMapping
class TextureMappingEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> TextureMappingEventType: ...
    @property
    def NewMapping(self) -> TextureMapping: ...
    @property
    def OldMapping(self) -> TextureMapping: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class TextureMappingEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3


class UnitsChangedWithScalingEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentSerialNumber(self) -> int: ...
    @property
    def Scale(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class UnitSystem(Enum):
    # None = 0
    Microns = 1
    Millimeters = 2
    Centimeters = 3
    Meters = 4
    Kilometers = 5
    Microinches = 6
    Mils = 7
    Inches = 8
    Feet = 9
    Miles = 10
    CustomUnits = 11
    Angstroms = 12
    Nanometers = 13
    Decimeters = 14
    Dekameters = 15
    Hectometers = 16
    Megameters = 17
    Gigameters = 18
    Yards = 19
    PrinterPoints = 20
    PrinterPicas = 21
    NauticalMiles = 22
    AstronomicalUnits = 23
    LightYears = 24
    Parsecs = 25
    Unset = 255


class UserStringChangedArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Key(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
