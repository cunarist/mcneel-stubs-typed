from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Custom

__all__ = ['Custom']


class BitmapFileTypes(Enum):
    bmp = 1
    jpg = 2
    pcx = 4
    png = 8
    tif = 16
    tga = 32


class GetBoxMode(Enum):
    All = 0
    Corner = 1
    ThreePoint = 2
    Vertical = 3
    Center = 4


class GetResult(Enum):
    NoResult = 0
    Cancel = 1
    Nothing = 2
    Option = 3
    Number = 4
    Color = 5
    Undo = 6
    Miss = 7
    Point = 8
    Point2d = 9
    Line2d = 10
    Rectangle2d = 11
    Object = 12
    String = 13
    CustomMessage = 14
    Timeout = 15
    Circle = 16
    Plane = 17
    Cylinder = 18
    Sphere = 19
    Angle = 20
    Distance = 21
    Direction = 22
    Frame = 23
    ExitRhino = 268435455
    User5 = 4294967291
    User4 = 4294967292
    User3 = 4294967293
    User2 = 4294967294
    User1 = 4294967295


from Rhino import RhinoDoc
from System import Guid
from .Custom import GetObjectGeometryFilter
from .Custom import GetFileNameMode
class RhinoGet:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AllBitmapFileTypes() -> BitmapFileTypes: ...
    @overload
    @staticmethod
    def Get2dRectangle(solidPen: bool) -> Tuple[Result, Rectangle, RhinoView]: ...
    @overload
    @staticmethod
    def GetAngle(commandPrompt: str, basePoint: Point3d, referencePoint: Point3d, defaultAngleRadians: float) -> Tuple[Result, float]: ...
    @overload
    @staticmethod
    def GetArc() -> Tuple[Result, Arc]: ...
    @overload
    @staticmethod
    def GetBool(prompt: str, acceptNothing: bool, offPrompt: str, onPrompt: str, boolValue: bool) -> Tuple[Result, bool]: ...
    @overload
    @staticmethod
    def GetBox() -> Tuple[Result, Box]: ...
    @overload
    @staticmethod
    def GetBox(mode: GetBoxMode, basePoint: Point3d, prompt1: str, prompt2: str, prompt3: str) -> Tuple[Result, Box]: ...
    @overload
    @staticmethod
    def GetBoxWithCounts(xMin: int, xCount: int, yMin: int, yCount: int, zMin: int, zCount: int) -> Tuple[Result, int, int, int, Iterable[Point3d]]: ...
    @overload
    @staticmethod
    def GetCircle() -> Tuple[Result, Circle]: ...
    @overload
    @staticmethod
    def GetColor(prompt: str, acceptNothing: bool, color: Color) -> Tuple[Result, Color]: ...
    @overload
    @staticmethod
    def GetFileName(mode: GetFileNameMode, defaultName: str, title: str, parent: object) -> str: ...
    @overload
    @staticmethod
    def GetFileName(mode: GetFileNameMode, defaultName: str, title: str, parent: object, fileTypes: BitmapFileTypes) -> str: ...
    @overload
    @staticmethod
    def GetFileNameScripted(mode: GetFileNameMode, defaultName: str) -> str: ...
    @overload
    @staticmethod
    def GetGrip(prompt: str) -> Tuple[Result, GripObject]: ...
    @overload
    @staticmethod
    def GetGrips(prompt: str) -> Tuple[Result, Iterable[GripObject]]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetHelix() -> Tuple[Result, NurbsCurve]: ...
    @overload
    @staticmethod
    def GetInteger(prompt: str, acceptNothing: bool, outputNumber: int) -> Tuple[Result, int]: ...
    @overload
    @staticmethod
    def GetInteger(prompt: str, acceptNothing: bool, outputNumber: int, lowerLimit: int, upperLimit: int) -> Tuple[Result, int]: ...
    @overload
    @staticmethod
    def GetLine() -> Tuple[Result, Line]: ...
    @overload
    @staticmethod
    def GetLinearDimension() -> Tuple[Result, LinearDimension]: ...
    @overload
    @staticmethod
    def GetMeshParameters(doc: RhinoDoc, parameters: MeshingParameters, uiStyle: int) -> Tuple[Result, MeshingParameters, int]: ...
    @overload
    @staticmethod
    def GetMultipleObjects(prompt: str, acceptNothing: bool, filter: ObjectType) -> Tuple[Result, Iterable[ObjRef]]: ...
    @overload
    @staticmethod
    def GetMultipleObjects(prompt: str, acceptNothing: bool, filter: GetObjectGeometryFilter) -> Tuple[Result, Iterable[ObjRef]]: ...
    @overload
    @staticmethod
    def GetNumber(prompt: str, acceptNothing: bool, outputNumber: float) -> Tuple[Result, float]: ...
    @overload
    @staticmethod
    def GetNumber(prompt: str, acceptNothing: bool, outputNumber: float, lowerLimit: float, upperLimit: float) -> Tuple[Result, float]: ...
    @overload
    @staticmethod
    def GetOneObject(prompt: str, acceptNothing: bool, filter: ObjectType) -> Tuple[Result, ObjRef]: ...
    @overload
    @staticmethod
    def GetOneObject(prompt: str, acceptNothing: bool, filter: GetObjectGeometryFilter) -> Tuple[Result, ObjRef]: ...
    @overload
    @staticmethod
    def GetPlane() -> Tuple[Result, Plane]: ...
    @overload
    @staticmethod
    def GetPoint(prompt: str, acceptNothing: bool) -> Tuple[Result, Point3d]: ...
    @overload
    @staticmethod
    def GetPointOnMesh(doc: RhinoDoc, meshObjectId: Guid, prompt: str, acceptNothing: bool) -> Tuple[Result, Point3d]: ...
    @overload
    @staticmethod
    def GetPointOnMesh(doc: RhinoDoc, meshObject: MeshObject, prompt: str, acceptNothing: bool) -> Tuple[Result, Point3d]: ...
    @overload
    @staticmethod
    def GetPolygon(numberSides: int, inscribed: bool) -> Tuple[Result, int, bool, Polyline]: ...
    @overload
    @staticmethod
    def GetPolygon(useActiveLayerLinetype: bool, numberSides: int, inscribed: bool) -> Tuple[Result, int, bool, Polyline]: ...
    @overload
    @staticmethod
    def GetPolyline() -> Tuple[Result, Polyline]: ...
    @overload
    @staticmethod
    def GetPrintWindow(settings: ViewCaptureSettings) -> Tuple[Result, ViewCaptureSettings]: ...
    @overload
    @staticmethod
    def GetRectangle() -> Tuple[Result, Iterable[Point3d]]: ...
    @overload
    @staticmethod
    def GetRectangle(firstPrompt: str) -> Tuple[Result, Iterable[Point3d]]: ...
    @overload
    @staticmethod
    def GetRectangle(mode: GetBoxMode, firstPoint: Point3d, prompts: Iterable[str]) -> Tuple[Result, Iterable[Point3d]]: ...
    @overload
    @staticmethod
    def GetRectangleWithCounts(xMin: int, xCount: int, yMin: int, yCount: int) -> Tuple[Result, int, int, Iterable[Point3d]]: ...
    @overload
    @staticmethod
    def GetSpiral() -> Tuple[Result, NurbsCurve]: ...
    @overload
    @staticmethod
    def GetString(prompt: str, acceptNothing: bool, outputString: str) -> Tuple[Result, str]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def GetView(commandPrompt: str) -> Tuple[Result, RhinoView]: ...
    @overload
    @staticmethod
    def InGet(doc: RhinoDoc) -> bool: ...
    @overload
    @staticmethod
    def InGetObject(doc: RhinoDoc) -> bool: ...
    @overload
    @staticmethod
    def InGetPoint(doc: RhinoDoc) -> bool: ...
    @overload
    @staticmethod
    def StringToCommandOptionName(stringToConvert: str) -> str: ...
    @overload
    @staticmethod
    def StringToCommandOptionName(englishString: str, localizedString: str) -> LocalizeStringPair: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import UnitSystem
from Rhino import AngleUnitSystem
class StringParser:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def ParseAngleExpession(expression: str, start_offset: int, expression_length: int, parse_settings_in: StringParserSettings, output_angle_unit_system: AngleUnitSystem, parse_results: StringParserSettings, parsed_unit_system: AngleUnitSystem) -> Tuple[int, float, StringParserSettings, AngleUnitSystem]: ...
    @overload
    @staticmethod
    def ParseAngleExpressionDegrees(expression: str) -> Tuple[bool, float]: ...
    @overload
    @staticmethod
    def ParseAngleExpressionRadians(expression: str) -> Tuple[bool, float]: ...
    @overload
    @staticmethod
    def ParseLengthExpession(expression: str, parse_settings_in: StringParserSettings, output_unit_system: UnitSystem) -> Tuple[int, float]: ...
    @overload
    @staticmethod
    def ParseLengthExpession(expression: str, start_offset: int, expression_length: int, parse_settings_in: StringParserSettings, output_unit_system: UnitSystem, parse_results: StringParserSettings, parsed_unit_system: UnitSystem) -> Tuple[int, float, StringParserSettings, UnitSystem]: ...
    @overload
    @staticmethod
    def ParseNumber(expression: str, max_count: int, settings_in: StringParserSettings, settings_out: StringParserSettings) -> Tuple[int, StringParserSettings, float]: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import AngleUnitSystem
from Rhino import UnitSystem
class StringParserSettings:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DefaultAngleUnitSystem(self) -> AngleUnitSystem: ...
    @property
    def DefaultLengthUnitSystem(self) -> UnitSystem: ...
    @property
    def DefaultParseSettings() -> StringParserSettings: ...
    @property
    def ParseAddition(self) -> bool: ...
    @property
    def ParseArcDegreesMinutesSeconds(self) -> bool: ...
    @property
    def ParseArithmeticExpression(self) -> bool: ...
    @property
    def ParseCommaAsDecimalPoint(self) -> bool: ...
    @property
    def ParseCommaAsDigitSeparator(self) -> bool: ...
    @property
    def ParseDAsExponentInScientificENotation(self) -> bool: ...
    @property
    def ParseDivision(self) -> bool: ...
    @property
    def ParseExplicitFormulaExpression(self) -> bool: ...
    @property
    def ParseFeetInches(self) -> bool: ...
    @property
    def ParseFullStopAsDecimalPoint(self) -> bool: ...
    @property
    def ParseFullStopAsDigitSeparator(self) -> bool: ...
    @property
    def ParseHyphenAsNumberDash(self) -> bool: ...
    @property
    def ParseHyphenMinusAsNumberDash(self) -> bool: ...
    @property
    def ParseIntegerDashFraction(self) -> bool: ...
    @property
    def ParseLeadingWhiteSpace(self) -> bool: ...
    @property
    def ParseMathFunctions(self) -> bool: ...
    @property
    def ParseMultiplication(self) -> bool: ...
    @property
    def ParsePairedParentheses(self) -> bool: ...
    @property
    def ParsePi(self) -> bool: ...
    @property
    def ParseRationalNumber(self) -> bool: ...
    @property
    def ParseScientificENotation(self) -> bool: ...
    @property
    def ParseSettingsDegrees() -> StringParserSettings: ...
    @property
    def ParseSettingsDoubleNumber() -> StringParserSettings: ...
    @property
    def ParseSettingsEmpty() -> StringParserSettings: ...
    @property
    def ParseSettingsIntegerNumber() -> StringParserSettings: ...
    @property
    def ParseSettingsRadians() -> StringParserSettings: ...
    @property
    def ParseSettingsRationalNumber() -> StringParserSettings: ...
    @property
    def ParseSettingsRealNumber() -> StringParserSettings: ...
    @property
    def ParseSignificandDigitSeparators(self) -> bool: ...
    @property
    def ParseSignificandFractionalPart(self) -> bool: ...
    @property
    def ParseSignificandIntegerPart(self) -> bool: ...
    @property
    def ParseSpaceAsDigitSeparator(self) -> bool: ...
    @property
    def ParseSubtraction(self) -> bool: ...
    @property
    def ParseSurveyorsNotation(self) -> bool: ...
    @property
    def ParseUnaryMinus(self) -> bool: ...
    @property
    def ParseUnaryPlus(self) -> bool: ...
    @property
    def PreferedLocaleId(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @DefaultAngleUnitSystem.setter
    def DefaultAngleUnitSystem(self, value: AngleUnitSystem) -> None: ...
    @DefaultLengthUnitSystem.setter
    def DefaultLengthUnitSystem(self, value: UnitSystem) -> None: ...
    @ParseAddition.setter
    def ParseAddition(self, value: bool) -> None: ...
    @ParseArcDegreesMinutesSeconds.setter
    def ParseArcDegreesMinutesSeconds(self, value: bool) -> None: ...
    @ParseArithmeticExpression.setter
    def ParseArithmeticExpression(self, value: bool) -> None: ...
    @ParseCommaAsDecimalPoint.setter
    def ParseCommaAsDecimalPoint(self, value: bool) -> None: ...
    @ParseCommaAsDigitSeparator.setter
    def ParseCommaAsDigitSeparator(self, value: bool) -> None: ...
    @ParseDAsExponentInScientificENotation.setter
    def ParseDAsExponentInScientificENotation(self, value: bool) -> None: ...
    @ParseDivision.setter
    def ParseDivision(self, value: bool) -> None: ...
    @ParseExplicitFormulaExpression.setter
    def ParseExplicitFormulaExpression(self, value: bool) -> None: ...
    @ParseFeetInches.setter
    def ParseFeetInches(self, value: bool) -> None: ...
    @ParseFullStopAsDecimalPoint.setter
    def ParseFullStopAsDecimalPoint(self, value: bool) -> None: ...
    @ParseFullStopAsDigitSeparator.setter
    def ParseFullStopAsDigitSeparator(self, value: bool) -> None: ...
    @ParseHyphenAsNumberDash.setter
    def ParseHyphenAsNumberDash(self, value: bool) -> None: ...
    @ParseHyphenMinusAsNumberDash.setter
    def ParseHyphenMinusAsNumberDash(self, value: bool) -> None: ...
    @ParseIntegerDashFraction.setter
    def ParseIntegerDashFraction(self, value: bool) -> None: ...
    @ParseLeadingWhiteSpace.setter
    def ParseLeadingWhiteSpace(self, value: bool) -> None: ...
    @ParseMathFunctions.setter
    def ParseMathFunctions(self, value: bool) -> None: ...
    @ParseMultiplication.setter
    def ParseMultiplication(self, value: bool) -> None: ...
    @ParsePairedParentheses.setter
    def ParsePairedParentheses(self, value: bool) -> None: ...
    @ParsePi.setter
    def ParsePi(self, value: bool) -> None: ...
    @ParseRationalNumber.setter
    def ParseRationalNumber(self, value: bool) -> None: ...
    @ParseScientificENotation.setter
    def ParseScientificENotation(self, value: bool) -> None: ...
    @ParseSignificandDigitSeparators.setter
    def ParseSignificandDigitSeparators(self, value: bool) -> None: ...
    @ParseSignificandFractionalPart.setter
    def ParseSignificandFractionalPart(self, value: bool) -> None: ...
    @ParseSignificandIntegerPart.setter
    def ParseSignificandIntegerPart(self, value: bool) -> None: ...
    @ParseSpaceAsDigitSeparator.setter
    def ParseSpaceAsDigitSeparator(self, value: bool) -> None: ...
    @ParseSubtraction.setter
    def ParseSubtraction(self, value: bool) -> None: ...
    @ParseSurveyorsNotation.setter
    def ParseSurveyorsNotation(self, value: bool) -> None: ...
    @ParseUnaryMinus.setter
    def ParseUnaryMinus(self, value: bool) -> None: ...
    @ParseUnaryPlus.setter
    def ParseUnaryPlus(self, value: bool) -> None: ...
    @PreferedLocaleId.setter
    def PreferedLocaleId(self, value: int) -> None: ...
    @overload
    def SetAllExpressionSettingsToFalse(self) -> None: ...
    @overload
    def SetAllFieldsToFalse(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
