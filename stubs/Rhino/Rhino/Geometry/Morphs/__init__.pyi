from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from Rhino.Geometry import Curve
from Rhino.Geometry import GeometryBase
from Rhino.Geometry import Line
from Rhino.Geometry import Plane
from Rhino.Geometry import Point2d
from Rhino.Geometry import Point3d
from Rhino.Geometry import Surface
from Rhino.Geometry import Vector3d




from Rhino.Geometry import SpaceMorph
class BendSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, start: Point3d, end: Point3d, point: Point3d, straight: bool, symmetric: bool): ...
    @overload
    def __init__(self, start: Point3d, end: Point3d, point: Point3d, angle: float, straight: bool, symmetric: bool): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PreserveStructure(self) -> bool: ...
    @property
    def QuickPreview(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @PreserveStructure.setter
    def PreserveStructure(self, value: bool) -> None: ...
    @QuickPreview.setter
    def QuickPreview(self, value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import SpaceMorph
class FlowSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, curve0: Curve, curve1: Curve, preventStretching: bool): ...
    @overload
    def __init__(self, curve0: Curve, curve1: Curve, reverseCurve0: bool, reverseCurve1: bool, preventStretching: bool): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PreserveStructure(self) -> bool: ...
    @property
    def QuickPreview(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @PreserveStructure.setter
    def PreserveStructure(self, value: bool) -> None: ...
    @QuickPreview.setter
    def QuickPreview(self, value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import SpaceMorph
class MaelstromSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, plane: Plane, radius0: float, radius1: float, angle: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PreserveStructure(self) -> bool: ...
    @property
    def QuickPreview(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @PreserveStructure.setter
    def PreserveStructure(self, value: bool) -> None: ...
    @QuickPreview.setter
    def QuickPreview(self, value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import SpaceMorph
class SplopSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, plane: Plane, surface: Surface, surfaceParam: Point2d): ...
    @overload
    def __init__(self, plane: Plane, surface: Surface, surfaceParam: Point2d, scale: float): ...
    @overload
    def __init__(self, plane: Plane, surface: Surface, surfaceParam: Point2d, scale: float, angle: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PreserveStructure(self) -> bool: ...
    @property
    def QuickPreview(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @PreserveStructure.setter
    def PreserveStructure(self, value: bool) -> None: ...
    @QuickPreview.setter
    def QuickPreview(self, value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import SpaceMorph
class SporphSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, surface0: Surface, surface1: Surface): ...
    @overload
    def __init__(self, surface0: Surface, surface1: Surface, surface0Param: Point2d, surface1Param: Point2d): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ConstrainNormal(self) -> Vector3d: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PreserveStructure(self) -> bool: ...
    @property
    def QuickPreview(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @ConstrainNormal.setter
    def ConstrainNormal(self, value: Vector3d) -> None: ...
    @PreserveStructure.setter
    def PreserveStructure(self, value: bool) -> None: ...
    @QuickPreview.setter
    def QuickPreview(self, value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import SpaceMorph
class StretchSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, start: Point3d, end: Point3d, point: Point3d): ...
    @overload
    def __init__(self, start: Point3d, end: Point3d, length: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PreserveStructure(self) -> bool: ...
    @property
    def QuickPreview(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @PreserveStructure.setter
    def PreserveStructure(self, value: bool) -> None: ...
    @QuickPreview.setter
    def QuickPreview(self, value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import SpaceMorph
class TaperSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, start: Point3d, end: Point3d, startRadius: float, endRadius: float, bFlat: bool, infiniteTaper: bool): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PreserveStructure(self) -> bool: ...
    @property
    def QuickPreview(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @PreserveStructure.setter
    def PreserveStructure(self, value: bool) -> None: ...
    @QuickPreview.setter
    def QuickPreview(self, value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import SpaceMorph
class TwistSpaceMorph(SpaceMorph):
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def InfiniteTwist(self) -> bool: ...
    @property
    def PreserveStructure(self) -> bool: ...
    @property
    def QuickPreview(self) -> bool: ...
    @property
    def Tolerance(self) -> float: ...
    @property
    def TwistAngleRadians(self) -> float: ...
    @property
    def TwistAxis(self) -> Line: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, plane: Plane) -> tuple[bool, Plane]: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @InfiniteTwist.setter
    def InfiniteTwist(self, value: bool) -> None: ...
    @PreserveStructure.setter
    def PreserveStructure(self, value: bool) -> None: ...
    @QuickPreview.setter
    def QuickPreview(self, value: bool) -> None: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @TwistAngleRadians.setter
    def TwistAngleRadians(self, value: float) -> None: ...
    @TwistAxis.setter
    def TwistAxis(self, value: Line) -> None: ...
    @overload
    def ToString(self) -> str: ...
