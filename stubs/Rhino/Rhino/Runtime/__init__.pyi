from typing import overload, Any
from collections.abc import Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from Rhino import PersistentSettings
from Rhino import RhinoDoc
from Rhino.Collections import ArchivableDictionary
from Rhino.Commands import Command
from Rhino.Display import DisplayPipeline
from Rhino.Display import RhinoViewport
from Rhino.Display import ViewCaptureSettings
from Rhino.DocObjects import Font
from Rhino.DocObjects import InstanceDefinition
from Rhino.DocObjects import LineCapStyle
from Rhino.DocObjects import LineJoinStyle
from Rhino.DocObjects import RhinoObject
from Rhino.DocObjects import TextObject
from Rhino.DocObjects import ViewportInfo
from Rhino.DocObjects.Custom import UserDataList
from Rhino.FileIO import FileReadOptions
from Rhino.FileIO import FileWriteOptions
from Rhino.FileIO import SerializationOptions
from Rhino.Geometry import Arc
from Rhino.Geometry import BezierCurve
from Rhino.Geometry import Brep
from Rhino.Geometry import Curve
from Rhino.Geometry import GeometryBase
from Rhino.Geometry import Line
from Rhino.Geometry import Mesh
from Rhino.Geometry import MeshingParameters
from Rhino.Geometry import Plane
from Rhino.Geometry import Point3d
from Rhino.Geometry import PointCloud
from Rhino.Geometry import ShrinkWrapParameters
from Rhino.Geometry import Surface
from Rhino.Geometry import Transform
from Rhino.Geometry import Vector3d
from Rhino.Input.Custom import CommandLineOption
from Rhino.Input.Custom import GetPoint
from Rhino.PlugIns import LicenseCapabilities
from Rhino.PlugIns import LicenseData
from Rhino.PlugIns import LicenseStatus
from Rhino.PlugIns import OnLeaseChangedDelegate
from Rhino.PlugIns import PlugIn
from Rhino.PlugIns import ValidateProductKeyDelegate
from Rhino.PlugIns import ValidateResult
from Rhino.PlugIns import VerifyLicenseKeyDelegate
from Rhino.PlugIns import VerifyPreviousVersionLicenseDelegate
from System import Action
from System import AsyncCallback
from System import DateTime
from System import EventHandler
from System import Guid
from System import IAsyncResult
from System import IFormatProvider
from System import IntPtr
from System import ResolveEventHandler
from System import TypeCode
from System import Version
from System.Collections import IDictionary
from System.Collections.Generic import Dictionary
from System.Collections.Specialized import NameValueCollection
from System.Drawing import Color
from System.Drawing import Image
from System.Drawing import Point
from System.Drawing import PointF
from System.Drawing import Size
from System.Reflection import Assembly
from System.Reflection import MethodBase
from System.Reflection import MethodInfo
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Threading import ThreadExceptionEventArgs

from . import InProcess
from . import InteropWrappers
from . import Notifications
from . import RhinoAccounts

__all__ = ['InProcess', 'InteropWrappers', 'Notifications', 'RhinoAccounts']



class AdvancedSetting(Enum):
    UseNewDraftAngleAnalysisUi = 0
    UseCompressionWhenSaving = 1
    TestAdvancedString = 2
    TestAdvancedInt = 3
    PdfOptionalContentGroups = 4
    LeaveFloatingPanelsHiddenOnMac = 5
    DisableFileWatchers = 6
    EnableCheckForUpdates = 7
    LeftJustifyNumericText = 8
    EnableWindowsGestures = 9
    MakeInteriorNgonVertexesSelectable = 10
    MacDisplayOldVersionAutosaveWarning = 11
    UseNewMissingFontUI = 12
    ExportDocumentUserText = 13
    CommandsToIgnoreWhenAutoHidingToolPalettes = 14
    DisplayNonOriginModelBasepointWarning = 15
    UseEntireWidthForTopBand = 16
    UseMFCMenuBar = 17
    IgnoreRUIPlatform = 18
    EnableMcNeelOnlyFeatures = 19
    UseRhinoColorsForModalDialogs = 20
    AcadExportSelectUnexportableObjects = 21
    AcadExportSortLayers = 22
    AcadExportWriteEmptyLayers = 23
    DisableModelAndPageUnitsDifferDialog = 24
    DisablePageUnitsNotInchesOrMMDialog = 25
    UseLegacyCurveJoiner = 26
    UseLegacyBrepCapper = 27
    HideFloatingWindowsOnDeactivate = 28
    RecordAnimationTargetFolder = 29


class Analytics:
    @overload
    def __init__(self, TrackingID: str, Name: str): ...
    @overload
    def __init__(self, TrackingID: str, Name: str, Platform: str, InstallerId: str, Version: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AppInstallerId(self) -> str: ...
    @property
    def AppName(self) -> str: ...
    @property
    def AppPlatform(self) -> str: ...
    @property
    def AppVersion(self) -> str: ...
    @property
    def GoogleAnalyticsTrackingID(self) -> str: ...
    @property
    @classmethod
    def UsageStatisticsEnabled(cls) -> bool: ...
    @property
    @classmethod
    def UserId(cls) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Send(self, data: NameValueCollection) -> None: ...
    @overload
    def Send(self, Category: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str, Label: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str, Label: str, Value: int) -> None: ...
    @AppInstallerId.setter
    def AppInstallerId(self, value: str) -> None: ...
    @AppName.setter
    def AppName(self, value: str) -> None: ...
    @AppPlatform.setter
    def AppPlatform(self, value: str) -> None: ...
    @AppVersion.setter
    def AppVersion(self, value: str) -> None: ...
    @GoogleAnalyticsTrackingID.setter
    def GoogleAnalyticsTrackingID(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class AssemblyResolver:
    @overload
    @staticmethod
    def AddSearchFile(file: str) -> None: ...
    @overload
    @staticmethod
    def AddSearchFolder(folder: str) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def CurrentDomainAssemblyResolve(cls) -> ResolveEventHandler: ...
    @property
    @classmethod
    def CurrentDomainReflectionOnlyAssemblyResolve(cls) -> ResolveEventHandler: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class CommonObject:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromBase64String(archive3dm: int, opennurbs: int, base64Data: str) -> CommonObject: ...
    @overload
    @staticmethod
    def FromJSON(jsonDictionary: Dictionary) -> CommonObject: ...
    @overload
    @staticmethod
    def FromJSON(json: str) -> CommonObject: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    @classmethod
    def PerformCorruptionTesting(cls) -> bool: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValidWithLog(self) -> tuple[bool, str]: ...
    @PerformCorruptionTesting.setter
    @classmethod
    def PerformCorruptionTesting(clsvalue: bool) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class CorruptGeometryException:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CommonObject(self) -> CommonObject: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Pointer(self) -> IntPtr: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetType(self) -> type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DocumentCollectedException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetType(self) -> type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ExceptionReportDelegate:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, source: str, ex: Exception, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, source: str, ex: Exception) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FillProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, topl: int, bottoml: int, topr: int, bottomr: int, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, topl: int, bottoml: int, topr: int, bottomr: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class HostUtils:
    @overload
    @staticmethod
    def add_OnExceptionReport(value: ExceptionReportDelegate) -> None: ...
    @overload
    @staticmethod
    def add_OnSendLogMessageToCloud(value: SendLogMessageToCloudDelegate) -> None: ...
    @overload
    @staticmethod
    def AutoInstallPlugInFolder(currentUser: bool) -> str: ...
    @overload
    @staticmethod
    def CallFromCoreRhino(task: str) -> int: ...
    @overload
    @staticmethod
    def CheckForRdk(throwOnFalse: bool, usePreviousResult: bool) -> bool: ...
    @overload
    @staticmethod
    def ClearFpuExceptionStatus() -> None: ...
    @overload
    @staticmethod
    def CreateCommands(plugin: PlugIn) -> None: ...
    @overload
    @staticmethod
    def CreateCommands(pPlugIn: IntPtr, pluginAssembly: Assembly) -> int: ...
    @overload
    @staticmethod
    def CreatePlugIn(pluginType: type, printDebugMessages: bool) -> PlugIn: ...
    @overload
    @staticmethod
    def DebugDumpToString(bezierCurve: BezierCurve) -> str: ...
    @overload
    @staticmethod
    def DebugDumpToString(geometry: GeometryBase) -> str: ...
    @overload
    @staticmethod
    def DebugString(msg: str) -> None: ...
    @overload
    @staticmethod
    def DebugString(format: str, args: Iterable[object]) -> None: ...
    @overload
    @staticmethod
    def DescribeGeometry(geometry: GeometryBase) -> str: ...
    @overload
    @staticmethod
    def DisplayOleAlerts(display: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def ExceptionReport(ex: Exception) -> None: ...
    @overload
    @staticmethod
    def ExceptionReport(source: str, ex: Exception) -> None: ...
    @overload
    @staticmethod
    def ExecuteNamedCallback(name: str, args: NamedParametersEventArgs) -> bool: ...
    @overload
    @staticmethod
    def FileNameEndsWithRhinoBackupExtension(fileName: str) -> bool: ...
    @overload
    @staticmethod
    def FileNameEndsWithRhinoExtension(fileName: str) -> bool: ...
    @property
    @classmethod
    def ComputerSerialNumber(cls) -> str: ...
    @property
    @classmethod
    def CurrentOSLanguage(cls) -> int: ...
    @property
    @classmethod
    def DeviceId(cls) -> Guid: ...
    @property
    @classmethod
    def DeviceName(cls) -> str: ...
    @property
    @classmethod
    def IsPreRelease(cls) -> bool: ...
    @property
    @classmethod
    def OperatingSystemBuildNumber(cls) -> str: ...
    @property
    @classmethod
    def OperatingSystemEdition(cls) -> str: ...
    @property
    @classmethod
    def OperatingSystemInstallationType(cls) -> str: ...
    @property
    @classmethod
    def OperatingSystemProductName(cls) -> str: ...
    @property
    @classmethod
    def OperatingSystemVersion(cls) -> str: ...
    @property
    @classmethod
    def RhinoAssemblyDirectory(cls) -> str: ...
    @property
    @classmethod
    def RunningAsRhinoInside(cls) -> bool: ...
    @property
    @classmethod
    def RunningInDarkMode(cls) -> bool: ...
    @property
    @classmethod
    def RunningInMono(cls) -> bool: ...
    @property
    @classmethod
    def RunningInNetCore(cls) -> bool: ...
    @property
    @classmethod
    def RunningInNetFramework(cls) -> bool: ...
    @property
    @classmethod
    def RunningInRhino(cls) -> bool: ...
    @property
    @classmethod
    def RunningInWindowsContainer(cls) -> bool: ...
    @property
    @classmethod
    def RunningOniOS(cls) -> bool: ...
    @property
    @classmethod
    def RunningOnOSX(cls) -> bool: ...
    @property
    @classmethod
    def RunningOnServer(cls) -> bool: ...
    @property
    @classmethod
    def RunningOnWindows(cls) -> bool: ...
    @property
    @classmethod
    def SendDebugToCommandLine(cls) -> bool: ...
    @overload
    @staticmethod
    def GetAbsolutePath(relativePath: str, bRelativePathisFileName: bool, relativeTo: str, bRelativeToIsFileName: bool) -> tuple[bool, str]: ...
    @overload
    @staticmethod
    def GetActivePlugInVersionFolders() -> Iterable[DirectoryInfo]: ...
    @overload
    @staticmethod
    def GetActivePlugInVersionFolders(currentUser: bool) -> Iterable[DirectoryInfo]: ...
    @overload
    @staticmethod
    def GetAssemblySearchPaths() -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetCurrentProcessInfo() -> tuple[str, Version]: ...
    @overload
    @staticmethod
    def GetCustomComputeEndpoints() -> Iterable[Tuple]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetPlatformService(assemblyPath: str, typeFullName: str) -> T: ...
    @overload
    @staticmethod
    def GetPrinterDPI(printerName: str, horizontal: bool) -> float: ...
    @overload
    @staticmethod
    def GetPrinterFormMargins(printerName: str, formName: str, portrait: bool) -> tuple[bool, float, float, float, float]: ...
    @overload
    @staticmethod
    def GetPrinterFormNames(printerName: str) -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetPrinterFormSize(printerName: str, formName: str) -> tuple[bool, float, float]: ...
    @overload
    @staticmethod
    def GetPrinterNames() -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetRhinoDotNetAssembly() -> Assembly: ...
    @overload
    @staticmethod
    def GetSystemProcessorCount() -> int: ...
    @overload
    @staticmethod
    def GetSystemReferenceAssemblies() -> Iterable[str]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def InitializeRhinoCommon() -> None: ...
    @overload
    @staticmethod
    def InitializeRhinoCommon_RDK() -> None: ...
    @overload
    @staticmethod
    def InitializeZooClient() -> None: ...
    @overload
    @staticmethod
    def InPlaceConstCast(geometry: GeometryBase, makeNonConst: bool) -> None: ...
    @overload
    @staticmethod
    def IsManagedDll(path: str) -> bool: ...
    @overload
    @staticmethod
    def IsRhinoBackupFileExtension(fileExtension: str) -> bool: ...
    @overload
    @staticmethod
    def IsRhinoFileExtension(fileExtension: str) -> bool: ...
    @overload
    @staticmethod
    def LoadAssemblyFrom(path: str) -> Assembly: ...
    @overload
    @staticmethod
    def LogDebugEvent(message: str) -> None: ...
    @overload
    @staticmethod
    def RecordInitInstanceTime(description: str) -> None: ...
    @overload
    @staticmethod
    def RegisterComputeEndpoint(endpointPath: str, t: type) -> None: ...
    @overload
    @staticmethod
    def RegisterDynamicCommand(plugin: PlugIn, cmd: Command) -> bool: ...
    @overload
    @staticmethod
    def RegisterNamedCallback(name: str, callback: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_OnExceptionReport(value: ExceptionReportDelegate) -> None: ...
    @overload
    @staticmethod
    def remove_OnSendLogMessageToCloud(value: SendLogMessageToCloudDelegate) -> None: ...
    @overload
    @staticmethod
    def RemoveNamedCallback(name: str) -> None: ...
    @overload
    @staticmethod
    def RhinoCommonExceptionHandler(title: str, sender: object, ex: Exception) -> None: ...
    @overload
    @staticmethod
    def SendLogMessageToCloudCallbackProc(msg_type: LogMessageType, pwStringClass: IntPtr, pwStringDesc: IntPtr, pwStringMessage: IntPtr) -> None: ...
    @SendDebugToCommandLine.setter
    @classmethod
    def SendDebugToCommandLine(clsvalue: bool) -> None: ...
    @overload
    @staticmethod
    def SetInShutDown() -> None: ...
    @overload
    @staticmethod
    def ShutDownRhinoCommon_RDK() -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UnhandledThreadException(sender: object, e: ThreadExceptionEventArgs) -> None: ...


class ImportOptionsSections(Enum):
    AdvancedDisplay = 0
    Alias = 1
    Appearance = 2
    ChooseOneObject = 3
    ControlPointContextMenu = 4
    CursorToolTip = 5
    Display = 6
    File = 7
    General = 8
    Grid = 9
    ModelAid = 10
    Mouse = 11
    NeverRepeatCommands = 12
    ObjectContextMenu = 13
    SearchPath = 14
    ShortcutKey = 15
    Smarttrack = 16
    View = 17
    ViewportContextMenu = 18
    ToolPaletteSettings = 19
    Count = 20


class InstanceAttributeField:
    @overload
    def __init__(self, key: str, prompt: str, defaultValue: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def Key(self) -> str: ...
    @property
    def Prompt(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class Interop:
    @overload
    @staticmethod
    def CommandLineOptionFromNativePointer(ptrCommandLineOption: IntPtr) -> CommandLineOption: ...
    @overload
    @staticmethod
    def CreateFromNativePointer(pGeometry: IntPtr) -> GeometryBase: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FileReadOptionsConstPointer(options: FileReadOptions) -> IntPtr: ...
    @overload
    @staticmethod
    def FileWriteOptionsConstPointer(options: FileWriteOptions) -> IntPtr: ...
    @overload
    @staticmethod
    def FontFromPointer(ptrManagedFont: IntPtr) -> Font: ...
    @overload
    @staticmethod
    def FromOnBrep(source: object) -> Brep: ...
    @overload
    @staticmethod
    def FromOnCurve(source: object) -> Curve: ...
    @overload
    @staticmethod
    def FromOnMesh(source: object) -> Mesh: ...
    @overload
    @staticmethod
    def FromOnSurface(source: object) -> Surface: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def NativeGeometryConstPointer(geometry: GeometryBase) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeGeometryNonConstPointer(geometry: GeometryBase) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(settings: ViewCaptureSettings) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(viewport: ViewportInfo) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(viewport: RhinoViewport) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(pipeline: DisplayPipeline) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(getPoint: GetPoint) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeRhinoDocPointer(doc: RhinoDoc) -> IntPtr: ...
    @overload
    @staticmethod
    def NSFontFromFont(font: Font) -> IntPtr: ...
    @overload
    @staticmethod
    def NSFontFromFont(font: Font, pointSize: float) -> IntPtr: ...
    @overload
    @staticmethod
    def PlugInPointer(plugin: PlugIn) -> IntPtr: ...
    @overload
    @staticmethod
    def RhinoObjectConstPointer(rhinoObject: RhinoObject) -> IntPtr: ...
    @overload
    @staticmethod
    def RhinoObjectFromPointer(pRhinoObject: IntPtr) -> RhinoObject: ...
    @overload
    @staticmethod
    def ToIRhinoViewport(source: RhinoViewport) -> object: ...
    @overload
    @staticmethod
    def ToOnBrep(source: Brep) -> object: ...
    @overload
    @staticmethod
    def ToOnCurve(source: Curve) -> object: ...
    @overload
    @staticmethod
    def ToOnMesh(source: Mesh) -> object: ...
    @overload
    @staticmethod
    def ToOnSurface(source: Surface) -> object: ...
    @overload
    @staticmethod
    def ToOnXform(source: Transform) -> object: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TryCopyFromOnArc(source: object) -> tuple[bool, Arc]: ...
    @overload
    @staticmethod
    def TryCopyToOnArc(source: Arc, destination: object) -> bool: ...
    @overload
    @staticmethod
    def ViewCaptureFromPointer(ptrViewCapture: IntPtr) -> ViewCaptureSettings: ...


class IPlatformServiceLocator:
    @overload
    def GetService(self) -> T: ...


class IShrinkWrapService:
    @overload
    def ShrinkWrap(self, mesh: Mesh, parameters: ShrinkWrapParameters) -> Mesh: ...
    @overload
    def ShrinkWrap(self, meshes: Iterable[Mesh], parameters: ShrinkWrapParameters) -> Mesh: ...
    @overload
    def ShrinkWrap(self, pointCloud: PointCloud, parameters: ShrinkWrapParameters) -> Mesh: ...
    @overload
    def ShrinkWrap(self, geometryBases: Iterable[GeometryBase], parameters: ShrinkWrapParameters, meshingParameters: MeshingParameters) -> Mesh: ...


class IZooClientUtilities:
    @overload
    def AskUserForLicense(self, verify: object, parameters: ZooClientParameters) -> bool: ...
    @overload
    def CheckInLicense(self, verify: object, productId: Guid) -> bool: ...
    @overload
    def CheckOutLicense(self, verify: object, productId: Guid) -> bool: ...
    @overload
    def ConvertLicense(self, verify: object, productId: Guid) -> bool: ...
    @overload
    def DeleteLicense(self, verify: object, productId: Guid) -> bool: ...
    @overload
    def Echo(self, verify: object, message: str) -> str: ...
    @property
    def LoggedInUserAvatar(self) -> Image: ...
    @property
    def LoggedInUserName(self) -> str: ...
    @property
    def UserIsLoggedIn(self) -> bool: ...
    @overload
    def GetCurrentTime(self) -> DateTime: ...
    @overload
    def GetLicense(self, verify: object, parameters: ZooClientParameters) -> bool: ...
    @overload
    def GetLicenseStatus(self, verify: object) -> Iterable[LicenseStatus]: ...
    @overload
    def GetLicenseType(self, verify: object, productId: Guid) -> int: ...
    @overload
    def GetOneLicenseStatus(self, verify: object, productId: Guid) -> LicenseStatus: ...
    @overload
    def GetRegisteredOwnerInfo(self, verify: object, productId: Guid, registeredOwner: str, registeredOrganization: str) -> tuple[bool, str, str]: ...
    @overload
    def Initialize(self, verify: object) -> bool: ...
    @overload
    def IsCheckOutEnabled(self, verify: object) -> bool: ...
    @overload
    def LicenseOptionsHandler(self, verify: object, parameters: ZooClientParameters) -> bool: ...
    @overload
    def LoginToCloudZoo(self) -> bool: ...
    @overload
    def LogoutOfCloudZoo(self) -> bool: ...
    @overload
    def ReturnLicense(self, verify: object, productId: Guid) -> bool: ...
    @overload
    def ReturnLicense(self, verify: object, productPath: str, productId: Guid) -> bool: ...
    @overload
    def ShowBuyLicenseUi(self, verify: object, productId: Guid) -> None: ...
    @overload
    def ShowLicenseValidationUi(self, verify: object, cdkey: str) -> bool: ...
    @overload
    def ShowRhinoExpiredMessage(self, mode: Mode, result: int) -> tuple[bool, int]: ...


class LicenseStateChangedEventArgs:
    @overload
    def __init__(self, callingRhinoCommonAllowed: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CallingRhinoCommonAllowed(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class LicenseTypes(Enum):
    Undefined = 0
    Standalone = 1
    ZooAutoDetect = 2
    ZooManualDetect = 3
    CloudZoo = 4


class LogMessageType(Enum):
    unknown = 0
    information = 1
    warning = 2
    error = 3
    # assert = 4


class Mode(Enum):
    NormalMode = 0
    ViewerMode = 1
    BetaMode = 2
    InvalidMode = 100


class NamedParametersEventArgs:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Set(self, name: str, value: MeshingParameters) -> None: ...
    @overload
    def Set(self, name: str, pts: Iterable[Point3d]) -> None: ...
    @overload
    def Set(self, name: str, plane: Plane) -> None: ...
    @overload
    def Set(self, name: str, value: Arc) -> None: ...
    @overload
    def Set(self, name: str, value: Line) -> None: ...
    @overload
    def Set(self, name: str, values: Iterable[GeometryBase]) -> None: ...
    @overload
    def Set(self, name: str, value: GeometryBase) -> None: ...
    @overload
    def Set(self, name: str, value: Guid) -> None: ...
    @overload
    def Set(self, name: str, value: Vector3d) -> None: ...
    @overload
    def Set(self, name: str, value: Point3d) -> None: ...
    @overload
    def Set(self, name: str, value: Point) -> None: ...
    @overload
    def Set(self, name: str, value: float) -> None: ...
    @overload
    def Set(self, name: str, value: Color) -> None: ...
    @overload
    def Set(self, name: str, value: str) -> None: ...
    @overload
    def Set(self, name: str, strings: Iterable[str]) -> None: ...
    @overload
    def Set(self, name: str, value: int) -> None: ...
    @overload
    def Set(self, name: str, values: Iterable[ObjRef]) -> None: ...
    @overload
    def Set(self, name: str, value: int) -> None: ...
    @overload
    def Set(self, name: str, value: bool) -> None: ...
    @overload
    def Set(self, name: str, values: Iterable[int]) -> None: ...
    @overload
    def Set(self, name: str, guidList: Iterable[Guid]) -> None: ...
    @overload
    def SetWindowHandle(self, name: str, value: IntPtr) -> None: ...
    @overload
    def SetWindowImageHandle(self, name: str, value: IntPtr) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetArc(self, name: str) -> tuple[bool, Arc]: ...
    @overload
    def TryGetBool(self, name: str) -> tuple[bool, bool]: ...
    @overload
    def TryGetColor(self, name: str) -> tuple[bool, Color]: ...
    @overload
    def TryGetDouble(self, name: str) -> tuple[bool, float]: ...
    @overload
    def TryGetGeometry(self, name: str) -> tuple[bool, Iterable[GeometryBase]]: ...
    @overload
    def TryGetGuid(self, name: str) -> tuple[bool, Guid]: ...
    @overload
    def TryGetGuids(self, name: str) -> tuple[bool, Iterable[Guid]]: ...
    @overload
    def TryGetInt(self, name: str) -> tuple[bool, int]: ...
    @overload
    def TryGetLine(self, name: str) -> tuple[bool, Line]: ...
    @overload
    def TryGetMeshParameters(self, name: str) -> tuple[bool, MeshingParameters]: ...
    @overload
    def TryGetObjRefs(self, name: str) -> tuple[bool, Iterable[ObjRef]]: ...
    @overload
    def TryGetPlane(self, name: str) -> tuple[bool, Plane]: ...
    @overload
    def TryGetPoint(self, name: str) -> tuple[bool, Point3d]: ...
    @overload
    def TryGetPoint2i(self, name: str) -> tuple[bool, Point]: ...
    @overload
    def TryGetPoints(self, name: str) -> tuple[bool, Iterable[Point3d]]: ...
    @overload
    def TryGetRhinoObjects(self, key: str) -> tuple[bool, Iterable[RhinoObject]]: ...
    @overload
    def TryGetString(self, name: str) -> tuple[bool, str]: ...
    @overload
    def TryGetStrings(self, name: str) -> tuple[bool, Iterable[str]]: ...
    @overload
    def TryGetUints(self, name: str) -> tuple[bool, Iterable[int]]: ...
    @overload
    def TryGetUnmangedPointer(self, name: str) -> tuple[bool, IntPtr]: ...
    @overload
    def TryGetUnsignedInt(self, name: str) -> tuple[bool, int]: ...
    @overload
    def TryGetVector(self, name: str) -> tuple[bool, Vector3d]: ...
    @overload
    def TryGetViewport(self, name: str) -> tuple[bool, ViewportInfo]: ...
    @overload
    def TryGetWindowHandle(self, name: str) -> tuple[bool, IntPtr]: ...
    @overload
    def TryGetWindowImageHandle(self, name: str) -> tuple[bool, IntPtr]: ...


class NotLicensedException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetType(self) -> type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PathPoint:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Location(self) -> PointF: ...
    @property
    def PointType(self) -> PointType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Location.setter
    def Location(self, value: PointF) -> None: ...
    @PointType.setter
    def PointType(self, value: PointType) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Pen:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Cap(self) -> LineCapStyle: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Join(self) -> LineJoinStyle: ...
    @property
    def Pattern(self) -> Iterable[float]: ...
    @property
    def Width(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PointType(Enum):
    Move = 0
    Line = 1
    CubicBezier = 2
    Close = 3
    Arc = 4


class PythonCompiledCode:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Execute(self, scope: PythonScript) -> None: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PythonScript:
    @overload
    @staticmethod
    def AddRuntimeAssembly(assembly: Assembly) -> None: ...
    @overload
    def Compile(self, script: str) -> PythonCompiledCode: ...
    @overload
    def ContainsVariable(self, name: str) -> bool: ...
    @overload
    @staticmethod
    def Create() -> PythonScript: ...
    @overload
    def CreateTextEditorControl(self, script: str, helpcallback: Action) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def EvaluateExpression(self, statements: str, expression: str) -> object: ...
    @overload
    def ExecuteFile(self, path: str) -> bool: ...
    @overload
    def ExecuteFileInScope(self, path: str) -> bool: ...
    @overload
    def ExecuteScript(self, script: str) -> bool: ...
    @property
    def ContextId(self) -> int: ...
    @property
    def Output(self) -> Action: ...
    @property
    def ScriptContextCommand(self) -> Command: ...
    @property
    def ScriptContextDoc(self) -> object: ...
    @property
    @classmethod
    def SearchPaths(cls) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetStackTraceFromException(self, ex: Exception) -> str: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetVariable(self, name: str) -> object: ...
    @overload
    def GetVariableNames(self) -> Iterable[str]: ...
    @overload
    def RemoveVariable(self, name: str) -> None: ...
    @overload
    @staticmethod
    def RuntimeAssemblies() -> Iterable[Assembly]: ...
    @ContextId.setter
    def ContextId(self, value: int) -> None: ...
    @Output.setter
    def Output(self, value: Action) -> None: ...
    @ScriptContextCommand.setter
    def ScriptContextCommand(self, value: Command) -> None: ...
    @ScriptContextDoc.setter
    def ScriptContextDoc(self, value: object) -> None: ...
    @SearchPaths.setter
    @classmethod
    def SearchPaths(clsvalue: Iterable[str]) -> None: ...
    @overload
    def SetIntellisenseVariable(self, name: str, value: object) -> None: ...
    @overload
    def SetupScriptContext(self, doc: object) -> None: ...
    @overload
    def SetVariable(self, name: str, value: object) -> None: ...
    @overload
    def ToString(self) -> str: ...


class RdkNotLoadedException:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetType(self) -> type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class RiskyAction:
    @overload
    def __init__(self, description: str, file: str, member: str, line: int): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class SendLogMessageToCloudDelegate:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, msg_type: LogMessageType, sClass: str, sDesc: str, sMessage: str, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, msg_type: LogMessageType, sClass: str, sDesc: str, sMessage: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SetClipRectProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, left: int, top: int, right: int, bottom: int, callback: AsyncCallback, object: object) -> tuple[IAsyncResult, int, int, int, int]: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, left: int, top: int, right: int, bottom: int, result: IAsyncResult) -> tuple[int, int, int, int]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, left: int, top: int, right: int, bottom: int) -> tuple[int, int, int, int]: ...
    @overload
    def ToString(self) -> str: ...


class Skin:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def ActiveSkin(cls) -> Skin: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class TextFields:
    @overload
    @staticmethod
    def Area(id: str) -> float: ...
    @overload
    @staticmethod
    def Area(id: str, unitSystem: str) -> float: ...
    @overload
    @staticmethod
    def BlockAttributeText(key: str, prompt: str, defaultValue: str) -> str: ...
    @overload
    @staticmethod
    def BlockDescription(definitionNameOrId: str) -> str: ...
    @overload
    @staticmethod
    def BlockInstanceCount(instanceDefinitionNameOrId: str) -> int: ...
    @overload
    @staticmethod
    def BlockInstanceName(blockId: str) -> str: ...
    @overload
    @staticmethod
    def BlockName(blockId: str) -> str: ...
    @overload
    @staticmethod
    def CurveLength(id: str) -> float: ...
    @overload
    @staticmethod
    def CurveLength(id: str, unitSystem: str) -> float: ...
    @overload
    @staticmethod
    def Date() -> str: ...
    @overload
    @staticmethod
    def Date(dateFormat: str) -> str: ...
    @overload
    @staticmethod
    def Date(dateFormat: str, languageId: str) -> str: ...
    @overload
    @staticmethod
    def DateModified() -> str: ...
    @overload
    @staticmethod
    def DateModified(dateFormat: str) -> str: ...
    @overload
    @staticmethod
    def DateModified(dateFormat: str, languageId: str) -> str: ...
    @overload
    @staticmethod
    def DetailScale(detailId: str, scaleFormat: str) -> str: ...
    @overload
    @staticmethod
    def DocumentText(key: str) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FileName() -> str: ...
    @overload
    @staticmethod
    def FileName(options: str) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(str: str) -> Iterable[InstanceAttributeField]: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(text: TextObject) -> Iterable[InstanceAttributeField]: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(idef: InstanceDefinition) -> Iterable[InstanceAttributeField]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def LayerName(layerId: str) -> str: ...
    @overload
    @staticmethod
    def LayoutUserText(key: str) -> str: ...
    @overload
    @staticmethod
    def LayoutUserText(layoutId: str, key: str) -> str: ...
    @overload
    @staticmethod
    def ModelUnits() -> str: ...
    @overload
    @staticmethod
    def Notes() -> str: ...
    @overload
    @staticmethod
    def NumPages() -> int: ...
    @overload
    @staticmethod
    def ObjectLayer(id: str) -> str: ...
    @overload
    @staticmethod
    def ObjectName() -> str: ...
    @overload
    @staticmethod
    def ObjectName(id: str) -> str: ...
    @overload
    @staticmethod
    def ObjectPageName(id: str) -> str: ...
    @overload
    @staticmethod
    def ObjectPageNumber(id: str) -> int: ...
    @overload
    @staticmethod
    def PageHeight() -> float: ...
    @overload
    @staticmethod
    def PageName() -> str: ...
    @overload
    @staticmethod
    def PageName(id: str) -> str: ...
    @overload
    @staticmethod
    def PageNumber() -> int: ...
    @overload
    @staticmethod
    def PageWidth() -> float: ...
    @overload
    @staticmethod
    def PaperName() -> str: ...
    @overload
    @staticmethod
    def PointCoordinate(pointId: str, axis: str) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TryFormat(text: str, doc: RhinoDoc) -> tuple[bool, str]: ...
    @overload
    @staticmethod
    def TryParse(text: str, doc: RhinoDoc) -> tuple[bool, MutableSequence[Any]]: ...
    @overload
    @staticmethod
    def UserText(id: str, key: str) -> str: ...
    @overload
    @staticmethod
    def UserText(id: str, key: str, prompt: str) -> str: ...
    @overload
    @staticmethod
    def UserText(id: str, key: str, prompt: str, defaultValue: str) -> str: ...
    @overload
    @staticmethod
    def Volume(id: str) -> float: ...
    @overload
    @staticmethod
    def Volume(id: str, opt: str) -> float: ...
    @overload
    @staticmethod
    def Volume(id: str, unitSystem: str, allowOpenObjects: str) -> float: ...


class VectorArcProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, argb: int, thickness: float, dashed: int, arc: Arc, callback: AsyncCallback, object: object) -> tuple[IAsyncResult, Arc]: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, arc: Arc, result: IAsyncResult) -> tuple[Arc]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, argb: int, thickness: float, dashed: int, arc: Arc) -> tuple[Arc]: ...
    @overload
    def ToString(self) -> str: ...


class VectorBitmapProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, hBmp: IntPtr, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, hBmp: IntPtr, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VectorClipPathProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, loops: IntPtr, asBeziers: int, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, loops: IntPtr, asBeziers: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VectorFillPolygonProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, argb: int, count: int, points: IntPtr, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, argb: int, count: int, points: IntPtr) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VectorGradientProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, pEngine: IntPtr, pHatch: IntPtr, strokeWidth: float, pHatchPattern: IntPtr, gradientCount: int, colors: IntPtr, stops: IntPtr, points: IntPtr, linearGradient: int, boundaryColor: int, effectiveHatchScale: float, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, pEngine: IntPtr, pHatch: IntPtr, strokeWidth: float, pHatchPattern: IntPtr, gradientCount: int, colors: IntPtr, stops: IntPtr, points: IntPtr, linearGradient: int, boundaryColor: int, effectiveHatchScale: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VectorPathProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, begin: int, brush: IntPtr, screenLine: IntPtr, stops: IntPtr, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, begin: int, brush: IntPtr, screenLine: IntPtr, stops: IntPtr) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VectorPointProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, style: int, screenX: float, screenY: float, fillArgb: int, strokeArgb: int, diameterPixels: float, innerDiameterPixels: float, strokeWidthPixels: float, rotationRadians: float, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, style: int, screenX: float, screenY: float, fillArgb: int, strokeArgb: int, diameterPixels: float, innerDiameterPixels: float, strokeWidthPixels: float, rotationRadians: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VectorPolylineProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, argb: int, thickness: float, dashed: int, capStyle: int, joinStyle: int, count: int, points: IntPtr, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, argb: int, thickness: float, dashed: int, capStyle: int, joinStyle: int, count: int, points: IntPtr) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VectorRoundedRectProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, centerX: float, centerY: float, pixelWidth: float, pixelHeight: float, cornerRadius: float, strokeColor: int, strokeWidth: float, fillColor: int, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, centerX: float, centerY: float, pixelWidth: float, pixelHeight: float, cornerRadius: float, strokeColor: int, strokeWidth: float, fillColor: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VectorStringProc:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, constPtrString: IntPtr, argbTextColor: int, x: float, y: float, angle: float, alignment: int, heightPixels: float, constPtrFont: IntPtr, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, constPtrString: IntPtr, argbTextColor: int, x: float, y: float, angle: float, alignment: int, heightPixels: float, constPtrFont: IntPtr) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ViewCaptureWriter:
    @overload
    def __init__(self, dpi: float, pageSize: Size): ...
    @overload
    def Draw(self, constPtrPrintInfo: IntPtr, doc: RhinoDoc) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ZooClientParameters:
    @overload
    def __init__(self, productGuid: Guid, licenseGuid: Guid, productTitle: str, productBuildType: int, capabilities: LicenseCapabilities, licenseEntryTextMask: str, productPath: str, parentWindow: object, selectedLicenseType: LicenseTypes, validateProductKey: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Capabilities(self) -> LicenseCapabilities: ...
    @property
    def LicenseEntryTextMask(self) -> str: ...
    @property
    def LicenseGuid(self) -> Guid: ...
    @property
    def OnLeaseChanged(self) -> OnLeaseChangedDelegate: ...
    @property
    def ParentWindow(self) -> object: ...
    @property
    def ProductBuildType(self) -> int: ...
    @property
    def ProductGuid(self) -> Guid: ...
    @property
    def ProductPath(self) -> str: ...
    @property
    def ProductTitle(self) -> str: ...
    @property
    def SelectedLicenseType(self) -> LicenseTypes: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Capabilities.setter
    def Capabilities(self, value: LicenseCapabilities) -> None: ...
    @SelectedLicenseType.setter
    def SelectedLicenseType(self, value: LicenseTypes) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def VerifyLicenseKey(self, licenseKey: str, validationCode: str, validationCodeInstallDate: DateTime, gracePeriodExpired: bool) -> tuple[ValidateResult, LicenseData]: ...
    @overload
    def VerifyPreviousVersionLicense(self, license: str, previousVersionLicense: str) -> tuple[bool, str]: ...
