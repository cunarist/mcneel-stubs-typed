from typing import overload, Any
from collections.abc import Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from System import Action
from System import DateTime
from System import IFormatProvider
from System import TypeCode
from System.Collections.Generic import ICollection
from System.Collections.Generic import IDictionary
from System.Collections.Specialized import NotifyCollectionChangedEventHandler
from System.ComponentModel import PropertyChangedEventHandler



class ButtonType(Enum):
    CancelOrClose = 0
    Confirm = 1
    Alternate = 2


class IAssemblyRestrictedObject:
    @overload
    def Editable(self) -> bool: ...


class Notification:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, allowedAssemblies: Iterable[Assembly]): ...
    @overload
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    def Editable(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def ExecuteAssemblyProtectedCode(action: Action) -> None: ...
    @overload
    @staticmethod
    def ExecuteAssemblyProtectedCode(func: Callable[..., Any]) -> TResult: ...
    @property
    def AllowedAssemblies(self) -> ICollection: ...
    @property
    def AlternateButtonTitle(self) -> str: ...
    @property
    def ButtonClicked(self) -> Action: ...
    @property
    def CancelButtonTitle(self) -> str: ...
    @property
    def ConfirmButtonTitle(self) -> str: ...
    @property
    def DateUpdated(self) -> DateTime: ...
    @property
    def Description(self) -> str: ...
    @property
    def Item(self, key: str) -> str: ...
    @property
    def Message(self) -> str: ...
    @property
    def MetadataCopy(self) -> IDictionary: ...
    @property
    def SeverityLevel(self) -> Severity: ...
    @property
    def ShowEventId(self) -> Guid | None: ...
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HideModal(self) -> None: ...
    @overload
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    def RemoveMetadata(self, key: str) -> bool: ...
    @AlternateButtonTitle.setter
    def AlternateButtonTitle(self, value: str) -> None: ...
    @ButtonClicked.setter
    def ButtonClicked(self, value: Action) -> None: ...
    @CancelButtonTitle.setter
    def CancelButtonTitle(self, value: str) -> None: ...
    @ConfirmButtonTitle.setter
    def ConfirmButtonTitle(self, value: str) -> None: ...
    @Description.setter
    def Description(self, value: str) -> None: ...
    @Item.setter
    def Item(self, key: str, value: str) -> None: ...
    @Message.setter
    def Message(self, value: str) -> None: ...
    @SeverityLevel.setter
    def SeverityLevel(self, value: Severity) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @overload
    def ShowModal(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class NotificationButtonClickedArgs:
    @overload
    def __init__(self, notification: Notification, buttonClicked: ButtonType): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ButtonClicked(self) -> ButtonType: ...
    @property
    def Notification(self) -> Notification: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class NotificationCenter:
    Notifications: TrulyObservableOrderedSet
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class Severity(Enum):
    Debug = 0
    Info = 1
    Warning = 2
    Serious = 3
    Critical = 4


