from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Controls
import Gumball

__all__ = ['Controls', 'Gumball']


class CursorStyle(Enum):
    Default = 0
    Wait = 1
    CrossHair = 2
    Hand = 3
    Rotate = 4
    Magnify = 5
    ArrowCopy = 6
    CrosshairCopy = 7


from System import EventHandler
from .Forms import Form
from .Forms import DialogResult
from .Forms import MessageBoxButtons
from .Forms import MessageBoxIcon
from .Forms import IWin32Window
from Rhino import RhinoDoc
from System import Guid
from .Generic import IList
class Dialogs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def KillSplash() -> None: ...
    @overload
    @staticmethod
    def SetCustomColorDialog(handler: EventHandler) -> None: ...
    @overload
    @staticmethod
    def ShowAboutDialog(forceSimpleDialog: bool) -> None: ...
    @overload
    @staticmethod
    def ShowCheckListBox(title: str, message: str, items: IList, checkState: Iterable[bool]) -> Iterable[bool]: ...
    @overload
    @staticmethod
    def ShowColorDialog(color: Color) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def ShowColorDialog(color: Color4f, allowAlpha: bool) -> Tuple[bool, Color4f]: ...
    @overload
    @staticmethod
    def ShowColorDialog(parent: object, color: Color4f, allowAlpha: bool) -> Tuple[bool, Color4f]: ...
    @overload
    @staticmethod
    def ShowColorDialog(color: Color, includeButtonColors: bool, dialogTitle: str) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def ShowColorDialog(parent: object, color: Color4f, allowAlpha: bool, colorCallback: OnColorChangedEvent) -> Tuple[bool, Color4f]: ...
    @overload
    @staticmethod
    def ShowColorDialog(color: Color, includeButtonColors: bool, dialogTitle: str, namedColorList: NamedColorList) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def ShowColorDialog(parent: object, color: Color4f, allowAlpha: bool, namedColorList: NamedColorList, colorCallback: OnColorChangedEvent) -> Tuple[bool, Color4f]: ...
    @overload
    @staticmethod
    def ShowComboListBox(title: str, message: str, items: IList) -> object: ...
    @overload
    @staticmethod
    def ShowContextMenu(items: Iterable[str], screenPoint: Point, modes: Iterable[int]) -> int: ...
    @overload
    @staticmethod
    def ShowEditBox(title: str, message: str, defaultText: str, multiline: bool) -> Tuple[bool, str]: ...
    @overload
    @staticmethod
    def ShowLayerMaterialDialog(doc: RhinoDoc, layerIndices: Iterable[int]) -> bool: ...
    @overload
    @staticmethod
    def ShowLineTypes(title: str, message: str, doc: RhinoDoc) -> object: ...
    @overload
    @staticmethod
    def ShowLineTypes(title: str, message: str, doc: RhinoDoc, selectedLineTypeId: Guid) -> Guid: ...
    @overload
    @staticmethod
    def ShowListBox(title: str, message: str, items: IList) -> object: ...
    @overload
    @staticmethod
    def ShowListBox(title: str, message: str, items: IList, selectedItem: object) -> object: ...
    @overload
    @staticmethod
    def ShowMessage(message: str, title: str) -> ShowMessageResult: ...
    @overload
    @staticmethod
    def ShowMessage(message: str, title: str, buttons: ShowMessageButton, icon: ShowMessageIcon) -> ShowMessageResult: ...
    @overload
    @staticmethod
    def ShowMessage(parent: object, message: str, title: str, buttons: ShowMessageButton, icon: ShowMessageIcon, defaultButton: ShowMessageDefaultButton, options: ShowMessageOptions, mode: ShowMessageMode) -> ShowMessageResult: ...
    @overload
    @staticmethod
    def ShowMultiListBox(title: str, message: str, items: Iterable[str], defaults: Iterable[str]) -> Iterable[str]: ...
    @overload
    @staticmethod
    def ShowNumberBox(title: str, message: str, number: float) -> Tuple[bool, float]: ...
    @overload
    @staticmethod
    def ShowNumberBox(title: str, message: str, number: float, minimum: float, maximum: float) -> Tuple[bool, float]: ...
    @overload
    @staticmethod
    def ShowPrintWidths(title: str, message: str) -> float: ...
    @overload
    @staticmethod
    def ShowPrintWidths(title: str, message: str, selectedWidth: float) -> float: ...
    @overload
    @staticmethod
    def ShowPropertyListBox(title: str, message: str, items: MutableSequence[KeyValuePair]) -> Iterable[str]: ...
    @overload
    @staticmethod
    def ShowPropertyListBox(title: str, message: str, items: IList, values: Iterable[str]) -> Iterable[str]: ...
    @overload
    @staticmethod
    def ShowSelectLayerDialog(layerIndex: int, dialogTitle: str, showNewLayerButton: bool, showSetCurrentButton: bool, initialSetCurrentState: bool) -> Tuple[bool, int, bool]: ...
    @overload
    @staticmethod
    def ShowSelectLinetypeDialog(linetypeIndex: int, displayByLayer: bool) -> Tuple[bool, int]: ...
    @overload
    @staticmethod
    def ShowSelectMultipleLayersDialog(defaultLayerIndices: Iterable[int], dialogTitle: str, showNewLayerButton: bool) -> Tuple[bool, Iterable[int]]: ...
    @overload
    @staticmethod
    def ShowSunDialog(sun: Sun) -> bool: ...
    @overload
    @staticmethod
    def ShowTextDialog(message: str, title: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DistanceDisplayMode(Enum):
    Decimal = 0
    Fractional = 1
    FeetInches = 2


from System import IntPtr
from Rhino import RhinoDoc
class DrawingUtilities:
    @overload
    @staticmethod
    def BitmapFromIconResource(resourceName: str, assembly: Assembly) -> Bitmap: ...
    @overload
    @staticmethod
    def BitmapFromIconResource(resourceName: str, bitmapSize: Size, assembly: Assembly) -> Bitmap: ...
    @overload
    @staticmethod
    def BitmapFromSvg(svg: str, width: int, height: int) -> Bitmap: ...
    @overload
    @staticmethod
    def BitmapFromSvg(svg: str, width: int, height: int, adjustForDarkMode: bool) -> Bitmap: ...
    @overload
    @staticmethod
    def CreateCurvePreviewGeometry(curve: Curve, linetype: Linetype, width: int, height: int) -> MutableSequence[Iterable[Point2f]]: ...
    @overload
    @staticmethod
    def CreateMeshPreviewImage(mesh: Mesh, color: Color, size: Size) -> Bitmap: ...
    @overload
    @staticmethod
    def CreateMeshPreviewImage(meshes: Iterable[Mesh], colors: Iterable[Color], size: Size) -> Bitmap: ...
    @overload
    @staticmethod
    def CreateMeshPreviewImage(doc: RhinoDoc, meshes: Iterable[Mesh], colors: Iterable[Color], size: Size) -> Bitmap: ...
    @overload
    @staticmethod
    def DarkModeConvertPixel(r: int, g: int, b: int) -> Tuple[int, int, int]: ...
    @overload
    @staticmethod
    def DarkModeConvertPixels(rgbaBytes: Iterable[int]) -> Tuple[Iterable[int]]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IconFromResource(resourceName: str, assembly: Assembly) -> Icon: ...
    @overload
    @staticmethod
    def IconFromResource(resourceName: str, size: Size, assembly: Assembly) -> Icon: ...
    @overload
    @staticmethod
    def ImageFromResource(resourceName: str, assembly: Assembly) -> Image: ...
    @overload
    @staticmethod
    def LoadBitmapWithScaleDown(iconName: str, sizeDesired: int, assembly: Assembly) -> Bitmap: ...
    @overload
    @staticmethod
    def LoadIconWithScaleDown(iconName: str, sizeDesired: int, assembly: Assembly) -> Icon: ...
    @overload
    @staticmethod
    def MakeArgb(a: int, r: int, g: int, b: int) -> int: ...
    @overload
    @staticmethod
    def PixelsFromSvg(svg: str, width: int, height: int, premultiplyAlpha: bool, backgroundColor: Color) -> Iterable[int]: ...
    @overload
    @staticmethod
    def SvgToRhinoDibIntPtr(svg: str, width: int, height: int, adjustForDarkMode: bool, pRhinoDib: IntPtr) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FloatPanelMode(Enum):
    Show = 0
    Hide = 1
    Toggle = 2


class Fonts:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def BoldHeadingFont(cls) -> Font: ...
    @property
    @classmethod
    def HeadingFont(cls) -> Font: ...
    @property
    @classmethod
    def NormalFont(cls) -> Font: ...
    @property
    @classmethod
    def SmallFont(cls) -> Font: ...
    @property
    @classmethod
    def TitleFont(cls) -> Font: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def GetUiFont(style: Style, size: Size) -> Font: ...
    @overload
    def ToString(self) -> str: ...


class GetColorEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IncludeButtonColors(self) -> bool: ...
    @property
    def InputColor(self) -> Color: ...
    @property
    def SelectedColor(self) -> Color: ...
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @SelectedColor.setter
    def SelectedColor(self, value: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


from .Generic import IList
from System import IntPtr
class IDialogService:
    @overload
    def ObjectToWindowHandle(self, window: object, useMainRhinoWindowWhenNull: bool) -> IntPtr: ...
    @overload
    def ShowColorDialog(self, parent: object, color: Color4f, allowAlpha: bool, colorCallback: OnColorChangedEvent) -> Tuple[bool, Color4f]: ...
    @overload
    def ShowMultiListBox(self, title: str, message: str, items: Iterable[str], defaults: Iterable[str]) -> Iterable[str]: ...
    @overload
    def WrapAsIWin32Window(self, handle: IntPtr) -> object: ...


class IHelp:
    @property
    def HelpUrl(self) -> str: ...


class ILocalizationService:
    @overload
    def LocalizeCommandName(self, assembly: Assembly, languageId: int, english: str) -> str: ...
    @overload
    def LocalizeDialogItem(self, assembly: Assembly, languageId: int, key: str, english: str) -> str: ...
    @overload
    def LocalizeForm(self, assembly: Assembly, languageId: int, formOrUserControl: object) -> None: ...
    @overload
    def LocalizeString(self, assembly: Assembly, languageId: int, english: str, contextId: int) -> str: ...


class IPanel:
    @overload
    def PanelClosing(self, documentSerialNumber: int, onCloseDocument: bool) -> None: ...
    @overload
    def PanelHidden(self, documentSerialNumber: int, reason: ShowPanelReason) -> None: ...
    @overload
    def PanelShown(self, documentSerialNumber: int, reason: ShowPanelReason) -> None: ...


from System import EventHandler
from System import Guid
class IPanelsService:
    @overload
    def CreateDockBar(self, options: object) -> bool: ...
    @overload
    def DestroyNativeWindow(self, host: object, nativeObject: object, disposeOfNativeObject: bool) -> None: ...
    @overload
    def DockBarIdInUse(self, barId: Guid) -> bool: ...
    @overload
    def DockBarIsVisible(self, barId: Guid) -> bool: ...
    @overload
    def FactoryResetSettings(self) -> None: ...
    @overload
    def Float(self, barId: Guid, point: Point) -> bool: ...
    @overload
    def ResizeFloating(self, barId: Guid, size: Size) -> bool: ...
    @overload
    def SetF1Hook(self, nativeObject: object, hook: EventHandler) -> None: ...
    @overload
    def ShowDockBar(self, barId: Guid, show: bool) -> bool: ...
    @overload
    def StartDraggingDockBar(self, barId: Guid, mouseDownPoint: Point, screenStartPoint: Point) -> bool: ...
    @overload
    def SupportedType(self, type: type) -> Tuple[bool, str]: ...
    @overload
    def ToggleDocking(self, barId: Guid) -> bool: ...
    @overload
    def UnhookDeleteAndDestroyDockBar(self, id: Guid) -> bool: ...


from .Generic import IList
from System import Nullable
from Rhino import RhinoDoc
from System import Guid
class IRhinoUiDialogService:
    @overload
    def DetectColorScheme(self) -> Tuple[bool, bool]: ...
    @overload
    def IconFromResourceId(self, iconAssembly: Assembly, iconResourceId: str) -> Icon: ...
    @overload
    def SetToDefaultColorScheme(self, dark: bool) -> bool: ...
    @overload
    def ShowCheckListBox(self, title: str, message: str, items: IList, checkState: Iterable[bool]) -> Iterable[bool]: ...
    @overload
    def ShowComboListBox(self, title: str, message: str, items: IList) -> object: ...
    @overload
    def ShowEditBox(self, title: str, message: str, defaultText: str, multiline: bool) -> Tuple[bool, str]: ...
    @overload
    def ShowLineTypes(self, title: str, message: str, doc: RhinoDoc) -> object: ...
    @overload
    def ShowLineTypes(self, title: str, message: str, doc: RhinoDoc, selectedLinetypeId: Guid) -> Guid: ...
    @overload
    def ShowListBox(self, title: str, message: str, items: IList, selectedItem: object) -> object: ...
    @overload
    def ShowMultiListBox(self, items: Iterable[str], message: str, title: str, defaults: Iterable[str]) -> Iterable[str]: ...
    @overload
    def ShowNumberBox(self, title: str, message: str, number: float, minimum: float, maximum: float) -> Tuple[bool, float]: ...
    @overload
    def ShowPopupMenu(self, arrItems: Iterable[str], arrModes: Iterable[int], screenPointX: Nullable, screenPointY: Nullable) -> int: ...
    @overload
    def ShowPrintWidths(self, title: str, message: str) -> float: ...
    @overload
    def ShowPrintWidths(self, title: str, message: str, selectedWidth: float) -> float: ...
    @overload
    def ShowPropertyListBox(self, title: str, message: str, items: MutableSequence[KeyValuePair]) -> Iterable[str]: ...
    @overload
    def ShowPropertyListBox(self, title: str, message: str, items: IList, values: Iterable[str]) -> Iterable[str]: ...


from System import IntPtr
class IStackedDialogPageService:
    @overload
    def GetImageHandle(self, image: Image, canBeNull: bool) -> IntPtr: ...
    @overload
    def GetImageHandle(self, icon: Icon, canBeNull: bool) -> IntPtr: ...
    @overload
    def GetNativePageWindow(self, nativeWindowObject: object, isRhinoPanel: bool, applyPanelStyles: bool) -> Tuple[IntPtr, object]: ...
    @overload
    def GetNativePageWindow(self, pageObject: object, isRhinoPanel: bool, applyPanelStyles: bool) -> Tuple[IntPtr, object, object]: ...
    @overload
    def NativeHandle(self, host: object) -> IntPtr: ...
    @overload
    def RedrawPageControl(self, pageControl: object) -> None: ...
    @overload
    def SetNativeParent(self, hwndParent: IntPtr, host: object) -> bool: ...
    @overload
    def TryGetControlMinimumSize(self, controlObject: object) -> Tuple[bool, SizeF]: ...


class KeyboardKey(Enum):
    # None = 0
    Tab = 9
    PageUp = 33
    PageDown = 34
    End = 35
    Home = 36
    Num0 = 48
    Num1 = 49
    Num2 = 50
    Num3 = 51
    Num4 = 52
    Num5 = 53
    Num6 = 54
    Num7 = 55
    Num8 = 56
    Num9 = 57
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70
    G = 71
    H = 72
    I = 73
    J = 74
    K = 75
    L = 76
    M = 77
    N = 78
    O = 79
    P = 80
    Q = 81
    R = 82
    S = 83
    T = 84
    U = 85
    V = 86
    W = 87
    X = 88
    Y = 89
    Z = 90
    F1 = 112
    F2 = 113
    F3 = 114
    F4 = 115
    F5 = 116
    F6 = 117
    F7 = 118
    F8 = 119
    F9 = 120
    F10 = 121
    F11 = 122
    F12 = 123
    Semicolon = 186
    Equal = 187
    Comma = 188
    Minus = 189
    Period = 190
    Slash = 191
    Grave = 192
    LeftBracket = 219
    BackSlash = 220
    RightBracket = 221
    Quote = 222


class LOC:
    @overload
    @staticmethod
    def COMMANDNAME(english: str) -> str: ...
    @overload
    @staticmethod
    def CON(english: str) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def CON(english: str, assemblyFromObject: object) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def COV(english: str) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def COV(english: str, assemblyFromObject: object) -> LocalizeStringPair: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def STR(english: str) -> str: ...
    @overload
    @staticmethod
    def STR(english: str, assemblyOrObject: object) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import UnitSystem
from .InteropWrappers import SimpleArrayInt
from .InteropWrappers import ClassArrayString
class Localization:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FormatArea(area: float, units: UnitSystem, dimStyle: DimensionStyle, alternate: bool) -> str: ...
    @overload
    @staticmethod
    def FormatDistanceAndTolerance(distance: float, units: UnitSystem, dimStyle: DimensionStyle, alternate: bool) -> str: ...
    @overload
    @staticmethod
    def FormatNumber(x: float) -> str: ...
    @overload
    @staticmethod
    def FormatNumber(x: float, units: UnitSystem, mode: DistanceDisplayMode, precision: int, appendUnitSystemName: bool) -> str: ...
    @overload
    @staticmethod
    def FormatVolume(volume: float, units: UnitSystem, dimStyle: DimensionStyle, alternate: bool) -> str: ...
    @property
    @classmethod
    def CurrentLanguageId(cls) -> int: ...
    @property
    @classmethod
    def RunningAsEnglish(cls) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetLanguages() -> Tuple[bool, SimpleArrayInt, ClassArrayString]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def LocalizeCommandName(english: str) -> str: ...
    @overload
    @staticmethod
    def LocalizeCommandName(english: str, assemblyOrObject: object) -> str: ...
    @overload
    @staticmethod
    def LocalizeCommandOptionName(english: str, contextId: int) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def LocalizeCommandOptionName(english: str, assemblyOrObject: object, contextId: int) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def LocalizeCommandOptionValue(english: str, contextId: int) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def LocalizeCommandOptionValue(english: str, assemblyOrObject: object, contextId: int) -> LocalizeStringPair: ...
    @overload
    @staticmethod
    def LocalizeDialogItem(assemblyOrObject: object, key: str, english: str) -> str: ...
    @overload
    @staticmethod
    def LocalizeForm(formOrUserControl: object) -> None: ...
    @overload
    @staticmethod
    def LocalizeString(english: str, contextId: int) -> str: ...
    @overload
    @staticmethod
    def LocalizeString(english: str, assemblyOrObject: object, contextId: int) -> str: ...
    @overload
    @staticmethod
    def SetLanguageId(id: int) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UnitSystemName(units: UnitSystem, capitalize: bool, singular: bool, abbreviate: bool) -> str: ...


class LocalizeStringPair:
    @overload
    def __init__(self, english: str, local: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def English(self) -> str: ...
    @property
    def Local(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(lcp: LocalizeStringPair) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ModifierKey(Enum):
    # None = 0
    Control = 1
    MacCommand = 1
    Shift = 2
    Alt = 4
    MacControl = 8


class MouseButton(Enum):
    # None = 0
    Left = 1
    Right = 2
    Middle = 4


class MouseCallback:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from .Forms import MouseButtons
from .Gumball import GumballMode
class MouseCallbackEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Button(self) -> MouseButtons: ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def CtrlKeyDown(self) -> bool: ...
    @property
    def MouseButton(self) -> MouseButton: ...
    @property
    def ShiftKeyDown(self) -> bool: ...
    @property
    def View(self) -> RhinoView: ...
    @property
    def ViewportPoint(self) -> Point: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsOverGumball(self) -> GumballMode: ...
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class MouseCursor:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def Location(cls) -> Point2d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def SetToolTip(tooltip: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class NamedColor:
    @overload
    def __init__(self, name: str, color: Color): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from .ObjectModel import ReadOnlyCollection
from .Generic import IComparer
from System import Predicate
from System import Action
from .Generic import Enumerator
from System import Comparison
from System import Converter
class NamedColorList:
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, entries: Iterable[NamedColor]): ...
    def __iter__(self) -> Iterator[NamedColor]: ...
    def __getitem__(self, index: int) -> NamedColor: ...
    def __setitem__(self, index: int, value: NamedColor): ...
    @overload
    def Add(self, item: NamedColor) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[NamedColor]) -> None: ...
    @overload
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: NamedColor) -> int: ...
    @overload
    def BinarySearch(self, item: NamedColor, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: NamedColor, comparer: IComparer) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: NamedColor) -> bool: ...
    @overload
    def ConvertAll(self, converter: Converter) -> MutableSequence[TOutput]: ...
    @overload
    def CopyTo(self, array: Iterable[NamedColor]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[NamedColor], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[NamedColor], arrayIndex: int, count: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Exists(self, match: Predicate) -> bool: ...
    @overload
    def Find(self, match: Predicate) -> NamedColor: ...
    @overload
    def FindAll(self, match: Predicate) -> MutableSequence[NamedColor]: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def FindLast(self, match: Predicate) -> NamedColor: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    @classmethod
    def Default(cls) -> NamedColorList: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRange(self, index: int, count: int) -> MutableSequence[NamedColor]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: NamedColor) -> int: ...
    @overload
    def IndexOf(self, item: NamedColor, index: int) -> int: ...
    @overload
    def IndexOf(self, item: NamedColor, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, item: NamedColor) -> None: ...
    @overload
    def InsertRange(self, index: int, collection: Iterable[NamedColor]) -> None: ...
    @overload
    def LastIndexOf(self, item: NamedColor) -> int: ...
    @overload
    def LastIndexOf(self, item: NamedColor, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: NamedColor, index: int, count: int) -> int: ...
    @overload
    def Remove(self, item: NamedColor) -> bool: ...
    @overload
    def RemoveAll(self, match: Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @property
    def Item(self) -> MutableSequence[NamedColor]: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    @overload
    def ToArray(self) -> Iterable[NamedColor]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TrimExcess(self) -> None: ...
    @overload
    def TrueForAll(self, match: Predicate) -> bool: ...


from System import IntPtr
from System import Action
from Rhino import RhinoDoc
class ObjectPropertiesPage:
    @overload
    def AnySelectedObject(self) -> bool: ...
    @overload
    def AnySelectedObject(self, allMustMatch: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AllObjectsMustBeSupported(self) -> bool: ...
    @property
    def EnglishPageTitle(self) -> str: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def Index(self) -> int: ...
    @property
    def LocalPageTitle(self) -> str: ...
    @property
    def PageControl(self) -> object: ...
    @property
    def PageIconEmbeddedResourceString(self) -> str: ...
    @property
    def PageType(self) -> PropertyPageType: ...
    @property
    def SelectedObjects(self) -> Iterable[RhinoObject]: ...
    @property
    def SupportedTypes(self) -> ObjectType: ...
    @property
    def SupportsSubObjects(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectedObjects(self) -> Iterable[T]: ...
    @overload
    def GetSelectedObjects(self, filter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ModifyPage(self, callbackAction: Action) -> None: ...
    @overload
    def OnActivate(self, active: bool) -> bool: ...
    @overload
    def OnCreateParent(self, hwndParent: IntPtr) -> None: ...
    @overload
    def OnHelp(self) -> None: ...
    @overload
    def OnSizeParent(self, width: int, height: int) -> None: ...
    @overload
    def PageIcon(self, sizeInPixels: Size) -> Icon: ...
    @overload
    def RunScript(self, e: ObjectPropertiesPageEventArgs) -> Result: ...
    @overload
    def ShouldDisplay(self, e: ObjectPropertiesPageEventArgs) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdatePage(self, e: ObjectPropertiesPageEventArgs) -> None: ...


from Rhino import RhinoDoc
class ObjectPropertiesPageCollection:
    @overload
    def Add(self, page: ObjectPropertiesPage) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentRuntimeSerialNumber(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
class ObjectPropertiesPageEventArgs:
    @overload
    def __init__(self, page: ObjectPropertiesPage): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DocRuntimeSerialNumber(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventRuntimeSerialNumber(self) -> int: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> Iterable[RhinoObject]: ...
    @property
    def ObjectTypes(self) -> int: ...
    @property
    def Page(self) -> ObjectPropertiesPage: ...
    @property
    def View(self) -> RhinoView: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjects(self) -> Iterable[T]: ...
    @overload
    def GetObjects(self, filter: ObjectType) -> Iterable[RhinoObject]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IncludesObjectsType(self) -> bool: ...
    @overload
    def IncludesObjectsType(self, objectTypes: ObjectType) -> bool: ...
    @overload
    def IncludesObjectsType(self, allMustMatch: bool) -> bool: ...
    @overload
    def IncludesObjectsType(self, objectTypes: ObjectType, allMustMatch: bool) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class OnColorChangedEvent:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, color: Color4f, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, color: Color4f) -> None: ...
    @overload
    def ToString(self) -> str: ...


from .Forms import DialogResult
class OpenFileDialog:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DefaultExt(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileNames(self) -> Iterable[str]: ...
    @property
    def Filter(self) -> str: ...
    @property
    def InitialDirectory(self) -> str: ...
    @property
    def MultiSelect(self) -> bool: ...
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @DefaultExt.setter
    def DefaultExt(self, value: str) -> None: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @InitialDirectory.setter
    def InitialDirectory(self, value: str) -> None: ...
    @MultiSelect.setter
    def MultiSelect(self, value: bool) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @overload
    def ShowOpenDialog(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class OptionPageButtons(Enum):
    # None = 0
    DefaultButton = 1
    ApplyButton = 2


from Rhino import RhinoDoc
from System import IntPtr
class OptionsDialogPage(StackedDialogPage):
    @overload
    def AddChildPage(self, pageToAdd: StackedDialogPage) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Children(self) -> MutableSequence[StackedDialogPage]: ...
    @property
    def EnglishPageTitle(self) -> str: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def LocalPageTitle(self) -> str: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def NavigationTextColor(self) -> Color: ...
    @property
    def NavigationTextIsBold(self) -> bool: ...
    @property
    def OptionsPageType(self) -> PageType: ...
    @property
    def PageControl(self) -> object: ...
    @property
    def PageImage(self) -> Image: ...
    @property
    def ShowApplyButton(self) -> bool: ...
    @property
    def ShowDefaultsButton(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MakeActivePage(self) -> None: ...
    @overload
    def OnActivate(self, active: bool) -> bool: ...
    @overload
    def OnApply(self) -> bool: ...
    @overload
    def OnCancel(self) -> None: ...
    @overload
    def OnCreateParent(self, hwndParent: IntPtr) -> None: ...
    @overload
    def OnDefaults(self) -> None: ...
    @overload
    def OnHelp(self) -> None: ...
    @overload
    def OnSizeParent(self, width: int, height: int) -> None: ...
    @overload
    def RemovePage(self) -> None: ...
    @overload
    def RunScript(self, doc: RhinoDoc, mode: RunMode) -> Result: ...
    @Modified.setter
    def Modified(self, value: bool) -> None: ...
    @NavigationTextColor.setter
    def NavigationTextColor(self, value: Color) -> None: ...
    @NavigationTextIsBold.setter
    def NavigationTextIsBold(self, value: bool) -> None: ...
    @overload
    def SetActivePageTo(self, pageName: str, documentPropertiesPage: bool) -> bool: ...
    @overload
    def SetEnglishPageTitle(self, newPageTile: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PageType(Enum):
    Options = 0
    DocumentProperties = 1


from System import Guid
from Rhino import RhinoDoc
class PanelEventArgs:
    @overload
    def __init__(self, panelId: Guid, documentSerialNumber: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentSerialNumber(self) -> int: ...
    @property
    def PanelId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class PanelIds:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def BoxEdit(cls) -> Guid: ...
    @property
    @classmethod
    def ContextHelp(cls) -> Guid: ...
    @property
    @classmethod
    def Display(cls) -> Guid: ...
    @property
    @classmethod
    def Environment(cls) -> Guid: ...
    @property
    @classmethod
    def FileExplorer(cls) -> Guid: ...
    @property
    @classmethod
    def GroundPlane(cls) -> Guid: ...
    @property
    @classmethod
    def Layers(cls) -> Guid: ...
    @property
    @classmethod
    def Libraries(cls) -> Guid: ...
    @property
    @classmethod
    def LightManager(cls) -> Guid: ...
    @property
    @classmethod
    def Materials(cls) -> Guid: ...
    @property
    @classmethod
    def Notes(cls) -> Guid: ...
    @property
    @classmethod
    def ObjectProperties(cls) -> Guid: ...
    @property
    @classmethod
    def Rendering(cls) -> Guid: ...
    @property
    @classmethod
    def Sun(cls) -> Guid: ...
    @property
    @classmethod
    def Texture(cls) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from Rhino import RhinoDoc
from System import EventHandler
class Panels:
    @overload
    @staticmethod
    def add_Closed(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Show(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def ChangePanelIcon(panelType: type, fullPathToResource: str) -> None: ...
    @overload
    @staticmethod
    def ChangePanelIcon(panelType: type, icon: Icon) -> None: ...
    @overload
    @staticmethod
    def ClosePanel(panelType: type) -> None: ...
    @overload
    @staticmethod
    def ClosePanel(panelId: Guid) -> None: ...
    @overload
    @staticmethod
    def ClosePanel(panelType: type, doc: RhinoDoc) -> None: ...
    @overload
    @staticmethod
    def ClosePanel(panelId: Guid, doc: RhinoDoc) -> None: ...
    @overload
    @staticmethod
    def DockBarIdInUse(dockBarId: Guid) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FloatPanel(panelTypeId: Guid, mode: FloatPanelMode) -> bool: ...
    @overload
    @staticmethod
    def FloatPanel(panelType: type, mode: FloatPanelMode) -> bool: ...
    @property
    @classmethod
    def EtoPanelStyleName(cls) -> str: ...
    @property
    @classmethod
    def IconSize(cls) -> Size: ...
    @property
    @classmethod
    def IconSizeInPixels(cls) -> Size: ...
    @property
    @classmethod
    def ScaledIconSize(cls) -> Size: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetOpenPanelIds() -> Iterable[Guid]: ...
    @overload
    @staticmethod
    def GetPanel(documentSerialNumber: int) -> T: ...
    @overload
    @staticmethod
    def GetPanel(rhinoDoc: RhinoDoc) -> T: ...
    @overload
    @staticmethod
    def GetPanel(panelId: Guid, rhinoDoc: RhinoDoc) -> object: ...
    @overload
    @staticmethod
    def GetPanel(panelId: Guid, documentSerialNumber: int) -> object: ...
    @overload
    @staticmethod
    def GetPanels(documentRuntimeSerialNumber: int) -> Iterable[T]: ...
    @overload
    @staticmethod
    def GetPanels(doc: RhinoDoc) -> Iterable[T]: ...
    @overload
    @staticmethod
    def GetPanels(panelId: Guid, doc: RhinoDoc) -> Iterable[object]: ...
    @overload
    @staticmethod
    def GetPanels(panelId: Guid, documentRuntimeSerialNumber: int) -> Iterable[object]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsHiding(reason: ShowPanelReason) -> bool: ...
    @overload
    @staticmethod
    def IsPanelVisible(panelId: Guid) -> bool: ...
    @overload
    @staticmethod
    def IsPanelVisible(panelType: type) -> bool: ...
    @overload
    @staticmethod
    def IsPanelVisible(panelId: Guid, isSelectedTab: bool) -> bool: ...
    @overload
    @staticmethod
    def IsPanelVisible(panelType: type, isSelectedTab: bool) -> bool: ...
    @overload
    @staticmethod
    def IsShowing(reason: ShowPanelReason) -> bool: ...
    @overload
    @staticmethod
    def OnClosePanel(panelId: Guid, documentSerialNumber: int) -> None: ...
    @overload
    @staticmethod
    def OnShowPanel(panelId: Guid, documentSerialNumber: int, show: bool) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(panelType: type) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(panelId: Guid) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(dockBarId: Guid, panelType: type) -> Guid: ...
    @overload
    @staticmethod
    def OpenPanel(panelId: Guid, makeSelectedPanel: bool) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(dockBarId: Guid, panelId: Guid) -> Guid: ...
    @overload
    @staticmethod
    def OpenPanel(panelType: type, makeSelectedPanel: bool) -> None: ...
    @overload
    @staticmethod
    def OpenPanel(dockBarId: Guid, panelId: Guid, makeSelectedPanel: bool) -> Guid: ...
    @overload
    @staticmethod
    def OpenPanel(dockBarId: Guid, panelType: type, makeSelectedPanel: bool) -> Guid: ...
    @overload
    @staticmethod
    def OpenPanelAsSibling(panelId: Guid, siblingPanelId: Guid) -> bool: ...
    @overload
    @staticmethod
    def OpenPanelAsSibling(panelId: Guid, siblingPanelId: Guid, makeSelectedPanel: bool) -> bool: ...
    @overload
    @staticmethod
    def PanelDockBar(panelId: Guid) -> Guid: ...
    @overload
    @staticmethod
    def PanelDockBar(panelType: type) -> Guid: ...
    @overload
    @staticmethod
    def PanelDockBars(panelId: Guid) -> Iterable[Guid]: ...
    @overload
    @staticmethod
    def RegisterPanel(plugin: PlugIn, panelType: type, caption: str, icon: Icon) -> None: ...
    @overload
    @staticmethod
    def RegisterPanel(plugIn: PlugIn, type: type, caption: str, icon: Icon, panelType: PanelType) -> None: ...
    @overload
    @staticmethod
    def RegisterPanel(plugIn: PlugIn, type: type, caption: str, iconAssembly: Assembly, iconResourceId: str, panelType: PanelType) -> None: ...
    @overload
    @staticmethod
    def remove_Closed(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Show(value: EventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PanelType(Enum):
    PerDoc = 0
    System = 1


class PropertyPageType(Enum):
    Material = 0
    Light = 1
    Custom = 2
    ObjectProperties = 3
    Dimension = 4
    Leader = 5
    Text = 6
    Hatch = 7
    Dot = 8
    TextureMapping = 9
    Detail = 10
    ClippingPlane = 11
    NamedView = 12
    Decal = 13
    View = 14
    PageCount = 15


class RhinoGetPlotWidthArgs(Enum):
    NoArgs = 0
    ByLayer = 1
    ByParent = 2
    HairLine = 4
    Default = 8
    # None = 32
    All = 268435455


class RhinoHelp:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Show(helpLink: str) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
class RhinoPageInterop:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def NewPropertiesPanelPagePointer(page: ObjectPropertiesPage, rhinoDocRuntimeSn: int) -> IntPtr: ...
    @overload
    @staticmethod
    def StackedDialogPageFromUnmanagedPointer(pointer: IntPtr) -> StackedDialogPage: ...
    @overload
    def ToString(self) -> str: ...


class RhinoPlotWidthType(Enum):
    ByLayer = 0
    ByParent = 1
    Hairline = 2
    Default = 3
    # None = 4
    Varies = 5
    Width = 6


class RhinoPlotWidthValue(Enum):
    Default = 0
    Varies = -20
    ByParent = -15
    ByLayer = -10
    # None = -1


from System import Guid
from System import IntPtr
class RuiUpdateUi:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Checked(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FileId(self) -> Guid: ...
    @property
    def MenuHandle(self) -> IntPtr: ...
    @property
    def MenuId(self) -> Guid: ...
    @property
    def MenuIndex(self) -> int: ...
    @property
    def MenuItemId(self) -> Guid: ...
    @property
    def RadioChecked(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def WindowsMenuItemId(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def RegisterMenuItem(file: Guid, menu: Guid, item: Guid, callBack: UpdateMenuItemEventHandler) -> bool: ...
    @overload
    @staticmethod
    def RegisterMenuItem(fileId: str, menuId: str, itemId: str, callBack: UpdateMenuItemEventHandler) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @RadioChecked.setter
    def RadioChecked(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from .Forms import DialogResult
class SaveFileDialog:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DefaultExt(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Filter(self) -> str: ...
    @property
    def InitialDirectory(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @DefaultExt.setter
    def DefaultExt(self, value: str) -> None: ...
    @FileName.setter
    def FileName(self, value: str) -> None: ...
    @Filter.setter
    def Filter(self, value: str) -> None: ...
    @InitialDirectory.setter
    def InitialDirectory(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @overload
    def ShowSaveDialog(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class ShowMessageButton(Enum):
    OK = 0
    OKCancel = 1
    AbortRetryIgnore = 2
    YesNoCancel = 3
    YesNo = 4
    RetryCancel = 5


class ShowMessageDefaultButton(Enum):
    Button1 = 0
    Button2 = 256
    Button3 = 512


class ShowMessageIcon(Enum):
    # None = 0
    Error = 16
    Hand = 16
    Stop = 16
    Question = 32
    Exclamation = 48
    Warning = 48
    Information = 64
    Asterisk = 64


class ShowMessageMode(Enum):
    ApplicationModal = 0
    SystemModal = 4096
    TaskModal = 8192


class ShowMessageOptions(Enum):
    # None = 0
    SetForeground = 65536
    DefaultDesktopOnly = 131072
    TopMost = 262144
    RightAlign = 524288
    RtlReading = 1048576
    ServiceNotification = 2097152


class ShowMessageResult(Enum):
    # None = 0
    OK = 1
    Cancel = 2
    Abort = 3
    Retry = 4
    Ignore = 5
    Yes = 6
    No = 7


from System import Guid
from Rhino import RhinoDoc
class ShowPanelEventArgs(PanelEventArgs):
    @overload
    def __init__(self, panelId: Guid, documentSerialNumber: int, show: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentSerialNumber(self) -> int: ...
    @property
    def PanelId(self) -> Guid: ...
    @property
    def Show(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ShowPanelReason(Enum):
    Show = 0
    Hide = 1
    HideOnDeactivate = 2
    ShowOnDeactivate = 3


class Size(Enum):
    Small = 0
    Normal = 1
    Large = 2
    Title = 3


from System import IntPtr
class StackedDialogPage:
    @overload
    def AddChildPage(self, pageToAdd: StackedDialogPage) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Children(self) -> MutableSequence[StackedDialogPage]: ...
    @property
    def EnglishPageTitle(self) -> str: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def LocalPageTitle(self) -> str: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def NavigationTextColor(self) -> Color: ...
    @property
    def NavigationTextIsBold(self) -> bool: ...
    @property
    def PageControl(self) -> object: ...
    @property
    def PageImage(self) -> Image: ...
    @property
    def ShowApplyButton(self) -> bool: ...
    @property
    def ShowDefaultsButton(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MakeActivePage(self) -> None: ...
    @overload
    def OnActivate(self, active: bool) -> bool: ...
    @overload
    def OnApply(self) -> bool: ...
    @overload
    def OnCancel(self) -> None: ...
    @overload
    def OnCreateParent(self, hwndParent: IntPtr) -> None: ...
    @overload
    def OnDefaults(self) -> None: ...
    @overload
    def OnHelp(self) -> None: ...
    @overload
    def OnSizeParent(self, width: int, height: int) -> None: ...
    @overload
    def RemovePage(self) -> None: ...
    @Modified.setter
    def Modified(self, value: bool) -> None: ...
    @NavigationTextColor.setter
    def NavigationTextColor(self, value: Color) -> None: ...
    @NavigationTextIsBold.setter
    def NavigationTextIsBold(self, value: bool) -> None: ...
    @overload
    def SetActivePageTo(self, pageName: str, documentPropertiesPage: bool) -> bool: ...
    @overload
    def SetEnglishPageTitle(self, newPageTile: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class StatusBar:
    @overload
    @staticmethod
    def ClearMessagePane() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def HideProgressMeter() -> None: ...
    @overload
    @staticmethod
    def HideProgressMeter(docSerialNumber: int) -> None: ...
    @overload
    @staticmethod
    def SetDistancePane(distance: float) -> None: ...
    @overload
    @staticmethod
    def SetMessagePane(message: str) -> None: ...
    @overload
    @staticmethod
    def SetNumberPane(number: float) -> None: ...
    @overload
    @staticmethod
    def SetPointPane(point: Point3d) -> None: ...
    @overload
    @staticmethod
    def ShowProgressMeter(lowerLimit: int, upperLimit: int, label: str, embedLabel: bool, showPercentComplete: bool) -> int: ...
    @overload
    @staticmethod
    def ShowProgressMeter(docSerialNumber: int, lowerLimit: int, upperLimit: int, label: str, embedLabel: bool, showPercentComplete: bool) -> int: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UpdateProgressMeter(position: int, absolute: bool) -> int: ...
    @overload
    @staticmethod
    def UpdateProgressMeter(label: str, position: int, absolute: bool) -> int: ...
    @overload
    @staticmethod
    def UpdateProgressMeter(docSerialNumber: int, position: int, absolute: bool) -> int: ...
    @overload
    @staticmethod
    def UpdateProgressMeter(docSerialNumber: int, label: str, position: int, absolute: bool) -> int: ...


class Style(Enum):
    Regular = 0
    Bold = 1
    Italic = 2
    Underline = 4
    Strikeout = 8


from System import Guid
class Toolbar:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def BitmapSize(cls) -> Size: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    @classmethod
    def TabSize(cls) -> Size: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @BitmapSize.setter
    @classmethod
    def BitmapSize(clsvalue: Size) -> None: ...
    @TabSize.setter
    @classmethod
    def TabSize(clsvalue: Size) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class ToolbarFile:
    @overload
    def Close(self, prompt: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def GroupCount(self) -> int: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def Path(self) -> str: ...
    @property
    def ToolbarCount(self) -> int: ...
    @overload
    def GetGroup(self, index: int) -> ToolbarGroup: ...
    @overload
    def GetGroup(self, name: str) -> ToolbarGroup: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetToolbar(self, index: int) -> Toolbar: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Save(self) -> bool: ...
    @overload
    def SaveAs(self, path: str) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class ToolbarFileCollection:
    def __iter__(self) -> Iterator[ToolbarFile]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindByName(self, name: str, ignoreCase: bool) -> ToolbarFile: ...
    @overload
    def FindByPath(self, path: str) -> ToolbarFile: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Sequence[ToolbarFile]: ...
    @property
    @classmethod
    def MruSidebarIsVisible(cls) -> bool: ...
    @property
    @classmethod
    def SidebarIsVisible(cls) -> bool: ...
    @overload
    def GetEnumerator(self) -> Iterator[ToolbarFile]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Open(self, path: str) -> ToolbarFile: ...
    @MruSidebarIsVisible.setter
    @classmethod
    def MruSidebarIsVisible(clsvalue: bool) -> None: ...
    @SidebarIsVisible.setter
    @classmethod
    def SidebarIsVisible(clsvalue: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class ToolbarGroup:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class UpdateMenuItemEventHandler:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, cmdui: RuiUpdateUi, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, cmdui: RuiUpdateUi) -> None: ...
    @overload
    def ToString(self) -> str: ...


class WaitCursor:
    @overload
    def __init__(self): ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Set(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
