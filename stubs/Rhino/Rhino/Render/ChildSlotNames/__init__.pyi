from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from Rhino.DocObjects import TextureType
class PhysicallyBased:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromTextureType(textureType: TextureType) -> str: ...
    @property
    @classmethod
    def Alpha(cls) -> str: ...
    @property
    @classmethod
    def AmbientOcclusion(cls) -> str: ...
    @property
    @classmethod
    def Anisotropic(cls) -> str: ...
    @property
    @classmethod
    def AnisotropicRotation(cls) -> str: ...
    @property
    @classmethod
    def BaseColor(cls) -> str: ...
    @property
    @classmethod
    def Bump(cls) -> str: ...
    @property
    @classmethod
    def Clearcoat(cls) -> str: ...
    @property
    @classmethod
    def ClearcoatBump(cls) -> str: ...
    @property
    @classmethod
    def ClearcoatRoughness(cls) -> str: ...
    @property
    @classmethod
    def Displacement(cls) -> str: ...
    @property
    @classmethod
    def Emission(cls) -> str: ...
    @property
    @classmethod
    def Metallic(cls) -> str: ...
    @property
    @classmethod
    def Opacity(cls) -> str: ...
    @property
    @classmethod
    def OpacityIor(cls) -> str: ...
    @property
    @classmethod
    def OpacityRoughness(cls) -> str: ...
    @property
    @classmethod
    def Roughness(cls) -> str: ...
    @property
    @classmethod
    def Sheen(cls) -> str: ...
    @property
    @classmethod
    def SheenTint(cls) -> str: ...
    @property
    @classmethod
    def Specular(cls) -> str: ...
    @property
    @classmethod
    def SpecularTint(cls) -> str: ...
    @property
    @classmethod
    def Subsurface(cls) -> str: ...
    @property
    @classmethod
    def SubsurfaceScatteringColor(cls) -> str: ...
    @property
    @classmethod
    def SubsurfaceScatteringRadius(cls) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
