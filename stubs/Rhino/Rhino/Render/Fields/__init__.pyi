from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum



class BoolField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


class ByteArrayField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Iterable[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Iterable[int]) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from Rhino.Display import Color4f
from System.Drawing import Color
class Color4fField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def SystemColorValue(self) -> Color: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Color4f: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @SystemColorValue.setter
    def SystemColorValue(self, value: Color) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Color4f) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from System import DateTime
class DateTimeField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> DateTime: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: DateTime) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


class DoubleField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


class Field:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from System import Guid
from Rhino.Render import ChangeContexts
from Rhino.Geometry import Transform
from System import DateTime
from Rhino.Display import Color4f
from System.Drawing import Color
from Rhino.Geometry import Vector2d
from Rhino.Geometry import Vector3d
from Rhino.Geometry import Point2d
from Rhino.Geometry import Point3d
from Rhino.Geometry import Point4d
class FieldDictionary:
    def __iter__(self) -> Iterator[Any]: ...
    @overload
    def Add(self, key: str, value: Point3d) -> Point3dField: ...
    @overload
    def Add(self, key: str, value: float) -> FloatField: ...
    @overload
    def Add(self, key: str, value: int) -> IntField: ...
    @overload
    def Add(self, key: str, value: Vector2d) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: bool) -> BoolField: ...
    @overload
    def Add(self, key: str, value: Vector3d) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: str) -> StringField: ...
    @overload
    def Add(self, key: str, value: Point2d) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: Point4d) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: Guid) -> GuidField: ...
    @overload
    def Add(self, key: str, value: Transform) -> TransformField: ...
    @overload
    def Add(self, key: str, value: Color) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: Iterable[int]) -> ByteArrayField: ...
    @overload
    def Add(self, key: str, value: Color4f) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: DateTime) -> DateTimeField: ...
    @overload
    def Add(self, key: str, value: float) -> DoubleField: ...
    @overload
    def Add(self, key: str, value: Point3d, prompt: str) -> Point3dField: ...
    @overload
    def Add(self, key: str, prompt: str, sectionId: int) -> NullField: ...
    @overload
    def Add(self, key: str, value: bool, prompt: str) -> BoolField: ...
    @overload
    def Add(self, key: str, value: str, prompt: str) -> StringField: ...
    @overload
    def Add(self, key: str, value: Transform, prompt: str) -> TransformField: ...
    @overload
    def Add(self, key: str, value: DateTime, prompt: str) -> DateTimeField: ...
    @overload
    def Add(self, key: str, value: Point2d, prompt: str) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: float, prompt: str) -> FloatField: ...
    @overload
    def Add(self, key: str, value: Vector3d, prompt: str) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: Vector2d, prompt: str) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: float, prompt: str) -> DoubleField: ...
    @overload
    def Add(self, key: str, value: Point4d, prompt: str) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: int, prompt: str) -> IntField: ...
    @overload
    def Add(self, key: str, value: Guid, prompt: str) -> GuidField: ...
    @overload
    def Add(self, key: str, value: Color4f, prompt: str) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: Color, prompt: str) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: Vector2d, prompt: str, sectionId: int) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: bool, prompt: str, sectionId: int) -> BoolField: ...
    @overload
    def Add(self, key: str, value: int, prompt: str, sectionId: int) -> IntField: ...
    @overload
    def Add(self, key: str, value: Transform, prompt: str, sectionId: int) -> TransformField: ...
    @overload
    def Add(self, key: str, value: DateTime, prompt: str, sectionId: int) -> DateTimeField: ...
    @overload
    def Add(self, key: str, value: str, prompt: str, sectionId: int) -> StringField: ...
    @overload
    def Add(self, key: str, value: float, prompt: str, sectionId: int) -> DoubleField: ...
    @overload
    def Add(self, key: str, value: Point2d, prompt: str, sectionId: int) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: Point3d, prompt: str, sectionId: int) -> Point3dField: ...
    @overload
    def Add(self, key: str, value: float, prompt: str, sectionId: int) -> FloatField: ...
    @overload
    def Add(self, key: str, value: Point4d, prompt: str, sectionId: int) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: Guid, prompt: str, sectionId: int) -> GuidField: ...
    @overload
    def Add(self, key: str, value: Vector3d, prompt: str, sectionId: int) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: Color4f, prompt: str, sectionId: int) -> Color4fField: ...
    @overload
    def AddFilename(self, key: str, value: str, prompt: str, sectionId: int) -> StringField: ...
    @overload
    def AddTextured(self, key: str, prompt: str) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: Vector3d, prompt: str) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: Point2d, prompt: str) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, value: Point3d, prompt: str) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, value: Point4d, prompt: str) -> Point4dField: ...
    @overload
    def AddTextured(self, key: str, value: Guid, prompt: str) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: Transform, prompt: str) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: DateTime, prompt: str) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, prompt: str, treatAsLinear: bool) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: Color, prompt: str) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: Vector2d, prompt: str) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str) -> IntField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str) -> BoolField: ...
    @overload
    def AddTextured(self, key: str, value: Point3d, prompt: str, treatAsLinear: bool) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: Vector3d, prompt: str, treatAsLinear: bool) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: Point4d, prompt: str, treatAsLinear: bool) -> Point4dField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str, treatAsLinear: bool) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: Vector2d, prompt: str, treatAsLinear: bool) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: Guid, prompt: str, treatAsLinear: bool) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: Point2d, prompt: str, treatAsLinear: bool) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str, treatAsLinear: bool) -> BoolField: ...
    @overload
    def AddTextured(self, key: str, value: Color, prompt: str, treatAsLinear: bool) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str, treatAsLinear: bool) -> IntField: ...
    @overload
    def AddTextured(self, key: str, value: Color4f, prompt: str, treatAsLinear: bool) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: DateTime, prompt: str, treatAsLinear: bool) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, prompt: str, treatAsLinear: bool, sectionId: int) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: Transform, prompt: str, treatAsLinear: bool) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: Transform, prompt: str, treatAsLinear: bool, sectionId: int) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: Guid, prompt: str, treatAsLinear: bool, sectionId: int) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: DateTime, prompt: str, treatAsLinear: bool, sectionId: int) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, value: Point4d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point4dField: ...
    @overload
    def AddTextured(self, key: str, value: Point3d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, value: Point2d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool, sectionId: int) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: Color4f, prompt: str, treatAsLinear: bool, sectionId: int) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: Vector2d, prompt: str, treatAsLinear: bool, sectionId: int) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str, treatAsLinear: bool, sectionId: int) -> IntField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool, sectionId: int) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str, treatAsLinear: bool, sectionId: int) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: Vector3d, prompt: str, treatAsLinear: bool, sectionId: int) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str, treatAsLinear: bool, sectionId: int) -> BoolField: ...
    @overload
    def ContainsField(self, fieldName: str) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetEnumerator(self) -> Iterator[Field]: ...
    @overload
    def GetField(self, fieldName: str) -> Field: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RemoveField(self, fieldName: str) -> None: ...
    @overload
    def Set(self, key: str, value: Iterable[int]) -> None: ...
    @overload
    def Set(self, key: str, value: DateTime) -> None: ...
    @overload
    def Set(self, key: str, value: Guid) -> None: ...
    @overload
    def Set(self, key: str, value: Point4d) -> None: ...
    @overload
    def Set(self, key: str, value: Transform) -> None: ...
    @overload
    def Set(self, key: str, value: str) -> None: ...
    @overload
    def Set(self, key: str, value: int) -> None: ...
    @overload
    def Set(self, key: str, value: Point3d) -> None: ...
    @overload
    def Set(self, key: str, value: bool) -> None: ...
    @overload
    def Set(self, key: str, value: Point2d) -> None: ...
    @overload
    def Set(self, key: str, value: Vector3d) -> None: ...
    @overload
    def Set(self, key: str, value: float) -> None: ...
    @overload
    def Set(self, key: str, value: Vector2d) -> None: ...
    @overload
    def Set(self, key: str, value: float) -> None: ...
    @overload
    def Set(self, key: str, value: Color) -> None: ...
    @overload
    def Set(self, key: str, value: Color4f) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Point2d]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Iterable[int]]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, DateTime]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Transform]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Guid]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, T]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, str]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, bool]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, int]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, float]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Point4d]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Color4f]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Color]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Vector2d]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Vector3d]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, Point3d]: ...
    @overload
    def TryGetValue(self, key: str) -> tuple[bool, float]: ...


class FloatField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from System import Guid
class GuidField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Guid) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


class IntField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


class NullField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from Rhino.Geometry import Point2d
class Point2dField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Point2d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Point2d) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from Rhino.Geometry import Point3d
class Point3dField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Point3d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Point3d) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from Rhino.Geometry import Point4d
class Point4dField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Point4d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Point4d) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


class StringField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from Rhino.Geometry import Transform
class TransformField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Transform: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Transform) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from Rhino.Geometry import Vector2d
class Vector2dField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Vector2d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Vector2d) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...


from Rhino.Geometry import Vector3d
class Vector3dField(Field):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AutomaticRegisteredProperty(self) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Vector3d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self) -> T: ...
    @AutomaticRegisteredProperty.setter
    def AutomaticRegisteredProperty(self, value: bool) -> None: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self, value: float) -> None: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self, value: float) -> None: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self, value: bool) -> None: ...
    @UseTextureOn.setter
    def UseTextureOn(self, value: bool) -> None: ...
    @Value.setter
    def Value(self, value: Vector3d) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAsObject(self) -> object: ...
