from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class CustomRenderMeshProviderAttribute:
    @overload
    def __init__(self, nonObjectIdsOnly: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def NonObjectIdsOnly(self) -> bool: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @NonObjectIdsOnly.setter
    def NonObjectIdsOnly(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Flags(Enum):
    # None = 0
    Canceled = 1
    DisableCaching = 2
    Recursive = 4
    IsDocumentObject = 8
    AlwaysCopyDocumentContent = 16
    ReturnNullForStandardMaterial = 32
    Incomplete = 64


from Rhino.Geometry import Mesh
from Rhino.Render import RenderMaterial
from Rhino.Geometry import Transform
class Instance:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsForcedMaterial(self) -> bool: ...
    @property
    def IsRequestingPlugInDependent(self) -> bool: ...
    @property
    def IsViewDependent(self) -> bool: ...
    @property
    def Material(self) -> RenderMaterial: ...
    @property
    def Mesh(self) -> Mesh: ...
    @property
    def Transform(self) -> Transform: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @IsForcedMaterial.setter
    def IsForcedMaterial(self, value: bool) -> None: ...
    @IsRequestingPlugInDependent.setter
    def IsRequestingPlugInDependent(self, value: bool) -> None: ...
    @IsViewDependent.setter
    def IsViewDependent(self, value: bool) -> None: ...
    @Material.setter
    def Material(self, value: RenderMaterial) -> None: ...
    @Mesh.setter
    def Mesh(self, value: Mesh) -> None: ...
    @Transform.setter
    def Transform(self, value: Transform) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class MeshProviderIds:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def CurvePiping(cls) -> Guid: ...
    @property
    @classmethod
    def Displacement(cls) -> Guid: ...
    @property
    @classmethod
    def EdgeSoftening(cls) -> Guid: ...
    @property
    @classmethod
    def Shutlining(cls) -> Guid: ...
    @property
    @classmethod
    def Thickening(cls) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from System import Guid
class RenderMeshes:
    @overload
    def __init__(self, doc: RhinoDoc, objectId: Guid, renderMeshProviderId: Guid, runningHash: int): ...
    @overload
    def __init__(self, doc: RhinoDoc, objectId: Guid, renderMeshProviderId: Guid, runningHash: int, flags: int): ...
    def __iter__(self) -> Iterator[Instance]: ...
    @overload
    def AddInstance(self, instance: Instance) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Hash(self) -> int: ...
    @property
    def InstanceCount(self) -> int: ...
    @property
    def ObjectId(self) -> Guid: ...
    @overload
    def GetEnumerator(self) -> Iterator[Instance]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Hash.setter
    def Hash(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from Rhino.Geometry import MeshType
from Rhino.DocObjects import ViewportInfo
from Rhino import RhinoDoc
from Rhino.PlugIns import PlugIn
from Rhino.Display import DisplayPipelineAttributes
from System.Reflection import Assembly
class RenderMeshProvider:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NonObjectIds(self) -> MutableSequence[Guid]: ...
    @property
    def ProviderId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetParameter(self, doc: RhinoDoc, objectId: Guid, parameterName: str) -> object: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCustomRenderMeshes(self, mt: MeshType, vp: ViewportInfo, doc: RhinoDoc, objectId: Guid, flags: Flags, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[bool, Flags]: ...
    @overload
    def Progress(self, doc: RhinoDoc, optional_objectIds: Iterable[Guid]) -> RenderMeshProviderProgress: ...
    @overload
    @staticmethod
    def ProgressForAll(doc: RhinoDoc, optional_objectIds: Iterable[Guid]) -> Iterable[RenderMeshProviderProgress]: ...
    @overload
    @staticmethod
    def RegisterProvider(provider: RenderMeshProvider, plugin: PlugIn) -> bool: ...
    @overload
    @staticmethod
    def RegisterProviders(plugin: PlugIn) -> None: ...
    @overload
    @staticmethod
    def RegisterProviders(assembly: Assembly, plugin: PlugIn) -> None: ...
    @overload
    def RenderMeshes(self, mt: MeshType, vp: ViewportInfo, doc: RhinoDoc, objectId: Guid, ancestry: MutableSequence[InstanceObject], flags: Flags, previousPrimitives: RenderMeshes, plugin: PlugIn, attrs: DisplayPipelineAttributes) -> Tuple[RenderMeshes, Flags]: ...
    @overload
    def SetParameter(self, doc: RhinoDoc, objectId: Guid, parameterName: str, value: object) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class RenderMeshProviderProgress:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Amount(self) -> float: ...
    @property
    def IsComplete(self) -> bool: ...
    @property
    def ProviderId(self) -> Guid: ...
    @property
    def Target(self) -> float: ...
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Amount.setter
    def Amount(self, value: float) -> None: ...
    @IsComplete.setter
    def IsComplete(self, value: bool) -> None: ...
    @ProviderId.setter
    def ProviderId(self, value: Guid) -> None: ...
    @Target.setter
    def Target(self, value: float) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
