from typing import overload, Any
from collections.abc import Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from Rhino import RhinoDoc
from Rhino.PlugIns import PlugIn
from Rhino.Render import ChangeContexts
from Rhino.Render import Channel
from Rhino.Render import ChannelGPU
from Rhino.Render import FreeFloatingBase
from Rhino.UI.Controls import ICollapsibleSection
from System import Guid
from System import IConvertible
from System import IFormatProvider
from System import IntPtr
from System import TypeCode
from System.Drawing import Rectangle
from System.Drawing import Size
from System.Reflection import Assembly



class CustomPostEffectAttribute:
    @overload
    def __init__(self, postEffectType: PostEffectType, name: str, styles: PostEffectStyles, executeWhileRenderingOption: PostEffectExecuteWhileRenderingOptions, canDisplayHelp: bool, executeWhileRenderingDelay: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CanDisplayHelp(self) -> bool: ...
    @property
    def ExecuteWhileRenderingDelay(self) -> int: ...
    @property
    def ExecuteWhileRenderingOption(self) -> PostEffectExecuteWhileRenderingOptions: ...
    @property
    def Name(self) -> str: ...
    @property
    def PostEffectType(self) -> PostEffectType: ...
    @property
    def Styles(self) -> PostEffectStyles: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @CanDisplayHelp.setter
    def CanDisplayHelp(self, value: bool) -> None: ...
    @ExecuteWhileRenderingDelay.setter
    def ExecuteWhileRenderingDelay(self, value: int) -> None: ...
    @ExecuteWhileRenderingOption.setter
    def ExecuteWhileRenderingOption(self, value: PostEffectExecuteWhileRenderingOptions) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PostEffectType.setter
    def PostEffectType(self, value: PostEffectType) -> None: ...
    @Styles.setter
    def Styles(self, value: PostEffectStyles) -> None: ...
    @overload
    def ToString(self) -> str: ...


class IPostEffects:
    @overload
    def GetPostEffects(self, type: PostEffectType) -> Iterable[PostEffect]: ...
    @overload
    def PostEffectFromId(self, uuid: Guid) -> PostEffect: ...


class PostEffect:
    @overload
    def __init__(self): ...
    @overload
    def AddUISections(self, ui: PostEffectUI) -> None: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def CanExecute(self, pipeline: PostEffectPipeline) -> bool: ...
    @overload
    def Changed(self) -> None: ...
    @overload
    def DisplayHelp(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Execute(self, pipeline: PostEffectPipeline, rect: Rectangle) -> bool: ...
    @property
    def CanDisplayHelp(self) -> bool: ...
    @property
    def ExecuteWhileRenderingOption(self) -> PostEffectExecuteWhileRenderingOptions: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsSelected(self) -> bool: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def On(self) -> bool: ...
    @property
    def PostEffectType(self) -> PostEffectType: ...
    @property
    def RequiredChannels(self) -> Iterable[Guid]: ...
    @property
    def SerialNumber(self) -> int: ...
    @property
    def Shown(self) -> bool: ...
    @property
    def Styles(self) -> PostEffectStyles: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetParam(self, param: str, v: object) -> tuple[bool, object]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ReadState(self, state: PostEffectState) -> bool: ...
    @overload
    @staticmethod
    def RegisterPostEffect(plugin: PlugIn) -> Iterable[type]: ...
    @overload
    @staticmethod
    def RegisterPostEffect(assembly: Assembly, pluginId: Guid) -> Iterable[type]: ...
    @overload
    def ResetToFactoryDefaults(self) -> None: ...
    @On.setter
    def On(self, value: bool) -> None: ...
    @SerialNumber.setter
    def SerialNumber(self, value: int) -> None: ...
    @Shown.setter
    def Shown(self, value: bool) -> None: ...
    @overload
    def SetParam(self, param: str, v: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WriteState(self, state: PostEffectState) -> tuple[bool, PostEffectState]: ...


class PostEffectChannel:
    @overload
    def Clone(self) -> PostEffectChannel: ...
    @overload
    def Commit(self) -> None: ...
    @overload
    def CPU(self) -> Channel: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def PixelSize(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GPU(self) -> ChannelGPU: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Render import DocumentOrFreeFloatingBase
class PostEffectCollection(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, c: PostEffectCollection): ...
    def __iter__(self) -> Iterator[PostEffectData]: ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetEnumerator(self) -> Iterator[PostEffectData]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectedPostEffect(self, type: PostEffectType) -> tuple[bool, Guid]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MovePostEffectBefore(self, id_move: Guid, id_before: Guid) -> bool: ...
    @overload
    def PostEffectDataFromId(self, id: Guid) -> PostEffectData: ...
    @overload
    def SetSelectedPostEffect(self, type: PostEffectType, id: Guid) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectData:
    @overload
    def DataCRC(self, current_remainder: int) -> int: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Collection(self) -> PostEffectCollection: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def On(self) -> bool: ...
    @property
    def Shown(self) -> bool: ...
    @property
    def Type(self) -> PostEffectType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetParameter(self, param_name: str) -> IConvertible: ...
    @overload
    def GetType(self) -> type: ...
    @On.setter
    def On(self, value: bool) -> None: ...
    @Shown.setter
    def Shown(self, value: bool) -> None: ...
    @overload
    def SetParameter(self, param_name: str, param_value: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectExecuteContexts(Enum):
    ProductionRendering = 0
    RealtimeRendering = 1
    ViewportDisplay = 2
    ThumbnailCreation = 3
    ConvertingToHDR = 4


class PostEffectExecuteWhileRenderingOptions(Enum):
    # None = 0
    Never = 0
    Always = 1
    UseDelay = 2
    UseExecutionControl = 3


class PostEffectExecutionControl:
    @overload
    def __init__(self): ...
    @overload
    def Detach(self) -> IntPtr: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ReadyToExecutePostEffect(self, pep_id: Guid) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectHistograms(Enum):
    # None = 0
    BeforeEarlyEffects = 1
    BeforeToneMapping = 2
    AfterEarlyEffects = 2
    AfterToneMapping = 4
    BeforeLateEffects = 4
    ToneMappingDisplay = 6
    AfterLateEffects = 8
    All = 15


class PostEffectJob:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> PostEffectJob: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Execute(self, rect: Rectangle, access: PostEffectJobChannels) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectJobChannels:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetChannel(self, channelId: Guid) -> PostEffectChannel: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectPipeline:
    @overload
    def Dimensions(self) -> Size: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Execute(self, p: Rectangle, renderingInProgress: bool, usageContexts: PostEffectExecuteContexts, histogramsToUpdate: PostEffectHistograms) -> bool: ...
    @overload
    def ExecutionOrder(self) -> Iterable[Guid]: ...
    @property
    def GPUAllowed(self) -> bool: ...
    @property
    def IsRendering(self) -> bool: ...
    @property
    def RenderingId(self) -> Guid: ...
    @overload
    def GetChannelForRead(self, id: Guid) -> PostEffectChannel: ...
    @overload
    def GetChannelForWrite(self, id: Guid) -> PostEffectChannel: ...
    @overload
    def GetEndTimeInMilliseconds(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMaxLuminance(self) -> float: ...
    @overload
    def GetStartTimeInMilliseconds(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetStartTimeInMilliseconds(self, ms: int) -> None: ...
    @overload
    def ThreadEngine(self) -> PostEffectThreadEngine: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectState:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetValue(self, name: str, vValue: T) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetValue(self, name: str) -> tuple[bool, T]: ...


class PostEffectStyles(Enum):
    ExecuteForProductionRendering = 1
    ExecuteForRealtimeRendering = 2
    ExecuteForViewportDisplay = 4
    Fixed = 256
    DefaultShown = 512
    DefaultOn = 1024


class PostEffectThreadEngine:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RunPostEffect(self, job: PostEffectJob, pipeline: PostEffectPipeline, plugin: PostEffect, rect: Rectangle, channels: Iterable[Guid]) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectType(Enum):
    Early = 0
    ToneMapping = 1
    Late = 2


class PostEffectUI:
    @overload
    def AddSection(self, section: ICollapsibleSection) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectUuids:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def Bloom(cls) -> Guid: ...
    @property
    @classmethod
    def BriCon(cls) -> Guid: ...
    @property
    @classmethod
    def DepthOfField(cls) -> Guid: ...
    @property
    @classmethod
    def Dithering(cls) -> Guid: ...
    @property
    @classmethod
    def Fog(cls) -> Guid: ...
    @property
    @classmethod
    def Gamma(cls) -> Guid: ...
    @property
    @classmethod
    def GaussianBlur(cls) -> Guid: ...
    @property
    @classmethod
    def Glare(cls) -> Guid: ...
    @property
    @classmethod
    def Glow(cls) -> Guid: ...
    @property
    @classmethod
    def HueSatLum(cls) -> Guid: ...
    @property
    @classmethod
    def Multiplier(cls) -> Guid: ...
    @property
    @classmethod
    def Noise(cls) -> Guid: ...
    @property
    @classmethod
    def ToneMapper_BlackWhitePoint(cls) -> Guid: ...
    @property
    @classmethod
    def ToneMapper_Clamp(cls) -> Guid: ...
    @property
    @classmethod
    def ToneMapper_FalseColor(cls) -> Guid: ...
    @property
    @classmethod
    def ToneMapper_Filmic(cls) -> Guid: ...
    @property
    @classmethod
    def ToneMapper_Logarithmic(cls) -> Guid: ...
    @property
    @classmethod
    def Watermark(cls) -> Guid: ...
    @property
    @classmethod
    def WireframeAnnotationsRGBA(cls) -> Guid: ...
    @property
    @classmethod
    def WireframeCurvesRGBA(cls) -> Guid: ...
    @property
    @classmethod
    def WireframeIsocurvesRGBA(cls) -> Guid: ...
    @property
    @classmethod
    def WireframePointsRGBA(cls) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
