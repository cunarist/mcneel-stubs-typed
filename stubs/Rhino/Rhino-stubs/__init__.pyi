from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import ApplicationSettings
import Collections
import Commands
import Display
import DocObjects
import FileIO
import Geometry
import Input
import NodeInCode
import PlugIns
import Render
import Runtime
import UI

__all__ = ['ApplicationSettings', 'Collections', 'Commands', 'Display', 'DocObjects', 'FileIO', 'Geometry', 'Input', 'NodeInCode', 'PlugIns', 'Render', 'Runtime', 'UI']


class AngleUnitSystem(Enum):
    # None = 0
    Turns = 1
    Radians = 2
    Degrees = 3
    Minutes = 4
    Seconds = 5
    Gradians = 6
    Unset = 255


class AntialiasLevel(Enum):
    # None = 0
    Draft = 1
    Good = 2
    High = 3


from .FileIO import FileReference
class BitmapExtensions:
    @staticmethod
    def BitmapAsTextureFileReference(bitmap: Bitmap, crc: UInt32) -> FileReference: ...
    @staticmethod
    def ConvertToNormalMap(bitmap: Bitmap, bLossyCompressionSource: bool) -> Tuple[Bitmap, bool]: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def IsNormalMap(bitmap: Bitmap, bLossyCompressionSource: bool) -> Tuple[bool, bool]: ...
    def ToString(self) -> str: ...


class CommandLineTextWriter:
    def __init__(self): ...
    def Close(self) -> None: ...
    def CreateObjRef(self, requestedType: Type) -> ObjRef: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Flush(self) -> None: ...
    def FlushAsync(self) -> Task: ...
    @property
    def Encoding(self) -> Encoding: ...
    @property
    def FormatProvider(self) -> IFormatProvider: ...
    @property
    def NewLine(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetLifetimeService(self) -> Object: ...
    def GetType(self) -> Type: ...
    def InitializeLifetimeService(self) -> Object: ...
    @NewLine.setter
    def NewLine(self) -> MutableSequence[str]: ...
    def ToString(self) -> str: ...
    def write(self, str: str) -> None: ...
    @overload
    def Write(self, value: Single) -> None: ...
    @overload
    def Write(self, value: UInt32) -> None: ...
    @overload
    def Write(self, value: int) -> None: ...
    @overload
    def Write(self, value: bool) -> None: ...
    @overload
    def Write(self, value: Int64) -> None: ...
    @overload
    def Write(self, buffer: Iterable[Char]) -> None: ...
    @overload
    def Write(self, value: Char) -> None: ...
    @overload
    def Write(self, value: str) -> None: ...
    @overload
    def Write(self, value: UInt64) -> None: ...
    @overload
    def Write(self, value: Object) -> None: ...
    @overload
    def Write(self, value: Decimal) -> None: ...
    @overload
    def Write(self, value: float) -> None: ...
    @overload
    def Write(self, format: str, arg: Iterable[Object]) -> None: ...
    @overload
    def Write(self, format: str, arg0: Object) -> None: ...
    @overload
    def Write(self, format: str, arg0: Object, arg1: Object) -> None: ...
    @overload
    def Write(self, buffer: Iterable[Char], index: int, count: int) -> None: ...
    @overload
    def Write(self, format: str, arg0: Object, arg1: Object, arg2: Object) -> None: ...
    @overload
    def WriteAsync(self, value: Char) -> Task: ...
    @overload
    def WriteAsync(self, buffer: Iterable[Char]) -> Task: ...
    @overload
    def WriteAsync(self, value: str) -> Task: ...
    @overload
    def WriteAsync(self, buffer: Iterable[Char], index: int, count: int) -> Task: ...
    @overload
    def WriteLine(self) -> None: ...
    @overload
    def WriteLine(self, value: UInt32) -> None: ...
    @overload
    def WriteLine(self, value: Single) -> None: ...
    @overload
    def WriteLine(self, value: Char) -> None: ...
    @overload
    def WriteLine(self, value: Object) -> None: ...
    @overload
    def WriteLine(self, value: str) -> None: ...
    @overload
    def WriteLine(self, value: Decimal) -> None: ...
    @overload
    def WriteLine(self, buffer: Iterable[Char]) -> None: ...
    @overload
    def WriteLine(self, value: bool) -> None: ...
    @overload
    def WriteLine(self, value: int) -> None: ...
    @overload
    def WriteLine(self, value: Int64) -> None: ...
    @overload
    def WriteLine(self, value: float) -> None: ...
    @overload
    def WriteLine(self, value: UInt64) -> None: ...
    @overload
    def WriteLine(self, format: str, arg0: Object) -> None: ...
    @overload
    def WriteLine(self, format: str, arg: Iterable[Object]) -> None: ...
    @overload
    def WriteLine(self, buffer: Iterable[Char], index: int, count: int) -> None: ...
    @overload
    def WriteLine(self, format: str, arg0: Object, arg1: Object) -> None: ...
    @overload
    def WriteLine(self, format: str, arg0: Object, arg1: Object, arg2: Object) -> None: ...
    @overload
    def WriteLineAsync(self) -> Task: ...
    @overload
    def WriteLineAsync(self, buffer: Iterable[Char]) -> Task: ...
    @overload
    def WriteLineAsync(self, value: str) -> Task: ...
    @overload
    def WriteLineAsync(self, value: Char) -> Task: ...
    @overload
    def WriteLineAsync(self, buffer: Iterable[Char], index: int, count: int) -> Task: ...


class DisplayDeviceInfo:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def GpuDeviceInfos() -> List: ...
    @staticmethod
    def GpuNames() -> List: ...
    def ToString(self) -> str: ...


class DocumentEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def DocumentSerialNumber(self) -> UInt32: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class DocumentOpenEventArgs(DocumentEventArgs):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def DocumentSerialNumber(self) -> UInt32: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Merge(self) -> bool: ...
    @property
    def Reference(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class DocumentSaveEventArgs(DocumentEventArgs):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def DocumentSerialNumber(self) -> UInt32: ...
    @property
    def ExportSelected(self) -> bool: ...
    @property
    def FileName(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GpuDeviceInfo:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DriverDateAsString(self) -> str: ...
    @property
    def Memory(self) -> UInt64: ...
    @property
    def MemoryAsString(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Vendor(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...






class IndexPair:
    def __init__(self, i: int, j: int): ...
    def __iter__(self) -> Iterator[int]: ...
    def __getitem__(self, index: int) -> int: ...
    def __setitem__(self, index: int, value: int): ...
    def Contains(self, item: int) -> bool: ...
    def CopyTo(self, array: Iterable[int], arrayIndex: int) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def I(self) -> int: ...
    @property
    def Item(self) -> Sequence[int]: ...
    @property
    def J(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IndexOf(self, item: int) -> int: ...
    @I.setter
    def I(self) -> MutableSequence[int]: ...
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @J.setter
    def J(self) -> MutableSequence[int]: ...
    def ToString(self) -> str: ...


class IRhinoDocObserver:
    def ActiveRhinoDocChanged(self, e: RhinoDocObserverArgs) -> None: ...
    def RhinoDocClosed(self, e: RhinoDocObserverArgs) -> None: ...


class KeyboardHookEvent:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, key: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, key: int) -> None: ...
    def ToString(self) -> str: ...


from .Input import StringParserSettings
class LengthValue:
    def ChangeLength(self, newLength: float) -> LengthValue: ...
    def ChangeUnitSystem(self, newUnits: UnitSystem) -> LengthValue: ...
    @overload
    @staticmethod
    def Create(s: str, ps: StringParserSettings) -> Tuple[LengthValue, bool]: ...
    @overload
    @staticmethod
    def Create(length: float, us: UnitSystem, format: StringFormat) -> LengthValue: ...
    @overload
    @staticmethod
    def Create(length: float, us: UnitSystem, format: StringFormat, localeId: UInt32) -> LengthValue: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ContextAngleUnitSystem(self) -> AngleUnitSystem: ...
    @property
    def ContextLocaleId(self) -> UInt32: ...
    @property
    def LengthString(self) -> str: ...
    @property
    def LengthStringFormat(self) -> StringFormat: ...
    @property
    def ParseSettings(self) -> StringParserSettings: ...
    @property
    def UnitSystem(self) -> UnitSystem: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsUnset(self) -> bool: ...
    @overload
    def Length(self) -> float: ...
    @overload
    def Length(self, units: UnitSystem) -> float: ...
    def ToString(self) -> str: ...


from .Geometry import Point3d
class PersistentSettings:
    def AddChild(self, key: str) -> PersistentSettings: ...
    def ClearChangedFlag(self) -> None: ...
    def ContainsChangedValues(self) -> bool: ...
    def ContainsModifiedValues(self, allUserSettings: PersistentSettings) -> bool: ...
    def DeleteChild(self, key: str) -> None: ...
    def DeleteItem(self, key: str) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @staticmethod
    def FromPlugInId(pluginId: Guid) -> PersistentSettings: ...
    @property
    def ChildKeys(self) -> ICollection: ...
    @property
    def HiddenFromUserInterface(self) -> bool: ...
    @property
    def Keys(self) -> ICollection: ...
    @property
    def RhinoAppSettings() -> PersistentSettings: ...
    @property
    def StringListRootKey() -> str: ...
    @overload
    def GetBool(self, key: str) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool, legacyKeyList: Iterable[str]) -> bool: ...
    @overload
    def GetByte(self, key: str) -> Byte: ...
    @overload
    def GetByte(self, key: str, defaultValue: Byte) -> Byte: ...
    @overload
    def GetByte(self, key: str, defaultValue: Byte, legacyKeyList: Iterable[str]) -> Byte: ...
    @overload
    def GetChar(self, key: str) -> Char: ...
    @overload
    def GetChar(self, key: str, defaultValue: Char) -> Char: ...
    @overload
    def GetChar(self, key: str, defaultValue: Char, legacyKeyList: Iterable[str]) -> Char: ...
    def GetChild(self, key: str) -> PersistentSettings: ...
    @overload
    def GetColor(self, key: str) -> Color: ...
    @overload
    def GetColor(self, key: str, defaultValue: Color) -> Color: ...
    @overload
    def GetColor(self, key: str, defaultValue: Color, legacyKeyList: Iterable[str]) -> Color: ...
    @overload
    def GetDate(self, key: str) -> DateTime: ...
    @overload
    def GetDate(self, key: str, defaultValue: DateTime) -> DateTime: ...
    @overload
    def GetDate(self, key: str, defaultValue: DateTime, legacyKeyList: Iterable[str]) -> DateTime: ...
    @overload
    def GetDouble(self, key: str) -> float: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float) -> float: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float, legacyKeyList: Iterable[str]) -> float: ...
    @overload
    def GetEnumValue(self, key: str) -> T: ...
    @overload
    def GetEnumValue(self, defaultValue: T) -> T: ...
    @overload
    def GetEnumValue(self, key: str, defaultValue: T) -> T: ...
    @overload
    def GetGuid(self, key: str) -> Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: Guid) -> Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: Guid, legacyKeyList: Iterable[str]) -> Guid: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetInteger(self, key: str) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, legacyKeyList: Iterable[str]) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, bound: int, boundIsLower: bool) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int, lowerBound: int, upperBound: int) -> int: ...
    @overload
    def GetPoint(self, key: str) -> Point: ...
    @overload
    def GetPoint(self, key: str, defaultValue: Point) -> Point: ...
    @overload
    def GetPoint(self, key: str, defaultValue: Point, legacyKeyList: Iterable[str]) -> Point: ...
    @overload
    def GetPoint3d(self, key: str) -> Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Point3d) -> Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Point3d, legacyKeyList: Iterable[str]) -> Point3d: ...
    @overload
    def GetRectangle(self, key: str) -> Rectangle: ...
    @overload
    def GetRectangle(self, key: str, defaultValue: Rectangle) -> Rectangle: ...
    @overload
    def GetRectangle(self, key: str, defaultValue: Rectangle, legacyKeyList: Iterable[str]) -> Rectangle: ...
    @overload
    def GetSettingIsHiddenFromUserInterface(self, key: str) -> bool: ...
    @overload
    def GetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Iterable[str]) -> bool: ...
    def GetSettingIsReadOnly(self, key: str) -> bool: ...
    def GetSettingType(self, key: str) -> Type: ...
    @overload
    def GetSize(self, key: str) -> Size: ...
    @overload
    def GetSize(self, key: str, defaultValue: Size) -> Size: ...
    @overload
    def GetSize(self, key: str, defaultValue: Size, legacyKeyList: Iterable[str]) -> Size: ...
    @overload
    def GetString(self, key: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str, legacyKeyList: Iterable[str]) -> str: ...
    @overload
    def GetStringDictionary(self, key: str) -> Iterable[KeyValuePair]: ...
    @overload
    def GetStringDictionary(self, key: str, defaultValue: Iterable[KeyValuePair]) -> Iterable[KeyValuePair]: ...
    @overload
    def GetStringDictionary(self, key: str, defaultValue: Iterable[KeyValuePair], legacyKeyList: Iterable[str]) -> Iterable[KeyValuePair]: ...
    @overload
    def GetStringList(self, key: str) -> Iterable[str]: ...
    @overload
    def GetStringList(self, key: str, defaultValue: Iterable[str]) -> Iterable[str]: ...
    @overload
    def GetStringList(self, key: str, defaultValue: Iterable[str], legacyKeyList: Iterable[str]) -> Iterable[str]: ...
    def GetType(self) -> Type: ...
    @overload
    def GetUnsignedInteger(self, key: str) -> UInt32: ...
    @overload
    def GetUnsignedInteger(self, key: str, defaultValue: UInt32) -> UInt32: ...
    @overload
    def GetUnsignedInteger(self, key: str, defaultValue: UInt32, legacyKeyList: Iterable[str]) -> UInt32: ...
    def GetValidator(self, key: str) -> EventHandler: ...
    def HideSettingFromUserInterface(self, key: str) -> None: ...
    def RegisterSettingsValidator(self, key: str, validator: EventHandler) -> None: ...
    @HiddenFromUserInterface.setter
    def HiddenFromUserInterface(self) -> MutableSequence[bool]: ...
    def SetBool(self, key: str, value: bool) -> None: ...
    def SetByte(self, key: str, value: Byte) -> None: ...
    def SetChar(self, key: str, value: Char) -> None: ...
    def SetColor(self, key: str, value: Color) -> None: ...
    def SetDate(self, key: str, value: DateTime) -> None: ...
    @overload
    def SetDefault(self, key: str, value: int) -> None: ...
    @overload
    def SetDefault(self, key: str, value: float) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Guid) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Color) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Rectangle) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Size) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Point) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Point3d) -> None: ...
    @overload
    def SetDefault(self, key: str, value: DateTime) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Iterable[str]) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Byte) -> None: ...
    @overload
    def SetDefault(self, key: str, value: bool) -> None: ...
    @overload
    def SetDefault(self, key: str, value: str) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Char) -> None: ...
    @overload
    def SetDefault(self, key: str, value: Iterable[KeyValuePair]) -> None: ...
    def SetDouble(self, key: str, value: float) -> None: ...
    @overload
    def SetEnumValue(self, enumValue: T) -> None: ...
    @overload
    def SetEnumValue(self, key: str, value: T) -> None: ...
    def SetGuid(self, key: str, value: Guid) -> None: ...
    def SetInteger(self, key: str, value: int) -> None: ...
    def SetPoint(self, key: str, value: Point) -> None: ...
    def SetPoint3d(self, key: str, value: Point3d) -> None: ...
    def SetRectangle(self, key: str, value: Rectangle) -> None: ...
    def SetSize(self, key: str, value: Size) -> None: ...
    def SetString(self, key: str, value: str) -> None: ...
    def SetStringDictionary(self, key: str, value: Iterable[KeyValuePair]) -> None: ...
    def SetStringList(self, key: str, value: Iterable[str]) -> None: ...
    def SetUnsignedInteger(self, key: str, value: UInt32) -> None: ...
    def ToString(self) -> str: ...
    @overload
    def TryGetBool(self, key: str) -> Tuple[bool, bool]: ...
    @overload
    def TryGetBool(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, bool]: ...
    @overload
    def TryGetByte(self, key: str) -> Tuple[bool, Byte]: ...
    @overload
    def TryGetByte(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Byte]: ...
    @overload
    def TryGetChar(self, key: str) -> Tuple[bool, Char]: ...
    @overload
    def TryGetChar(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Char]: ...
    def TryGetChild(self, key: str) -> Tuple[bool, PersistentSettings]: ...
    @overload
    def TryGetColor(self, key: str) -> Tuple[bool, Color]: ...
    @overload
    def TryGetColor(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Color]: ...
    @overload
    def TryGetDate(self, key: str) -> Tuple[bool, DateTime]: ...
    @overload
    def TryGetDate(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, DateTime]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, bool]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Byte]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, int]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, float]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Rectangle]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Point3d]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Color]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, DateTime]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Iterable[str]]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, str]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Char]: ...
    @overload
    def TryGetDefault(self, key: str) -> Tuple[bool, Size]: ...
    @overload
    def TryGetDouble(self, key: str) -> Tuple[bool, float]: ...
    @overload
    def TryGetDouble(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, float]: ...
    def TryGetEnumValue(self, key: str) -> Tuple[bool, T]: ...
    @overload
    def TryGetGuid(self, key: str) -> Tuple[bool, Guid]: ...
    @overload
    def TryGetGuid(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Guid]: ...
    @overload
    def TryGetInteger(self, key: str) -> Tuple[bool, int]: ...
    @overload
    def TryGetInteger(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, int]: ...
    @overload
    def TryGetPoint(self, key: str) -> Tuple[bool, Point]: ...
    @overload
    def TryGetPoint(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Point]: ...
    @overload
    def TryGetPoint3d(self, key: str) -> Tuple[bool, Point3d]: ...
    @overload
    def TryGetPoint3d(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Point3d]: ...
    @overload
    def TryGetRectangle(self, key: str) -> Tuple[bool, Rectangle]: ...
    @overload
    def TryGetRectangle(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Rectangle]: ...
    @overload
    def TryGetSettingIsHiddenFromUserInterface(self, key: str) -> Tuple[bool, bool]: ...
    @overload
    def TryGetSettingIsHiddenFromUserInterface(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, bool]: ...
    def TryGetSettingIsReadOnly(self, key: str) -> Tuple[bool, bool]: ...
    def TryGetSettingType(self, key: str) -> Tuple[bool, Type]: ...
    @overload
    def TryGetSize(self, key: str) -> Tuple[bool, Size]: ...
    @overload
    def TryGetSize(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Size]: ...
    @overload
    def TryGetString(self, key: str) -> Tuple[bool, str]: ...
    @overload
    def TryGetString(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, str]: ...
    @overload
    def TryGetStringDictionary(self, key: str) -> Tuple[bool, Iterable[KeyValuePair]]: ...
    @overload
    def TryGetStringDictionary(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Iterable[KeyValuePair]]: ...
    @overload
    def TryGetStringList(self, key: str) -> Tuple[bool, Iterable[str]]: ...
    @overload
    def TryGetStringList(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, Iterable[str]]: ...
    @overload
    def TryGetUnsignedInteger(self, key: str) -> Tuple[bool, UInt32]: ...
    @overload
    def TryGetUnsignedInteger(self, key: str, legacyKeyList: Iterable[str]) -> Tuple[bool, UInt32]: ...


class PersistentSettingsConverter:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def IsStringDictionary(s: str) -> bool: ...
    @staticmethod
    def IsStringList(s: str) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def ToString(values: Iterable[str]) -> str: ...
    @overload
    @staticmethod
    def ToString(value: Iterable[KeyValuePair]) -> str: ...
    @overload
    @staticmethod
    def ToString(value: float) -> str: ...
    @staticmethod
    def TryParseDouble(s: str) -> Tuple[bool, float]: ...
    @overload
    @staticmethod
    def TryParseEnum(type: Type, intValueAsString: str) -> Tuple[bool, str]: ...
    @overload
    @staticmethod
    def TryParseEnum(type: Type, enumValueName: str) -> Tuple[bool, int]: ...
    @staticmethod
    def TryParseStringDictionary(s: str) -> Tuple[bool, Iterable[KeyValuePair]]: ...
    @staticmethod
    def TryParseStringList(s: str) -> Tuple[bool, Iterable[str]]: ...


class PersistentSettingsEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Cancel(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...




class PersistentSettingsSavedEventArgs:
    def CommandSettings(self, englishCommandName: str) -> PersistentSettings: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def PlugInSettings(self) -> PersistentSettings: ...
    @property
    def SavedByThisRhino(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class ReadFileResult(Enum):
    Unset = 0
    Completed = 1
    CompletedWithErrors = 2
    Failed = 3


class RenderContentTableEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> RenderContentTableEventType: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class RenderContentTableEventType(Enum):
    Loaded = 0
    Clearing = 1
    Cleared = 2
    MaterialAssignmentChanged = 3


class RenderMaterialAssignmentChangedEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> RenderContentTableEventType: ...
    @property
    def IsLayer(self) -> bool: ...
    @property
    def IsObject(self) -> bool: ...
    @property
    def LayerId(self) -> Guid: ...
    @property
    def NewRenderMaterial(self) -> Guid: ...
    @property
    def ObjectId(self) -> Guid: ...
    @property
    def OldRenderMaterial(self) -> Guid: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from .UI import ToolbarFileCollection
from .DocObjects import Font
from .DocObjects import RhinoObject
from .ApplicationSettings import LicenseNode
from .ApplicationSettings import Installation
from .Commands import Result
class RhinoApp:
    @staticmethod
    def add_AppSettingsChanged(value: EventHandler) -> None: ...
    @staticmethod
    def add_Closing(value: EventHandler) -> None: ...
    @staticmethod
    def add_EscapeKeyPressed(value: EventHandler) -> None: ...
    @staticmethod
    def add_Idle(value: EventHandler) -> None: ...
    @staticmethod
    def add_Initialized(value: EventHandler) -> None: ...
    @staticmethod
    def add_KeyboardEvent(value: KeyboardHookEvent) -> None: ...
    @staticmethod
    def add_LicenseStateChanged(value: EventHandler) -> None: ...
    @staticmethod
    def add_MainLoop(value: EventHandler) -> None: ...
    @staticmethod
    def add_RdkCacheImageChanged(value: EventHandler) -> None: ...
    @staticmethod
    def add_RdkGlobalSettingsChanged(value: EventHandler) -> None: ...
    @staticmethod
    def add_RdkNewDocument(value: EventHandler) -> None: ...
    @staticmethod
    def add_RdkPlugInUnloading(value: EventHandler) -> None: ...
    @staticmethod
    def add_RdkUpdateAllPreviews(value: EventHandler) -> None: ...
    @staticmethod
    def add_RendererChanged(value: EventHandler) -> None: ...
    @staticmethod
    def AskUserForRhinoLicense(standAlone: bool, parentWindow: Object) -> bool: ...
    @staticmethod
    def CapturedCommandWindowStrings(clearBuffer: bool) -> Iterable[str]: ...
    @staticmethod
    def ChangeLicenseKey(pluginId: Guid) -> bool: ...
    @staticmethod
    def ClearCommandHistoryWindow() -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @staticmethod
    def ExecuteCommand(document: RhinoDoc, commandName: str) -> Result: ...
    @overload
    @staticmethod
    def Exit() -> None: ...
    @overload
    @staticmethod
    def Exit(allowCancel: bool) -> None: ...
    @property
    def BuildDate() -> DateTime: ...
    @property
    def CanSave() -> bool: ...
    @property
    def CommandHistoryWindowText() -> str: ...
    @property
    def CommandLineOut() -> CommandLineTextWriter: ...
    @property
    def CommandPrompt() -> str: ...
    @property
    def CommandWindowCaptureEnabled() -> bool: ...
    @property
    def CurrentRhinoId() -> Guid: ...
    @property
    def DaysUntilExpiration() -> int: ...
    @property
    def DefaultUiFont() -> Font: ...
    @property
    def ExeServiceRelease() -> int: ...
    @property
    def ExeVersion() -> int: ...
    @property
    def InstallationType() -> Installation: ...
    @property
    def InstallationTypeString() -> str: ...
    @property
    def InvokeRequired() -> bool: ...
    @property
    def IsClosing() -> bool: ...
    @property
    def IsCloudZooNode() -> bool: ...
    @property
    def IsExiting() -> bool: ...
    @property
    def IsInternetAccessAllowed() -> bool: ...
    @property
    def IsLicenseValidated() -> bool: ...
    @property
    def IsPreRelease() -> bool: ...
    @property
    def IsRunningAutomated() -> bool: ...
    @property
    def IsRunningHeadless() -> bool: ...
    @property
    def IsSafeModeEnabled() -> bool: ...
    @property
    def IsSkinned() -> bool: ...
    @property
    def LicenseExpires() -> bool: ...
    @property
    def LicenseUserName() -> str: ...
    @property
    def LicenseUserOrganization() -> str: ...
    @property
    def LoggedInUserAvatar() -> Image: ...
    @property
    def LoggedInUserName() -> str: ...
    @property
    def MainApplicationWindow() -> RhinoWindow: ...
    @property
    def Name() -> str: ...
    @property
    def NodeType() -> LicenseNode: ...
    @property
    def Rhino2Id() -> Guid: ...
    @property
    def Rhino3Id() -> Guid: ...
    @property
    def Rhino4Id() -> Guid: ...
    @property
    def Rhino5Id() -> Guid: ...
    @property
    def Rhino6Id() -> Guid: ...
    @property
    def Rhino7Id() -> Guid: ...
    @property
    def SchemeName() -> str: ...
    @property
    def SdkServiceRelease() -> int: ...
    @property
    def SdkVersion() -> int: ...
    @property
    def SendWriteToConsole() -> bool: ...
    @property
    def SerialNumber() -> str: ...
    @property
    def ToolbarFiles() -> ToolbarFileCollection: ...
    @property
    def UpdatesAndStatisticsStatus() -> int: ...
    @property
    def UserIsLoggedIn() -> bool: ...
    @property
    def ValidationGracePeriodDaysLeft() -> int: ...
    @property
    def Version() -> Version: ...
    @property
    def VersionControlRevision() -> str: ...
    @overload
    @staticmethod
    def GetDataDirectory(localUser: bool, forceDirectoryCreation: bool) -> str: ...
    @overload
    @staticmethod
    def GetDataDirectory(localUser: bool, forceDirectoryCreation: bool, subDirectory: str) -> str: ...
    @staticmethod
    def GetExecutableDirectory() -> DirectoryInfo: ...
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetPlugInObject(plugin: str) -> Object: ...
    @overload
    @staticmethod
    def GetPlugInObject(pluginId: Guid) -> Object: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def InFullScreen() -> bool: ...
    @staticmethod
    def InvokeAndWait(action: Action) -> None: ...
    @staticmethod
    def InvokeOnUiThread(method: Delegate, args: Iterable[Object]) -> None: ...
    @staticmethod
    def IsInstallationBeta(licenseType: Installation) -> bool: ...
    @staticmethod
    def IsInstallationCommercial(licenseType: Installation) -> bool: ...
    @staticmethod
    def IsInstallationEvaluation(licenseType: Installation) -> bool: ...
    @staticmethod
    def LoginToCloudZoo() -> bool: ...
    @staticmethod
    def MainWindowHandle() -> IntPtr: ...
    @staticmethod
    def OutputDebugString(str: str) -> None: ...
    @staticmethod
    def ParseTextField(formula: str, obj: RhinoObject, topParentObject: RhinoObject) -> str: ...
    @staticmethod
    def RefreshRhinoLicense() -> bool: ...
    @staticmethod
    def ReleaseMouseCapture() -> bool: ...
    @staticmethod
    def remove_AppSettingsChanged(value: EventHandler) -> None: ...
    @staticmethod
    def remove_Closing(value: EventHandler) -> None: ...
    @staticmethod
    def remove_EscapeKeyPressed(value: EventHandler) -> None: ...
    @staticmethod
    def remove_Idle(value: EventHandler) -> None: ...
    @staticmethod
    def remove_Initialized(value: EventHandler) -> None: ...
    @staticmethod
    def remove_KeyboardEvent(value: KeyboardHookEvent) -> None: ...
    @staticmethod
    def remove_LicenseStateChanged(value: EventHandler) -> None: ...
    @staticmethod
    def remove_MainLoop(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RdkCacheImageChanged(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RdkGlobalSettingsChanged(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RdkNewDocument(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RdkPlugInUnloading(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RdkUpdateAllPreviews(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RendererChanged(value: EventHandler) -> None: ...
    @staticmethod
    def RunMenuScript(script: str) -> bool: ...
    @staticmethod
    def RunningInRdp() -> bool: ...
    @staticmethod
    def RunningOnVMWare() -> bool: ...
    @overload
    @staticmethod
    def RunScript(script: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(documentSerialNumber: UInt32, script: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(script: str, mruDisplayString: str, echo: bool) -> bool: ...
    @overload
    @staticmethod
    def RunScript(documentSerialNumber: UInt32, script: str, mruDisplayString: str, echo: bool) -> bool: ...
    @staticmethod
    def SendKeystrokes(characters: str, appendReturn: bool) -> None: ...
    @CommandPrompt.setter
    def CommandPrompt() -> None: ...
    @CommandWindowCaptureEnabled.setter
    def CommandWindowCaptureEnabled() -> None: ...
    @SendWriteToConsole.setter
    def SendWriteToConsole() -> None: ...
    @overload
    @staticmethod
    def SetCommandPrompt(prompt: str) -> None: ...
    @overload
    @staticmethod
    def SetCommandPrompt(prompt: str, promptDefault: str) -> None: ...
    @staticmethod
    def SetCommandPromptMessage(prompt: str) -> None: ...
    @overload
    @staticmethod
    def SetFocusToMainWindow() -> None: ...
    @overload
    @staticmethod
    def SetFocusToMainWindow(doc: RhinoDoc) -> None: ...
    def ToString(self) -> str: ...
    @staticmethod
    def Wait() -> None: ...
    @overload
    @staticmethod
    def Write(message: str) -> None: ...
    @overload
    @staticmethod
    def Write(format: str, arg0: Object) -> None: ...
    @overload
    @staticmethod
    def Write(format: str, arg0: Object, arg1: Object) -> None: ...
    @overload
    @staticmethod
    def Write(format: str, arg0: Object, arg1: Object, arg2: Object) -> None: ...
    @overload
    @staticmethod
    def WriteLine() -> None: ...
    @overload
    @staticmethod
    def WriteLine(message: str) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format: str, arg0: Object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format: str, arg0: Object, arg1: Object) -> None: ...
    @overload
    @staticmethod
    def WriteLine(format: str, arg0: Object, arg1: Object, arg2: Object) -> None: ...


from .DocObjects.Tables import NamedConstructionPlaneTable
from .DocObjects.Tables import NamedViewTable
from .DocObjects.Tables import StringTable
from .DocObjects.Tables import RuntimeDocumentDataTable
from .DocObjects.Tables import NamedPositionTable
from .DocObjects.Tables import SnapshotTable
from .DocObjects.Tables import NamedLayerStateTable
from .Render import RenderMaterialTable
from .Render import RenderEnvironmentTable
from .Render import RenderTextureTable
from .Render import ICurrentEnvironment
from .Render.PostEffects import IPostEffects
from .DocObjects import ViewportInfo
from .Render import GroundPlane
from .Render import RenderContentCollection
from .Display import DisplayPipelineAttributes
from .Render import RenderPrimitiveList
from .Geometry import BoundingBox
from .FileIO import FileReadOptions
from .FileIO import FileWriteOptions
from .Geometry import Plane
from .Geometry import Point3d
from .Geometry import SubDComponentLocation
from .DocObjects import EarthAnchorPoint
from .Render import RenderSettings
from .DocObjects import AnimationProperties
from .Geometry import MeshingParameterStyle
from .Geometry import MeshingParameters
from .DocObjects import Worksession
from .DocObjects.Tables import ViewTable
from .DocObjects.Tables import ObjectTable
from .FileIO import ManifestTable
from .DocObjects import ObjectAttributes
from .DocObjects.Tables import BitmapTable
from .DocObjects.Tables import MaterialTable
from .DocObjects.Tables import LinetypeTable
from .DocObjects.Tables import LayerTable
from .DocObjects.Tables import GroupTable
from .DocObjects.Tables import FontTable
from .DocObjects.Tables import DimStyleTable
from .DocObjects.Tables import LightTable
from .DocObjects.Tables import HatchPatternTable
from .DocObjects.Tables import InstanceDefinitionTable
class RhinoDoc:
    @staticmethod
    def add_ActiveDocumentChanged(value: EventHandler) -> None: ...
    @staticmethod
    def add_AddRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def add_BeforeTransformObjects(value: EventHandler) -> None: ...
    @staticmethod
    def add_BeginOpenDocument(value: EventHandler) -> None: ...
    @staticmethod
    def add_BeginSaveDocument(value: EventHandler) -> None: ...
    @staticmethod
    def add_CloseDocument(value: EventHandler) -> None: ...
    @staticmethod
    def add_DeleteRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def add_DeselectAllObjects(value: EventHandler) -> None: ...
    @staticmethod
    def add_DeselectObjects(value: EventHandler) -> None: ...
    @staticmethod
    def add_DimensionStyleTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_DocumentPropertiesChanged(value: EventHandler) -> None: ...
    @staticmethod
    def add_EndOpenDocument(value: EventHandler) -> None: ...
    @staticmethod
    def add_EndOpenDocumentInitialiViewUpdate(value: EventHandler) -> None: ...
    @staticmethod
    def add_EndOpenDocumentInitialViewUpdate(value: EventHandler) -> None: ...
    @staticmethod
    def add_EndSaveDocument(value: EventHandler) -> None: ...
    @staticmethod
    def add_GroupTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_InstanceDefinitionTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_LayerTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_LightTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_MaterialTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_ModifyObjectAttributes(value: EventHandler) -> None: ...
    @staticmethod
    def add_NewDocument(value: EventHandler) -> None: ...
    @staticmethod
    def add_PurgeRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def add_RenderEnvironmentTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_RenderMaterialsTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_RenderTextureTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_ReplaceRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def add_SelectObjects(value: EventHandler) -> None: ...
    @staticmethod
    def add_TextureMappingEvent(value: EventHandler) -> None: ...
    @staticmethod
    def add_UndeleteRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def add_UnitsChangedWithScaling(value: EventHandler) -> None: ...
    @staticmethod
    def add_UserStringChanged(value: EventHandler) -> None: ...
    @overload
    def AddCustomUndoEvent(self, description: str, handler: EventHandler) -> bool: ...
    @overload
    def AddCustomUndoEvent(self, description: str, handler: EventHandler, tag: Object) -> bool: ...
    def AdjustModelUnitSystem(self, newUnitSystem: UnitSystem, scale: bool) -> None: ...
    def AdjustPageUnitSystem(self, newUnitSystem: UnitSystem, scale: bool) -> None: ...
    def BeginUndoRecord(self, description: str) -> UInt32: ...
    def ClearRedoRecords(self) -> None: ...
    @overload
    def ClearUndoRecords(self, purgeDeletedObjects: bool) -> None: ...
    @overload
    def ClearUndoRecords(self, undoSerialNumber: UInt32, purgeDeletedObjects: bool) -> None: ...
    @staticmethod
    def Create(modelTemplateFileName: str) -> RhinoDoc: ...
    def CreateDefaultAttributes(self) -> ObjectAttributes: ...
    @staticmethod
    def CreateHeadless(file3dmTemplatePath: str) -> RhinoDoc: ...
    def Dispose(self) -> None: ...
    def EndUndoRecord(self, undoRecordSerialNumber: UInt32) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    def Export(self, filePath: str) -> bool: ...
    def ExportSelected(self, filePath: str) -> bool: ...
    @staticmethod
    def ExtractPreviewImage(path: str) -> Bitmap: ...
    def FindFile(self, filename: str) -> str: ...
    @staticmethod
    def FromFilePath(filePath: str) -> RhinoDoc: ...
    @staticmethod
    def FromRuntimeSerialNumber(serialNumber: UInt32) -> RhinoDoc: ...
    @property
    def ActiveDoc() -> RhinoDoc: ...
    @property
    def AnimationProperties(self) -> AnimationProperties: ...
    @property
    def Bitmaps(self) -> BitmapTable: ...
    @property
    def CurrentEnvironment(self) -> ICurrentEnvironment: ...
    @property
    def CurrentUndoRecordSerialNumber(self) -> UInt32: ...
    @property
    def CustomRenderSizes(self) -> List: ...
    @property
    def DateCreated(self) -> DateTime: ...
    @property
    def DateLastEdited(self) -> DateTime: ...
    @property
    def DimStyles(self) -> DimStyleTable: ...
    @property
    def DistanceDisplayPrecision(self) -> int: ...
    @property
    def DocumentId(self) -> int: ...
    @property
    def EarthAnchorPoint(self) -> EarthAnchorPoint: ...
    @property
    def Fonts(self) -> FontTable: ...
    @property
    def GroundPlane(self) -> GroundPlane: ...
    @property
    def Groups(self) -> GroupTable: ...
    @property
    def HatchPatterns(self) -> HatchPatternTable: ...
    @property
    def InstanceDefinitions(self) -> InstanceDefinitionTable: ...
    @property
    def IsAvailable(self) -> bool: ...
    @property
    def IsClosing(self) -> bool: ...
    @property
    def IsCommandRunning(self) -> bool: ...
    @property
    def IsCreating(self) -> bool: ...
    @property
    def IsHeadless(self) -> bool: ...
    @property
    def IsInitializing(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def IsOpening(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsSendingMail(self) -> bool: ...
    @property
    def Layers(self) -> LayerTable: ...
    @property
    def LayoutSpaceAnnotationScalingEnabled(self) -> bool: ...
    @property
    def Lights(self) -> LightTable: ...
    @property
    def Linetypes(self) -> LinetypeTable: ...
    @property
    def Manifest(self) -> ManifestTable: ...
    @property
    def Materials(self) -> MaterialTable: ...
    @property
    def MeshingParameterStyle(self) -> MeshingParameterStyle: ...
    @property
    def ModelAbsoluteTolerance(self) -> float: ...
    @property
    def ModelAngleToleranceDegrees(self) -> float: ...
    @property
    def ModelAngleToleranceRadians(self) -> float: ...
    @property
    def ModelBasepoint(self) -> Point3d: ...
    @property
    def ModelDistanceDisplayPrecision(self) -> int: ...
    @property
    def ModelRelativeTolerance(self) -> float: ...
    @property
    def ModelSpaceAnnotationScalingEnabled(self) -> bool: ...
    @property
    def ModelSpaceHatchScale(self) -> float: ...
    @property
    def ModelSpaceHatchScalingEnabled(self) -> bool: ...
    @property
    def ModelSpaceTextScale(self) -> float: ...
    @property
    def ModelUnitSystem(self) -> UnitSystem: ...
    @property
    def Modified(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NamedConstructionPlanes(self) -> NamedConstructionPlaneTable: ...
    @property
    def NamedLayerStates(self) -> NamedLayerStateTable: ...
    @property
    def NamedPositions(self) -> NamedPositionTable: ...
    @property
    def NamedViews(self) -> NamedViewTable: ...
    @property
    def NextUndoRecordSerialNumber(self) -> UInt32: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Objects(self) -> ObjectTable: ...
    @property
    def PageAbsoluteTolerance(self) -> float: ...
    @property
    def PageAngleToleranceDegrees(self) -> float: ...
    @property
    def PageAngleToleranceRadians(self) -> float: ...
    @property
    def PageDistanceDisplayPrecision(self) -> int: ...
    @property
    def PageRelativeTolerance(self) -> float: ...
    @property
    def PageUnitSystem(self) -> UnitSystem: ...
    @property
    def Path(self) -> str: ...
    @property
    def PostEffects(self) -> IPostEffects: ...
    @property
    def RedoActive(self) -> bool: ...
    @property
    def RenderEnvironments(self) -> RenderEnvironmentTable: ...
    @property
    def RenderMaterials(self) -> RenderMaterialTable: ...
    @property
    def RenderSettings(self) -> RenderSettings: ...
    @property
    def RenderTextures(self) -> RenderTextureTable: ...
    @property
    def RuntimeData(self) -> RuntimeDocumentDataTable: ...
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    @property
    def Snapshots(self) -> SnapshotTable: ...
    @property
    def Strings(self) -> StringTable: ...
    @property
    def SubDAppearance(self) -> SubDComponentLocation: ...
    @property
    def TemplateFileUsed(self) -> str: ...
    @property
    def UndoActive(self) -> bool: ...
    @property
    def UndoRecordingEnabled(self) -> bool: ...
    @property
    def UndoRecordingIsActive(self) -> bool: ...
    @property
    def Views(self) -> ViewTable: ...
    @property
    def Worksession(self) -> Worksession: ...
    def GetAnalysisMeshingParameters(self) -> MeshingParameters: ...
    def GetCurrentMeshingParameters(self) -> MeshingParameters: ...
    def GetCustomUnitSystem(self, modelUnits: bool) -> Tuple[bool, str, float]: ...
    def GetEmbeddedFilesList(self, missingOnly: bool) -> Iterable[str]: ...
    def GetGumballPlane(self) -> Tuple[bool, Plane]: ...
    def GetHashCode(self) -> int: ...
    def GetMeshingParameters(self, style: MeshingParameterStyle) -> MeshingParameters: ...
    def GetRenderPrimitiveList(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> RenderPrimitiveList: ...
    @overload
    def GetRenderPrimitives(self, forceTriangleMeshes: bool, quietly: bool) -> Iterable[RenderPrimitive]: ...
    @overload
    def GetRenderPrimitives(self, viewport: ViewportInfo, forceTriangleMeshes: bool, quietly: bool) -> Iterable[RenderPrimitive]: ...
    @overload
    def GetRenderPrimitives(self, plugInId: Guid, viewport: ViewportInfo, forceTriangleMeshes: bool, quietly: bool) -> Iterable[RenderPrimitive]: ...
    def GetType(self) -> Type: ...
    def GetUnitSystemName(self, modelUnits: bool, capitalize: bool, singular: bool, abbreviate: bool) -> str: ...
    def Import(self, filePath: str) -> bool: ...
    @staticmethod
    def Open(filePath: str) -> Tuple[RhinoDoc, bool]: ...
    @overload
    @staticmethod
    def OpenDocuments() -> Iterable[RhinoDoc]: ...
    @overload
    @staticmethod
    def OpenDocuments(includeHeadless: bool) -> Iterable[RhinoDoc]: ...
    @staticmethod
    def OpenHeadless(file3dmPath: str) -> RhinoDoc: ...
    @staticmethod
    def ReadFile(path: str, options: FileReadOptions) -> bool: ...
    def ReadFileVersion(self) -> int: ...
    def Redo(self) -> bool: ...
    @staticmethod
    def remove_ActiveDocumentChanged(value: EventHandler) -> None: ...
    @staticmethod
    def remove_AddRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def remove_BeforeTransformObjects(value: EventHandler) -> None: ...
    @staticmethod
    def remove_BeginOpenDocument(value: EventHandler) -> None: ...
    @staticmethod
    def remove_BeginSaveDocument(value: EventHandler) -> None: ...
    @staticmethod
    def remove_CloseDocument(value: EventHandler) -> None: ...
    @staticmethod
    def remove_DeleteRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def remove_DeselectAllObjects(value: EventHandler) -> None: ...
    @staticmethod
    def remove_DeselectObjects(value: EventHandler) -> None: ...
    @staticmethod
    def remove_DimensionStyleTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_DocumentPropertiesChanged(value: EventHandler) -> None: ...
    @staticmethod
    def remove_EndOpenDocument(value: EventHandler) -> None: ...
    @staticmethod
    def remove_EndOpenDocumentInitialiViewUpdate(value: EventHandler) -> None: ...
    @staticmethod
    def remove_EndOpenDocumentInitialViewUpdate(value: EventHandler) -> None: ...
    @staticmethod
    def remove_EndSaveDocument(value: EventHandler) -> None: ...
    @staticmethod
    def remove_GroupTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_InstanceDefinitionTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_LayerTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_LightTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_MaterialTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_ModifyObjectAttributes(value: EventHandler) -> None: ...
    @staticmethod
    def remove_NewDocument(value: EventHandler) -> None: ...
    @staticmethod
    def remove_PurgeRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RenderEnvironmentTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RenderMaterialsTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_RenderTextureTableEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_ReplaceRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def remove_SelectObjects(value: EventHandler) -> None: ...
    @staticmethod
    def remove_TextureMappingEvent(value: EventHandler) -> None: ...
    @staticmethod
    def remove_UndeleteRhinoObject(value: EventHandler) -> None: ...
    @staticmethod
    def remove_UnitsChangedWithScaling(value: EventHandler) -> None: ...
    @staticmethod
    def remove_UserStringChanged(value: EventHandler) -> None: ...
    def Save(self) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str) -> bool: ...
    @overload
    def SaveAs(self, file3dmPath: str, version: int) -> bool: ...
    @overload
    def SaveAsTemplate(self, file3dmTemplatePath: str) -> bool: ...
    @overload
    def SaveAsTemplate(self, file3dmTemplatePath: str, version: int) -> bool: ...
    def SelectRenderContentInEditor(self, collection: RenderContentCollection, append: bool) -> None: ...
    @ActiveDoc.setter
    def ActiveDoc() -> None: ...
    @AnimationProperties.setter
    def AnimationProperties(self) -> MutableSequence[AnimationProperties]: ...
    @EarthAnchorPoint.setter
    def EarthAnchorPoint(self) -> MutableSequence[EarthAnchorPoint]: ...
    @LayoutSpaceAnnotationScalingEnabled.setter
    def LayoutSpaceAnnotationScalingEnabled(self) -> MutableSequence[bool]: ...
    @MeshingParameterStyle.setter
    def MeshingParameterStyle(self) -> MutableSequence[MeshingParameterStyle]: ...
    @ModelAbsoluteTolerance.setter
    def ModelAbsoluteTolerance(self) -> MutableSequence[float]: ...
    @ModelAngleToleranceDegrees.setter
    def ModelAngleToleranceDegrees(self) -> MutableSequence[float]: ...
    @ModelAngleToleranceRadians.setter
    def ModelAngleToleranceRadians(self) -> MutableSequence[float]: ...
    @ModelBasepoint.setter
    def ModelBasepoint(self) -> MutableSequence[Point3d]: ...
    @ModelDistanceDisplayPrecision.setter
    def ModelDistanceDisplayPrecision(self) -> MutableSequence[int]: ...
    @ModelRelativeTolerance.setter
    def ModelRelativeTolerance(self) -> MutableSequence[float]: ...
    @ModelSpaceAnnotationScalingEnabled.setter
    def ModelSpaceAnnotationScalingEnabled(self) -> MutableSequence[bool]: ...
    @ModelSpaceHatchScale.setter
    def ModelSpaceHatchScale(self) -> MutableSequence[float]: ...
    @ModelSpaceHatchScalingEnabled.setter
    def ModelSpaceHatchScalingEnabled(self) -> MutableSequence[bool]: ...
    @ModelSpaceTextScale.setter
    def ModelSpaceTextScale(self) -> MutableSequence[float]: ...
    @ModelUnitSystem.setter
    def ModelUnitSystem(self) -> MutableSequence[UnitSystem]: ...
    @Modified.setter
    def Modified(self) -> MutableSequence[bool]: ...
    @Notes.setter
    def Notes(self) -> MutableSequence[str]: ...
    @PageAbsoluteTolerance.setter
    def PageAbsoluteTolerance(self) -> MutableSequence[float]: ...
    @PageAngleToleranceDegrees.setter
    def PageAngleToleranceDegrees(self) -> MutableSequence[float]: ...
    @PageAngleToleranceRadians.setter
    def PageAngleToleranceRadians(self) -> MutableSequence[float]: ...
    @PageDistanceDisplayPrecision.setter
    def PageDistanceDisplayPrecision(self) -> MutableSequence[int]: ...
    @PageRelativeTolerance.setter
    def PageRelativeTolerance(self) -> MutableSequence[float]: ...
    @PageUnitSystem.setter
    def PageUnitSystem(self) -> MutableSequence[UnitSystem]: ...
    @RenderSettings.setter
    def RenderSettings(self) -> MutableSequence[RenderSettings]: ...
    @SubDAppearance.setter
    def SubDAppearance(self) -> MutableSequence[SubDComponentLocation]: ...
    @UndoRecordingEnabled.setter
    def UndoRecordingEnabled(self) -> MutableSequence[bool]: ...
    def SetCustomMeshingParameters(self, mp: MeshingParameters) -> None: ...
    def SetCustomUnitSystem(self, modelUnits: bool, customUnitName: str, metersPerCustomUnit: float, scale: bool) -> bool: ...
    def SupportsRenderPrimitiveList(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> bool: ...
    def ToString(self) -> str: ...
    def TryGetRenderPrimitiveBoundingBox(self, viewport: ViewportInfo, attrs: DisplayPipelineAttributes) -> Tuple[bool, BoundingBox]: ...
    def Undo(self) -> bool: ...
    def Write3dmFile(self, path: str, options: FileWriteOptions) -> bool: ...
    def WriteFile(self, path: str, options: FileWriteOptions) -> bool: ...


class RhinoDocObserverArgs:
    def __init__(self, doc: RhinoDoc): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Doc(self) -> RhinoDoc: ...
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class RhinoFileWatcherChangeReason(Enum):
    Created = 1
    Deleted = 2
    Changed = 4
    Renamed = 5


from .Geometry import Vector3d
class RhinoMath:
    @overload
    @staticmethod
    def Clamp(value: float, bound1: float, bound2: float) -> float: ...
    @overload
    @staticmethod
    def Clamp(value: int, bound1: int, bound2: int) -> int: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: UInt32, value: int) -> UInt32: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: UInt32, buffer: Iterable[Byte]) -> UInt32: ...
    @overload
    @staticmethod
    def CRC32(currentRemainder: UInt32, value: float) -> UInt32: ...
    @overload
    @staticmethod
    def EpsilonEquals(x: Single, y: Single, epsilon: Single) -> bool: ...
    @overload
    @staticmethod
    def EpsilonEquals(x: float, y: float, epsilon: float) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @staticmethod
    def EvaluateNormal(limitDirection: int, ds: Vector3d, dt: Vector3d, dss: Vector3d, dst: Vector3d, dtt: Vector3d) -> Tuple[bool, Vector3d]: ...
    @staticmethod
    def EvaluateNormalPartials(ds: Vector3d, dt: Vector3d, dss: Vector3d, dst: Vector3d, dtt: Vector3d) -> Tuple[bool, Vector3d, Vector3d]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def IntIndexToString(index: int) -> str: ...
    @staticmethod
    def IsValidDouble(x: float) -> bool: ...
    @staticmethod
    def IsValidSingle(x: Single) -> bool: ...
    @staticmethod
    def MetersPerUnit(units: UnitSystem) -> float: ...
    @staticmethod
    def ParseNumber(expression: str) -> float: ...
    @staticmethod
    def ToDegrees(radians: float) -> float: ...
    @staticmethod
    def ToRadians(degrees: float) -> float: ...
    def ToString(self) -> str: ...
    @staticmethod
    def TryParseNumber(expression: str) -> Tuple[bool, float]: ...
    @staticmethod
    def UnitScale(from_: UnitSystem, to: UnitSystem) -> float: ...
    @staticmethod
    def Wrap(value: float, bound1: float, bound2: float) -> float: ...


class RhinoWindow:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def InvokeRequired(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Invoke(self, method: Delegate) -> None: ...
    def ToString(self) -> str: ...


class RuntimeEnvironment(Enum):
    Unset = 0
    # None = 1
    Windows = 2
    Apple = 3
    Android = 4
    Linux = 5


class ScaleStringFormat(Enum):
    # None = 0
    RatioFormat = 1
    EquationFormat = 2
    FractionFormat = 3
    Unset = 255


from .Input import StringParserSettings
class ScaleValue:
    def __init__(self): ...
    @overload
    @staticmethod
    def Create(s: str, ps: StringParserSettings) -> ScaleValue: ...
    @overload
    @staticmethod
    def Create(left: LengthValue, right: LengthValue, format: ScaleStringFormat) -> ScaleValue: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def LeftToRightScale(self) -> float: ...
    @property
    def RightToLeftScale(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsUnset(self) -> bool: ...
    def LeftLengthValue(self) -> LengthValue: ...
    @staticmethod
    def OneToOne() -> ScaleValue: ...
    def RightLengthValue(self) -> LengthValue: ...
    def ToString(self) -> str: ...


class StringFormat(Enum):
    ExactDecimal = 0
    ExactProperFraction = 1
    ExactImproperFraction = 2
    CleanDecimal = 3
    CleanProperFraction = 4
    CleanImproperFraction = 5


class Symbols:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DegreeSymbol() -> Char: ...
    @property
    def DiameterSymbol() -> Char: ...
    @property
    def PlusMinusSymbol() -> Char: ...
    @property
    def RadiusSymbol() -> Char: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from .Render import TextureMapping
class TextureMappingEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EventType(self) -> TextureMappingEventType: ...
    @property
    def NewMapping(self) -> TextureMapping: ...
    @property
    def OldMapping(self) -> TextureMapping: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class TextureMappingEventType(Enum):
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3


class UnitsChangedWithScalingEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentSerialNumber(self) -> UInt32: ...
    @property
    def Scale(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class UnitSystem(Enum):
    # None = 0
    Microns = 1
    Millimeters = 2
    Centimeters = 3
    Meters = 4
    Kilometers = 5
    Microinches = 6
    Mils = 7
    Inches = 8
    Feet = 9
    Miles = 10
    CustomUnits = 11
    Angstroms = 12
    Nanometers = 13
    Decimeters = 14
    Dekameters = 15
    Hectometers = 16
    Megameters = 17
    Gigameters = 18
    Yards = 19
    PrinterPoints = 20
    PrinterPicas = 21
    NauticalMiles = 22
    AstronomicalUnits = 23
    LightYears = 24
    Parsecs = 25
    Unset = 255


class UserStringChangedArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Key(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...
