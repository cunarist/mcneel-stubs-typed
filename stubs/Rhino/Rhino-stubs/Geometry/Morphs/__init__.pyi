from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class BendSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, start: Point3d, end: Point3d, point: Point3d, straight: bool, symmetric: bool): ...
    @overload
    def __init__(self, start: Point3d, end: Point3d, point: Point3d, angle: float, straight: bool, symmetric: bool): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def PreserveStructure(self) -> bool: ...
    @overload
    @property
    def QuickPreview(self) -> bool: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> Tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @overload
    @PreserveStructure.setter
    def PreserveStructure(self) -> MutableSequence[bool]: ...
    @overload
    @QuickPreview.setter
    def QuickPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Tolerance.setter
    def Tolerance(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class FlowSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, curve0: Curve, curve1: Curve, preventStretching: bool): ...
    @overload
    def __init__(self, curve0: Curve, curve1: Curve, reverseCurve0: bool, reverseCurve1: bool, preventStretching: bool): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def PreserveStructure(self) -> bool: ...
    @overload
    @property
    def QuickPreview(self) -> bool: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> Tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @overload
    @PreserveStructure.setter
    def PreserveStructure(self) -> MutableSequence[bool]: ...
    @overload
    @QuickPreview.setter
    def QuickPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Tolerance.setter
    def Tolerance(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class MaelstromSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, plane: Plane, radius0: float, radius1: float, angle: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def PreserveStructure(self) -> bool: ...
    @overload
    @property
    def QuickPreview(self) -> bool: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> Tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @overload
    @PreserveStructure.setter
    def PreserveStructure(self) -> MutableSequence[bool]: ...
    @overload
    @QuickPreview.setter
    def QuickPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Tolerance.setter
    def Tolerance(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class SplopSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, plane: Plane, surface: Surface, surfaceParam: Point2d): ...
    @overload
    def __init__(self, plane: Plane, surface: Surface, surfaceParam: Point2d, scale: float): ...
    @overload
    def __init__(self, plane: Plane, surface: Surface, surfaceParam: Point2d, scale: float, angle: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def PreserveStructure(self) -> bool: ...
    @overload
    @property
    def QuickPreview(self) -> bool: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> Tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @overload
    @PreserveStructure.setter
    def PreserveStructure(self) -> MutableSequence[bool]: ...
    @overload
    @QuickPreview.setter
    def QuickPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Tolerance.setter
    def Tolerance(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class SporphSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, surface0: Surface, surface1: Surface): ...
    @overload
    def __init__(self, surface0: Surface, surface1: Surface, surface0Param: Point2d, surface1Param: Point2d): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ConstrainNormal(self) -> Vector3d: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def PreserveStructure(self) -> bool: ...
    @overload
    @property
    def QuickPreview(self) -> bool: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> Tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @overload
    @ConstrainNormal.setter
    def ConstrainNormal(self) -> MutableSequence[Vector3d]: ...
    @overload
    @PreserveStructure.setter
    def PreserveStructure(self) -> MutableSequence[bool]: ...
    @overload
    @QuickPreview.setter
    def QuickPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Tolerance.setter
    def Tolerance(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class StretchSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, start: Point3d, end: Point3d, point: Point3d): ...
    @overload
    def __init__(self, start: Point3d, end: Point3d, length: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def PreserveStructure(self) -> bool: ...
    @overload
    @property
    def QuickPreview(self) -> bool: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> Tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @overload
    @PreserveStructure.setter
    def PreserveStructure(self) -> MutableSequence[bool]: ...
    @overload
    @QuickPreview.setter
    def QuickPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Tolerance.setter
    def Tolerance(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class TaperSpaceMorph(SpaceMorph):
    @overload
    def __init__(self, start: Point3d, end: Point3d, startRadius: float, endRadius: float, bFlat: bool, infiniteTaper: bool): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def PreserveStructure(self) -> bool: ...
    @overload
    @property
    def QuickPreview(self) -> bool: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def Morph(self, plane: Plane) -> Tuple[bool, Plane]: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @overload
    @PreserveStructure.setter
    def PreserveStructure(self) -> MutableSequence[bool]: ...
    @overload
    @QuickPreview.setter
    def QuickPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Tolerance.setter
    def Tolerance(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class TwistSpaceMorph(SpaceMorph):
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def InfiniteTwist(self) -> bool: ...
    @overload
    @property
    def PreserveStructure(self) -> bool: ...
    @overload
    @property
    def QuickPreview(self) -> bool: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    @property
    def TwistAngleRadians(self) -> float: ...
    @overload
    @property
    def TwistAxis(self) -> Line: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Morph(self, plane: Plane) -> Tuple[bool, Plane]: ...
    @overload
    def Morph(self, geometry: GeometryBase) -> bool: ...
    @overload
    def MorphPoint(self, point: Point3d) -> Point3d: ...
    @overload
    @InfiniteTwist.setter
    def InfiniteTwist(self) -> MutableSequence[bool]: ...
    @overload
    @PreserveStructure.setter
    def PreserveStructure(self) -> MutableSequence[bool]: ...
    @overload
    @QuickPreview.setter
    def QuickPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Tolerance.setter
    def Tolerance(self) -> MutableSequence[float]: ...
    @overload
    @TwistAngleRadians.setter
    def TwistAngleRadians(self) -> MutableSequence[float]: ...
    @overload
    @TwistAxis.setter
    def TwistAxis(self) -> MutableSequence[Line]: ...
    @overload
    def ToString(self) -> str: ...
