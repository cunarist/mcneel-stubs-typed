from typing import Tuple, Iterable, overload
from enum import Enum



from ..DocObjects.Custom import UserData
from ..Geometry import Point3f
from ..Geometry import Point3d
from ..Geometry import Vector3d
from ..Geometry import Plane
from ..Geometry import Interval
from ..Geometry import Point2d
from ..Geometry import Point4d
from ..Geometry import Vector2d
from ..Geometry import BoundingBox
from ..Geometry import Ray3d
from ..Geometry import Transform
from ..Geometry import Line
from ..Geometry import Vector3f
from ..Geometry import MeshingParameters
from ..Geometry import GeometryBase
from ..DocObjects import ObjRef
class ArchivableDictionary:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, parentUserData: UserData): ...
    @overload
    def __init__(self, version: int): ...
    @overload
    def __init__(self, version: int, name: str): ...
    def AddContentsFrom(self, source: ArchivableDictionary) -> bool: ...
    def Clear(self) -> None: ...
    def Clone(self) -> ArchivableDictionary: ...
    def ContainsKey(self, key: str) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ChangeSerialNumber(self) -> UInt32: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, key: str) -> Object: ...
    @property
    def Keys(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    @property
    def ParentUserData(self) -> UserData: ...
    @property
    def Values(self) -> Iterable[Object]: ...
    @property
    def Version(self) -> int: ...
    @overload
    def GetBool(self, key: str) -> bool: ...
    @overload
    def GetBool(self, key: str, defaultValue: bool) -> bool: ...
    @overload
    def GetBytes(self, key: str) -> Iterable[Byte]: ...
    @overload
    def GetBytes(self, key: str, defaultValue: Iterable[Byte]) -> Iterable[Byte]: ...
    @overload
    def GetDictionary(self, key: str) -> ArchivableDictionary: ...
    @overload
    def GetDictionary(self, key: str, defaultValue: ArchivableDictionary) -> ArchivableDictionary: ...
    @overload
    def GetDouble(self, key: str) -> float: ...
    @overload
    def GetDouble(self, key: str, defaultValue: float) -> float: ...
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetEnumValue(self) -> T: ...
    @overload
    def GetEnumValue(self, key: str) -> T: ...
    @overload
    def GetFloat(self, key: str) -> Single: ...
    @overload
    def GetFloat(self, key: str, defaultValue: Single) -> Single: ...
    @overload
    def GetGuid(self, key: str) -> Guid: ...
    @overload
    def GetGuid(self, key: str, defaultValue: Guid) -> Guid: ...
    def GetHashCode(self) -> int: ...
    def Getint(self, key: str, defaultValue: int) -> int: ...
    @overload
    def GetInteger(self, key: str) -> int: ...
    @overload
    def GetInteger(self, key: str, defaultValue: int) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetPlane(self, key: str) -> Plane: ...
    @overload
    def GetPlane(self, key: str, defaultValue: Plane) -> Plane: ...
    @overload
    def GetPoint3d(self, key: str) -> Point3d: ...
    @overload
    def GetPoint3d(self, key: str, defaultValue: Point3d) -> Point3d: ...
    @overload
    def GetPoint3f(self, key: str) -> Point3f: ...
    @overload
    def GetPoint3f(self, key: str, defaultValue: Point3f) -> Point3f: ...
    @overload
    def GetString(self, key: str) -> str: ...
    @overload
    def GetString(self, key: str, defaultValue: str) -> str: ...
    def GetType(self) -> Type: ...
    @overload
    def GetVector3d(self, key: str) -> Vector3d: ...
    @overload
    def GetVector3d(self, key: str, defaultValue: Vector3d) -> Vector3d: ...
    def Remove(self, key: str) -> bool: ...
    def RemoveEnumValue(self) -> bool: ...
    def ReplaceContentsWith(self, source: ArchivableDictionary) -> bool: ...
    @Item.setter
    def Item(self, key: str, value: Object) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def Set(self, key: str, val: Point) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[float]) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[Guid]) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[str]) -> bool: ...
    @overload
    def Set(self, key: str, val: Color) -> bool: ...
    @overload
    def Set(self, key: str, val: ArchivableDictionary) -> bool: ...
    @overload
    def Set(self, key: str, val: PointF) -> bool: ...
    @overload
    def Set(self, key: str, val: Rectangle) -> bool: ...
    @overload
    def Set(self, key: str, val: RectangleF) -> bool: ...
    @overload
    def Set(self, key: str, val: Size) -> bool: ...
    @overload
    def Set(self, key: str, val: SizeF) -> bool: ...
    @overload
    def Set(self, key: str, val: Font) -> bool: ...
    @overload
    def Set(self, key: str, val: Point2d) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[Single]) -> bool: ...
    @overload
    def Set(self, key: str, val: Point3d) -> bool: ...
    @overload
    def Set(self, key: str, val: Point4d) -> bool: ...
    @overload
    def Set(self, key: str, val: Vector2d) -> bool: ...
    @overload
    def Set(self, key: str, val: Vector3d) -> bool: ...
    @overload
    def Set(self, key: str, val: BoundingBox) -> bool: ...
    @overload
    def Set(self, key: str, val: Ray3d) -> bool: ...
    @overload
    def Set(self, key: str, val: Transform) -> bool: ...
    @overload
    def Set(self, key: str, val: Plane) -> bool: ...
    @overload
    def Set(self, key: str, val: Line) -> bool: ...
    @overload
    def Set(self, key: str, val: Interval) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[int]) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[SByte]) -> bool: ...
    @overload
    def Set(self, key: str, val: Point3f) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[GeometryBase]) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[ObjRef]) -> bool: ...
    @overload
    def Set(self, key: str, val: ObjRef) -> bool: ...
    @overload
    def Set(self, key: str, val: GeometryBase) -> bool: ...
    @overload
    def Set(self, key: str, val: MeshingParameters) -> bool: ...
    @overload
    def Set(self, key: str, val: bool) -> bool: ...
    @overload
    def Set(self, key: str, val: Byte) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[Int16]) -> bool: ...
    @overload
    def Set(self, key: str, val: Int16) -> bool: ...
    @overload
    def Set(self, key: str, val: SByte) -> bool: ...
    @overload
    def Set(self, key: str, val: int) -> bool: ...
    @overload
    def Set(self, key: str, val: UInt32) -> bool: ...
    @overload
    def Set(self, key: str, val: Int64) -> bool: ...
    @overload
    def Set(self, key: str, val: Single) -> bool: ...
    @overload
    def Set(self, key: str, val: float) -> bool: ...
    @overload
    def Set(self, key: str, val: Guid) -> bool: ...
    @overload
    def Set(self, key: str, val: str) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[bool]) -> bool: ...
    @overload
    def Set(self, key: str, val: Iterable[Byte]) -> bool: ...
    @overload
    def Set(self, key: str, val: UInt16) -> bool: ...
    @overload
    def Set(self, key: str, val: Vector3f) -> bool: ...
    @Version.setter
    def Version(self, value: int) -> None: ...
    @overload
    def SetEnumValue(self, enumValue: T) -> bool: ...
    @overload
    def SetEnumValue(self, key: str, enumValue: T) -> bool: ...
    def ToString(self) -> str: ...
    def TryGetBool(self, key: str) -> Tuple[bool, bool]: ...
    def TryGetBytes(self, key: str) -> Tuple[bool, Iterable[Byte]]: ...
    def TryGetDictionary(self, key: str) -> Tuple[bool, ArchivableDictionary]: ...
    def TryGetDouble(self, key: str) -> Tuple[bool, float]: ...
    def TryGetEnumValue(self, key: str) -> Tuple[bool, T]: ...
    def TryGetFloat(self, key: str) -> Tuple[bool, Single]: ...
    def TryGetGuid(self, key: str) -> Tuple[bool, Guid]: ...
    def TryGetInteger(self, key: str) -> Tuple[bool, int]: ...
    def TryGetPlane(self, key: str) -> Tuple[bool, Plane]: ...
    def TryGetPoint3d(self, key: str) -> Tuple[bool, Point3d]: ...
    def TryGetPoint3f(self, key: str) -> Tuple[bool, Point3f]: ...
    def TryGetString(self, key: str) -> Tuple[bool, str]: ...
    def TryGetValue(self, key: str) -> Tuple[bool, Object]: ...
    def TryGetVector3d(self, key: str) -> Tuple[bool, Vector3d]: ...


from ..Geometry import Line
from ..Geometry import Circle
from ..Geometry import Arc
from ..Geometry import Ellipse
from ..Geometry import Transform
from ..Geometry import Curve
class CurveList:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialCapacity: int): ...
    @overload
    def __init__(self, collection: Iterable[Curve]): ...
    @overload
    def Add(self, line: Line) -> None: ...
    @overload
    def Add(self, circle: Circle) -> None: ...
    @overload
    def Add(self, arc: Arc) -> None: ...
    @overload
    def Add(self, polyline: Iterable[Point3d]) -> None: ...
    @overload
    def Add(self, ellipse: Ellipse) -> None: ...
    @overload
    def Add(self, item: Curve) -> None: ...
    @overload
    def AddRange(self, collection: IEnumerable) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[Curve]) -> None: ...
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: Curve) -> int: ...
    @overload
    def BinarySearch(self, item: Curve, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: Curve, comparer: IComparer) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, item: Curve) -> bool: ...
    def ConvertAll(self, converter: Converter) -> RhinoList: ...
    @overload
    def CopyTo(self, array: Iterable[Curve]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[Curve], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[Curve], arrayIndex: int, count: int) -> None: ...
    def Duplicate(self) -> RhinoList: ...
    def Equals(self, obj: Object) -> bool: ...
    def Exists(self, match: Predicate) -> bool: ...
    def Find(self, match: Predicate) -> Curve: ...
    def FindAll(self, match: Predicate) -> RhinoList: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def FindLast(self, match: Predicate) -> Curve: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def First(self) -> Curve: ...
    @property
    def Item(self, index: int) -> Curve: ...
    @property
    def Last(self) -> Curve: ...
    @property
    def NullCount(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetHashCode(self) -> int: ...
    def GetRange(self, index: int, count: int) -> RhinoList: ...
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: Curve) -> int: ...
    @overload
    def IndexOf(self, item: Curve, index: int) -> int: ...
    @overload
    def IndexOf(self, item: Curve, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, arc: Arc) -> None: ...
    @overload
    def Insert(self, index: int, circle: Circle) -> None: ...
    @overload
    def Insert(self, index: int, polyline: Iterable[Point3d]) -> None: ...
    @overload
    def Insert(self, index: int, ellipse: Ellipse) -> None: ...
    @overload
    def Insert(self, index: int, item: Curve) -> None: ...
    @overload
    def Insert(self, index: int, line: Line) -> None: ...
    def InsertRange(self, index: int, collection: Iterable[Curve]) -> None: ...
    @overload
    def LastIndexOf(self, item: Curve) -> int: ...
    @overload
    def LastIndexOf(self, item: Curve, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: Curve, index: int, count: int) -> int: ...
    def RemapIndex(self, index: int) -> int: ...
    def Remove(self, item: Curve) -> bool: ...
    def RemoveAll(self, match: Predicate) -> int: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveNulls(self) -> int: ...
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @First.setter
    def First(self, value: Curve) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Curve) -> None: ...
    @Last.setter
    def Last(self, value: Curve) -> None: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, keys: Iterable[int]) -> None: ...
    @overload
    def Sort(self, keys: Iterable[float]) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    def ToArray(self) -> Iterable[Curve]: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> bool: ...
    def TrimExcess(self) -> None: ...
    def TrueForAll(self, match: Predicate) -> bool: ...




from ..Geometry import Point3d
from ..Geometry import Transform
class Point3dList:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initialCapacity: int): ...
    @overload
    def __init__(self, collection: Iterable[Point3d]): ...
    @overload
    def __init__(self, initialPoints: Iterable[Point3d]): ...
    @overload
    def Add(self, item: Point3d) -> None: ...
    @overload
    def Add(self, x: float, y: float, z: float) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[Point3d]) -> None: ...
    @overload
    def AddRange(self, collection: IEnumerable) -> None: ...
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: Point3d) -> int: ...
    @overload
    def BinarySearch(self, item: Point3d, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: Point3d, comparer: IComparer) -> int: ...
    def Clear(self) -> None: ...
    def ClosestIndex(self, testPoint: Point3d) -> int: ...
    def ClosestIndexInList(list: Iterable[Point3d], testPoint: Point3d) -> int: ...
    def ClosestPointInList(list: Iterable[Point3d], testPoint: Point3d) -> Point3d: ...
    def Contains(self, item: Point3d) -> bool: ...
    def ConvertAll(self, converter: Converter) -> RhinoList: ...
    @overload
    def CopyTo(self, array: Iterable[Point3d]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[Point3d], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[Point3d], arrayIndex: int, count: int) -> None: ...
    @overload
    def Duplicate(self) -> Point3dList: ...
    @overload
    def Duplicate(self) -> RhinoList: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Point3dList) -> bool: ...
    def Exists(self, match: Predicate) -> bool: ...
    def Find(self, match: Predicate) -> Point3d: ...
    def FindAll(self, match: Predicate) -> RhinoList: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def FindLast(self, match: Predicate) -> Point3d: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def ForEach(self, action: Action) -> None: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def First(self) -> Point3d: ...
    @property
    def Item(self, index: int) -> Point3d: ...
    @property
    def Last(self) -> Point3d: ...
    @property
    def NullCount(self) -> int: ...
    @property
    def X(self) -> XAccess: ...
    @property
    def Y(self) -> YAccess: ...
    @property
    def Z(self) -> ZAccess: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetHashCode(self) -> int: ...
    def GetRange(self, index: int, count: int) -> RhinoList: ...
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: Point3d) -> int: ...
    @overload
    def IndexOf(self, item: Point3d, index: int) -> int: ...
    @overload
    def IndexOf(self, item: Point3d, index: int, count: int) -> int: ...
    def Insert(self, index: int, item: Point3d) -> None: ...
    def InsertRange(self, index: int, collection: Iterable[Point3d]) -> None: ...
    @overload
    def LastIndexOf(self, item: Point3d) -> int: ...
    @overload
    def LastIndexOf(self, item: Point3d, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: Point3d, index: int, count: int) -> int: ...
    def RemapIndex(self, index: int) -> int: ...
    def Remove(self, item: Point3d) -> bool: ...
    def RemoveAll(self, match: Predicate) -> int: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveNulls(self) -> int: ...
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @First.setter
    def First(self, value: Point3d) -> None: ...
    @Item.setter
    def Item(self, index: int, value: Point3d) -> None: ...
    @Last.setter
    def Last(self, value: Point3d) -> None: ...
    def SetAllX(self, xValue: float) -> None: ...
    def SetAllY(self, yValue: float) -> None: ...
    def SetAllZ(self, zValue: float) -> None: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, keys: Iterable[float]) -> None: ...
    @overload
    def Sort(self, keys: Iterable[int]) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    def ToArray(self) -> Iterable[Point3d]: ...
    def ToString(self) -> str: ...
    def Transform(self, xform: Transform) -> None: ...
    def TrimExcess(self) -> None: ...
    def TrueForAll(self, match: Predicate) -> bool: ...


from ..Geometry import PointCloud
class RhinoList:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Point2dKNeighbors(hayPoints: Iterable[Point2d], needlePoints: Iterable[Point2d], amount: int) -> Iterable[Iterable[int]]: ...
    def Point2fKNeighbors(hayPoints: Iterable[Point2f], needlePoints: Iterable[Point2f], amount: int) -> Iterable[Iterable[int]]: ...
    def Point3dKNeighbors(hayPoints: Iterable[Point3d], needlePoints: Iterable[Point3d], amount: int) -> Iterable[Iterable[int]]: ...
    def Point3fKNeighbors(hayPoints: Iterable[Point3f], needlePoints: Iterable[Point3f], amount: int) -> Iterable[Iterable[int]]: ...
    def PointCloudKNeighbors(pointcloud: PointCloud, needlePoints: Iterable[Point3d], amount: int) -> Iterable[Iterable[int]]: ...
    def ToString(self) -> str: ...




from ..Geometry import Transform
from ..DocObjects import RhinoObject
from ..DocObjects import ObjRef
from ..Input.Custom import GetObject
class TransformObjectList:
    def __init__(self): ...
    @overload
    def Add(self, rhinoObject: RhinoObject) -> None: ...
    @overload
    def Add(self, objref: ObjRef) -> None: ...
    def AddObjects(self, go: GetObject, allowGrips: bool) -> int: ...
    def Clear(self) -> None: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def DisplayFeedbackEnabled(self) -> bool: ...
    @property
    def GripCount(self) -> int: ...
    @property
    def GripOwnerCount(self) -> int: ...
    def GetBoundingBox(self, regularObjects: bool, grips: bool) -> BoundingBox: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GripArray(self) -> Iterable[GripObject]: ...
    def GripOwnerArray(self) -> Iterable[RhinoObject]: ...
    def ObjectArray(self) -> Iterable[RhinoObject]: ...
    @DisplayFeedbackEnabled.setter
    def DisplayFeedbackEnabled(self, value: bool) -> None: ...
    def ToString(self) -> str: ...
    def UpdateDisplayFeedbackTransform(self, xform: Transform) -> bool: ...


class XAccess:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Item(self, index: int) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Item.setter
    def Item(self, index: int, value: float) -> None: ...
    def ToString(self) -> str: ...


class YAccess:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Item(self, index: int) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Item.setter
    def Item(self, index: int, value: float) -> None: ...
    def ToString(self) -> str: ...


class ZAccess:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Item(self, index: int) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Item.setter
    def Item(self, index: int, value: float) -> None: ...
    def ToString(self) -> str: ...
