from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class AnalysisStyle(Enum):
    Wireframe = 1
    Texture = 2
    FalseColor = 4


class AnchorLocation(Enum):
    LowerLeft = 0
    UpperLeft = 1
    LowerRight = 2
    UpperRight = 3
    Center = 4


class BackgroundStyle(Enum):
    SolidColor = 0
    WallpaperImage = 1
    Gradient = 2
    Environment = 3


class BlendMode(Enum):
    Zero = 0
    One = 1
    SourceColor = 768
    OneMinusSourceColor = 769
    SourceAlpha = 770
    OneMinusSourceAlpha = 771
    DestinationAlpha = 772
    OneMinusDestinationAlpha = 773
    DestinationColor = 774
    OneMinusDestinationColor = 775
    SourceAlphaSaturate = 776


class BoundingBoxDisplayMode(Enum):
    # None = 0
    OnAlways = 1
    OnDuringDynamicDisplay = 2


from ..Geometry import BoundingBox
class CalculateBoundingBoxEventArgs(DrawEventArgs):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @overload
    @property
    def Display(self) -> DisplayPipeline: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IncludeBoundingBox(self, box: BoundingBox) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Color4f:
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, color: Color4f): ...
    @overload
    def __init__(self, argb: int): ...
    @overload
    def __init__(self, red: Single, green: Single, blue: Single, alpha: Single): ...
    @overload
    @staticmethod
    def ApplyGamma(col: Color4f, gamma: Single) -> Color4f: ...
    @overload
    def AsSystemColor(self) -> Color: ...
    @overload
    def BlendTo(self, t: Single, col: Color4f) -> Color4f: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromArgb(a: Single, color: Color4f) -> Color4f: ...
    @overload
    @staticmethod
    def FromArgb(a: Single, r: Single, g: Single, b: Single) -> Color4f: ...
    @overload
    @property
    def A(self) -> Single: ...
    @overload
    @property
    def B(self) -> Single: ...
    @overload
    @property
    def Black() -> Color4f: ...
    @overload
    @property
    def Empty() -> Color4f: ...
    @overload
    @property
    def G(self) -> Single: ...
    @overload
    @property
    def L(self) -> Single: ...
    @overload
    @property
    def R(self) -> Single: ...
    @overload
    @property
    def White() -> Color4f: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(a: Color4f, b: Color4f) -> bool: ...
    @overload
    def __ne__(a: Color4f, b: Color4f) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class ColorCMYK:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, cyan: float, magenta: float, yellow: float): ...
    @overload
    def __init__(self, cyan: float, magenta: float, yellow: float, key: float): ...
    @overload
    def __init__(self, alpha: float, cyan: float, magenta: float, yellow: float, key: float): ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgba: ColorRGBA) -> ColorCMYK: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorCMYK: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def C(self) -> float: ...
    @overload
    @property
    def K(self) -> float: ...
    @overload
    @property
    def M(self) -> float: ...
    @overload
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(cmyk: ColorCMYK) -> Color: ...
    @overload
    @A.setter
    def A(self) -> MutableSequence[float]: ...
    @overload
    @C.setter
    def C(self) -> MutableSequence[float]: ...
    @overload
    @K.setter
    def K(self) -> MutableSequence[float]: ...
    @overload
    @M.setter
    def M(self) -> MutableSequence[float]: ...
    @overload
    @Y.setter
    def Y(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import Point3d
class ColorGradient:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def EndPoint(self) -> Point3d: ...
    @overload
    @property
    def GradientType(self) -> GradientType: ...
    @overload
    @property
    def Repeat(self) -> float: ...
    @overload
    @property
    def StartPoint(self) -> Point3d: ...
    @overload
    def GetColorStops(self) -> Iterable[ColorStop]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @EndPoint.setter
    def EndPoint(self) -> MutableSequence[Point3d]: ...
    @overload
    @GradientType.setter
    def GradientType(self) -> MutableSequence[GradientType]: ...
    @overload
    @Repeat.setter
    def Repeat(self) -> MutableSequence[float]: ...
    @overload
    @StartPoint.setter
    def StartPoint(self) -> MutableSequence[Point3d]: ...
    @overload
    def SetColorStops(self, stops: Iterable[ColorStop]) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ColorHSL:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, luminance: float): ...
    @overload
    def __init__(self, alpha: float, hue: float, saturation: float, luminance: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgba: ColorRGBA) -> ColorHSL: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorHSL: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def H(self) -> float: ...
    @overload
    @property
    def L(self) -> float: ...
    @overload
    @property
    def S(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(hsl: ColorHSL) -> Color: ...
    @overload
    @A.setter
    def A(self) -> MutableSequence[float]: ...
    @overload
    @H.setter
    def H(self) -> MutableSequence[float]: ...
    @overload
    @L.setter
    def L(self) -> MutableSequence[float]: ...
    @overload
    @S.setter
    def S(self) -> MutableSequence[float]: ...
    @overload
    def ToArgbColor(self) -> Color: ...
    @overload
    def ToString(self) -> str: ...


class ColorHSV:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, value: float): ...
    @overload
    def __init__(self, alpha: float, hue: float, saturation: float, value: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgba: ColorRGBA) -> ColorHSV: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorHSV: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def H(self) -> float: ...
    @overload
    @property
    def S(self) -> float: ...
    @overload
    @property
    def V(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(hsv: ColorHSV) -> Color: ...
    @overload
    @A.setter
    def A(self) -> MutableSequence[float]: ...
    @overload
    @H.setter
    def H(self) -> MutableSequence[float]: ...
    @overload
    @S.setter
    def S(self) -> MutableSequence[float]: ...
    @overload
    @V.setter
    def V(self) -> MutableSequence[float]: ...
    @overload
    def ToArgbColor(self) -> Color: ...
    @overload
    def ToString(self) -> str: ...


class ColorLAB:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, lightness: float, a: float, b: float): ...
    @overload
    def __init__(self, alpha: float, lightness: float, a: float, b: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgb: ColorRGBA) -> ColorLAB: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorLAB: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def Alpha(self) -> float: ...
    @overload
    @property
    def B(self) -> float: ...
    @overload
    @property
    def L(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(lab: ColorLAB) -> Color: ...
    @overload
    @A.setter
    def A(self) -> MutableSequence[float]: ...
    @overload
    @Alpha.setter
    def Alpha(self) -> MutableSequence[float]: ...
    @overload
    @B.setter
    def B(self) -> MutableSequence[float]: ...
    @overload
    @L.setter
    def L(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class ColorLCH:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, lightness: float, chroma: float, hue: float): ...
    @overload
    def __init__(self, alpha: float, lightness: float, chroma: float, hue: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorLCH: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorLCH: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorLCH: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgb: ColorRGBA) -> ColorLCH: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorLCH: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def C(self) -> float: ...
    @overload
    @property
    def H(self) -> float: ...
    @overload
    @property
    def L(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def MakePositive(self) -> None: ...
    @overload
    def op_Implicit(lch: ColorLCH) -> Color: ...
    @overload
    @A.setter
    def A(self) -> MutableSequence[float]: ...
    @overload
    @C.setter
    def C(self) -> MutableSequence[float]: ...
    @overload
    @H.setter
    def H(self) -> MutableSequence[float]: ...
    @overload
    @L.setter
    def L(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class ColorMode(Enum):
    DisplayColor = 0
    PrintColor = 1
    BlackAndWhite = 2


class ColorRGBA:
    @overload
    def __init__(self, color: ColorRGBA): ...
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, argb: int): ...
    @overload
    def __init__(self, red: float, green: float, blue: float): ...
    @overload
    def __init__(self, red: float, green: float, blue: float, alpha: float): ...
    @overload
    @staticmethod
    def ApplyGamma(col: ColorRGBA, gamma: float) -> ColorRGBA: ...
    @overload
    def BlendTo(self, col: ColorRGBA, coefficient: float) -> ColorRGBA: ...
    @overload
    def CompareTo(self, other: ColorRGBA) -> int: ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorRGBA: ...
    @overload
    @staticmethod
    def CreateFromXYZ(xyz: ColorXYZ) -> ColorRGBA: ...
    @overload
    def EpsilonEquals(self, other: ColorRGBA, epsilon: float) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: ColorRGBA) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def B(self) -> float: ...
    @overload
    @property
    def Black() -> ColorRGBA: ...
    @overload
    @property
    def Blue() -> ColorRGBA: ...
    @overload
    @property
    def G(self) -> float: ...
    @overload
    @property
    def Green() -> ColorRGBA: ...
    @overload
    @property
    def R(self) -> float: ...
    @overload
    @property
    def Red() -> ColorRGBA: ...
    @overload
    @property
    def White() -> ColorRGBA: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(a: ColorRGBA, b: ColorRGBA) -> bool: ...
    @overload
    def op_Explicit(value: ColorRGBA) -> Color: ...
    @overload
    def op_Implicit(value: Color) -> ColorRGBA: ...
    @overload
    def __ne__(a: ColorRGBA, b: ColorRGBA) -> bool: ...
    @overload
    @A.setter
    def A(self) -> MutableSequence[float]: ...
    @overload
    @B.setter
    def B(self) -> MutableSequence[float]: ...
    @overload
    @G.setter
    def G(self) -> MutableSequence[float]: ...
    @overload
    @R.setter
    def R(self) -> MutableSequence[float]: ...
    @overload
    def ToArgb(self) -> int: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToString(self, format: str, formatProvider: IFormatProvider) -> str: ...


class ColorStop:
    @overload
    def __init__(self, color: Color, t: float): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Color(self) -> Color: ...
    @overload
    @property
    def Position(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Color.setter
    def Color(self) -> MutableSequence[Color]: ...
    @overload
    @Position.setter
    def Position(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class ColorXYZ:
    @overload
    def __init__(self, rgb: Color): ...
    @overload
    def __init__(self, x: float, y: float, z: float): ...
    @overload
    def __init__(self, alpha: float, x: float, y: float, z: float): ...
    @overload
    @staticmethod
    def CreateFromCMYK(cmyk: ColorCMYK) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromHSL(hsl: ColorHSL) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromHSV(hsv: ColorHSV) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromLAB(lab: ColorLAB) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromLCH(lch: ColorLCH) -> ColorXYZ: ...
    @overload
    @staticmethod
    def CreateFromRGBA(rgba: ColorRGBA) -> ColorXYZ: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def X(self) -> float: ...
    @overload
    @property
    def Y(self) -> float: ...
    @overload
    @property
    def Z(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(xyz: ColorXYZ) -> Color: ...
    @overload
    @A.setter
    def A(self) -> MutableSequence[float]: ...
    @overload
    @X.setter
    def X(self) -> MutableSequence[float]: ...
    @overload
    @Y.setter
    def Y(self) -> MutableSequence[float]: ...
    @overload
    @Z.setter
    def Z(self) -> MutableSequence[float]: ...
    @overload
    def ToString(self) -> str: ...


class ContextsForDraw(Enum):
    Unset = 0
    FilePreview = 1
    ViewCapture = 2
    Printing = 3
    UIPreview = 4
    Mask = 5
    RenderOverlays = 6


class CullFaceMode(Enum):
    DrawFrontAndBack = 0
    DrawFrontFaces = 1
    DrawBackFaces = 2


from ..DocObjects import RhinoObject
class CullObjectEventArgs(DrawEventArgs):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CullObject(self) -> bool: ...
    @overload
    @property
    def Display(self) -> DisplayPipeline: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def RhinoObject(self) -> RhinoObject: ...
    @overload
    @property
    def RhinoObjectSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @CullObject.setter
    def CullObject(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import BoundingBox
from ..Geometry import Point3d
from ..Geometry import Line
from ..Geometry import Vector3d
from ..Geometry import Arc
from ..Geometry import Circle
from ..Geometry import Curve
from ..Geometry import Plane
class CustomDisplay:
    @overload
    def __init__(self, enable: bool): ...
    @overload
    def AddArc(self, arc: Arc) -> None: ...
    @overload
    def AddArc(self, arc: Arc, color: Color) -> None: ...
    @overload
    def AddArc(self, arc: Arc, color: Color, thickness: int) -> None: ...
    @overload
    def AddCircle(self, circle: Circle) -> None: ...
    @overload
    def AddCircle(self, circle: Circle, color: Color) -> None: ...
    @overload
    def AddCircle(self, circle: Circle, color: Color, thickness: int) -> None: ...
    @overload
    def AddCurve(self, curve: Curve) -> None: ...
    @overload
    def AddCurve(self, curve: Curve, color: Color) -> None: ...
    @overload
    def AddCurve(self, curve: Curve, color: Color, thickness: int) -> None: ...
    @overload
    def AddLine(self, line: Line) -> None: ...
    @overload
    def AddLine(self, line: Line, color: Color) -> None: ...
    @overload
    def AddLine(self, line: Line, color: Color, thickness: int) -> None: ...
    @overload
    def AddPoint(self, point: Point3d) -> None: ...
    @overload
    def AddPoint(self, point: Point3d, color: Color) -> None: ...
    @overload
    def AddPoint(self, point: Point3d, color: Color, style: PointStyle, radius: int) -> None: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d]) -> None: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d], color: Color) -> None: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d], color: Color, style: PointStyle, radius: int) -> None: ...
    @overload
    def AddPolygon(self, polygon: Iterable[Point3d], fillColor: Color, edgeColor: Color, drawFill: bool, drawEdge: bool) -> None: ...
    @overload
    def AddText(self, text: Text3d, color: Color) -> None: ...
    @overload
    def AddText(self, text: str, plane: Plane, size: float) -> None: ...
    @overload
    def AddText(self, text: str, plane: Plane, size: float, color: Color) -> None: ...
    @overload
    def AddVector(self, anchor: Point3d, span: Vector3d) -> None: ...
    @overload
    def AddVector(self, anchor: Point3d, span: Vector3d, color: Color) -> None: ...
    @overload
    def AddVector(self, anchor: Point3d, span: Vector3d, color: Color, drawAnchor: bool) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class DefinedViewportProjection(Enum):
    # None = 0
    Top = 1
    Bottom = 2
    Left = 3
    Right = 4
    Front = 5
    Back = 6
    Perspective = 7
    TwoPointPerspective = 8


class DepthMode(Enum):
    Neutral = 0
    AlwaysInFront = 1
    AlwaysInBack = 2


class DisplayBitmap:
    @overload
    def __init__(self, bitmap: Bitmap): ...
    @overload
    def __init__(self, path: str, bitmap: Bitmap): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    def GetBlendModes(self) -> Tuple[BlendMode, BlendMode]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Load(path: str) -> DisplayBitmap: ...
    @overload
    def SetBlendFunction(self, source: BlendMode, destination: BlendMode) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import BoundingBox
from ..Geometry import Vector3d
class DisplayBitmapDrawList:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @overload
    @property
    def MaximumCachedSortLists(self) -> int: ...
    @overload
    @property
    def SortAngleTolerance(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MaximumCachedSortLists.setter
    def MaximumCachedSortLists(self) -> MutableSequence[int]: ...
    @overload
    @SortAngleTolerance.setter
    def SortAngleTolerance(self) -> MutableSequence[float]: ...
    @overload
    def SetPoints(self, points: Iterable[Point3d]) -> None: ...
    @overload
    def SetPoints(self, points: Iterable[Point3d], blendColor: Color) -> None: ...
    @overload
    def SetPoints(self, points: Iterable[Point3d], colors: Iterable[Color]) -> None: ...
    @overload
    def Sort(self, cameraDirection: Vector3d) -> Iterable[int]: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ObjectType
from ..DocObjects import ActiveSpace
class DisplayConduit:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def GeometryFilter(self) -> ObjectType: ...
    @overload
    @property
    def SpaceFilter(self) -> ActiveSpace: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectionFilter(self) -> Tuple[bool, bool]: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @GeometryFilter.setter
    def GeometryFilter(self) -> MutableSequence[ObjectType]: ...
    @overload
    @SpaceFilter.setter
    def SpaceFilter(self) -> MutableSequence[ActiveSpace]: ...
    @overload
    def SetObjectIdFilter(self, id: Guid) -> None: ...
    @overload
    def SetObjectIdFilter(self, ids: Iterable[Guid]) -> None: ...
    @overload
    def SetSelectionFilter(self, on: bool, checkSubObjects: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DisplayEngine:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import Material
from ..DocObjects import Texture
class DisplayMaterial:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: DisplayMaterial): ...
    @overload
    def __init__(self, material: Material): ...
    @overload
    def __init__(self, diffuse: Color): ...
    @overload
    def __init__(self, diffuse: Color, transparency: float): ...
    @overload
    def __init__(self, diffuse: Color, specular: Color, ambient: Color, emission: Color, shine: float, transparency: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Ambient(self) -> Color: ...
    @overload
    @property
    def BackAmbient(self) -> Color: ...
    @overload
    @property
    def BackDiffuse(self) -> Color: ...
    @overload
    @property
    def BackEmission(self) -> Color: ...
    @overload
    @property
    def BackShine(self) -> float: ...
    @overload
    @property
    def BackSpecular(self) -> Color: ...
    @overload
    @property
    def BackTransparency(self) -> float: ...
    @overload
    @property
    def Diffuse(self) -> Color: ...
    @overload
    @property
    def Emission(self) -> Color: ...
    @overload
    @property
    def IsTwoSided(self) -> bool: ...
    @overload
    @property
    def Shine(self) -> float: ...
    @overload
    @property
    def Specular(self) -> Color: ...
    @overload
    @property
    def Transparency(self) -> float: ...
    @overload
    def GetBitmapTexture(self, front: bool) -> Texture: ...
    @overload
    def GetBumpTexture(self, front: bool) -> Texture: ...
    @overload
    def GetEnvironmentTexture(self, front: bool) -> Texture: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetTransparencyTexture(self, front: bool) -> Texture: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Ambient.setter
    def Ambient(self) -> MutableSequence[Color]: ...
    @overload
    @BackAmbient.setter
    def BackAmbient(self) -> MutableSequence[Color]: ...
    @overload
    @BackDiffuse.setter
    def BackDiffuse(self) -> MutableSequence[Color]: ...
    @overload
    @BackEmission.setter
    def BackEmission(self) -> MutableSequence[Color]: ...
    @overload
    @BackShine.setter
    def BackShine(self) -> MutableSequence[float]: ...
    @overload
    @BackSpecular.setter
    def BackSpecular(self) -> MutableSequence[Color]: ...
    @overload
    @BackTransparency.setter
    def BackTransparency(self) -> MutableSequence[float]: ...
    @overload
    @Diffuse.setter
    def Diffuse(self) -> MutableSequence[Color]: ...
    @overload
    @Emission.setter
    def Emission(self) -> MutableSequence[Color]: ...
    @overload
    @IsTwoSided.setter
    def IsTwoSided(self) -> MutableSequence[bool]: ...
    @overload
    @Shine.setter
    def Shine(self) -> MutableSequence[float]: ...
    @overload
    @Specular.setter
    def Specular(self) -> MutableSequence[Color]: ...
    @overload
    @Transparency.setter
    def Transparency(self) -> MutableSequence[float]: ...
    @overload
    def SetBitmapTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetBitmapTexture(self, texture: Texture, front: bool) -> bool: ...
    @overload
    def SetBumpTexture(self, texture: Texture, front: bool) -> bool: ...
    @overload
    def SetBumpTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetEnvironmentTexture(self, texture: Texture, front: bool) -> bool: ...
    @overload
    def SetEnvironmentTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetTransparencyTexture(self, filename: str, front: bool) -> bool: ...
    @overload
    def SetTransparencyTexture(self, texture: Texture, front: bool) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class DisplayModeChangedEventArgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ChangedDisplayModeId(self) -> Guid: ...
    @overload
    @property
    def OldDisplayModeId(self) -> Guid: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class DisplayModeDescription:
    @overload
    @staticmethod
    def AddDisplayMode(displayMode: DisplayModeDescription) -> Guid: ...
    @overload
    @staticmethod
    def AddDisplayMode(name: str) -> Guid: ...
    @overload
    @staticmethod
    def CopyDisplayMode(id: Guid, name: str) -> Guid: ...
    @overload
    @staticmethod
    def DeleteDisplayMode(id: Guid) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def ExportToFile(displayMode: DisplayModeDescription, filename: str) -> bool: ...
    @overload
    @staticmethod
    def FindByName(englishName: str) -> DisplayModeDescription: ...
    @overload
    @property
    def AllowObjectAssignment(self) -> bool: ...
    @overload
    @property
    def AmbientOcclusionId() -> Guid: ...
    @overload
    @property
    def ArtisticId() -> Guid: ...
    @overload
    @property
    def DisplayAttributes(self) -> DisplayPipelineAttributes: ...
    @overload
    @property
    def EnglishName(self) -> str: ...
    @overload
    @property
    def GhostedId() -> Guid: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def InMenu(self) -> bool: ...
    @overload
    @property
    def LocalName(self) -> str: ...
    @overload
    @property
    def PenId() -> Guid: ...
    @overload
    @property
    def PipelineLocked(self) -> bool: ...
    @overload
    @property
    def RaytracedId() -> Guid: ...
    @overload
    @property
    def RenderedId() -> Guid: ...
    @overload
    @property
    def RenderedShadowsId() -> Guid: ...
    @overload
    @property
    def ShadedId() -> Guid: ...
    @overload
    @property
    def ShadedPipelineRequired(self) -> bool: ...
    @overload
    @property
    def SupportsShadeCommand(self) -> bool: ...
    @overload
    @property
    def SupportsShading(self) -> bool: ...
    @overload
    @property
    def TechId() -> Guid: ...
    @overload
    @property
    def WireframeId() -> Guid: ...
    @overload
    @property
    def WireframePipelineRequired(self) -> bool: ...
    @overload
    @property
    def XRayId() -> Guid: ...
    @overload
    @staticmethod
    def GetDisplayMode(id: Guid) -> DisplayModeDescription: ...
    @overload
    @staticmethod
    def GetDisplayModes() -> Iterable[DisplayModeDescription]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def ImportFromFile(filename: str) -> Guid: ...
    @overload
    @AllowObjectAssignment.setter
    def AllowObjectAssignment(self) -> MutableSequence[bool]: ...
    @overload
    @EnglishName.setter
    def EnglishName(self) -> MutableSequence[str]: ...
    @overload
    @InMenu.setter
    def InMenu(self) -> MutableSequence[bool]: ...
    @overload
    @PipelineLocked.setter
    def PipelineLocked(self) -> MutableSequence[bool]: ...
    @overload
    @ShadedPipelineRequired.setter
    def ShadedPipelineRequired(self) -> MutableSequence[bool]: ...
    @overload
    @SupportsShadeCommand.setter
    def SupportsShadeCommand(self) -> MutableSequence[bool]: ...
    @overload
    @SupportsShading.setter
    def SupportsShading(self) -> MutableSequence[bool]: ...
    @overload
    @WireframePipelineRequired.setter
    def WireframePipelineRequired(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UpdateDisplayMode(displayMode: DisplayModeDescription) -> bool: ...


from ..Geometry import Point3d
from ..Geometry import PointCloud
from ..Geometry import Vector3d
from ..Geometry import Line
from ..Geometry import TextDot
from ..Geometry import Hatch
from ..Geometry import Mesh
from ..Geometry import BoundingBox
from ..Geometry import Box
from ..DocObjects import ConstructionPlane
from ..Geometry import Point2d
from ..Geometry import Plane
from ..DocObjects import TextHorizontalAlignment
from ..DocObjects import TextVerticalAlignment
from ..Geometry import TextEntity
from ..Geometry import Transform
from ..DocObjects import RhinoObject
from ..DocObjects import InstanceDefinition
from ..Geometry import AnnotationBase
from ..Geometry import Arrowhead
from ..Geometry import Arc
from ..Geometry import Circle
from ..Geometry import Sphere
from ..Geometry import Torus
from ..Geometry import Cylinder
from ..Geometry import Cone
from ..Geometry import Curve
from ..Geometry import Surface
from ..Geometry import ParticleSystem
from ..DocObjects import ViewportInfo
from ..Geometry import SubD
from ..Geometry import Brep
from ..Geometry import Extrusion
class DisplayPipeline:
    @overload
    @staticmethod
    def add_CalculateBoundingBox(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_CalculateBoundingBoxZoomExtents(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DisplayModeChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DrawForeground(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DrawOverlay(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_InitFrameBuffer(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ObjectCulling(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_PostDrawObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_PostDrawObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_PreDrawObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_PreDrawObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_PreDrawTransparentObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ViewportProjectionChanged(value: EventHandler) -> None: ...
    @overload
    def AddClippingPlane(self, point: Point3d, normal: Vector3d) -> int: ...
    @overload
    @staticmethod
    def AvailableOpenGLVersion() -> Tuple[UInt32, bool]: ...
    @overload
    def Clone(self, viewport: RhinoViewport) -> DisplayPipeline: ...
    @overload
    def Close(self) -> bool: ...
    @overload
    @staticmethod
    def CullControlPolygon() -> bool: ...
    @overload
    def Draw2dLine(self, from_: Point, to: Point, color: Color, thickness: Single) -> None: ...
    @overload
    def Draw2dLine(self, from_: PointF, to: PointF, color: Color, thickness: Single) -> None: ...
    @overload
    def Draw2dRectangle(self, rectangle: Rectangle, strokeColor: Color, thickness: int, fillColor: Color) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, worldCoordinate: Point3d, middleJustified: bool) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, screenCoordinate: Point2d, middleJustified: bool) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, worldCoordinate: Point3d, middleJustified: bool, height: int) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, screenCoordinate: Point2d, middleJustified: bool, height: int) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, worldCoordinate: Point3d, middleJustified: bool, height: int, fontface: str) -> None: ...
    @overload
    def Draw2dText(self, text: str, color: Color, screenCoordinate: Point2d, middleJustified: bool, height: int, fontface: str) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Color) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Color, textPlaneOrigin: Point3d) -> None: ...
    @overload
    def Draw3dText(self, text: Text3d, color: Color, textPlane: Plane) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Color, textPlane: Plane, height: float, fontface: str) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Color, textPlane: Plane, height: float, fontface: str, bold: bool, italic: bool) -> None: ...
    @overload
    def Draw3dText(self, text: str, color: Color, textPlane: Plane, height: float, fontface: str, bold: bool, italic: bool, horizontalAlignment: TextHorizontalAlignment, verticalAlignment: TextVerticalAlignment) -> None: ...
    @overload
    def DrawActivePoint(self, point: Point3d) -> None: ...
    @overload
    def DrawAnnotation(self, annotation: AnnotationBase, color: Color) -> None: ...
    @overload
    def DrawAnnotationArrowhead(self, arrowhead: Arrowhead, xform: Transform, color: Color) -> None: ...
    @overload
    def DrawArc(self, arc: Arc, color: Color) -> None: ...
    @overload
    def DrawArc(self, arc: Arc, color: Color, thickness: int) -> None: ...
    @overload
    def DrawArrow(self, line: Line, color: Color) -> None: ...
    @overload
    def DrawArrow(self, line: Line, color: Color, screenSize: float, relativeSize: float) -> None: ...
    @overload
    def DrawArrowHead(self, tip: Point3d, direction: Vector3d, color: Color, screenSize: float, worldSize: float) -> None: ...
    @overload
    def DrawArrows(self, lines: Iterable[Line], color: Color) -> None: ...
    @overload
    def DrawArrows(self, lines: Iterable[Line], color: Color) -> None: ...
    @overload
    def DrawBitmap(self, bitmap: DisplayBitmap, left: int, top: int) -> None: ...
    @overload
    def DrawBox(self, box: Box, color: Color) -> None: ...
    @overload
    def DrawBox(self, box: BoundingBox, color: Color) -> None: ...
    @overload
    def DrawBox(self, box: BoundingBox, color: Color, thickness: int) -> None: ...
    @overload
    def DrawBox(self, box: Box, color: Color, thickness: int) -> None: ...
    @overload
    def DrawBoxCorners(self, box: BoundingBox, color: Color) -> None: ...
    @overload
    def DrawBoxCorners(self, box: BoundingBox, color: Color, size: float) -> None: ...
    @overload
    def DrawBoxCorners(self, box: BoundingBox, color: Color, size: float, thickness: int) -> None: ...
    @overload
    def DrawBrepShaded(self, brep: Brep, material: DisplayMaterial) -> None: ...
    @overload
    def DrawBrepWires(self, brep: Brep, color: Color) -> None: ...
    @overload
    def DrawBrepWires(self, brep: Brep, color: Color, wireDensity: int) -> None: ...
    @overload
    def DrawCircle(self, circle: Circle, color: Color) -> None: ...
    @overload
    def DrawCircle(self, circle: Circle, color: Color, thickness: int) -> None: ...
    @overload
    def DrawCone(self, cone: Cone, color: Color) -> None: ...
    @overload
    def DrawCone(self, cone: Cone, color: Color, thickness: int) -> None: ...
    @overload
    def DrawConstructionPlane(self, constructionPlane: ConstructionPlane) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Curve, color: Color) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Curve, color: Color, hairScale: int) -> None: ...
    @overload
    def DrawCurvatureGraph(self, curve: Curve, color: Color, hairScale: int, hairDensity: int, sampleDensity: int) -> None: ...
    @overload
    def DrawCurve(self, curve: Curve, color: Color) -> None: ...
    @overload
    def DrawCurve(self, curve: Curve, color: Color, thickness: int) -> None: ...
    @overload
    def DrawCylinder(self, cylinder: Cylinder, color: Color) -> None: ...
    @overload
    def DrawCylinder(self, cylinder: Cylinder, color: Color, thickness: int) -> None: ...
    @overload
    def DrawDirectionArrow(self, location: Point3d, direction: Vector3d, color: Color) -> None: ...
    @overload
    def DrawDot(self, worldPosition: Point3d, text: str) -> None: ...
    @overload
    def DrawDot(self, screenX: Single, screenY: Single, text: str) -> None: ...
    @overload
    def DrawDot(self, worldPosition: Point3d, text: str, dotColor: Color, textColor: Color) -> None: ...
    @overload
    def DrawDot(self, dot: TextDot, fillColor: Color, textColor: Color, borderColor: Color) -> None: ...
    @overload
    def DrawDot(self, screenX: Single, screenY: Single, text: str, dotColor: Color, textColor: Color) -> None: ...
    @overload
    def DrawDottedLine(self, line: Line, color: Color) -> None: ...
    @overload
    def DrawDottedLine(self, from_: Point3d, to: Point3d, color: Color) -> None: ...
    @overload
    def DrawDottedPolyline(self, points: Iterable[Point3d], color: Color, close: bool) -> None: ...
    @overload
    def DrawExtrusionWires(self, extrusion: Extrusion, color: Color) -> None: ...
    @overload
    def DrawExtrusionWires(self, extrusion: Extrusion, color: Color, wireDensity: int) -> None: ...
    @overload
    def DrawGradientHatch(self, hatch: Hatch, stops: Iterable[ColorStop], point1: Point3d, point2: Point3d, linearGradient: bool, repeat: Single, boundaryThickness: Single, boundaryColor: Color) -> None: ...
    @overload
    def DrawGradientHatch(self, hatch: Hatch, color1: Color, color2: Color, point1: Point3d, point2: Point3d, linearGradient: bool, boundaryThickness: Single, boundaryColor: Color) -> None: ...
    @overload
    def DrawGradientLines(self, lines: Iterable[Line], strokeWidth: Single, stops: Iterable[ColorStop], point1: Point3d, point2: Point3d, linearGradient: bool, repeat: Single) -> None: ...
    @overload
    def DrawGradientMesh(self, mesh: Mesh, stops: Iterable[ColorStop], point1: Point3d, point2: Point3d, linearGradient: bool, repeat: Single) -> None: ...
    @overload
    def DrawHatch(self, hatch: Hatch, hatchColor: Color, boundaryColor: Color) -> None: ...
    @overload
    def DrawInstanceDefinition(self, instanceDefinition: InstanceDefinition) -> None: ...
    @overload
    def DrawInstanceDefinition(self, instanceDefinition: InstanceDefinition, xform: Transform) -> None: ...
    @overload
    def DrawLine(self, line: Line, color: Color) -> None: ...
    @overload
    def DrawLine(self, line: Line, color: Color, thickness: int) -> None: ...
    @overload
    def DrawLine(self, from_: Point3d, to: Point3d, color: Color) -> None: ...
    @overload
    def DrawLine(self, from_: Point3d, to: Point3d, color: Color, thickness: int) -> None: ...
    @overload
    def DrawLineArrow(self, line: Line, color: Color, thickness: int, size: float) -> None: ...
    @overload
    def DrawLineNoClip(self, from_: Point3d, to: Point3d, color: Color, thickness: int) -> None: ...
    @overload
    def DrawLines(self, lines: Iterable[Line], color: Color) -> None: ...
    @overload
    def DrawLines(self, lines: Iterable[Line], color: Color, thickness: int) -> None: ...
    @overload
    def DrawMarker(self, tip: Point3d, direction: Vector3d, color: Color) -> None: ...
    @overload
    def DrawMarker(self, tip: Point3d, direction: Vector3d, color: Color, thickness: int) -> None: ...
    @overload
    def DrawMarker(self, tip: Point3d, direction: Vector3d, color: Color, thickness: int, size: float) -> None: ...
    @overload
    def DrawMarker(self, tip: Point3d, direction: Vector3d, color: Color, thickness: int, size: float, rotation: float) -> None: ...
    @overload
    def DrawMeshFalseColors(self, mesh: Mesh) -> None: ...
    @overload
    def DrawMeshShaded(self, mesh: Mesh, material: DisplayMaterial) -> None: ...
    @overload
    def DrawMeshShaded(self, mesh: Mesh, material: DisplayMaterial, faceIndices: Iterable[int]) -> None: ...
    @overload
    def DrawMeshVertices(self, mesh: Mesh, color: Color) -> None: ...
    @overload
    def DrawMeshWires(self, mesh: Mesh, color: Color) -> None: ...
    @overload
    def DrawMeshWires(self, mesh: Mesh, color: Color, thickness: int) -> None: ...
    @overload
    def DrawObject(self, rhinoObject: RhinoObject) -> None: ...
    @overload
    def DrawObject(self, rhinoObject: RhinoObject, xform: Transform) -> None: ...
    @overload
    def DrawParticles(self, particles: ParticleSystem) -> None: ...
    @overload
    def DrawParticles(self, particles: ParticleSystem, bitmap: DisplayBitmap) -> None: ...
    @overload
    def DrawParticles(self, particles: ParticleSystem, bitmaps: Iterable[DisplayBitmap]) -> None: ...
    @overload
    def DrawPatternedLine(self, line: Line, color: Color, pattern: int, thickness: int) -> None: ...
    @overload
    def DrawPatternedLine(self, from_: Point3d, to: Point3d, color: Color, pattern: int, thickness: int) -> None: ...
    @overload
    def DrawPatternedPolyline(self, points: Iterable[Point3d], color: Color, pattern: int, thickness: int, close: bool) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d, color: Color) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d, style: PointStyle, radius: Single, color: Color) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d, style: PointStyle, radius: int, color: Color) -> None: ...
    @overload
    def DrawPoint(self, point: Point3d, style: PointStyle, strokeColor: Color, fillColor: Color, radius: Single, strokeWidth: Single, secondarySize: Single, rotationRadians: Single, diameterIsInPixels: bool, autoScaleForDpi: bool) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: PointCloud, size: Single) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: PointCloud, size: int) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: PointCloud, size: int, color: Color) -> None: ...
    @overload
    def DrawPointCloud(self, cloud: PointCloud, size: Single, color: Color) -> None: ...
    @overload
    def DrawPoints(self, points: Iterable[Point3d], style: PointStyle, radius: int, color: Color) -> None: ...
    @overload
    def DrawPoints(self, points: Iterable[Point3d], style: PointStyle, radius: Single, color: Color) -> None: ...
    @overload
    def DrawPoints(self, points: Iterable[Point3d], style: PointStyle, strokeColor: Color, fillColor: Color, radius: Single, strokeWidth: Single, secondarySize: Single, rotationRadians: Single, diameterIsInPixels: bool, autoScaleForDpi: bool) -> None: ...
    @overload
    def DrawPolygon(self, points: Iterable[Point3d], color: Color, filled: bool) -> None: ...
    @overload
    def DrawPolyline(self, polyline: Iterable[Point3d], color: Color) -> None: ...
    @overload
    def DrawPolyline(self, polyline: Iterable[Point3d], color: Color, thickness: int) -> None: ...
    @overload
    def DrawRoundedRectangle(self, center: PointF, pixelWidth: Single, pixelHeight: Single, cornerRadius: Single, strokeColor: Color, strokeWidth: Single, fillColor: Color) -> None: ...
    @overload
    def DrawSphere(self, sphere: Sphere, color: Color) -> None: ...
    @overload
    def DrawSphere(self, sphere: Sphere, color: Color, thickness: int) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, screenLocation: Point2d, size: Single) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, screenLocation: Point2d, size: Single, blendColor: Color) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, worldLocation: Point3d, size: Single, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, screenLocation: Point2d, width: Single, height: Single) -> None: ...
    @overload
    def DrawSprite(self, bitmap: DisplayBitmap, worldLocation: Point3d, size: Single, blendColor: Color, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprites(self, bitmap: DisplayBitmap, items: DisplayBitmapDrawList, size: Single, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawSprites(self, bitmap: DisplayBitmap, items: DisplayBitmapDrawList, size: Single, translation: Vector3d, sizeInWorldSpace: bool) -> None: ...
    @overload
    def DrawStereoFrameBuffer(self, viewportLeft: ViewportInfo, viewportRight: ViewportInfo) -> Tuple[bool, UInt32, UInt32]: ...
    @overload
    def DrawSubDShaded(self, subd: SubD, material: DisplayMaterial) -> None: ...
    @overload
    def DrawSubDWires(self, subd: SubD, color: Color, thickness: Single) -> None: ...
    @overload
    def DrawSurface(self, surface: Surface, wireColor: Color, wireDensity: int) -> None: ...
    @overload
    def DrawText(self, text: TextEntity, color: Color) -> None: ...
    @overload
    def DrawText(self, text: TextEntity, color: Color, scale: float) -> None: ...
    @overload
    def DrawText(self, text: TextEntity, color: Color, xform: Transform) -> None: ...
    @overload
    @staticmethod
    def DrawToBitmap(viewport: RhinoViewport, width: int, height: int) -> Bitmap: ...
    @overload
    def DrawTorus(self, torus: Torus, color: Color) -> None: ...
    @overload
    def DrawTorus(self, torus: Torus, color: Color, thickness: int) -> None: ...
    @overload
    def DrawZebraPreview(self, brep: Brep, color: Color) -> None: ...
    @overload
    def DrawZebraPreview(self, mesh: Mesh, color: Color) -> None: ...
    @overload
    def EnableClippingPlanes(self, enable: bool) -> None: ...
    @overload
    def EnableColorWriting(self, enable: bool) -> None: ...
    @overload
    def EnableDepthTesting(self, enable: bool) -> None: ...
    @overload
    def EnableDepthWriting(self, enable: bool) -> None: ...
    @overload
    def EnableLighting(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Flush(self) -> None: ...
    @overload
    @property
    def ActiveObject(self) -> RhinoObject: ...
    @overload
    @property
    def ActiveObjectNestingLevel(self) -> int: ...
    @overload
    @property
    def ActiveObjectNestingStack(self) -> Iterable[RhinoObject]: ...
    @overload
    @property
    def ActiveTopLevelObject(self) -> RhinoObject: ...
    @overload
    @property
    def DefaultCurveThickness(self) -> int: ...
    @overload
    @property
    def DepthMode(self) -> DepthMode: ...
    @overload
    @property
    def DisplayPipelineAttributes(self) -> DisplayPipelineAttributes: ...
    @overload
    @property
    def DpiScale(self) -> Single: ...
    @overload
    @property
    def DrawingGrips(self) -> bool: ...
    @overload
    @property
    def DrawingSurfaces(self) -> bool: ...
    @overload
    @property
    def DrawingWires(self) -> bool: ...
    @overload
    @property
    def FrameBuffer(self) -> Bitmap: ...
    @overload
    @property
    def FrameSize(self) -> Size: ...
    @overload
    @property
    def IsDynamicDisplay(self) -> bool: ...
    @overload
    @property
    def IsInViewCapture(self) -> bool: ...
    @overload
    @property
    def IsOpen(self) -> bool: ...
    @overload
    @property
    def IsOpenGL(self) -> bool: ...
    @overload
    @property
    def IsPrinting(self) -> bool: ...
    @overload
    @property
    def IsStereoMode(self) -> bool: ...
    @overload
    @property
    def ModelTransform(self) -> Transform: ...
    @overload
    @property
    def ModelTransformIsIdentity(self) -> bool: ...
    @overload
    @property
    def NestLevel(self) -> int: ...
    @overload
    @property
    def RenderPass(self) -> int: ...
    @overload
    @property
    def ShadingRequired(self) -> bool: ...
    @overload
    @property
    def StereoProjection(self) -> int: ...
    @overload
    @property
    def SupportsShading(self) -> bool: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    @property
    def ZBiasMode(self) -> ZBiasMode: ...
    @overload
    @staticmethod
    def GetDrawListSerialNumbers() -> Tuple[UInt32, UInt32]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLights(self) -> Iterable[Light]: ...
    @overload
    def GetOpenGLCameraToClip(self) -> Iterable[Single]: ...
    @overload
    def GetOpenGLWorldToCamera(self, includeModelTransform: bool) -> Iterable[Single]: ...
    @overload
    def GetOpenGLWorldToClip(self, includeModelTransform: bool) -> Iterable[Single]: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def InterruptDrawing(self) -> bool: ...
    @overload
    def IsActive(self, rhinoObject: RhinoObject) -> bool: ...
    @overload
    def IsVisible(self, bbox: BoundingBox) -> bool: ...
    @overload
    def IsVisible(self, rhinoObject: RhinoObject) -> bool: ...
    @overload
    def IsVisible(self, worldCoordinate: Point3d) -> bool: ...
    @overload
    @staticmethod
    def MakeDefaultOpenGLContextCurrent() -> bool: ...
    @overload
    def Measure2dText(self, text: str, definitionPoint: Point2d, middleJustified: bool, rotationRadians: float, height: int, fontFace: str) -> Rectangle: ...
    @overload
    def Open(self) -> bool: ...
    @overload
    def PopCullFaceMode(self) -> None: ...
    @overload
    def PopDepthTesting(self) -> None: ...
    @overload
    def PopDepthWriting(self) -> None: ...
    @overload
    def PopModelTransform(self) -> None: ...
    @overload
    def PushCullFaceMode(self, mode: CullFaceMode) -> None: ...
    @overload
    def PushDepthTesting(self, enable: bool) -> None: ...
    @overload
    def PushDepthWriting(self, enable: bool) -> None: ...
    @overload
    def PushModelTransform(self, xform: Transform) -> None: ...
    @overload
    @staticmethod
    def remove_CalculateBoundingBox(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_CalculateBoundingBoxZoomExtents(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DisplayModeChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DrawForeground(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DrawOverlay(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_InitFrameBuffer(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ObjectCulling(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_PostDrawObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_PostDrawObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_PreDrawObject(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_PreDrawObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_PreDrawTransparentObjects(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ViewportProjectionChanged(value: EventHandler) -> None: ...
    @overload
    def RemoveClippingPlane(self, index: int) -> None: ...
    @overload
    @DepthMode.setter
    def DepthMode(self) -> MutableSequence[DepthMode]: ...
    @overload
    @ModelTransform.setter
    def ModelTransform(self) -> MutableSequence[Transform]: ...
    @overload
    @ShadingRequired.setter
    def ShadingRequired(self) -> MutableSequence[bool]: ...
    @overload
    @ZBiasMode.setter
    def ZBiasMode(self) -> MutableSequence[ZBiasMode]: ...
    @overload
    def ToString(self) -> str: ...


class DisplayPipelineAttributes:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AmbientLightingColor(self) -> Color: ...
    @overload
    @property
    def BoundingBoxMode(self) -> BoundingBoxDisplayMode: ...
    @overload
    @property
    def CastShadows(self) -> bool: ...
    @overload
    @property
    def ContextForDraw(self) -> ContextsForDraw: ...
    @overload
    @property
    def CurveColor(self) -> Color: ...
    @overload
    @property
    def CurveThickness(self) -> int: ...
    @overload
    @property
    def DisableConduits(self) -> bool: ...
    @overload
    @property
    def DisableTransparency(self) -> bool: ...
    @overload
    @property
    def EnglishName(self) -> str: ...
    @overload
    @property
    def FillMode(self) -> FrameBufferFillMode: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IgnoreHighlights(self) -> bool: ...
    @overload
    @property
    def LocalName(self) -> str: ...
    @overload
    @property
    def LockedObjectsDrawBehindOthers(self) -> bool: ...
    @overload
    @property
    def MeshSpecificAttributes(self) -> MeshDisplayAttributes: ...
    @overload
    @property
    def ObjectColor(self) -> Color: ...
    @overload
    @property
    def PointRadius(self) -> Single: ...
    @overload
    @property
    def PointStyle(self) -> PointStyle: ...
    @overload
    @property
    def RealtimeDisplayId(self) -> Guid: ...
    @overload
    @property
    def RealtimeRenderPasses(self) -> int: ...
    @overload
    @property
    def ShadeVertexColors(self) -> bool: ...
    @overload
    @property
    def ShadingEnabled(self) -> bool: ...
    @overload
    @property
    def ShadowColor(self) -> Color: ...
    @overload
    @property
    def ShowAnnotations(self) -> bool: ...
    @overload
    @property
    def ShowClippingPlanes(self) -> bool: ...
    @overload
    @property
    def ShowCurves(self) -> bool: ...
    @overload
    @property
    def ShowGrips(self) -> bool: ...
    @overload
    @property
    def ShowIsoCurves(self) -> bool: ...
    @overload
    @property
    def ShowLights(self) -> bool: ...
    @overload
    @property
    def ShowPointClouds(self) -> bool: ...
    @overload
    @property
    def ShowPoints(self) -> bool: ...
    @overload
    @property
    def ShowRealtimeRenderProgressBar(self) -> bool: ...
    @overload
    @property
    def ShowSurfaceEdges(self) -> bool: ...
    @overload
    @property
    def ShowTangentEdges(self) -> bool: ...
    @overload
    @property
    def ShowTangentSeams(self) -> bool: ...
    @overload
    @property
    def ShowText(self) -> bool: ...
    @overload
    @property
    def StereoContext(self) -> StereoContext: ...
    @overload
    @property
    def SurfaceEdgeThickness(self) -> int: ...
    @overload
    @property
    def UseAssignedObjectMaterial(self) -> bool: ...
    @overload
    @property
    def UseCustomObjectColor(self) -> bool: ...
    @overload
    @property
    def UseCustomObjectColorBackfaces(self) -> bool: ...
    @overload
    @property
    def UseCustomObjectMaterial(self) -> bool: ...
    @overload
    @property
    def UseCustomObjectMaterialBackfaces(self) -> bool: ...
    @overload
    @property
    def UseSingleCurveColor(self) -> bool: ...
    @overload
    @property
    def ViewSpecificAttributes(self) -> ViewDisplayAttributes: ...
    @overload
    @property
    def XrayAllObjects(self) -> bool: ...
    @overload
    def GetFill(self) -> Tuple[Color, Color, Color, Color]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AmbientLightingColor.setter
    def AmbientLightingColor(self) -> MutableSequence[Color]: ...
    @overload
    @BoundingBoxMode.setter
    def BoundingBoxMode(self) -> MutableSequence[BoundingBoxDisplayMode]: ...
    @overload
    @CastShadows.setter
    def CastShadows(self) -> MutableSequence[bool]: ...
    @overload
    @CurveColor.setter
    def CurveColor(self) -> MutableSequence[Color]: ...
    @overload
    @CurveThickness.setter
    def CurveThickness(self) -> MutableSequence[int]: ...
    @overload
    @DisableConduits.setter
    def DisableConduits(self) -> MutableSequence[bool]: ...
    @overload
    @DisableTransparency.setter
    def DisableTransparency(self) -> MutableSequence[bool]: ...
    @overload
    @EnglishName.setter
    def EnglishName(self) -> MutableSequence[str]: ...
    @overload
    @FillMode.setter
    def FillMode(self) -> MutableSequence[FrameBufferFillMode]: ...
    @overload
    @IgnoreHighlights.setter
    def IgnoreHighlights(self) -> MutableSequence[bool]: ...
    @overload
    @LockedObjectsDrawBehindOthers.setter
    def LockedObjectsDrawBehindOthers(self) -> MutableSequence[bool]: ...
    @overload
    @ObjectColor.setter
    def ObjectColor(self) -> MutableSequence[Color]: ...
    @overload
    @PointRadius.setter
    def PointRadius(self) -> MutableSequence[Single]: ...
    @overload
    @PointStyle.setter
    def PointStyle(self) -> MutableSequence[PointStyle]: ...
    @overload
    @RealtimeRenderPasses.setter
    def RealtimeRenderPasses(self) -> MutableSequence[int]: ...
    @overload
    @ShadeVertexColors.setter
    def ShadeVertexColors(self) -> MutableSequence[bool]: ...
    @overload
    @ShadingEnabled.setter
    def ShadingEnabled(self) -> MutableSequence[bool]: ...
    @overload
    @ShadowColor.setter
    def ShadowColor(self) -> MutableSequence[Color]: ...
    @overload
    @ShowAnnotations.setter
    def ShowAnnotations(self) -> MutableSequence[bool]: ...
    @overload
    @ShowClippingPlanes.setter
    def ShowClippingPlanes(self) -> MutableSequence[bool]: ...
    @overload
    @ShowCurves.setter
    def ShowCurves(self) -> MutableSequence[bool]: ...
    @overload
    @ShowGrips.setter
    def ShowGrips(self) -> MutableSequence[bool]: ...
    @overload
    @ShowIsoCurves.setter
    def ShowIsoCurves(self) -> MutableSequence[bool]: ...
    @overload
    @ShowLights.setter
    def ShowLights(self) -> MutableSequence[bool]: ...
    @overload
    @ShowPointClouds.setter
    def ShowPointClouds(self) -> MutableSequence[bool]: ...
    @overload
    @ShowPoints.setter
    def ShowPoints(self) -> MutableSequence[bool]: ...
    @overload
    @ShowRealtimeRenderProgressBar.setter
    def ShowRealtimeRenderProgressBar(self) -> MutableSequence[bool]: ...
    @overload
    @ShowSurfaceEdges.setter
    def ShowSurfaceEdges(self) -> MutableSequence[bool]: ...
    @overload
    @ShowTangentEdges.setter
    def ShowTangentEdges(self) -> MutableSequence[bool]: ...
    @overload
    @ShowTangentSeams.setter
    def ShowTangentSeams(self) -> MutableSequence[bool]: ...
    @overload
    @ShowText.setter
    def ShowText(self) -> MutableSequence[bool]: ...
    @overload
    @StereoContext.setter
    def StereoContext(self) -> MutableSequence[StereoContext]: ...
    @overload
    @SurfaceEdgeThickness.setter
    def SurfaceEdgeThickness(self) -> MutableSequence[int]: ...
    @overload
    @UseAssignedObjectMaterial.setter
    def UseAssignedObjectMaterial(self) -> MutableSequence[bool]: ...
    @overload
    @UseCustomObjectColor.setter
    def UseCustomObjectColor(self) -> MutableSequence[bool]: ...
    @overload
    @UseCustomObjectColorBackfaces.setter
    def UseCustomObjectColorBackfaces(self) -> MutableSequence[bool]: ...
    @overload
    @UseCustomObjectMaterial.setter
    def UseCustomObjectMaterial(self) -> MutableSequence[bool]: ...
    @overload
    @UseCustomObjectMaterialBackfaces.setter
    def UseCustomObjectMaterialBackfaces(self) -> MutableSequence[bool]: ...
    @overload
    @UseSingleCurveColor.setter
    def UseSingleCurveColor(self) -> MutableSequence[bool]: ...
    @overload
    @XrayAllObjects.setter
    def XrayAllObjects(self) -> MutableSequence[bool]: ...
    @overload
    def SetFill(self, singleColor: Color) -> None: ...
    @overload
    def SetFill(self, gradientTop: Color, gradientBottom: Color) -> None: ...
    @overload
    def SetFill(self, gradientTopLeft: Color, gradientBottomLeft: Color, gradientTopRight: Color, gradientBottomRight: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DisplayTechnology(Enum):
    # None = 0
    OpenGL = 1
    Metal = 2
    DirectX = 3
    Software = 4
    Vulkan = 5


class DrawEventArgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Display(self) -> DisplayPipeline: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class DrawForegroundEventArgs(DrawEventArgs):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Display(self) -> DisplayPipeline: ...
    @overload
    @property
    def DrawWorldAxes(self) -> bool: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    @property
    def WorldAxesDrawn(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @DrawWorldAxes.setter
    def DrawWorldAxes(self) -> MutableSequence[bool]: ...
    @overload
    @WorldAxesDrawn.setter
    def WorldAxesDrawn(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class DrawFrameStages(Enum):
    InitializeFrameBuffer = 1
    SetupFrustum = 2
    ObjectCulling = 4
    CalculateBoundingBox = 8
    CalculateClippingPlanes = 16
    SetupLighting = 32
    DrawBackground = 64
    PreDrawObjects = 128
    DrawObject = 256
    PostDrawObjects = 512
    DrawMiddleGround = 896
    DrawForeGround = 1024
    DrawOverlay = 2048
    PostProcessFrameBuffer = 4096
    MeshingParameters = 8192
    ObjectDisplayAttributes = 16384
    PreObjectDraw = 32768
    PostObjectDraw = 65536
    ObjectBasedChannel = 114948
    ViewExtents = 131072
    All = 4294836223


from ..DocObjects import RhinoObject
class DrawObjectEventArgs(DrawEventArgs):
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Display(self) -> DisplayPipeline: ...
    @overload
    @property
    def DrawObject(self) -> bool: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def RhinoObject(self) -> RhinoObject: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @DrawObject.setter
    def DrawObject(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class EdgeContinuityMode(Enum):
    Distance = 0
    Tangency = 1
    Curvature = 2


class FrameBufferFillMode(Enum):
    DefaultColor = 1
    SolidColor = 2
    Gradient2Color = 3
    Gradient4Color = 4
    Bitmap = 5
    Renderer = 6
    Transparent = 7


class GradientType(Enum):
    # None = 0
    Linear = 1
    Radial = 2
    LinearDisabled = 3
    RadialDisabled = 4


class InitFrameBufferEventArgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def SetFill(self, color: Color) -> None: ...
    @overload
    def SetFill(self, top: Color, bottom: Color) -> None: ...
    @overload
    def SetFill(self, topLeft: Color, bottomLeft: Color, topRight: Color, bottomRight: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class MeshDisplayAttributes:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AllMeshWiresColor(self) -> Color: ...
    @overload
    @property
    def HighlightMeshes(self) -> bool: ...
    @overload
    @property
    def MeshWireThickness(self) -> int: ...
    @overload
    @property
    def ShowMeshVertices(self) -> bool: ...
    @overload
    @property
    def ShowMeshWires(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AllMeshWiresColor.setter
    def AllMeshWiresColor(self) -> MutableSequence[Color]: ...
    @overload
    @HighlightMeshes.setter
    def HighlightMeshes(self) -> MutableSequence[bool]: ...
    @overload
    @MeshWireThickness.setter
    def MeshWireThickness(self) -> MutableSequence[int]: ...
    @overload
    @ShowMeshVertices.setter
    def ShowMeshVertices(self) -> MutableSequence[bool]: ...
    @overload
    @ShowMeshWires.setter
    def ShowMeshWires(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class PageViewSpaceChangeEventArgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def NewActiveDetailId(self) -> Guid: ...
    @overload
    @property
    def OldActiveDetailId(self) -> Guid: ...
    @overload
    @property
    def PageView(self) -> RhinoPageView: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class PointStyle(Enum):
    Square = 0
    Simple = 0
    ControlPoint = 1
    ActivePoint = 2
    X = 3
    RoundSimple = 4
    Circle = 4
    RoundControlPoint = 5
    RoundActivePoint = 6
    Triangle = 7
    Heart = 8
    Chevron = 9
    Clover = 10
    Tag = 11
    Asterisk = 12
    Pin = 13
    ArrowTail = 14
    ArrowTip = 15


from ..DocObjects import DetailViewObject
from ..Geometry import Point2d
from ..Render import RealtimeDisplayMode
class RhinoPageView(RhinoView):
    @overload
    @staticmethod
    def add_PageViewSpaceChange(value: EventHandler) -> None: ...
    @overload
    def AddDetailView(self, title: str, corner0: Point2d, corner1: Point2d, initialProjection: DefinedViewportProjection) -> DetailViewObject: ...
    @overload
    def CaptureToBitmap(self) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, mode: DisplayModeDescription) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, attributes: DisplayPipelineAttributes) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, mode: DisplayModeDescription) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, attributes: DisplayPipelineAttributes) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Bitmap: ...
    @overload
    def ClientToScreen(self, clientPoint: Point) -> Point: ...
    @overload
    def ClientToScreen(self, clientPoint: Point2d) -> Point2d: ...
    @overload
    def Close(self) -> bool: ...
    @overload
    def CreateShadedPreviewImage(self, imagePath: str, size: Size, ignoreHighlights: bool, drawConstructionPlane: bool, useGhostedShading: bool) -> bool: ...
    @overload
    def CreateWireframePreviewImage(self, imagePath: str, size: Size, ignoreHighlights: bool, drawConstructionPlane: bool) -> bool: ...
    @overload
    def Duplicate(self, duplicatePageGeometry: bool) -> RhinoPageView: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ActiveDetail(self) -> DetailViewObject: ...
    @overload
    @property
    def ActiveDetailId(self) -> Guid: ...
    @overload
    @property
    def ActiveViewport(self) -> RhinoViewport: ...
    @overload
    @property
    def ActiveViewportID(self) -> Guid: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @overload
    @property
    def DisplayPipeline(self) -> DisplayPipeline: ...
    @overload
    @property
    def Document(self) -> RhinoDoc: ...
    @overload
    @property
    def Floating(self) -> bool: ...
    @overload
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    @property
    def MainViewport(self) -> RhinoViewport: ...
    @overload
    @property
    def Maximized(self) -> bool: ...
    @overload
    @property
    def PageHeight(self) -> float: ...
    @overload
    @property
    def PageIsActive(self) -> bool: ...
    @overload
    @property
    def PageName(self) -> str: ...
    @overload
    @property
    def PageNumber(self) -> int: ...
    @overload
    @property
    def PageWidth(self) -> float: ...
    @overload
    @property
    def PaperName(self) -> str: ...
    @overload
    @property
    def PrinterName(self) -> str: ...
    @overload
    @property
    def RealtimeDisplayMode(self) -> RealtimeDisplayMode: ...
    @overload
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def ScreenRectangle(self) -> Rectangle: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def TitleVisible(self) -> bool: ...
    @overload
    def GetDetailViews(self) -> Iterable[DetailViewObject]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreviewImage(self, size: Size, grayScale: bool) -> Bitmap: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def MouseCaptured(self, bIncludeMovement: bool) -> bool: ...
    @overload
    def Redraw(self) -> None: ...
    @overload
    @staticmethod
    def remove_PageViewSpaceChange(value: EventHandler) -> None: ...
    @overload
    def ScreenToClient(self, screenPoint: Point) -> Point: ...
    @overload
    def ScreenToClient(self, screenPoint: Point2d) -> Point2d: ...
    @overload
    @Floating.setter
    def Floating(self) -> MutableSequence[bool]: ...
    @overload
    @Maximized.setter
    def Maximized(self) -> MutableSequence[bool]: ...
    @overload
    @PageHeight.setter
    def PageHeight(self) -> MutableSequence[float]: ...
    @overload
    @PageName.setter
    def PageName(self) -> MutableSequence[str]: ...
    @overload
    @PageNumber.setter
    def PageNumber(self) -> MutableSequence[int]: ...
    @overload
    @PageWidth.setter
    def PageWidth(self) -> MutableSequence[float]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @TitleVisible.setter
    def TitleVisible(self) -> MutableSequence[bool]: ...
    @overload
    def SetActiveDetail(self, detailId: Guid) -> bool: ...
    @overload
    def SetActiveDetail(self, detailName: str, compareCase: bool) -> bool: ...
    @overload
    def SetPageAsActive(self) -> None: ...
    @overload
    def SpeedTest(self, frameCount: int, freezeDrawList: bool, direction: int, angleDeltaRadians: float) -> float: ...
    @overload
    def ToString(self) -> str: ...


from ..Render import RealtimeDisplayMode
from ..Geometry import Point2d
class RhinoView:
    @overload
    @staticmethod
    def add_Create(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Destroy(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Modified(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Rename(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_SetActive(value: EventHandler) -> None: ...
    @overload
    def CaptureToBitmap(self) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, attributes: DisplayPipelineAttributes) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, mode: DisplayModeDescription) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, mode: DisplayModeDescription) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, attributes: DisplayPipelineAttributes) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Bitmap: ...
    @overload
    def CaptureToBitmap(self, size: Size, grid: bool, worldAxes: bool, cplaneAxes: bool) -> Bitmap: ...
    @overload
    def ClientToScreen(self, clientPoint: Point) -> Point: ...
    @overload
    def ClientToScreen(self, clientPoint: Point2d) -> Point2d: ...
    @overload
    def Close(self) -> bool: ...
    @overload
    def CreateShadedPreviewImage(self, imagePath: str, size: Size, ignoreHighlights: bool, drawConstructionPlane: bool, useGhostedShading: bool) -> bool: ...
    @overload
    def CreateWireframePreviewImage(self, imagePath: str, size: Size, ignoreHighlights: bool, drawConstructionPlane: bool) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromRuntimeSerialNumber(serialNumber: UInt32) -> RhinoView: ...
    @overload
    @property
    def ActiveViewport(self) -> RhinoViewport: ...
    @overload
    @property
    def ActiveViewportID(self) -> Guid: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @overload
    @property
    def DisplayPipeline(self) -> DisplayPipeline: ...
    @overload
    @property
    def Document(self) -> RhinoDoc: ...
    @overload
    @property
    def EnableDrawing() -> bool: ...
    @overload
    @property
    def Floating(self) -> bool: ...
    @overload
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    @property
    def MainViewport(self) -> RhinoViewport: ...
    @overload
    @property
    def Maximized(self) -> bool: ...
    @overload
    @property
    def RealtimeDisplayMode(self) -> RealtimeDisplayMode: ...
    @overload
    @property
    def RuntimeSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def ScreenRectangle(self) -> Rectangle: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def TitleVisible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def MouseCaptured(self, bIncludeMovement: bool) -> bool: ...
    @overload
    def Redraw(self) -> None: ...
    @overload
    @staticmethod
    def remove_Create(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Destroy(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Modified(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Rename(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_SetActive(value: EventHandler) -> None: ...
    @overload
    def ScreenToClient(self, screenPoint: Point) -> Point: ...
    @overload
    def ScreenToClient(self, screenPoint: Point2d) -> Point2d: ...
    @overload
    @EnableDrawing.setter
    def EnableDrawing() -> None: ...
    @overload
    @Floating.setter
    def Floating(self) -> MutableSequence[bool]: ...
    @overload
    @Maximized.setter
    def Maximized(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @TitleVisible.setter
    def TitleVisible(self) -> MutableSequence[bool]: ...
    @overload
    def SpeedTest(self, frameCount: int, freezeDrawList: bool, direction: int, angleDeltaRadians: float) -> float: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import Plane
from ..Geometry import BoundingBox
from ..Geometry import Point3d
from ..Geometry import Vector3d
from ..DocObjects import ConstructionPlane
from ..DocObjects import ViewportInfo
from ..DocObjects import ViewInfo
from ..Geometry import Transform
from ..Geometry import Sphere
from ..DocObjects import CoordinateSystem
from ..Geometry import Line
from ..Geometry import Point2d
class RhinoViewport:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: RhinoViewport): ...
    @overload
    def ChangeToParallelProjection(self, symmetricFrustum: bool) -> bool: ...
    @overload
    def ChangeToPerspectiveProjection(self, symmetricFrustum: bool, lensLength: float) -> bool: ...
    @overload
    def ChangeToPerspectiveProjection(self, targetDistance: float, symmetricFrustum: bool, lensLength: float) -> bool: ...
    @overload
    def ChangeToTwoPointPerspectiveProjection(self, lensLength: float) -> bool: ...
    @overload
    def ChangeToTwoPointPerspectiveProjection(self, targetDistance: float, up: Vector3d, lensLength: float) -> bool: ...
    @overload
    def ClearTraceImage(self) -> None: ...
    @overload
    def ClientToScreen(self, clientPoint: Point) -> Point: ...
    @overload
    def ClientToScreen(self, clientPoint: Point2d) -> Point: ...
    @overload
    def ClientToWorld(self, clientPoint: Point2d) -> Line: ...
    @overload
    def ClientToWorld(self, clientPoint: Point) -> Line: ...
    @overload
    def ConstructionPlane(self) -> Plane: ...
    @overload
    def DeleteAllUserStrings(self) -> None: ...
    @overload
    def DeleteUserString(self, key: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromId(id: Guid) -> RhinoViewport: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Camera35mmLensLength(self) -> float: ...
    @overload
    @property
    def CameraDirection(self) -> Vector3d: ...
    @overload
    @property
    def CameraLocation(self) -> Point3d: ...
    @overload
    @property
    def CameraTarget(self) -> Point3d: ...
    @overload
    @property
    def CameraUp(self) -> Vector3d: ...
    @overload
    @property
    def CameraX(self) -> Vector3d: ...
    @overload
    @property
    def CameraY(self) -> Vector3d: ...
    @overload
    @property
    def CameraZ(self) -> Vector3d: ...
    @overload
    @property
    def ChangeCounter(self) -> UInt32: ...
    @overload
    @property
    def ConstructionAxesVisible(self) -> bool: ...
    @overload
    @property
    def ConstructionGridVisible(self) -> bool: ...
    @overload
    @property
    def DisplayMode(self) -> DisplayModeDescription: ...
    @overload
    @property
    def FrustumAspect(self) -> float: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IsParallelProjection(self) -> bool: ...
    @overload
    @property
    def IsPerspectiveProjection(self) -> bool: ...
    @overload
    @property
    def IsPlanView(self) -> bool: ...
    @overload
    @property
    def IsTwoPointPerspectiveProjection(self) -> bool: ...
    @overload
    @property
    def IsValidCamera(self) -> bool: ...
    @overload
    @property
    def IsValidFrustum(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def ParentView(self) -> RhinoView: ...
    @overload
    @property
    def ScreenPortAspect(self) -> float: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def UserStringCount(self) -> int: ...
    @overload
    @property
    def ViewportType(self) -> ViewportType: ...
    @overload
    @property
    def WallpaperFilename(self) -> str: ...
    @overload
    @property
    def WallpaperGrayscale(self) -> bool: ...
    @overload
    @property
    def WallpaperVisible(self) -> bool: ...
    @overload
    @property
    def WorldAxesVisible(self) -> bool: ...
    @overload
    def GetCameraAngle(self) -> Tuple[bool, float, float, float]: ...
    @overload
    def GetCameraExtents(self, points: Iterable[Point3d]) -> BoundingBox: ...
    @overload
    def GetCameraFrame(self) -> Tuple[bool, Plane]: ...
    @overload
    def GetConstructionPlane(self) -> ConstructionPlane: ...
    @overload
    def GetDepth(self, point: Point3d) -> Tuple[bool, float]: ...
    @overload
    def GetDepth(self, bbox: BoundingBox) -> Tuple[bool, float, float]: ...
    @overload
    def GetDepth(self, sphere: Sphere) -> Tuple[bool, float, float]: ...
    @overload
    def GetFarRect(self) -> Iterable[Point3d]: ...
    @overload
    def GetFrustum(self) -> Tuple[bool, float, float, float, float, float, float]: ...
    @overload
    def GetFrustumBottomPlane(self) -> Tuple[bool, Plane]: ...
    @overload
    def GetFrustumBoundingBox(self) -> BoundingBox: ...
    @overload
    def GetFrustumCenter(self) -> Tuple[bool, Point3d]: ...
    @overload
    def GetFrustumFarPlane(self) -> Tuple[bool, Plane]: ...
    @overload
    def GetFrustumLeftPlane(self) -> Tuple[bool, Plane]: ...
    @overload
    def GetFrustumLine(self, screenX: float, screenY: float) -> Tuple[bool, Line]: ...
    @overload
    def GetFrustumNearPlane(self) -> Tuple[bool, Plane]: ...
    @overload
    def GetFrustumRightPlane(self) -> Tuple[bool, Plane]: ...
    @overload
    def GetFrustumTopPlane(self) -> Tuple[bool, Plane]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNearRect(self) -> Iterable[Point3d]: ...
    @overload
    def GetPickTransform(self, clientPoint: Point) -> Transform: ...
    @overload
    def GetPickTransform(self, clientRectangle: Rectangle) -> Transform: ...
    @overload
    def GetPickTransform(self, clientX: int, clientY: int) -> Transform: ...
    @overload
    def GetScreenPort(self) -> Tuple[bool, int, int, int, int, int, int]: ...
    @overload
    def GetTransform(self, sourceSystem: CoordinateSystem, destinationSystem: CoordinateSystem) -> Transform: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetUserString(self, key: str) -> str: ...
    @overload
    def GetUserStrings(self) -> NameValueCollection: ...
    @overload
    def GetWorldToScreenScale(self, pointInFrustum: Point3d) -> Tuple[bool, float]: ...
    @overload
    def IsVisible(self, bbox: BoundingBox) -> bool: ...
    @overload
    def IsVisible(self, point: Point3d) -> bool: ...
    @overload
    def KeyboardDolly(self, leftRight: bool, amount: float) -> bool: ...
    @overload
    def KeyboardDollyInOut(self, amount: float) -> bool: ...
    @overload
    def KeyboardRotate(self, leftRight: bool, angleRadians: float) -> bool: ...
    @overload
    def Magnify(self, magnificationFactor: float, mode: bool) -> bool: ...
    @overload
    def Magnify(self, magnificationFactor: float, mode: bool, fixedScreenPoint: Point) -> bool: ...
    @overload
    def MouseAdjustLensLength(self, mousePreviousPoint: Point, mouseCurrentPoint: Point, moveTarget: bool) -> bool: ...
    @overload
    def MouseDollyZoom(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    @overload
    def MouseInOutDolly(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    @overload
    def MouseLateralDolly(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    @overload
    def MouseMagnify(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    @overload
    def MouseRotateAroundTarget(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    @overload
    def MouseRotateCamera(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    @overload
    def MouseTilt(self, mousePreviousPoint: Point, mouseCurrentPoint: Point) -> bool: ...
    @overload
    def NextConstructionPlane(self) -> bool: ...
    @overload
    def NextViewProjection(self) -> bool: ...
    @overload
    def PopConstructionPlane(self) -> bool: ...
    @overload
    def PopViewProjection(self) -> bool: ...
    @overload
    def PreviousConstructionPlane(self) -> bool: ...
    @overload
    def PreviousViewProjection(self) -> bool: ...
    @overload
    def PushConstructionPlane(self, cplane: ConstructionPlane) -> None: ...
    @overload
    def PushViewInfo(self, viewinfo: ViewInfo, includeTraceImage: bool) -> bool: ...
    @overload
    def PushViewProjection(self) -> None: ...
    @overload
    def Rotate(self, angleRadians: float, rotationAxis: Vector3d, rotationCenter: Point3d) -> bool: ...
    @overload
    def ScreenToClient(self, screenPoint: Point) -> Point: ...
    @overload
    @Camera35mmLensLength.setter
    def Camera35mmLensLength(self) -> MutableSequence[float]: ...
    @overload
    @CameraUp.setter
    def CameraUp(self) -> MutableSequence[Vector3d]: ...
    @overload
    @ConstructionAxesVisible.setter
    def ConstructionAxesVisible(self) -> MutableSequence[bool]: ...
    @overload
    @ConstructionGridVisible.setter
    def ConstructionGridVisible(self) -> MutableSequence[bool]: ...
    @overload
    @DisplayMode.setter
    def DisplayMode(self) -> MutableSequence[DisplayModeDescription]: ...
    @overload
    @Name.setter
    def Name(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @WorldAxesVisible.setter
    def WorldAxesVisible(self) -> MutableSequence[bool]: ...
    @overload
    def SetCameraDirection(self, cameraDirection: Vector3d, updateTargetLocation: bool) -> None: ...
    @overload
    def SetCameraLocation(self, cameraLocation: Point3d, updateTargetLocation: bool) -> None: ...
    @overload
    def SetCameraLocations(self, targetLocation: Point3d, cameraLocation: Point3d) -> None: ...
    @overload
    def SetCameraTarget(self, targetLocation: Point3d, updateCameraLocation: bool) -> None: ...
    @overload
    def SetClippingPlanes(self, box: BoundingBox) -> None: ...
    @overload
    def SetConstructionPlane(self, cplane: ConstructionPlane) -> None: ...
    @overload
    def SetConstructionPlane(self, plane: Plane) -> None: ...
    @overload
    def SetProjection(self, projection: DefinedViewportProjection, viewName: str, updateConstructionPlane: bool) -> bool: ...
    @overload
    def SetToPlanView(self, planeOrigin: Point3d, planeXaxis: Vector3d, planeYaxis: Vector3d, setConstructionPlane: bool) -> bool: ...
    @overload
    def SetTraceImage(self, bitmapFileName: str, plane: Plane, width: float, height: float, grayscale: bool, filtered: bool) -> bool: ...
    @overload
    def SetUserString(self, key: str, value: str) -> bool: ...
    @overload
    def SetViewProjection(self, projection: ViewportInfo, updateTargetLocation: bool) -> bool: ...
    @overload
    def SetWallpaper(self, imageFilename: str, grayscale: bool) -> bool: ...
    @overload
    def SetWallpaper(self, imageFilename: str, grayscale: bool, visible: bool) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WorldToClient(self, worldPoint: Point3d) -> Point2d: ...
    @overload
    def ZoomBoundingBox(self, box: BoundingBox) -> bool: ...
    @overload
    def ZoomExtents(self) -> bool: ...
    @overload
    def ZoomExtentsSelected(self) -> bool: ...
    @overload
    def ZoomWindow(self, rect: Rectangle) -> bool: ...


class ShaderLanguage(Enum):
    GLSL_ES100 = 1
    GLSL_ES300 = 2
    GLSL_ES310 = 3
    GLSL_120 = 4
    GLSL_130 = 5
    GLSL_140 = 6
    GLSL_150 = 7
    GLSL_330 = 8
    GLSL_400 = 9
    GLSL_410 = 10
    GLSL_420 = 11
    GLSL_430 = 12
    GLSL_440 = 13
    Metal = 14


class StereoContext(Enum):
    # None = 0
    LeftEye = 1
    RightEye = 2
    BothEyes = 3


from ..Geometry import Plane
from ..Geometry import BoundingBox
from ..DocObjects import TextHorizontalAlignment
from ..DocObjects import TextVerticalAlignment
class Text3d:
    @overload
    def __init__(self, text: str): ...
    @overload
    def __init__(self, text: str, plane: Plane, height: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bold(self) -> bool: ...
    @overload
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @overload
    @property
    def FontFace(self) -> str: ...
    @overload
    @property
    def Height(self) -> float: ...
    @overload
    @property
    def HorizontalAlignment(self) -> TextHorizontalAlignment: ...
    @overload
    @property
    def Italic(self) -> bool: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextPlane(self) -> Plane: ...
    @overload
    @property
    def VerticalAlignment(self) -> TextVerticalAlignment: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Bold.setter
    def Bold(self) -> MutableSequence[bool]: ...
    @overload
    @FontFace.setter
    def FontFace(self) -> MutableSequence[str]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[float]: ...
    @overload
    @HorizontalAlignment.setter
    def HorizontalAlignment(self) -> MutableSequence[TextHorizontalAlignment]: ...
    @overload
    @Italic.setter
    def Italic(self) -> MutableSequence[bool]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextPlane.setter
    def TextPlane(self) -> MutableSequence[Plane]: ...
    @overload
    @VerticalAlignment.setter
    def VerticalAlignment(self) -> MutableSequence[TextVerticalAlignment]: ...
    @overload
    def ToString(self) -> str: ...


class ViewAreaMapping(Enum):
    View = 0
    Extents = 1
    Window = 2


class ViewCapture:
    @overload
    def __init__(self): ...
    @overload
    def CaptureToBitmap(self, sourceView: RhinoView) -> Bitmap: ...
    @overload
    @staticmethod
    def CaptureToBitmap(settings: ViewCaptureSettings) -> Bitmap: ...
    @overload
    @staticmethod
    def CaptureToSvg(settings: ViewCaptureSettings) -> XmlDocument: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def DrawAxes(self) -> bool: ...
    @overload
    @property
    def DrawGrid(self) -> bool: ...
    @overload
    @property
    def DrawGridAxes(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def Preview(self) -> bool: ...
    @overload
    @property
    def RealtimeRenderPasses(self) -> int: ...
    @overload
    @property
    def ScaleScreenItems(self) -> bool: ...
    @overload
    @property
    def TransparentBackground(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @DrawAxes.setter
    def DrawAxes(self) -> MutableSequence[bool]: ...
    @overload
    @DrawGrid.setter
    def DrawGrid(self) -> MutableSequence[bool]: ...
    @overload
    @DrawGridAxes.setter
    def DrawGridAxes(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @Preview.setter
    def Preview(self) -> MutableSequence[bool]: ...
    @overload
    @RealtimeRenderPasses.setter
    def RealtimeRenderPasses(self) -> MutableSequence[int]: ...
    @overload
    @ScaleScreenItems.setter
    def ScaleScreenItems(self) -> MutableSequence[bool]: ...
    @overload
    @TransparentBackground.setter
    def TransparentBackground(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import Point2d
from ..Geometry import Point3d
class ViewCaptureSettings:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, sourcePageView: RhinoPageView, dpi: float): ...
    @overload
    def __init__(self, sourceView: RhinoView, mediaSize: Size, dpi: float): ...
    @overload
    def CreatePreviewSettings(self, size: Size) -> ViewCaptureSettings: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ArrowheadSizeMillimeters(self) -> float: ...
    @overload
    @property
    def CropRectangle(self) -> Rectangle: ...
    @overload
    @property
    def DefaultPrintWidthMillimeters(self) -> float: ...
    @overload
    @property
    def Document(self) -> RhinoDoc: ...
    @overload
    @property
    def DrawAxis(self) -> bool: ...
    @overload
    @property
    def DrawBackground(self) -> bool: ...
    @overload
    @property
    def DrawBackgroundBitmap(self) -> bool: ...
    @overload
    @property
    def DrawClippingPlanes(self) -> bool: ...
    @overload
    @property
    def DrawGrid(self) -> bool: ...
    @overload
    @property
    def DrawLights(self) -> bool: ...
    @overload
    @property
    def DrawLockedObjects(self) -> bool: ...
    @overload
    @property
    def DrawMargins(self) -> bool: ...
    @overload
    @property
    def DrawSelectedObjectsOnly(self) -> bool: ...
    @overload
    @property
    def DrawWallpaper(self) -> bool: ...
    @overload
    @property
    def FooterText(self) -> str: ...
    @overload
    @property
    def HeaderText(self) -> str: ...
    @overload
    @property
    def IsScaleToFit(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def MatchLinetypePatternDefinition(self) -> bool: ...
    @overload
    @property
    def MediaSize(self) -> Size: ...
    @overload
    @property
    def ModelScaleType(self) -> int: ...
    @overload
    @property
    def OffsetAnchor(self) -> AnchorLocation: ...
    @overload
    @property
    def OutputColor(self) -> ColorMode: ...
    @overload
    @property
    def PointSizeMillimeters(self) -> float: ...
    @overload
    @property
    def RasterMode(self) -> bool: ...
    @overload
    @property
    def Resolution(self) -> float: ...
    @overload
    @property
    def TextDotPointSize(self) -> float: ...
    @overload
    @property
    def UsePrintWidths(self) -> bool: ...
    @overload
    @property
    def ViewArea(self) -> ViewAreaMapping: ...
    @overload
    @property
    def WireThicknessScale(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMargins(self, lengthUnits: UnitSystem) -> Tuple[bool, float, float, float, float]: ...
    @overload
    def GetModelScale(self, pageUnits: UnitSystem, modelUnits: UnitSystem) -> float: ...
    @overload
    def GetOffset(self, lengthUnits: UnitSystem) -> Tuple[bool, float, float]: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def MatchViewportAspectRatio(self) -> bool: ...
    @overload
    def MaximizePrintableArea(self) -> None: ...
    @overload
    @ArrowheadSizeMillimeters.setter
    def ArrowheadSizeMillimeters(self) -> MutableSequence[float]: ...
    @overload
    @DefaultPrintWidthMillimeters.setter
    def DefaultPrintWidthMillimeters(self) -> MutableSequence[float]: ...
    @overload
    @Document.setter
    def Document(self) -> MutableSequence[RhinoDoc]: ...
    @overload
    @DrawAxis.setter
    def DrawAxis(self) -> MutableSequence[bool]: ...
    @overload
    @DrawBackground.setter
    def DrawBackground(self) -> MutableSequence[bool]: ...
    @overload
    @DrawBackgroundBitmap.setter
    def DrawBackgroundBitmap(self) -> MutableSequence[bool]: ...
    @overload
    @DrawClippingPlanes.setter
    def DrawClippingPlanes(self) -> MutableSequence[bool]: ...
    @overload
    @DrawGrid.setter
    def DrawGrid(self) -> MutableSequence[bool]: ...
    @overload
    @DrawLights.setter
    def DrawLights(self) -> MutableSequence[bool]: ...
    @overload
    @DrawLockedObjects.setter
    def DrawLockedObjects(self) -> MutableSequence[bool]: ...
    @overload
    @DrawMargins.setter
    def DrawMargins(self) -> MutableSequence[bool]: ...
    @overload
    @DrawSelectedObjectsOnly.setter
    def DrawSelectedObjectsOnly(self) -> MutableSequence[bool]: ...
    @overload
    @DrawWallpaper.setter
    def DrawWallpaper(self) -> MutableSequence[bool]: ...
    @overload
    @FooterText.setter
    def FooterText(self) -> MutableSequence[str]: ...
    @overload
    @HeaderText.setter
    def HeaderText(self) -> MutableSequence[str]: ...
    @overload
    @MatchLinetypePatternDefinition.setter
    def MatchLinetypePatternDefinition(self) -> MutableSequence[bool]: ...
    @overload
    @ModelScaleType.setter
    def ModelScaleType(self) -> MutableSequence[int]: ...
    @overload
    @OffsetAnchor.setter
    def OffsetAnchor(self) -> MutableSequence[AnchorLocation]: ...
    @overload
    @OutputColor.setter
    def OutputColor(self) -> MutableSequence[ColorMode]: ...
    @overload
    @PointSizeMillimeters.setter
    def PointSizeMillimeters(self) -> MutableSequence[float]: ...
    @overload
    @RasterMode.setter
    def RasterMode(self) -> MutableSequence[bool]: ...
    @overload
    @Resolution.setter
    def Resolution(self) -> MutableSequence[float]: ...
    @overload
    @TextDotPointSize.setter
    def TextDotPointSize(self) -> MutableSequence[float]: ...
    @overload
    @UsePrintWidths.setter
    def UsePrintWidths(self) -> MutableSequence[bool]: ...
    @overload
    @ViewArea.setter
    def ViewArea(self) -> MutableSequence[ViewAreaMapping]: ...
    @overload
    @WireThicknessScale.setter
    def WireThicknessScale(self) -> MutableSequence[float]: ...
    @overload
    def SetLayout(self, mediaSize: Size, cropRectangle: Rectangle) -> None: ...
    @overload
    def SetMargins(self, lengthUnits: UnitSystem, left: float, top: float, right: float, bottom: float) -> bool: ...
    @overload
    def SetModelScaleToFit(self, promptOnChange: bool) -> None: ...
    @overload
    def SetModelScaleToValue(self, scale: float) -> None: ...
    @overload
    def SetOffset(self, lengthUnits: UnitSystem, fromMargin: bool, x: float, y: float) -> None: ...
    @overload
    def SetViewport(self, viewport: RhinoViewport) -> None: ...
    @overload
    def SetWindowRect(self, screenPoint1: Point2d, screenPoint2: Point2d) -> None: ...
    @overload
    def SetWindowRect(self, worldPoint1: Point3d, worldPoint2: Point3d) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ViewDisplayAttributes:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BlendGrid(self) -> bool: ...
    @overload
    @property
    def DrawGrid(self) -> bool: ...
    @overload
    @property
    def DrawGridAxes(self) -> bool: ...
    @overload
    @property
    def DrawTransparentGridPlane(self) -> bool: ...
    @overload
    @property
    def DrawWorldAxes(self) -> bool: ...
    @overload
    @property
    def DrawZAxis(self) -> bool: ...
    @overload
    @property
    def HorizontalViewportScale(self) -> float: ...
    @overload
    @property
    def ShowGridOnTop(self) -> bool: ...
    @overload
    @property
    def UseDocumentGrid(self) -> bool: ...
    @overload
    @property
    def VerticalViewportScale(self) -> float: ...
    @overload
    @property
    def WorldAxisColorX(self) -> Color: ...
    @overload
    @property
    def WorldAxisColorY(self) -> Color: ...
    @overload
    @property
    def WorldAxisColorZ(self) -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @BlendGrid.setter
    def BlendGrid(self) -> MutableSequence[bool]: ...
    @overload
    @DrawGrid.setter
    def DrawGrid(self) -> MutableSequence[bool]: ...
    @overload
    @DrawGridAxes.setter
    def DrawGridAxes(self) -> MutableSequence[bool]: ...
    @overload
    @DrawTransparentGridPlane.setter
    def DrawTransparentGridPlane(self) -> MutableSequence[bool]: ...
    @overload
    @DrawWorldAxes.setter
    def DrawWorldAxes(self) -> MutableSequence[bool]: ...
    @overload
    @DrawZAxis.setter
    def DrawZAxis(self) -> MutableSequence[bool]: ...
    @overload
    @HorizontalViewportScale.setter
    def HorizontalViewportScale(self) -> MutableSequence[float]: ...
    @overload
    @ShowGridOnTop.setter
    def ShowGridOnTop(self) -> MutableSequence[bool]: ...
    @overload
    @UseDocumentGrid.setter
    def UseDocumentGrid(self) -> MutableSequence[bool]: ...
    @overload
    @VerticalViewportScale.setter
    def VerticalViewportScale(self) -> MutableSequence[float]: ...
    @overload
    @WorldAxisColorX.setter
    def WorldAxisColorX(self) -> MutableSequence[Color]: ...
    @overload
    @WorldAxisColorY.setter
    def WorldAxisColorY(self) -> MutableSequence[Color]: ...
    @overload
    @WorldAxisColorZ.setter
    def WorldAxisColorZ(self) -> MutableSequence[Color]: ...
    @overload
    def ToString(self) -> str: ...


class ViewEventArgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def View(self) -> RhinoView: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class ViewportType(Enum):
    StandardModelingViewport = 0
    PageViewMainViewport = 1
    DetailViewport = 2


from ..DocObjects import RhinoObject
class VisualAnalysisMode:
    @overload
    @staticmethod
    def AdjustAnalysisMeshes(doc: RhinoDoc, analysisModeId: Guid) -> bool: ...
    @overload
    def EnableUserInterface(self, on: bool) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def Find(id: Guid) -> VisualAnalysisMode: ...
    @overload
    @staticmethod
    def Find(t: Type) -> VisualAnalysisMode: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def RhinoCurvatureColorAnalyisModeId() -> Guid: ...
    @overload
    @property
    def RhinoCurvatureGraphAnalysisModeId() -> Guid: ...
    @overload
    @property
    def RhinoDraftAngleAnalysisModeId() -> Guid: ...
    @overload
    @property
    def RhinoEdgeAnalysisModeId() -> Guid: ...
    @overload
    @property
    def RhinoEdgeContinuityAlalysisModeId() -> Guid: ...
    @overload
    @property
    def RhinoEmapAnalysisModeId() -> Guid: ...
    @overload
    @property
    def RhinoThicknessAnalysisModeId() -> Guid: ...
    @overload
    @property
    def RhinoZebraStripeAnalysisModeId() -> Guid: ...
    @overload
    @property
    def ShowIsoCurves(self) -> bool: ...
    @overload
    @property
    def Style(self) -> AnalysisStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ObjectSupportsAnalysisMode(self, obj: RhinoObject) -> bool: ...
    @overload
    @staticmethod
    def Register(customAnalysisModeType: Type) -> VisualAnalysisMode: ...
    @overload
    def ToString(self) -> str: ...


class ZBiasMode(Enum):
    Neutral = 0
    TowardsCamera = 1
    AwayFromCamera = 2


from ..Geometry import Point3d
class ZBufferCapture:
    @overload
    def __init__(self, viewport: RhinoViewport): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GrayscaleDib(self) -> Bitmap: ...
    @overload
    def HitCount(self) -> int: ...
    @overload
    def MaxZ(self) -> Single: ...
    @overload
    def MinZ(self) -> Single: ...
    @overload
    def SetDisplayMode(self, modeId: Guid) -> None: ...
    @overload
    def ShowAnnotations(self, on: bool) -> None: ...
    @overload
    def ShowCurves(self, on: bool) -> None: ...
    @overload
    def ShowIsocurves(self, on: bool) -> None: ...
    @overload
    def ShowLights(self, on: bool) -> None: ...
    @overload
    def ShowMeshWires(self, on: bool) -> None: ...
    @overload
    def ShowPoints(self, on: bool) -> None: ...
    @overload
    def ShowText(self, on: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WorldPointAt(self, x: int, y: int) -> Point3d: ...
    @overload
    def ZValueAt(self, x: int, y: int) -> Single: ...
