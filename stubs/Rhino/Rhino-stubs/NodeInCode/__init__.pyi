from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class ComponentFunctionInfo:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Evaluate(self, args: IEnumerable, keepTree: bool) -> Tuple[Iterable[object], Iterable[str]]: ...
    @overload
    @property
    def ComponentGuid(self) -> Guid: ...
    @overload
    @property
    def Delegate(self) -> Delegate: ...
    @overload
    @property
    def DelegateNoWarnings(self) -> Delegate: ...
    @overload
    @property
    def DelegateTree(self) -> Delegate: ...
    @overload
    @property
    def DelegateTreeNoWarnings(self) -> Delegate: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def FullName(self) -> str: ...
    @overload
    @property
    def FullScriptingName(self) -> str: ...
    @overload
    @property
    def InputDescriptions(self) -> IReadOnlyList: ...
    @overload
    @property
    def InputNames(self) -> IReadOnlyList: ...
    @overload
    @property
    def InputsOptional(self) -> IReadOnlyList: ...
    @overload
    @property
    def InputTypeNames(self) -> IReadOnlyList: ...
    @overload
    @property
    def IsDefault(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Namespace(self) -> str: ...
    @overload
    @property
    def OutputDescriptions(self) -> IReadOnlyList: ...
    @overload
    @property
    def OutputNames(self) -> IReadOnlyList: ...
    @overload
    @property
    def OutputTypeNames(self) -> IReadOnlyList: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, args: Iterable[object]) -> Iterable[object]: ...
    @overload
    def InvokeKeepTree(self, args: Iterable[object]) -> Iterable[object]: ...
    @overload
    def InvokeKeepTreeSilenceWarnings(self, args: Iterable[object]) -> Iterable[object]: ...
    @overload
    def InvokeSilenceWarnings(self, args: Iterable[object]) -> Iterable[object]: ...
    @overload
    def ToString(self) -> str: ...


class Components:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FindComponent(fullName: str) -> ComponentFunctionInfo: ...
    @overload
    @property
    def NodeInCodeFunctions() -> NodeInCodeTable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class NodeInCodeTable:
    @overload
    def __init__(self, items: Iterable[ComponentFunctionInfo]): ...
    @overload
    def Add(self, item: ComponentFunctionInfo) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetDynamicMemberNames(self) -> Iterable[str]: ...
    @overload
    def GetDynamicMembers(self) -> Iterable[ComponentFunctionInfo]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMetaObject(self, parameter: Expression) -> DynamicMetaObject: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryBinaryOperation(self, binder: BinaryOperationBinder, arg: object) -> Tuple[bool, object]: ...
    @overload
    def TryConvert(self, binder: ConvertBinder) -> Tuple[bool, object]: ...
    @overload
    def TryCreateInstance(self, binder: CreateInstanceBinder, args: Iterable[object]) -> Tuple[bool, object]: ...
    @overload
    def TryDeleteIndex(self, binder: DeleteIndexBinder, indexes: Iterable[object]) -> bool: ...
    @overload
    def TryDeleteMember(self, binder: DeleteMemberBinder) -> bool: ...
    @overload
    def TryGetIndex(self, binder: GetIndexBinder, indexes: Iterable[object]) -> Tuple[bool, object]: ...
    @overload
    def TryGetMember(self, binder: GetMemberBinder) -> Tuple[bool, object]: ...
    @overload
    def TryInvoke(self, binder: InvokeBinder, args: Iterable[object]) -> Tuple[bool, object]: ...
    @overload
    def TryInvokeMember(self, binder: InvokeMemberBinder, args: Iterable[object]) -> Tuple[bool, object]: ...
    @overload
    def TrySetIndex(self, binder: SetIndexBinder, indexes: Iterable[object], value: object) -> bool: ...
    @overload
    def TrySetMember(self, binder: SetMemberBinder, value: object) -> bool: ...
    @overload
    def TryUnaryOperation(self, binder: UnaryOperationBinder) -> Tuple[bool, object]: ...
