from typing import Tuple, Iterable, Iterator, overload
from enum import Enum



class RhinoCore:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, args: Iterable[str]): ...
    @overload
    def __init__(self, args: Iterable[str], windowStyle: WindowStyle): ...
    @overload
    def __init__(self, args: Iterable[str], windowStyle: WindowStyle, hostWnd: IntPtr): ...
    def Dispose(self) -> None: ...
    def DoEvents(self) -> bool: ...
    def DoIdle(self) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def InvokeInHostContext(self, action: Action) -> None: ...
    @overload
    def InvokeInHostContext(self, func: Func) -> T: ...
    def RaiseIdle(self) -> None: ...
    def Run(self) -> int: ...
    def ToString(self) -> str: ...


class WindowStyle(Enum):
    Normal = 0
    Hidden = 1
    Minimized = 2
    Maximized = 3
    NoWindow = -1
