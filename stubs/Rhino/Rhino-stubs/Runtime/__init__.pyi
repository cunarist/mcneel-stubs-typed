from typing import Tuple, Iterable, Iterator, overload
from enum import Enum

import InProcess
import InteropWrappers
import Notifications
import RhinoAccounts

__all__ = ['InProcess', 'InteropWrappers', 'Notifications', 'RhinoAccounts']


class AdvancedSetting(Enum):
    UseNewDraftAngleAnalysisUi = 0
    UseCompressionWhenSaving = 1
    TestAdvancedString = 2
    TestAdvancedInt = 3
    PdfOptionalContentGroups = 4
    LeaveFloatingPanelsHiddenOnMac = 5
    DisableFileWatchers = 6
    EnableCheckForUpdates = 7
    LeftJustifyNumericText = 8
    EnableWindowsGestures = 9
    MakeInteriorNgonVertexesSelectable = 10
    MacDisplayOldVersionAutosaveWarning = 11
    UseNewMissingFontUI = 12
    ExportDocumentUserText = 13
    CommandsToIgnoreWhenAutoHidingToolPalettes = 14


class Analytics:
    @overload
    def __init__(self, TrackingID: str, Name: str): ...
    @overload
    def __init__(self, TrackingID: str, Name: str, Platform: str, InstallerId: str, Version: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AppInstallerId(self) -> str: ...
    @property
    def AppName(self) -> str: ...
    @property
    def AppPlatform(self) -> str: ...
    @property
    def AppVersion(self) -> str: ...
    @property
    def GoogleAnalyticsTrackingID(self) -> str: ...
    @property
    def UsageStatisticsEnabled() -> bool: ...
    @property
    def UserId() -> Guid: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def Send(self, data: NameValueCollection) -> None: ...
    @overload
    def Send(self, Category: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str, Label: str) -> None: ...
    @overload
    def Send(self, Category: str, Action: str, Label: str, Value: UInt32) -> None: ...
    @AppInstallerId.setter
    def AppInstallerId(self, value: str) -> None: ...
    @AppName.setter
    def AppName(self, value: str) -> None: ...
    @AppPlatform.setter
    def AppPlatform(self, value: str) -> None: ...
    @AppVersion.setter
    def AppVersion(self, value: str) -> None: ...
    @GoogleAnalyticsTrackingID.setter
    def GoogleAnalyticsTrackingID(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class AssemblyResolver:
    @staticmethod
    def AddSearchFile(file: str) -> None: ...
    @staticmethod
    def AddSearchFolder(folder: str) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CurrentDomainAssemblyResolve() -> ResolveEventHandler: ...
    @property
    def CurrentDomainReflectionOnlyAssemblyResolve() -> ResolveEventHandler: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from ..FileIO import SerializationOptions
class CommonObject:
    def Dispose(self) -> None: ...
    def EnsurePrivateCopy(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @staticmethod
    def FromBase64String(archive3dm: int, opennurbs: int, base64Data: str) -> CommonObject: ...
    @overload
    @staticmethod
    def FromJSON(jsonDictionary: Dictionary) -> CommonObject: ...
    @overload
    @staticmethod
    def FromJSON(json: str) -> CommonObject: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def PerformCorruptionTesting() -> bool: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    def GetHashCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @PerformCorruptionTesting.setter
    def PerformCorruptionTesting(value: bool) -> None: ...
    def ToJSON(self, options: SerializationOptions) -> str: ...
    def ToString(self) -> str: ...


class CorruptGeometryException:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CommonObject(self) -> CommonObject: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Pointer(self) -> IntPtr: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    def GetBaseException(self) -> Exception: ...
    def GetHashCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetType(self) -> Type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class DocumentCollectedException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    def GetBaseException(self) -> Exception: ...
    def GetHashCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetType(self) -> Type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class ExceptionReportDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, source: str, ex: Exception, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, source: str, ex: Exception) -> None: ...
    def ToString(self) -> str: ...


class FillProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, topl: int, bottoml: int, topr: int, bottomr: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, topl: int, bottoml: int, topr: int, bottomr: int) -> None: ...
    def ToString(self) -> str: ...


from ..Geometry import GeometryBase
from ..Geometry import BezierCurve
from ..PlugIns import PlugIn
from ..Commands import Command
class HostUtils:
    @staticmethod
    def add_OnExceptionReport(value: ExceptionReportDelegate) -> None: ...
    @staticmethod
    def add_OnSendLogMessageToCloud(value: SendLogMessageToCloudDelegate) -> None: ...
    @staticmethod
    def AutoInstallPlugInFolder(currentUser: bool) -> str: ...
    @staticmethod
    def CallFromCoreRhino(task: str) -> int: ...
    @staticmethod
    def CheckForRdk(throwOnFalse: bool, usePreviousResult: bool) -> bool: ...
    @staticmethod
    def ClearFpuExceptionStatus() -> None: ...
    @overload
    @staticmethod
    def CreateCommands(plugin: PlugIn) -> None: ...
    @overload
    @staticmethod
    def CreateCommands(pPlugIn: IntPtr, pluginAssembly: Assembly) -> int: ...
    @staticmethod
    def CreatePlugIn(pluginType: Type, printDebugMessages: bool) -> PlugIn: ...
    @overload
    @staticmethod
    def DebugDumpToString(geometry: GeometryBase) -> str: ...
    @overload
    @staticmethod
    def DebugDumpToString(bezierCurve: BezierCurve) -> str: ...
    @overload
    @staticmethod
    def DebugString(msg: str) -> None: ...
    @overload
    @staticmethod
    def DebugString(format: str, args: Iterable[Object]) -> None: ...
    @staticmethod
    def DisplayOleAlerts(display: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def ExceptionReport(ex: Exception) -> None: ...
    @overload
    @staticmethod
    def ExceptionReport(source: str, ex: Exception) -> None: ...
    @staticmethod
    def ExecuteNamedCallback(name: str, args: NamedParametersEventArgs) -> bool: ...
    @staticmethod
    def FileNameEndsWithRhinoBackupExtension(fileName: str) -> bool: ...
    @staticmethod
    def FileNameEndsWithRhinoExtension(fileName: str) -> bool: ...
    @property
    def ComputerSerialNumber() -> str: ...
    @property
    def CurrentOSLanguage() -> UInt32: ...
    @property
    def DeviceId() -> Guid: ...
    @property
    def DeviceName() -> str: ...
    @property
    def IsPreRelease() -> bool: ...
    @property
    def OperatingSystemBuildNumber() -> str: ...
    @property
    def OperatingSystemEdition() -> str: ...
    @property
    def OperatingSystemInstallationType() -> str: ...
    @property
    def OperatingSystemProductName() -> str: ...
    @property
    def OperatingSystemVersion() -> str: ...
    @property
    def RunningAsRhinoInside() -> bool: ...
    @property
    def RunningInDarkMode() -> bool: ...
    @property
    def RunningInMono() -> bool: ...
    @property
    def RunningInRhino() -> bool: ...
    @property
    def RunningInWindowsContainer() -> bool: ...
    @property
    def RunningOnOSX() -> bool: ...
    @property
    def RunningOnServer() -> bool: ...
    @property
    def RunningOnWindows() -> bool: ...
    @property
    def SendDebugToCommandLine() -> bool: ...
    @staticmethod
    def GetAbsolutePath(relativePath: str, bRelativePathisFileName: bool, relativeTo: str, bRelativeToIsFileName: bool) -> Tuple[bool, str]: ...
    @overload
    @staticmethod
    def GetActivePlugInVersionFolders() -> Iterable[DirectoryInfo]: ...
    @overload
    @staticmethod
    def GetActivePlugInVersionFolders(currentUser: bool) -> Iterable[DirectoryInfo]: ...
    @staticmethod
    def GetAssemblySearchPaths() -> Iterable[str]: ...
    @staticmethod
    def GetCurrentProcessInfo() -> Tuple[str, Version]: ...
    @staticmethod
    def GetCustomComputeEndpoints() -> Iterable[Tuple]: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def GetPlatformService(assemblyPath: str, typeFullName: str) -> T: ...
    @staticmethod
    def GetRhinoDotNetAssembly() -> Assembly: ...
    @staticmethod
    def GetSystemProcessorCount() -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def InitializeRhinoCommon() -> None: ...
    @staticmethod
    def InitializeRhinoCommon_RDK() -> None: ...
    @staticmethod
    def InitializeZooClient() -> None: ...
    @staticmethod
    def InPlaceConstCast(geometry: GeometryBase, makeNonConst: bool) -> None: ...
    @staticmethod
    def IsManagedDll(path: str) -> bool: ...
    @staticmethod
    def IsRhinoBackupFileExtension(fileExtension: str) -> bool: ...
    @staticmethod
    def IsRhinoFileExtension(fileExtension: str) -> bool: ...
    @staticmethod
    def RecordInitInstanceTime(description: str) -> None: ...
    @staticmethod
    def RegisterComputeEndpoint(endpointPath: str, t: Type) -> None: ...
    @staticmethod
    def RegisterDynamicCommand(plugin: PlugIn, cmd: Command) -> bool: ...
    @staticmethod
    def RegisterNamedCallback(name: str, callback: EventHandler) -> None: ...
    @staticmethod
    def remove_OnExceptionReport(value: ExceptionReportDelegate) -> None: ...
    @staticmethod
    def remove_OnSendLogMessageToCloud(value: SendLogMessageToCloudDelegate) -> None: ...
    @staticmethod
    def RemoveNamedCallback(name: str) -> None: ...
    @staticmethod
    def RhinoCommonExceptionHandler(title: str, sender: Object, ex: Exception) -> None: ...
    @staticmethod
    def SendLogMessageToCloudCallbackProc(msg_type: LogMessageType, pwStringClass: IntPtr, pwStringDesc: IntPtr, pwStringMessage: IntPtr) -> None: ...
    @SendDebugToCommandLine.setter
    def SendDebugToCommandLine(value: bool) -> None: ...
    @staticmethod
    def SetInShutDown() -> None: ...
    @staticmethod
    def ShutDownRhinoCommon_RDK() -> None: ...
    def ToString(self) -> str: ...
    @staticmethod
    def UnhandledThreadException(sender: Object, e: ThreadExceptionEventArgs) -> None: ...


class ImportOptionsSections(Enum):
    AdvancedDisplay = 0
    Alias = 1
    Appearance = 2
    ChooseOneObject = 3
    ControlPointContextMenu = 4
    CursorToolTip = 5
    Display = 6
    File = 7
    General = 8
    Grid = 9
    ModelAid = 10
    Mouse = 11
    NeverRepeatCommands = 12
    ObjectContextMenu = 13
    SearchPath = 14
    ShortcutKey = 15
    Smarttrack = 16
    View = 17
    ViewportContextMenu = 18
    ToolPaletteSettings = 19
    Count = 20


class InstanceAttributeField:
    def __init__(self, key: str, prompt: str, defaultValue: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DefaultValue(self) -> str: ...
    @property
    def Key(self) -> str: ...
    @property
    def Prompt(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from ..DocObjects import Font
from ..Geometry import GeometryBase
from ..Display import ViewCaptureSettings
from ..DocObjects import ViewportInfo
from ..Display import RhinoViewport
from ..Display import DisplayPipeline
from ..Input.Custom import GetPoint
from ..DocObjects import RhinoObject
from ..FileIO import FileWriteOptions
from ..FileIO import FileReadOptions
from ..Geometry import Arc
from ..Geometry import Brep
from ..Geometry import Surface
from ..Geometry import Mesh
from ..Geometry import Curve
from ..Geometry import Transform
from ..PlugIns import PlugIn
class Interop:
    @staticmethod
    def CreateFromNativePointer(pGeometry: IntPtr) -> GeometryBase: ...
    def Equals(self, obj: Object) -> bool: ...
    @staticmethod
    def FileReadOptionsConstPointer(options: FileReadOptions) -> IntPtr: ...
    @staticmethod
    def FileWriteOptionsConstPointer(options: FileWriteOptions) -> IntPtr: ...
    @staticmethod
    def FontFromPointer(ptrManagedFont: IntPtr) -> Font: ...
    @staticmethod
    def FromOnBrep(source: Object) -> Brep: ...
    @staticmethod
    def FromOnCurve(source: Object) -> Curve: ...
    @staticmethod
    def FromOnMesh(source: Object) -> Mesh: ...
    @staticmethod
    def FromOnSurface(source: Object) -> Surface: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def NativeGeometryConstPointer(geometry: GeometryBase) -> IntPtr: ...
    @staticmethod
    def NativeGeometryNonConstPointer(geometry: GeometryBase) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(settings: ViewCaptureSettings) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(pipeline: DisplayPipeline) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(getPoint: GetPoint) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(viewport: RhinoViewport) -> IntPtr: ...
    @overload
    @staticmethod
    def NativeNonConstPointer(viewport: ViewportInfo) -> IntPtr: ...
    @staticmethod
    def NativeRhinoDocPointer(doc: RhinoDoc) -> IntPtr: ...
    @overload
    @staticmethod
    def NSFontFromFont(font: Font) -> IntPtr: ...
    @overload
    @staticmethod
    def NSFontFromFont(font: Font, pointSize: float) -> IntPtr: ...
    @staticmethod
    def PlugInPointer(plugin: PlugIn) -> IntPtr: ...
    @staticmethod
    def RhinoObjectConstPointer(rhinoObject: RhinoObject) -> IntPtr: ...
    @staticmethod
    def RhinoObjectFromPointer(pRhinoObject: IntPtr) -> RhinoObject: ...
    @staticmethod
    def ToIRhinoViewport(source: RhinoViewport) -> Object: ...
    @staticmethod
    def ToOnBrep(source: Brep) -> Object: ...
    @staticmethod
    def ToOnCurve(source: Curve) -> Object: ...
    @staticmethod
    def ToOnMesh(source: Mesh) -> Object: ...
    @staticmethod
    def ToOnSurface(source: Surface) -> Object: ...
    @staticmethod
    def ToOnXform(source: Transform) -> Object: ...
    def ToString(self) -> str: ...
    @staticmethod
    def TryCopyFromOnArc(source: Object) -> Tuple[bool, Arc]: ...
    @staticmethod
    def TryCopyToOnArc(source: Arc, destination: Object) -> bool: ...
    @staticmethod
    def ViewCaptureFromPointer(ptrViewCapture: IntPtr) -> ViewCaptureSettings: ...


class IPlatformServiceLocator:
    def GetService(self) -> T: ...


class IZooClientUtilities:
    def AskUserForLicense(self, verify: Object, parameters: ZooClientParameters) -> bool: ...
    def CheckInLicense(self, verify: Object, productId: Guid) -> bool: ...
    def CheckOutLicense(self, verify: Object, productId: Guid) -> bool: ...
    def ConvertLicense(self, verify: Object, productId: Guid) -> bool: ...
    def DeleteLicense(self, verify: Object, productId: Guid) -> bool: ...
    def Echo(self, verify: Object, message: str) -> str: ...
    @property
    def LoggedInUserAvatar(self) -> Image: ...
    @property
    def LoggedInUserName(self) -> str: ...
    @property
    def UserIsLoggedIn(self) -> bool: ...
    def GetCurrentTime(self) -> DateTime: ...
    def GetLicense(self, verify: Object, parameters: ZooClientParameters) -> bool: ...
    def GetLicenseStatus(self, verify: Object) -> Iterable[LicenseStatus]: ...
    def GetLicenseType(self, verify: Object, productId: Guid) -> int: ...
    def GetOneLicenseStatus(self, verify: Object, productId: Guid) -> LicenseStatus: ...
    def GetRegisteredOwnerInfo(self, verify: Object, productId: Guid, registeredOwner: str, registeredOrganization: str) -> Tuple[bool, str, str]: ...
    def Initialize(self, verify: Object) -> bool: ...
    def IsCheckOutEnabled(self, verify: Object) -> bool: ...
    def LicenseOptionsHandler(self, verify: Object, parameters: ZooClientParameters) -> bool: ...
    def LoginToCloudZoo(self) -> bool: ...
    def LogoutOfCloudZoo(self) -> bool: ...
    @overload
    def ReturnLicense(self, verify: Object, productId: Guid) -> bool: ...
    @overload
    def ReturnLicense(self, verify: Object, productPath: str, productId: Guid) -> bool: ...
    def ShowBuyLicenseUi(self, verify: Object, productId: Guid) -> None: ...
    def ShowLicenseValidationUi(self, verify: Object, cdkey: str) -> bool: ...
    def ShowRhinoExpiredMessage(self, mode: Mode, result: int) -> Tuple[bool, int]: ...


class LicenseStateChangedEventArgs:
    def __init__(self, callingRhinoCommonAllowed: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CallingRhinoCommonAllowed(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class LicenseTypes(Enum):
    Undefined = 0
    Standalone = 1
    ZooAutoDetect = 2
    ZooManualDetect = 3
    CloudZoo = 4


class LogMessageType(Enum):
    unknown = 0
    information = 1
    warning = 2
    error = 3
    assert_ = 4


class Mode(Enum):
    NormalMode = 0
    ViewerMode = 1
    BetaMode = 2
    InvalidMode = 100


from ..Geometry import Point3d
from ..Geometry import Vector3d
from ..DocObjects import ViewportInfo
from ..Geometry import GeometryBase
class NamedParametersEventArgs:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def Set(self, name: str, values: Iterable[GeometryBase]) -> None: ...
    @overload
    def Set(self, name: str, value: GeometryBase) -> None: ...
    @overload
    def Set(self, name: str, value: Color) -> None: ...
    @overload
    def Set(self, name: str, value: Vector3d) -> None: ...
    @overload
    def Set(self, name: str, value: float) -> None: ...
    @overload
    def Set(self, name: str, value: UInt32) -> None: ...
    @overload
    def Set(self, name: str, value: Point3d) -> None: ...
    @overload
    def Set(self, name: str, strings: Iterable[str]) -> None: ...
    @overload
    def Set(self, name: str, value: int) -> None: ...
    @overload
    def Set(self, name: str, value: str) -> None: ...
    @overload
    def Set(self, name: str, value: bool) -> None: ...
    def SetWindowHandle(self, name: str, value: IntPtr) -> None: ...
    def ToString(self) -> str: ...
    def TryGetBool(self, name: str) -> Tuple[bool, bool]: ...
    def TryGetColor(self, name: str) -> Tuple[bool, Color]: ...
    def TryGetDouble(self, name: str) -> Tuple[bool, float]: ...
    def TryGetGeometry(self, name: str) -> Tuple[bool, Iterable[GeometryBase]]: ...
    def TryGetInt(self, name: str) -> Tuple[bool, int]: ...
    def TryGetPoint(self, name: str) -> Tuple[bool, Point3d]: ...
    def TryGetRhinoObjects(self, key: str) -> Tuple[bool, Iterable[RhinoObject]]: ...
    def TryGetString(self, name: str) -> Tuple[bool, str]: ...
    def TryGetStrings(self, name: str) -> Tuple[bool, Iterable[str]]: ...
    def TryGetUnsignedInt(self, name: str) -> Tuple[bool, UInt32]: ...
    def TryGetVector(self, name: str) -> Tuple[bool, Vector3d]: ...
    def TryGetViewport(self, name: str) -> Tuple[bool, ViewportInfo]: ...
    def TryGetWindowHandle(self, name: str) -> Tuple[bool, IntPtr]: ...


class NotLicensedException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    def GetBaseException(self) -> Exception: ...
    def GetHashCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetType(self) -> Type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class PathPoint:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Location(self) -> PointF: ...
    @property
    def PointType(self) -> PointType: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Location.setter
    def Location(self, value: PointF) -> None: ...
    @PointType.setter
    def PointType(self, value: PointType) -> None: ...
    def ToString(self) -> str: ...


class Pen:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Dashed(self) -> bool: ...
    @property
    def Width(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class PointType(Enum):
    Move = 0
    Line = 1
    CubicBezier = 2
    Close = 3


class PythonCompiledCode:
    def Equals(self, obj: Object) -> bool: ...
    def Execute(self, scope: PythonScript) -> None: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from ..Commands import Command
class PythonScript:
    @staticmethod
    def AddRuntimeAssembly(assembly: Assembly) -> None: ...
    def Compile(self, script: str) -> PythonCompiledCode: ...
    def ContainsVariable(self, name: str) -> bool: ...
    @staticmethod
    def Create() -> PythonScript: ...
    def CreateTextEditorControl(self, script: str, helpcallback: Action) -> Object: ...
    def Equals(self, obj: Object) -> bool: ...
    def EvaluateExpression(self, statements: str, expression: str) -> Object: ...
    def ExecuteFile(self, path: str) -> bool: ...
    def ExecuteFileInScope(self, path: str) -> bool: ...
    def ExecuteScript(self, script: str) -> bool: ...
    @property
    def ContextId(self) -> int: ...
    @property
    def Output(self) -> Action: ...
    @property
    def ScriptContextCommand(self) -> Command: ...
    @property
    def ScriptContextDoc(self) -> Object: ...
    @property
    def SearchPaths() -> Iterable[str]: ...
    def GetHashCode(self) -> int: ...
    def GetStackTraceFromException(self, ex: Exception) -> str: ...
    def GetType(self) -> Type: ...
    def GetVariable(self, name: str) -> Object: ...
    def GetVariableNames(self) -> Iterable[str]: ...
    def RemoveVariable(self, name: str) -> None: ...
    @staticmethod
    def RuntimeAssemblies() -> Iterable[Assembly]: ...
    @ContextId.setter
    def ContextId(self, value: int) -> None: ...
    @Output.setter
    def Output(self, value: Action) -> None: ...
    @ScriptContextCommand.setter
    def ScriptContextCommand(self, value: Command) -> None: ...
    @ScriptContextDoc.setter
    def ScriptContextDoc(self, value: Object) -> None: ...
    @SearchPaths.setter
    def SearchPaths(value: Iterable[str]) -> None: ...
    def SetIntellisenseVariable(self, name: str, value: Object) -> None: ...
    def SetupScriptContext(self, doc: Object) -> None: ...
    def SetVariable(self, name: str, value: Object) -> None: ...
    def ToString(self) -> str: ...


class RdkNotLoadedException:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    def GetBaseException(self) -> Exception: ...
    def GetHashCode(self) -> int: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetType(self) -> Type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class RiskyAction:
    def __init__(self, description: str, file: str, member: str, line: int): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class SendLogMessageToCloudDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, msg_type: LogMessageType, sClass: str, sDesc: str, sMessage: str, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, msg_type: LogMessageType, sClass: str, sDesc: str, sMessage: str) -> None: ...
    def ToString(self) -> str: ...


class SetClipRectProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, left: int, top: int, right: int, bottom: int, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, int, int, int, int]: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, left: int, top: int, right: int, bottom: int, result: IAsyncResult) -> Tuple[int, int, int, int]: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, left: int, top: int, right: int, bottom: int) -> Tuple[int, int, int, int]: ...
    def ToString(self) -> str: ...


class Skin:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ActiveSkin() -> Skin: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from ..DocObjects import TextObject
from ..DocObjects import InstanceDefinition
class TextFields:
    @overload
    @staticmethod
    def Area(id: str) -> float: ...
    @overload
    @staticmethod
    def Area(id: str, unitSystem: str) -> float: ...
    @staticmethod
    def BlockAttributeText(key: str, prompt: str, defaultValue: str) -> str: ...
    @staticmethod
    def BlockInstanceCount(instanceDefinitionNameOrId: str) -> int: ...
    @staticmethod
    def BlockInstanceName(blockId: str) -> str: ...
    @overload
    @staticmethod
    def CurveLength(id: str) -> float: ...
    @overload
    @staticmethod
    def CurveLength(id: str, unitSystem: str) -> float: ...
    @overload
    @staticmethod
    def Date() -> str: ...
    @overload
    @staticmethod
    def Date(dateFormat: str) -> str: ...
    @overload
    @staticmethod
    def Date(dateFormat: str, languageId: str) -> str: ...
    @overload
    @staticmethod
    def DateModified() -> str: ...
    @overload
    @staticmethod
    def DateModified(dateFormat: str) -> str: ...
    @overload
    @staticmethod
    def DateModified(dateFormat: str, languageId: str) -> str: ...
    @staticmethod
    def DetailScale(detailId: str, scaleFormat: str) -> str: ...
    @staticmethod
    def DocumentText(key: str) -> str: ...
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FileName() -> str: ...
    @overload
    @staticmethod
    def FileName(options: str) -> str: ...
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(str: str) -> Iterable[InstanceAttributeField]: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(text: TextObject) -> Iterable[InstanceAttributeField]: ...
    @overload
    @staticmethod
    def GetInstanceAttributeFields(idef: InstanceDefinition) -> Iterable[InstanceAttributeField]: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def LayerName(layerId: str) -> str: ...
    @overload
    @staticmethod
    def LayoutUserText(key: str) -> str: ...
    @overload
    @staticmethod
    def LayoutUserText(layoutId: str, key: str) -> str: ...
    @staticmethod
    def ModelUnits() -> str: ...
    @staticmethod
    def Notes() -> str: ...
    @staticmethod
    def NumPages() -> int: ...
    @staticmethod
    def ObjectLayer(id: str) -> str: ...
    @overload
    @staticmethod
    def ObjectName() -> str: ...
    @overload
    @staticmethod
    def ObjectName(id: str) -> str: ...
    @staticmethod
    def PageHeight() -> float: ...
    @overload
    @staticmethod
    def PageName() -> str: ...
    @overload
    @staticmethod
    def PageName(id: str) -> str: ...
    @staticmethod
    def PageNumber() -> int: ...
    @staticmethod
    def PageWidth() -> float: ...
    @staticmethod
    def PaperName() -> str: ...
    @staticmethod
    def PointCoordinate(pointId: str, axis: str) -> str: ...
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UserText(id: str, key: str) -> str: ...
    @overload
    @staticmethod
    def UserText(id: str, key: str, prompt: str) -> str: ...
    @overload
    @staticmethod
    def UserText(id: str, key: str, prompt: str, defaultValue: str) -> str: ...
    @overload
    @staticmethod
    def Volume(id: str) -> float: ...
    @overload
    @staticmethod
    def Volume(id: str, opt: str) -> float: ...
    @overload
    @staticmethod
    def Volume(id: str, unitSystem: str, allowOpenObjects: str) -> float: ...


from ..Geometry import Arc
class VectorArcProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, argb: int, thickness: Single, dashed: int, arc: Arc, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, Arc]: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, arc: Arc, result: IAsyncResult) -> Tuple[Arc]: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, argb: int, thickness: Single, dashed: int, arc: Arc) -> Tuple[Arc]: ...
    def ToString(self) -> str: ...


class VectorBitmapProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, hBmp: IntPtr, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, hBmp: IntPtr, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float) -> None: ...
    def ToString(self) -> str: ...


class VectorClipPathProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, count: int, points: IntPtr, asBeziers: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, count: int, points: IntPtr, asBeziers: int) -> None: ...
    def ToString(self) -> str: ...


class VectorFillPolygonProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, argb: int, count: int, points: IntPtr, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, argb: int, count: int, points: IntPtr) -> None: ...
    def ToString(self) -> str: ...


class VectorGradientProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, pEngine: IntPtr, pHatch: IntPtr, strokeWidth: Single, pHatchPattern: IntPtr, gradientCount: int, colors: IntPtr, stops: IntPtr, points: IntPtr, linearGradient: int, boundaryColor: int, effectiveHatchScale: float, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, pEngine: IntPtr, pHatch: IntPtr, strokeWidth: Single, pHatchPattern: IntPtr, gradientCount: int, colors: IntPtr, stops: IntPtr, points: IntPtr, linearGradient: int, boundaryColor: int, effectiveHatchScale: float) -> None: ...
    def ToString(self) -> str: ...


class VectorPathProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, begin: int, argb: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, begin: int, argb: int) -> None: ...
    def ToString(self) -> str: ...


class VectorPointProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, style: int, screenX: Single, screenY: Single, fillArgb: int, strokeArgb: int, diameterPixels: Single, innerDiameterPixels: Single, strokeWidthPixels: Single, rotationRadians: Single, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, style: int, screenX: Single, screenY: Single, fillArgb: int, strokeArgb: int, diameterPixels: Single, innerDiameterPixels: Single, strokeWidthPixels: Single, rotationRadians: Single) -> None: ...
    def ToString(self) -> str: ...


class VectorPolylineProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, argb: int, thickness: Single, dashed: int, count: int, points: IntPtr, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, argb: int, thickness: Single, dashed: int, count: int, points: IntPtr) -> None: ...
    def ToString(self) -> str: ...


class VectorRoundedRectProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, centerX: Single, centerY: Single, pixelWidth: Single, pixelHeight: Single, cornerRadius: Single, strokeColor: int, strokeWidth: Single, fillColor: int, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, centerX: Single, centerY: Single, pixelWidth: Single, pixelHeight: Single, cornerRadius: Single, strokeColor: int, strokeWidth: Single, fillColor: int) -> None: ...
    def ToString(self) -> str: ...


class VectorStringProc:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, constPtrString: IntPtr, argbTextColor: int, x: float, y: float, angle: Single, alignment: int, heightPixels: Single, constPtrFont: IntPtr, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, constPtrString: IntPtr, argbTextColor: int, x: float, y: float, angle: Single, alignment: int, heightPixels: Single, constPtrFont: IntPtr) -> None: ...
    def ToString(self) -> str: ...


class ViewCaptureWriter:
    def __init__(self, dpi: float, pageSize: Size): ...
    def Draw(self, constPtrPrintInfo: IntPtr, doc: RhinoDoc) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from ..PlugIns import LicenseCapabilities
from ..PlugIns import ValidateProductKeyDelegate
from ..PlugIns import OnLeaseChangedDelegate
from ..PlugIns import VerifyLicenseKeyDelegate
from ..PlugIns import VerifyPreviousVersionLicenseDelegate
from ..PlugIns import LicenseData
class ZooClientParameters:
    def __init__(self, productGuid: Guid, licenseGuid: Guid, productTitle: str, productBuildType: int, capabilities: LicenseCapabilities, licenseEntryTextMask: str, productPath: str, parentWindow: Object, selectedLicenseType: LicenseTypes, validateProductKey: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Capabilities(self) -> LicenseCapabilities: ...
    @property
    def LicenseEntryTextMask(self) -> str: ...
    @property
    def LicenseGuid(self) -> Guid: ...
    @property
    def OnLeaseChanged(self) -> OnLeaseChangedDelegate: ...
    @property
    def ParentWindow(self) -> Object: ...
    @property
    def ProductBuildType(self) -> int: ...
    @property
    def ProductGuid(self) -> Guid: ...
    @property
    def ProductPath(self) -> str: ...
    @property
    def ProductTitle(self) -> str: ...
    @property
    def SelectedLicenseType(self) -> LicenseTypes: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Capabilities.setter
    def Capabilities(self, value: LicenseCapabilities) -> None: ...
    @SelectedLicenseType.setter
    def SelectedLicenseType(self, value: LicenseTypes) -> None: ...
    def ToString(self) -> str: ...
    def VerifyLicenseKey(self, licenseKey: str, validationCode: str, validationCodeInstallDate: DateTime, gracePeriodExpired: bool) -> Tuple[ValidateResult, LicenseData]: ...
    def VerifyPreviousVersionLicense(self, license: str, previousVersionLicense: str) -> Tuple[bool, str]: ...
