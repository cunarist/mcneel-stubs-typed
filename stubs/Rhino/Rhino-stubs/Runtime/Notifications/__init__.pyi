from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum
from System import *
from System.Drawing import *



class ButtonType(Enum):
    CancelOrClose = 0
    Confirm = 1
    Alternate = 2


class IAssemblyRestrictedObject:
    @overload
    def Editable(self) -> bool: ...


class Notification:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, allowedAssemblies: Iterable[Assembly]): ...
    @overload
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    def Editable(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def ExecuteAssemblyProtectedCode(action: Action) -> None: ...
    @overload
    @staticmethod
    def ExecuteAssemblyProtectedCode(func: Func) -> TResult: ...
    @overload
    @property
    def AllowedAssemblies(self) -> ICollection: ...
    @overload
    @property
    def AlternateButtonTitle(self) -> str: ...
    @overload
    @property
    def ButtonClicked(self) -> Action: ...
    @overload
    @property
    def CancelButtonTitle(self) -> str: ...
    @overload
    @property
    def ConfirmButtonTitle(self) -> str: ...
    @overload
    @property
    def DateUpdated(self) -> DateTime: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Item(self, key: str) -> str: ...
    @overload
    @property
    def Message(self) -> str: ...
    @overload
    @property
    def MetadataCopy(self) -> IDictionary: ...
    @overload
    @property
    def SeverityLevel(self) -> Severity: ...
    @overload
    @property
    def ShowEventId(self) -> Nullable: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HideModal(self) -> None: ...
    @overload
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    def RemoveMetadata(self, key: str) -> bool: ...
    @overload
    @AlternateButtonTitle.setter
    def AlternateButtonTitle(self, value: str) -> None: ...
    @overload
    @ButtonClicked.setter
    def ButtonClicked(self, value: Action) -> None: ...
    @overload
    @CancelButtonTitle.setter
    def CancelButtonTitle(self, value: str) -> None: ...
    @overload
    @ConfirmButtonTitle.setter
    def ConfirmButtonTitle(self, value: str) -> None: ...
    @overload
    @Description.setter
    def Description(self, value: str) -> None: ...
    @overload
    @Item.setter
    def Item(self, key: str, value: str) -> None: ...
    @overload
    @Message.setter
    def Message(self, value: str) -> None: ...
    @overload
    @SeverityLevel.setter
    def SeverityLevel(self, value: Severity) -> None: ...
    @overload
    @Title.setter
    def Title(self, value: str) -> None: ...
    @overload
    def ShowModal(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class NotificationButtonClickedArgs:
    @overload
    def __init__(self, notification: Notification, buttonClicked: ButtonType): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def ButtonClicked(self) -> ButtonType: ...
    @overload
    @property
    def Notification(self) -> Notification: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class NotificationCenter:
    Notifications: TrulyObservableOrderedSet
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class Severity(Enum):
    Debug = 0
    Info = 1
    Warning = 2
    Serious = 3
    Critical = 4


