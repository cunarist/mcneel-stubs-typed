from typing import Tuple, Iterable, Iterator, overload
from enum import Enum



class CustomRenderSaveFileTypes:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def RegisterFileType(self, extensions: Iterable[str], description: str, saveFileHandler: SaveFileHandler) -> None: ...
    def ToString(self) -> str: ...


class DescriptionType(Enum):
    Organization = 0
    Address = 1
    Country = 2
    Phone = 3
    WebSite = 4
    Email = 5
    UpdateUrl = 6
    Fax = 7
    Icon = 8


from ..Geometry import Point3d
from ..UI import MouseButton
from ..Geometry import Ray3d
class DigitizerPlugIn(PlugIn):
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    def GetCommands(self) -> Iterable[Command]: ...
    def GetHashCode(self) -> int: ...
    def GetPlugInObject(self) -> Object: ...
    def GetType(self) -> Type: ...
    def Icon(self, size: Size) -> Bitmap: ...
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    def SaveSettings(self) -> None: ...
    def SendPoint(self, point: Point3d, mousebuttons: MouseButton, shiftKey: bool, controlKey: bool) -> None: ...
    def SendRay(self, ray: Ray3d, mousebuttons: MouseButton, shiftKey: bool, controlKey: bool) -> None: ...
    def ToString(self) -> str: ...


class FileExportPlugIn(PlugIn):
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    def GetCommands(self) -> Iterable[Command]: ...
    def GetHashCode(self) -> int: ...
    def GetPlugInObject(self) -> Object: ...
    def GetType(self) -> Type: ...
    def Icon(self, size: Size) -> Bitmap: ...
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    def SaveSettings(self) -> None: ...
    def ToString(self) -> str: ...


class FileImportPlugIn(PlugIn):
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    def GetCommands(self) -> Iterable[Command]: ...
    def GetHashCode(self) -> int: ...
    def GetPlugInObject(self) -> Object: ...
    def GetType(self) -> Type: ...
    def Icon(self, size: Size) -> Bitmap: ...
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    def SaveSettings(self) -> None: ...
    def ToString(self) -> str: ...


class FileTypeList:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, description: str, extension: str): ...
    @overload
    def __init__(self, description: str, extension: str, showOptionsButtonInFileDialog: bool): ...
    @overload
    def AddFileType(self, description: str, extension: str) -> int: ...
    @overload
    def AddFileType(self, description: str, extensions: Iterable[str]) -> int: ...
    @overload
    def AddFileType(self, description: str, extension: str, showOptionsButtonInFileDialog: bool) -> int: ...
    @overload
    def AddFileType(self, description: str, extension1: str, extension2: str) -> int: ...
    @overload
    def AddFileType(self, description: str, extensions: Iterable[str], showOptionsButtonInFileDialog: bool) -> int: ...
    @overload
    def AddFileType(self, description: str, extension1: str, extension2: str, showOptionsButtonInFileDialog: bool) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class LicenseBuildType(Enum):
    Unspecified = 0
    Release = 100
    Evaluation = 200
    Beta = 300


class LicenseCapabilities(Enum):
    NoCapabilities = 0
    CanBePurchased = 1
    CanBeSpecified = 2
    CanBeEvaluated = 4
    EvaluationIsExpired = 8
    SupportsRhinoAccounts = 16
    SupportsStandalone = 32
    SupportsZooPerUser = 64
    SupportsZooPerCore = 128
    SupportsLicenseDiscovery = 256


class LicenseChangedEventArgs:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class LicenseData:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: Nullable): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: Nullable, productIcon: Icon): ...
    @overload
    def __init__(self, productLicense: str, serialNumber: str, licenseTitle: str, buildType: LicenseBuildType, licenseCount: int, expirationDate: Nullable, productIcon: Icon, requiresOnlineValidation: bool, isUpgradeFromPreviousVersion: bool): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def BuildType(self) -> LicenseBuildType: ...
    @property
    def DateToExpire(self) -> Nullable: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def IsUpgradeFromPreviousVersion(self) -> bool: ...
    @property
    def LicenseCount(self) -> int: ...
    @property
    def LicenseExpires(self) -> bool: ...
    @property
    def LicenseTitle(self) -> str: ...
    @property
    def ProductIcon(self) -> Icon: ...
    @property
    def ProductLicense(self) -> str: ...
    @property
    def RequiresOnlineValidation(self) -> bool: ...
    @property
    def SerialNumber(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def IsNotValid(data: LicenseData) -> bool: ...
    @overload
    def IsValid(self) -> bool: ...
    @overload
    @staticmethod
    def IsValid(data: LicenseData) -> bool: ...
    @overload
    def IsValid(self, ignoreExpirationDate: bool) -> bool: ...
    @BuildType.setter
    def BuildType(self, value: LicenseBuildType) -> None: ...
    @DateToExpire.setter
    def DateToExpire(self, value: Nullable) -> None: ...
    @ErrorMessage.setter
    def ErrorMessage(self, value: str) -> None: ...
    @IsUpgradeFromPreviousVersion.setter
    def IsUpgradeFromPreviousVersion(self, value: bool) -> None: ...
    @LicenseCount.setter
    def LicenseCount(self, value: int) -> None: ...
    @LicenseTitle.setter
    def LicenseTitle(self, value: str) -> None: ...
    @ProductIcon.setter
    def ProductIcon(self, value: Icon) -> None: ...
    @ProductLicense.setter
    def ProductLicense(self, value: str) -> None: ...
    @RequiresOnlineValidation.setter
    def RequiresOnlineValidation(self, value: bool) -> None: ...
    @SerialNumber.setter
    def SerialNumber(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class LicenseIdAttribute:
    def __init__(self, value: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def TypeId(self) -> Object: ...
    @property
    def Value(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsDefaultAttribute(self) -> bool: ...
    def Match(self, obj: Object) -> bool: ...
    def ToString(self) -> str: ...


class LicenseLease:
    @overload
    def __init__(self, unmanagedPointer: IntPtr): ...
    @overload
    def __init__(self, productId: str, groupName: str, groupId: str, userName: str, userId: str, productTitle: str, productVersion: str, productEdition: str, leaseId: str, iat: DateTime, exp: DateTime): ...
    @overload
    def __init__(self, productId: str, groupName: str, groupId: str, userName: str, userId: str, productTitle: str, productVersion: str, productEdition: str, leaseId: str, iat: DateTime, exp: DateTime, renewable_until: DateTime): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Expiration(self) -> DateTime: ...
    @property
    def GroupId(self) -> str: ...
    @property
    def GroupName(self) -> str: ...
    @property
    def IssuedAt(self) -> DateTime: ...
    @property
    def LeaseId(self) -> str: ...
    @property
    def ProductEdition(self) -> str: ...
    @property
    def ProductId(self) -> str: ...
    @property
    def ProductTitle(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RenewableUntil(self) -> Nullable: ...
    @property
    def UserId(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class LicenseLeaseChangedEventArgs:
    def __init__(self, lease: LicenseLease): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Lease(self) -> LicenseLease: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class LicenseStatus:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def BuildType(self) -> LicenseBuildType: ...
    @property
    def CheckOutExpirationDate(self) -> Nullable: ...
    @property
    def CloudZooLeaseExpiration(self) -> Nullable: ...
    @property
    def CloudZooLeaseIsValid(self) -> bool: ...
    @property
    def ExpirationDate(self) -> Nullable: ...
    @property
    def LicenseTitle(self) -> str: ...
    @property
    def LicenseType(self) -> LicenseType: ...
    @property
    def PluginId(self) -> Guid: ...
    @property
    def ProductIcon(self) -> Icon: ...
    @property
    def ProductId(self) -> Guid: ...
    @property
    def RegisteredOrganization(self) -> str: ...
    @property
    def RegisteredOwner(self) -> str: ...
    @property
    def SerialNumber(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @BuildType.setter
    def BuildType(self, value: LicenseBuildType) -> None: ...
    @CheckOutExpirationDate.setter
    def CheckOutExpirationDate(self, value: Nullable) -> None: ...
    @CloudZooLeaseExpiration.setter
    def CloudZooLeaseExpiration(self, value: Nullable) -> None: ...
    @CloudZooLeaseIsValid.setter
    def CloudZooLeaseIsValid(self, value: bool) -> None: ...
    @ExpirationDate.setter
    def ExpirationDate(self, value: Nullable) -> None: ...
    @LicenseTitle.setter
    def LicenseTitle(self, value: str) -> None: ...
    @LicenseType.setter
    def LicenseType(self, value: LicenseType) -> None: ...
    @PluginId.setter
    def PluginId(self, value: Guid) -> None: ...
    @ProductIcon.setter
    def ProductIcon(self, value: Icon) -> None: ...
    @ProductId.setter
    def ProductId(self, value: Guid) -> None: ...
    @RegisteredOrganization.setter
    def RegisteredOrganization(self, value: str) -> None: ...
    @RegisteredOwner.setter
    def RegisteredOwner(self, value: str) -> None: ...
    @SerialNumber.setter
    def SerialNumber(self, value: str) -> None: ...
    def ToString(self) -> str: ...


class LicenseType(Enum):
    Standalone = 0
    Network = 1
    NetworkLoanedOut = 2
    NetworkCheckedOut = 3
    CloudZoo = 4


from ..Runtime import Mode
class LicenseUtils:
    @overload
    @staticmethod
    def AskUserForLicense(productType: int, standAlone: bool, parentWindow: Object, textMask: str, validateProductKeyDelegate: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, product_path: str, product_title: str, pluginId: Guid, licenseId: Guid, capabilities: LicenseCapabilities) -> bool: ...
    @overload
    @staticmethod
    def AskUserForLicense(productType: int, standAlone: bool, parentWindow: Object, textMask: str, validateProductKeyDelegate: ValidateProductKeyDelegate, onLeaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate, product_path: str, product_title: str, pluginId: Guid, licenseId: Guid, capabilities: LicenseCapabilities) -> bool: ...
    @staticmethod
    def CheckInLicense(productId: Guid) -> bool: ...
    @staticmethod
    def CheckOutLicense(productId: Guid) -> bool: ...
    @staticmethod
    def ConvertLicense(productId: Guid) -> bool: ...
    @staticmethod
    def DeleteLicense(productId: Guid) -> bool: ...
    @staticmethod
    def Echo(message: str) -> str: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetLicense(validateProductKeyDelegate: ValidateProductKeyDelegate, leaseChangedDelegate: OnLeaseChangedDelegate, product_type: int, capabilities: int, textMask: str, product_path: str, product_title: str, pluginId: Guid, licenseId: Guid) -> bool: ...
    @overload
    @staticmethod
    def GetLicense(validateProductKeyDelegate: ValidateProductKeyDelegate, leaseChangedDelegate: OnLeaseChangedDelegate, verifyLicenseKeyDelegate: VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate: VerifyPreviousVersionLicenseDelegate, product_type: int, capabilities: int, textMask: str, product_path: str, product_title: str, pluginId: Guid, licenseId: Guid) -> bool: ...
    @staticmethod
    def GetLicenseCapabilities(filter: int) -> LicenseCapabilities: ...
    @staticmethod
    def GetLicenseStatus() -> Iterable[LicenseStatus]: ...
    @staticmethod
    def GetLicenseType(productId: Guid) -> int: ...
    @staticmethod
    def GetOneLicenseStatus(productid: Guid) -> LicenseStatus: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def Initialize() -> bool: ...
    @staticmethod
    def IsCheckOutEnabled() -> bool: ...
    @staticmethod
    def LicenseOptionsHandler(pluginId: Guid, licenseId: Guid, productTitle: str, standAlone: bool) -> bool: ...
    @staticmethod
    def LoginToCloudZoo() -> bool: ...
    @staticmethod
    def LogoutOfCloudZoo() -> bool: ...
    @staticmethod
    def ReturnLicense(productId: Guid) -> bool: ...
    @staticmethod
    def ShowBuyLicenseUi(productId: Guid) -> None: ...
    @staticmethod
    def ShowLicenseValidationUi(cdkey: str) -> bool: ...
    @staticmethod
    def ShowRhinoExpiredMessage(mode: Mode, result: int) -> Tuple[bool, int]: ...
    def ToString(self) -> str: ...


class LoadPlugInResult(Enum):
    Success = 0
    SuccessAlreadyLoaded = 1
    ErrorUnknown = 2


class LoadReturnCode(Enum):
    ErrorShowDialog = 0
    Success = 1
    ErrorNoDialog = -1


class OnLeaseChangedDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, args: LicenseLeaseChangedEventArgs, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, Icon]: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> Tuple[Icon]: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, args: LicenseLeaseChangedEventArgs) -> Tuple[Icon]: ...
    def ToString(self) -> str: ...


class PlugIn:
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    @staticmethod
    def add_UnknownUserData(value: EventHandler) -> None: ...
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def Find(pluginAssembly: Assembly) -> PlugIn: ...
    @overload
    @staticmethod
    def Find(plugInId: Guid) -> PlugIn: ...
    @staticmethod
    def FlushSettingsSavedQueue() -> None: ...
    @property
    def AskOnLoadProtection() -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def InstalledPlugInCount() -> int: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    def GetCommands(self) -> Iterable[Command]: ...
    @staticmethod
    def GetEnglishCommandNames(pluginId: Guid) -> Iterable[str]: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def GetInstalledPlugInFolders() -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames() -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames(typeFilter: PlugInType, loaded: bool, unloaded: bool) -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugInNames(typeFilter: PlugInType, loaded: bool, unloaded: bool, localizedPlugInName: bool) -> Iterable[str]: ...
    @overload
    @staticmethod
    def GetInstalledPlugIns() -> Dictionary: ...
    @overload
    @staticmethod
    def GetInstalledPlugIns(localizedPlugInName: bool) -> Dictionary: ...
    @staticmethod
    def GetLoadProtection(pluginId: Guid) -> Tuple[bool, bool]: ...
    @staticmethod
    def GetPlugInInfo(pluginId: Guid) -> PlugInInfo: ...
    def GetPlugInObject(self) -> Object: ...
    @staticmethod
    def GetPluginSettings(plugInId: Guid, load: bool) -> PersistentSettings: ...
    def GetType(self) -> Type: ...
    def Icon(self, size: Size) -> Bitmap: ...
    @staticmethod
    def IdFromName(pluginName: str) -> Guid: ...
    @staticmethod
    def IdFromPath(pluginPath: str) -> Guid: ...
    @staticmethod
    def LoadComputeExtensionPlugins() -> None: ...
    @overload
    @staticmethod
    def LoadPlugIn(pluginId: Guid) -> bool: ...
    @overload
    @staticmethod
    def LoadPlugIn(path: str) -> Tuple[LoadPlugInResult, Guid]: ...
    @overload
    @staticmethod
    def LoadPlugIn(pluginId: Guid, loadQuietly: bool, forceLoad: bool) -> bool: ...
    @staticmethod
    def NameFromPath(pluginPath: str) -> str: ...
    @staticmethod
    def PathFromId(pluginId: Guid) -> str: ...
    @staticmethod
    def PathFromName(pluginName: str) -> str: ...
    @staticmethod
    def PlugInExists(id: Guid) -> Tuple[bool, bool, bool]: ...
    @staticmethod
    def RaiseOnPlugInSettingsSavedEvent() -> None: ...
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    @staticmethod
    def remove_UnknownUserData(value: EventHandler) -> None: ...
    @staticmethod
    def SavePluginSettings(plugInId: Guid) -> None: ...
    def SaveSettings(self) -> None: ...
    @AskOnLoadProtection.setter
    def AskOnLoadProtection(value: bool) -> None: ...
    @staticmethod
    def SetLoadProtection(pluginId: Guid, loadSilently: bool) -> None: ...
    def ToString(self) -> str: ...


class PlugInDescriptionAttribute:
    def __init__(self, descriptionType: DescriptionType, value: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DescriptionType(self) -> DescriptionType: ...
    @property
    def TypeId(self) -> Object: ...
    @property
    def Value(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsDefaultAttribute(self) -> bool: ...
    def Match(self, obj: Object) -> bool: ...
    def ToString(self) -> str: ...


class PlugInInfo:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Address(self) -> str: ...
    @property
    def CommandNames(self) -> Iterable[str]: ...
    @property
    def Country(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Email(self) -> str: ...
    @property
    def Fax(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FileTypeDescriptions(self) -> Iterable[str]: ...
    @property
    def FileTypeExtensions(self) -> Iterable[str]: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDotNet(self) -> bool: ...
    @property
    def IsLoaded(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Organization(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def PlugInLoadTime(self) -> PlugInLoadTime: ...
    @property
    def PlugInType(self) -> PlugInType: ...
    @property
    def RegistryPath(self) -> str: ...
    @property
    def ShipsWithRhino(self) -> bool: ...
    @property
    def UpdateUrl(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WebSite(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Icon(self, size: Size) -> Bitmap: ...
    def IsLoadProtected(self) -> Tuple[bool, bool]: ...
    def ToString(self) -> str: ...


class PlugInLoadTime(Enum):
    Disabled = 0
    AtStartup = 1
    WhenNeeded = 2
    WhenNeededIgnoreDockingBars = 6
    WhenNeededOrOptionsDialog = 10
    WhenNeededOrTabbedDockBar = 18


class PlugInType(Enum):
    # None = 0
    Render = 1
    FileImport = 2
    FileExport = 4
    Digitizer = 8
    Utility = 16
    DisplayPipeline = 32
    DisplayEngine = 64
    Any = 127


from ..Render import RenderWindow
class PreviewNotification:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def NotifyIntermediateUpdate(self, rw: RenderWindow) -> None: ...
    def ToString(self) -> str: ...


class PreviewRenderTypes(Enum):
    # None = 0
    ThreeSeparateImages = 1
    SingleImage = 2
    Progressive = 3


class RenderFeature(Enum):
    Materials = 0
    Environments = 1
    Textures = 2
    PostEffects = 3
    Sun = 4
    CustomRenderMeshes = 5
    Decals = 6
    GroundPlane = 7
    SkyLight = 8
    CustomDecalProperties = 9
    LinearWorkflow = 10
    Exposure = 11
    ShadowOnlyGroundPlane = 12
    RenderBlowup = 13
    RenderWindow = 14
    RenderInWindow = 15
    FocalBlur = 17
    RenderArctic = 18
    RenderViewSource = 19
    CustomSkylightEnvironment = 20
    CustomReflectionEnvironment = 21
    RenderChannels = 22
    LightMaterials = 23


from ..DocObjects import Material
class RenderPlugIn(PlugIn):
    def add_SettingsSaved(self, value: EventHandler) -> None: ...
    def CommandSettings(self, name: str) -> PersistentSettings: ...
    @staticmethod
    def CurrentRendererSupportsFeature(feature: RenderFeature) -> bool: ...
    def EnableAssignMaterialButton(self) -> bool: ...
    def EnableCreateMaterialButton(self) -> bool: ...
    def EnableEditMaterialButton(self, doc: RhinoDoc, material: Material) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Description(self) -> str: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LicenseId(self) -> Guid: ...
    @property
    def LoadAtStartup(self) -> bool: ...
    @property
    def LoadTime(self) -> PlugInLoadTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def PerferBasicContent(self) -> bool: ...
    @property
    def Settings(self) -> PersistentSettings: ...
    @property
    def SettingsDirectory(self) -> str: ...
    @property
    def SettingsDirectoryAllUsers(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def WindowPositionSettings(self) -> PersistentSettings: ...
    def GetCommands(self) -> Iterable[Command]: ...
    def GetHashCode(self) -> int: ...
    def GetPlugInObject(self) -> Object: ...
    def GetRenderSettingsSections(self) -> List: ...
    def GetType(self) -> Type: ...
    def Icon(self, size: Size) -> Bitmap: ...
    def OnAssignMaterial(self, parent: IntPtr, doc: RhinoDoc, material: Material) -> Tuple[bool, Material]: ...
    def OnCreateMaterial(self, parent: IntPtr, doc: RhinoDoc, material: Material) -> Tuple[bool, Material]: ...
    def OnEditMaterial(self, parent: IntPtr, doc: RhinoDoc, material: Material) -> Tuple[bool, Material]: ...
    def remove_SettingsSaved(self, value: EventHandler) -> None: ...
    def RenderSettingsCustomSections(self, sections: List) -> None: ...
    def SaveSettings(self) -> None: ...
    @PerferBasicContent.setter
    def PerferBasicContent(self, value: bool) -> None: ...
    def SunCustomSections(self, sections: List) -> None: ...
    def ToString(self) -> str: ...


from ..Render import RenderWindow
class SaveFileHandler:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, fileName: str, includeAlpha: bool, renderWindow: RenderWindow, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, fileName: str, includeAlpha: bool, renderWindow: RenderWindow) -> bool: ...
    def ToString(self) -> str: ...


class UnknownUserDataEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def PlugInId(self) -> Guid: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class ValidateProductKeyDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, productKey: str, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, LicenseData]: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> Tuple[ValidateResult, LicenseData]: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, productKey: str) -> Tuple[ValidateResult, LicenseData]: ...
    def ToString(self) -> str: ...


class ValidateResult(Enum):
    ErrorShowMessage = 0
    Success = 1
    ErrorHideMessage = -1


class VerifyLicenseKeyDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, licenseKey: str, validationCode: str, validationCodeInstallDate: DateTime, gracePeriodExpired: bool, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, LicenseData]: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> Tuple[ValidateResult, LicenseData]: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, licenseKey: str, validationCode: str, validationCodeInstallDate: DateTime, gracePeriodExpired: bool) -> Tuple[ValidateResult, LicenseData]: ...
    def ToString(self) -> str: ...


class VerifyPreviousVersionLicenseDelegate:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, license: str, previousVersionLicense: str, callback: AsyncCallback, object: Object) -> Tuple[IAsyncResult, str]: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> Tuple[bool, str]: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, license: str, previousVersionLicense: str) -> Tuple[bool, str]: ...
    def ToString(self) -> str: ...


class WriteFileResult(Enum):
    Failure = 0
    Success = 1
    Cancel = -1
