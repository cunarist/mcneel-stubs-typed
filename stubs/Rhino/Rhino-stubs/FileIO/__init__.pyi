from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class AsciiEol(Enum):
    Crlf = 0
    Lf = 1
    Cr = 2


class BinaryArchiveException:
    @overload
    def __init__(self, message: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Data(self) -> IDictionary: ...
    @overload
    @property
    def HelpLink(self) -> str: ...
    @overload
    @property
    def HResult(self) -> int: ...
    @overload
    @property
    def InnerException(self) -> Exception: ...
    @overload
    @property
    def Message(self) -> str: ...
    @overload
    @property
    def Source(self) -> str: ...
    @overload
    @property
    def StackTrace(self) -> str: ...
    @overload
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @HelpLink.setter
    def HelpLink(self) -> MutableSequence[str]: ...
    @overload
    @Source.setter
    def Source(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class BinaryArchiveFile:
    @overload
    def __init__(self, filename: str, mode: BinaryArchiveMode): ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Reader(self) -> BinaryArchiveReader: ...
    @overload
    @property
    def Writer(self) -> BinaryArchiveWriter: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Open(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class BinaryArchiveMode(Enum):
    Unknown = 0
    Read = 1
    Write = 2
    ReadWrite = 3
    Read3dm = 5
    Write3dm = 6


from ..Collections import ArchivableDictionary
from ..DocObjects import ObjRef
from ..Geometry import Interval
from ..Geometry import Point2d
from ..Geometry import Point3d
from ..Geometry import Point4d
from ..Geometry import Vector2d
from ..Geometry import Vector3d
from ..Geometry import BoundingBox
from ..Geometry import Ray3d
from ..Geometry import Transform
from ..Geometry import Plane
from ..Geometry import Line
from ..Geometry import Point3f
from ..Geometry import Vector3f
from ..Geometry import MeshingParameters
from ..Geometry import GeometryBase
from ..Render import RenderSettings
class BinaryArchiveReader:
    @overload
    def AtEnd(self) -> bool: ...
    @overload
    def BeginRead3dmChunk(self) -> Tuple[bool, UInt32, Int64]: ...
    @overload
    def BeginRead3dmChunk(self, expectedTypeCode: UInt32) -> Tuple[bool, int, int]: ...
    @overload
    def Dump3dmChunk(self, log: TextLog) -> UInt32: ...
    @overload
    def EnableCRCCalculation(self, enable: bool) -> bool: ...
    @overload
    def EndRead3dmChunk(self, suppressPartiallyReadChunkWarning: bool) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Archive3dmVersion(self) -> int: ...
    @overload
    @property
    def CurrentPosition(self) -> UInt64: ...
    @overload
    @property
    def ReadErrorOccured(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Read3dmChunkVersion(self) -> Tuple[int, int]: ...
    @overload
    def Read3dmStartSection(self) -> Tuple[bool, int, str]: ...
    @overload
    def ReadBool(self) -> bool: ...
    @overload
    def ReadBoolArray(self) -> Iterable[bool]: ...
    @overload
    def ReadBoundingBox(self) -> BoundingBox: ...
    @overload
    def ReadByte(self) -> Byte: ...
    @overload
    def ReadByteArray(self) -> Iterable[Byte]: ...
    @overload
    def ReadColor(self) -> Color: ...
    @overload
    def ReadCompressedBuffer(self) -> Iterable[Byte]: ...
    @overload
    def ReadDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ReadDouble(self) -> float: ...
    @overload
    def ReadDoubleArray(self) -> Iterable[float]: ...
    @overload
    def ReadFont(self) -> Font: ...
    @overload
    def ReadGeometry(self) -> GeometryBase: ...
    @overload
    def ReadGeometryArray(self) -> Iterable[GeometryBase]: ...
    @overload
    def ReadGuid(self) -> Guid: ...
    @overload
    def ReadGuidArray(self) -> Iterable[Guid]: ...
    @overload
    def ReadInt(self) -> int: ...
    @overload
    def ReadInt64(self) -> Int64: ...
    @overload
    def ReadIntArray(self) -> Iterable[int]: ...
    @overload
    def ReadInterval(self) -> Interval: ...
    @overload
    def ReadLine(self) -> Line: ...
    @overload
    def ReadMeshingParameters(self) -> MeshingParameters: ...
    @overload
    def ReadObjRef(self) -> ObjRef: ...
    @overload
    def ReadObjRefArray(self) -> Iterable[ObjRef]: ...
    @overload
    def ReadPlane(self) -> Plane: ...
    @overload
    def ReadPoint(self) -> Point: ...
    @overload
    def ReadPoint2d(self) -> Point2d: ...
    @overload
    def ReadPoint3d(self) -> Point3d: ...
    @overload
    def ReadPoint3f(self) -> Point3f: ...
    @overload
    def ReadPoint4d(self) -> Point4d: ...
    @overload
    def ReadPointF(self) -> PointF: ...
    @overload
    def ReadRay3d(self) -> Ray3d: ...
    @overload
    def ReadRectangle(self) -> Rectangle: ...
    @overload
    def ReadRectangleF(self) -> RectangleF: ...
    @overload
    def ReadRenderSettings(self) -> RenderSettings: ...
    @overload
    def ReadSByte(self) -> SByte: ...
    @overload
    def ReadSByteArray(self) -> Iterable[SByte]: ...
    @overload
    def ReadShort(self) -> Int16: ...
    @overload
    def ReadShortArray(self) -> Iterable[Int16]: ...
    @overload
    def ReadSingle(self) -> Single: ...
    @overload
    def ReadSingleArray(self) -> Iterable[Single]: ...
    @overload
    def ReadSize(self) -> Size: ...
    @overload
    def ReadSizeF(self) -> SizeF: ...
    @overload
    def ReadString(self) -> str: ...
    @overload
    def ReadStringArray(self) -> Iterable[str]: ...
    @overload
    def ReadTransform(self) -> Transform: ...
    @overload
    def ReadUInt(self) -> UInt32: ...
    @overload
    def ReadUShort(self) -> UInt16: ...
    @overload
    def ReadUtf8String(self) -> str: ...
    @overload
    def ReadVector2d(self) -> Vector2d: ...
    @overload
    def ReadVector3d(self) -> Vector3d: ...
    @overload
    def ReadVector3f(self) -> Vector3f: ...
    @overload
    def SeekFromCurrentPosition(self, byteOffset: Int64) -> bool: ...
    @overload
    def SeekFromCurrentPosition(self, byteOffset: UInt64, forward: bool) -> bool: ...
    @overload
    def SeekFromStart(self, byteOffset: UInt64) -> bool: ...
    @overload
    @ReadErrorOccured.setter
    def ReadErrorOccured(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
from ..DocObjects import ObjRef
from ..Geometry import Interval
from ..Geometry import Point2d
from ..Geometry import Point3d
from ..Geometry import Point4d
from ..Geometry import Vector2d
from ..Geometry import Vector3d
from ..Geometry import BoundingBox
from ..Geometry import Ray3d
from ..Geometry import Transform
from ..Geometry import Plane
from ..Geometry import Line
from ..Geometry import Point3f
from ..Geometry import Vector3f
from ..Geometry import MeshingParameters
from ..Geometry import GeometryBase
from ..Render import RenderSettings
class BinaryArchiveWriter:
    @overload
    def BeginWrite3dmChunk(self, typecode: UInt32, value: Int64) -> bool: ...
    @overload
    def BeginWrite3dmChunk(self, typecode: UInt32, majorVersion: int, minorVersion: int) -> bool: ...
    @overload
    def EnableCRCCalculation(self, enable: bool) -> bool: ...
    @overload
    def EndWrite3dmChunk(self) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Archive3dmVersion(self) -> int: ...
    @overload
    @property
    def WriteErrorOccured(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @WriteErrorOccured.setter
    def WriteErrorOccured(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write3dmChunkVersion(self, major: int, minor: int) -> None: ...
    @overload
    def WriteBool(self, value: bool) -> None: ...
    @overload
    def WriteBoolArray(self, value: Iterable[bool]) -> None: ...
    @overload
    def WriteBoundingBox(self, value: BoundingBox) -> None: ...
    @overload
    def WriteByte(self, value: Byte) -> None: ...
    @overload
    def WriteByteArray(self, value: Iterable[Byte]) -> None: ...
    @overload
    def WriteColor(self, value: Color) -> None: ...
    @overload
    def WriteCompressedBuffer(self, value: Iterable[Byte]) -> None: ...
    @overload
    def WriteDictionary(self, dictionary: ArchivableDictionary) -> None: ...
    @overload
    def WriteDouble(self, value: float) -> None: ...
    @overload
    def WriteDoubleArray(self, value: Iterable[float]) -> None: ...
    @overload
    def WriteFont(self, value: Font) -> None: ...
    @overload
    def WriteGeometry(self, value: GeometryBase) -> None: ...
    @overload
    def WriteGeometryArray(self, geometry: Iterable[GeometryBase]) -> None: ...
    @overload
    def WriteGuid(self, value: Guid) -> None: ...
    @overload
    def WriteGuidArray(self, value: Iterable[Guid]) -> None: ...
    @overload
    def WriteInt(self, value: int) -> None: ...
    @overload
    def WriteInt64(self, value: Int64) -> None: ...
    @overload
    def WriteIntArray(self, value: Iterable[int]) -> None: ...
    @overload
    def WriteInterval(self, value: Interval) -> None: ...
    @overload
    def WriteLine(self, value: Line) -> None: ...
    @overload
    def WriteMeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def WriteObjRef(self, objref: ObjRef) -> None: ...
    @overload
    def WriteObjRefArray(self, objrefs: Iterable[ObjRef]) -> None: ...
    @overload
    def WritePlane(self, value: Plane) -> None: ...
    @overload
    def WritePoint(self, value: Point) -> None: ...
    @overload
    def WritePoint2d(self, value: Point2d) -> None: ...
    @overload
    def WritePoint3d(self, value: Point3d) -> None: ...
    @overload
    def WritePoint3f(self, value: Point3f) -> None: ...
    @overload
    def WritePoint4d(self, value: Point4d) -> None: ...
    @overload
    def WritePointF(self, value: PointF) -> None: ...
    @overload
    def WriteRay3d(self, value: Ray3d) -> None: ...
    @overload
    def WriteRectangle(self, value: Rectangle) -> None: ...
    @overload
    def WriteRectangleF(self, value: RectangleF) -> None: ...
    @overload
    def WriteRenderSettings(self, value: RenderSettings) -> None: ...
    @overload
    def WriteSByte(self, value: SByte) -> None: ...
    @overload
    def WriteSByteArray(self, value: Iterable[SByte]) -> None: ...
    @overload
    def WriteShort(self, value: Int16) -> None: ...
    @overload
    def WriteShortArray(self, value: Iterable[Int16]) -> None: ...
    @overload
    def WriteSingle(self, value: Single) -> None: ...
    @overload
    def WriteSingleArray(self, value: Iterable[Single]) -> None: ...
    @overload
    def WriteSize(self, value: Size) -> None: ...
    @overload
    def WriteSizeF(self, value: SizeF) -> None: ...
    @overload
    def WriteString(self, value: str) -> None: ...
    @overload
    def WriteStringArray(self, value: Iterable[str]) -> None: ...
    @overload
    def WriteTransform(self, value: Transform) -> None: ...
    @overload
    def WriteUInt(self, value: UInt32) -> None: ...
    @overload
    def WriteUShort(self, value: UInt16) -> None: ...
    @overload
    def WriteUtf8String(self, value: str) -> None: ...
    @overload
    def WriteVector2d(self, value: Vector2d) -> None: ...
    @overload
    def WriteVector3d(self, value: Vector3d) -> None: ...
    @overload
    def WriteVector3f(self, value: Vector3f) -> None: ...




class ContentHash:
    @overload
    def Clone(self) -> ContentHash: ...
    @overload
    @staticmethod
    def CreateFromFile(path: str) -> ContentHash: ...
    @overload
    def Equals(self, other: ContentHash) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ByteCount(self) -> UInt64: ...
    @overload
    @property
    def HashTime(self) -> DateTime: ...
    @overload
    @property
    def Sha1ContentHash(self) -> Iterable[Byte]: ...
    @overload
    @property
    def Sha1NameHash(self) -> Iterable[Byte]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(left: ContentHash, right: ContentHash) -> bool: ...
    @overload
    def __ne__(left: ContentHash, right: ContentHash) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class CurveType(Enum):
    Polyline = 0
    Nurbs = 1


class DracoColorFormat(Enum):
    ARGB = 0
    RGBA = 1


from ..Geometry import Mesh
from ..Geometry import GeometryBase
class DracoCompression:
    @overload
    @staticmethod
    def Compress(mesh: Mesh) -> DracoCompression: ...
    @overload
    @staticmethod
    def Compress(mesh: Mesh, options: DracoCompressionOptions) -> DracoCompression: ...
    @overload
    @staticmethod
    def DecompressBase64String(encoded: str) -> GeometryBase: ...
    @overload
    @staticmethod
    def DecompressByteArray(bytes: Iterable[Byte]) -> GeometryBase: ...
    @overload
    @staticmethod
    def DecompressFile(path: str) -> GeometryBase: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def NormalAttributePosition(self) -> int: ...
    @overload
    @property
    def TextureCoordinatesAttributePosition(self) -> int: ...
    @overload
    @property
    def VertexAttributePosition(self) -> int: ...
    @overload
    @property
    def VertexColorAttributePosition(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToBase64String(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, path: str) -> bool: ...


class DracoCompressionOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CompressionLevel(self) -> int: ...
    @overload
    @property
    def NormalQuantizationBits(self) -> int: ...
    @overload
    @property
    def PositionQuantizationBits(self) -> int: ...
    @overload
    @property
    def TextureCoordintateQuantizationBits(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @CompressionLevel.setter
    def CompressionLevel(self) -> MutableSequence[int]: ...
    @overload
    @NormalQuantizationBits.setter
    def NormalQuantizationBits(self) -> MutableSequence[int]: ...
    @overload
    @PositionQuantizationBits.setter
    def PositionQuantizationBits(self) -> MutableSequence[int]: ...
    @overload
    @TextureCoordintateQuantizationBits.setter
    def TextureCoordintateQuantizationBits(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import GeometryBase
class File3dm:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def DumpSummary(self) -> str: ...
    @overload
    def DumpToTextLog(self, log: TextLog) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromByteArray(bytes: Iterable[Byte]) -> File3dm: ...
    @overload
    @property
    def AllDimStyles(self) -> File3dmDimStyleTable: ...
    @overload
    @property
    def AllGroups(self) -> File3dmGroupTable: ...
    @overload
    @property
    def AllHatchPatterns(self) -> File3dmHatchPatternTable: ...
    @overload
    @property
    def AllInstanceDefinitions(self) -> File3dmInstanceDefinitionTable: ...
    @overload
    @property
    def AllLayers(self) -> File3dmLayerTable: ...
    @overload
    @property
    def AllLinetypes(self) -> File3dmLinetypeTable: ...
    @overload
    @property
    def AllMaterials(self) -> File3dmMaterialTable: ...
    @overload
    @property
    def AllNamedConstructionPlanes(self) -> File3dmNamedConstructionPlanes: ...
    @overload
    @property
    def AllNamedViews(self) -> File3dmViewTable: ...
    @overload
    @property
    def AllViews(self) -> File3dmViewTable: ...
    @overload
    @property
    def ApplicationDetails(self) -> str: ...
    @overload
    @property
    def ApplicationName(self) -> str: ...
    @overload
    @property
    def ApplicationUrl(self) -> str: ...
    @overload
    @property
    def ArchiveVersion(self) -> int: ...
    @overload
    @property
    def Created(self) -> DateTime: ...
    @overload
    @property
    def CreatedBy(self) -> str: ...
    @overload
    @property
    def DimStyles(self) -> Iterable[DimensionStyle]: ...
    @overload
    @property
    def HatchPatterns(self) -> Iterable[HatchPattern]: ...
    @overload
    @property
    def InstanceDefinitions(self) -> Iterable[InstanceDefinitionGeometry]: ...
    @overload
    @property
    def LastEdited(self) -> DateTime: ...
    @overload
    @property
    def LastEditedBy(self) -> str: ...
    @overload
    @property
    def Layers(self) -> Iterable[Layer]: ...
    @overload
    @property
    def Linetypes(self) -> Iterable[Linetype]: ...
    @overload
    @property
    def Manifest(self) -> ManifestTable: ...
    @overload
    @property
    def Materials(self) -> Iterable[Material]: ...
    @overload
    @property
    def NamedConstructionPlanes(self) -> Iterable[ConstructionPlane]: ...
    @overload
    @property
    def NamedViews(self) -> Iterable[ViewInfo]: ...
    @overload
    @property
    def Notes(self) -> File3dmNotes: ...
    @overload
    @property
    def Objects(self) -> File3dmObjectTable: ...
    @overload
    @property
    def PlugInData(self) -> File3dmPlugInDataTable: ...
    @overload
    @property
    def Revision(self) -> int: ...
    @overload
    @property
    def Settings(self) -> File3dmSettings: ...
    @overload
    @property
    def StartSectionComments(self) -> str: ...
    @overload
    @property
    def Strings(self) -> File3dmStringTable: ...
    @overload
    @property
    def Views(self) -> Iterable[ViewInfo]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreviewImage(self) -> Bitmap: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str) -> File3dm: ...
    @overload
    @staticmethod
    def Read(path: str, tableTypeFilterFilter: TableTypeFilter, objectTypeFilter: ObjectTypeFilter) -> File3dm: ...
    @overload
    @staticmethod
    def ReadApplicationData(path: str) -> Tuple[str, str, str]: ...
    @overload
    @staticmethod
    def ReadArchiveVersion(path: str) -> int: ...
    @overload
    @staticmethod
    def ReadDimensionStyles(path: str) -> Iterable[DimensionStyle]: ...
    @overload
    @staticmethod
    def ReadNotes(path: str) -> str: ...
    @overload
    @staticmethod
    def ReadPreviewImage(path: str) -> Bitmap: ...
    @overload
    @staticmethod
    def ReadRevisionHistory(path: str) -> Tuple[bool, str, str, int, DateTime, DateTime]: ...
    @overload
    @staticmethod
    def ReadWithLog(path: str) -> Tuple[File3dm, str]: ...
    @overload
    @staticmethod
    def ReadWithLog(path: str, tableTypeFilterFilter: TableTypeFilter, objectTypeFilter: ObjectTypeFilter) -> Tuple[File3dm, str]: ...
    @overload
    @ApplicationDetails.setter
    def ApplicationDetails(self) -> MutableSequence[str]: ...
    @overload
    @ApplicationName.setter
    def ApplicationName(self) -> MutableSequence[str]: ...
    @overload
    @ApplicationUrl.setter
    def ApplicationUrl(self) -> MutableSequence[str]: ...
    @overload
    @Notes.setter
    def Notes(self) -> MutableSequence[File3dmNotes]: ...
    @overload
    @Revision.setter
    def Revision(self) -> MutableSequence[int]: ...
    @overload
    @StartSectionComments.setter
    def StartSectionComments(self) -> MutableSequence[str]: ...
    @overload
    def SetPreviewImage(self, image: Bitmap) -> None: ...
    @overload
    def ToByteArray(self) -> Iterable[Byte]: ...
    @overload
    def ToByteArray(self, options: File3dmWriteOptions) -> Iterable[Byte]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, path: str, version: int) -> bool: ...
    @overload
    def Write(self, path: str, options: File3dmWriteOptions) -> bool: ...
    @overload
    @staticmethod
    def WriteMultipleObjects(path: str, geometry: Iterable[GeometryBase]) -> bool: ...
    @overload
    @staticmethod
    def WriteOneObject(path: str, geometry: GeometryBase) -> bool: ...
    @overload
    def WriteWithLog(self, path: str, version: int) -> Tuple[bool, str]: ...
    @overload
    def WriteWithLog(self, path: str, options: File3dmWriteOptions) -> Tuple[bool, str]: ...




from ..DocObjects import ModelComponentType
from ..DocObjects import DimensionStyle
class File3dmDimStyleTable:
    def __iter__(self) -> Iterator[DimensionStyle]: ...
    def __getitem__(self, index: int) -> DimensionStyle: ...
    def __setitem__(self, index: int, value: DimensionStyle): ...
    @overload
    def Add(self, item: DimensionStyle) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: DimensionStyle) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> DimensionStyle: ...
    @overload
    def FindIndex(self, index: int) -> DimensionStyle: ...
    @overload
    def FindName(self, name: str) -> DimensionStyle: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> DimensionStyle: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Group
class File3dmGroupTable:
    def __iter__(self) -> Iterator[Group]: ...
    def __getitem__(self, index: int) -> Group: ...
    def __setitem__(self, index: int, value: Group): ...
    @overload
    def Add(self, item: Group) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Group) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> Group: ...
    @overload
    def FindIndex(self, groupIndex: int) -> Group: ...
    @overload
    def FindName(self, name: str) -> Group: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Group: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GroupMembers(self, groupIndex: int) -> Iterable[File3dmObject]: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import HatchPattern
class File3dmHatchPatternTable:
    def __iter__(self) -> Iterator[HatchPattern]: ...
    def __getitem__(self, index: int) -> HatchPattern: ...
    def __setitem__(self, index: int, value: HatchPattern): ...
    @overload
    def Add(self, item: HatchPattern) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: HatchPattern) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> HatchPattern: ...
    @overload
    def FindIndex(self, index: int) -> HatchPattern: ...
    @overload
    def FindName(self, name: str) -> HatchPattern: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> HatchPattern: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..Geometry import InstanceDefinitionGeometry
from ..Geometry import Point3d
from ..Geometry import GeometryBase
from ..DocObjects import ObjectAttributes
class File3dmInstanceDefinitionTable:
    def __iter__(self) -> Iterator[InstanceDefinitionGeometry]: ...
    def __getitem__(self, index: int) -> InstanceDefinitionGeometry: ...
    def __setitem__(self, index: int, value: InstanceDefinitionGeometry): ...
    @overload
    def Add(self, item: InstanceDefinitionGeometry) -> None: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: Iterable[GeometryBase]) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: Iterable[GeometryBase], attributes: Iterable[ObjectAttributes]) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: GeometryBase, attributes: ObjectAttributes) -> int: ...
    @overload
    def Add(self, name: str, description: str, url: str, urlTag: str, basePoint: Point3d, geometry: Iterable[GeometryBase], attributes: Iterable[ObjectAttributes]) -> int: ...
    @overload
    def AddLinked(self, filename: str, name: str, description: str) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Delete(self, item: InstanceDefinitionGeometry) -> bool: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> InstanceDefinitionGeometry: ...
    @overload
    def FindName(self, name: str) -> InstanceDefinitionGeometry: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> InstanceDefinitionGeometry: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Layer
class File3dmLayerTable:
    def __iter__(self) -> Iterator[Layer]: ...
    def __getitem__(self, index: int) -> Layer: ...
    def __setitem__(self, index: int, value: Layer): ...
    @overload
    def Add(self, item: Layer) -> None: ...
    @overload
    def AddDefaultLayer(self, name: str, color: Color) -> int: ...
    @overload
    def AddLayer(self, name: str, color: Color) -> int: ...
    @overload
    def AddLayer(self, name: str, color: Color, parentId: Guid) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Layer) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> Layer: ...
    @overload
    def FindIndex(self, index: int) -> Layer: ...
    @overload
    def FindName(self, name: str, parentId: Guid) -> Layer: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Layer: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Linetype
class File3dmLinetypeTable:
    def __iter__(self) -> Iterator[Linetype]: ...
    def __getitem__(self, index: int) -> Linetype: ...
    def __setitem__(self, index: int, value: Linetype): ...
    @overload
    def Add(self, item: Linetype) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Linetype) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> Linetype: ...
    @overload
    def FindIndex(self, index: int) -> Linetype: ...
    @overload
    def FindName(self, name: str) -> Linetype: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Linetype: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Material
class File3dmMaterialTable:
    def __iter__(self) -> Iterator[Material]: ...
    def __getitem__(self, index: int) -> Material: ...
    def __setitem__(self, index: int, value: Material): ...
    @overload
    def Add(self, item: Material) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Material) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> Material: ...
    @overload
    def FindIndex(self, index: int) -> Material: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ConstructionPlane
from ..Geometry import Plane
class File3dmNamedConstructionPlanes:
    def __iter__(self) -> Iterator[ConstructionPlane]: ...
    def __getitem__(self, index: int) -> ConstructionPlane: ...
    def __setitem__(self, index: int, value: ConstructionPlane): ...
    @overload
    def Add(self, cplane: ConstructionPlane) -> None: ...
    @overload
    def Add(self, name: str, plane: Plane) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, cplane: ConstructionPlane) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ConstructionPlane], arrayIndex: int) -> None: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, cplane: ConstructionPlane) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindName(self, name: str) -> ConstructionPlane: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, cplane: ConstructionPlane) -> int: ...
    @overload
    def ToString(self) -> str: ...


class File3dmNotes:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsHtml(self) -> bool: ...
    @overload
    @property
    def IsVisible(self) -> bool: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def WindowRectangle(self) -> Rectangle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @IsHtml.setter
    def IsHtml(self) -> MutableSequence[bool]: ...
    @overload
    @IsVisible.setter
    def IsVisible(self) -> MutableSequence[bool]: ...
    @overload
    @Notes.setter
    def Notes(self) -> MutableSequence[str]: ...
    @overload
    @WindowRectangle.setter
    def WindowRectangle(self) -> MutableSequence[Rectangle]: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import GeometryBase
from ..DocObjects import ObjectAttributes
from ..DocObjects import ModelComponentType
from ..Geometry import ComponentStatus
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
from ..DocObjects import ModelComponent
class File3dmObject(ModelComponent):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: UInt32) -> UInt32: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: File3dmObject) -> bool: ...
    @overload
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @overload
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def DeletedName(self) -> str: ...
    @overload
    @property
    def Disposed(self) -> bool: ...
    @overload
    @property
    def Geometry(self) -> GeometryBase: ...
    @overload
    @property
    def HasId(self) -> bool: ...
    @overload
    @property
    def HasIndex(self) -> bool: ...
    @overload
    @property
    def HasName(self) -> bool: ...
    @overload
    @property
    def HasUserData(self) -> bool: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IdIsLocked(self) -> bool: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def IndexIsLocked(self) -> bool: ...
    @overload
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @overload
    @property
    def IsDocumentControlled(self) -> bool: ...
    @overload
    @property
    def IsSystemComponent(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def ModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NameIsLocked(self) -> bool: ...
    @overload
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def UserData(self) -> UserDataList: ...
    @overload
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    @ComponentStatus.setter
    def ComponentStatus(self) -> MutableSequence[ComponentStatus]: ...
    @overload
    @Id.setter
    def Id(self) -> MutableSequence[Guid]: ...
    @overload
    @Index.setter
    def Index(self) -> MutableSequence[int]: ...
    @overload
    @Name.setter
    def Name(self) -> MutableSequence[str]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryReadUserData(self, userDataId: Guid, readFromAttributes: bool, dataReader: Func) -> bool: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Layer
from ..DocObjects import Group
from ..Geometry import BoundingBox
from ..Geometry import Point3d
from ..DocObjects import ObjectAttributes
from ..Geometry import Point3f
from ..Geometry import PointCloud
from ..Geometry import Plane
from ..Geometry import LinearDimension
from ..Geometry import AngularDimension
from ..Geometry import OrdinateDimension
from ..Geometry import RadialDimension
from ..Geometry import Line
from ..Geometry import Arc
from ..Geometry import Circle
from ..Geometry import Ellipse
from ..Geometry import Sphere
from ..Geometry import Curve
from ..Geometry import TextDot
from ..Geometry import InstanceReferenceGeometry
from ..Geometry import Transform
from ..Display import Text3d
from ..Geometry import TextJustification
from ..Geometry import Surface
from ..Geometry import Extrusion
from ..Geometry import Mesh
from ..Geometry import Brep
from ..Geometry import Hatch
from ..Geometry import SubD
class File3dmObjectTable:
    def __iter__(self) -> Iterator[File3dmObject]: ...
    def __getitem__(self, index: int) -> File3dmObject: ...
    def __setitem__(self, index: int, value: File3dmObject): ...
    @overload
    def Add(self, item: File3dmObject) -> None: ...
    @overload
    def AddAngularDimension(self, dimension: AngularDimension) -> Guid: ...
    @overload
    def AddAngularDimension(self, dimension: AngularDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddArc(self, arc: Arc) -> Guid: ...
    @overload
    def AddArc(self, arc: Arc, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddBrep(self, brep: Brep) -> Guid: ...
    @overload
    def AddBrep(self, brep: Brep, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddCircle(self, circle: Circle) -> Guid: ...
    @overload
    def AddCircle(self, circle: Circle, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid]) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: Guid) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddCurve(self, curve: Curve) -> Guid: ...
    @overload
    def AddCurve(self, curve: Curve, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddEllipse(self, ellipse: Ellipse) -> Guid: ...
    @overload
    def AddEllipse(self, ellipse: Ellipse, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Extrusion) -> Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Extrusion, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddHatch(self, hatch: Hatch) -> Guid: ...
    @overload
    def AddHatch(self, hatch: Hatch, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceReference: InstanceReferenceGeometry) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceReference: InstanceReferenceGeometry, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Transform) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Transform, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLeader(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddLeader(self, text: str, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddLeader(self, plane: Plane, points: Iterable[Point2d]) -> Guid: ...
    @overload
    def AddLeader(self, plane: Plane, points: Iterable[Point2d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Plane, points: Iterable[Point2d]) -> Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Plane, points: Iterable[Point2d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLine(self, line: Line) -> Guid: ...
    @overload
    def AddLine(self, from_: Point3d, to: Point3d) -> Guid: ...
    @overload
    def AddLine(self, line: Line, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLine(self, from_: Point3d, to: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLinearDimension(self, dimension: LinearDimension) -> Guid: ...
    @overload
    def AddLinearDimension(self, dimension: LinearDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddMesh(self, mesh: Mesh) -> Guid: ...
    @overload
    def AddMesh(self, mesh: Mesh, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddOrdinateDimension(self, dimension: OrdinateDimension) -> Guid: ...
    @overload
    def AddOrdinateDimension(self, dimension: OrdinateDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3f) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3d) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3f, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoint(self, x: float, y: float, z: float) -> Guid: ...
    @overload
    def AddPointCloud(self, cloud: PointCloud) -> Guid: ...
    @overload
    def AddPointCloud(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddPointCloud(self, cloud: PointCloud, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPointCloud(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoints(self, points: Iterable[Point3f]) -> Iterable[Guid]: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d]) -> Iterable[Guid]: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> Iterable[Guid]: ...
    @overload
    def AddPoints(self, points: Iterable[Point3f], attributes: ObjectAttributes) -> Iterable[Guid]: ...
    @overload
    def AddPolyline(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddPolyline(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddRadialDimension(self, dimension: RadialDimension) -> Guid: ...
    @overload
    def AddRadialDimension(self, dimension: RadialDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSphere(self, sphere: Sphere) -> Guid: ...
    @overload
    def AddSphere(self, sphere: Sphere, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSubD(self, subd: SubD) -> Guid: ...
    @overload
    def AddSubD(self, subd: SubD, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSurface(self, surface: Surface) -> Guid: ...
    @overload
    def AddSurface(self, surface: Surface, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text3d: Text3d) -> Guid: ...
    @overload
    def AddText(self, text3d: Text3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddTextDot(self, dot: TextDot) -> Guid: ...
    @overload
    def AddTextDot(self, dot: TextDot, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Point3d) -> Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: File3dmObject) -> bool: ...
    @overload
    def Delete(self, objectId: Guid) -> bool: ...
    @overload
    def Delete(self, objectIds: Iterable[Guid]) -> int: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindByGroup(self, group: Group) -> Iterable[File3dmObject]: ...
    @overload
    def FindByLayer(self, layer: Layer) -> Iterable[File3dmObject]: ...
    @overload
    def FindByLayer(self, layer: str) -> Iterable[File3dmObject]: ...
    @overload
    def FindId(self, id: Guid) -> File3dmObject: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetBoundingBox(self) -> BoundingBox: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class File3dmPlugInData:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class File3dmPlugInDataTable:
    def __iter__(self) -> Iterator[File3dmPlugInData]: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryRead(self, pluginData: File3dmPlugInData, dataReader: Func) -> bool: ...


from ..Geometry import Point3d
class File3dmSettings:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ModelAbsoluteTolerance(self) -> float: ...
    @overload
    @property
    def ModelAngleToleranceDegrees(self) -> float: ...
    @overload
    @property
    def ModelAngleToleranceRadians(self) -> float: ...
    @overload
    @property
    def ModelBasepoint(self) -> Point3d: ...
    @overload
    @property
    def ModelRelativeTolerance(self) -> float: ...
    @overload
    @property
    def ModelUnitSystem(self) -> UnitSystem: ...
    @overload
    @property
    def ModelUrl(self) -> str: ...
    @overload
    @property
    def PageAbsoluteTolerance(self) -> float: ...
    @overload
    @property
    def PageAngleToleranceDegrees(self) -> float: ...
    @overload
    @property
    def PageAngleToleranceRadians(self) -> float: ...
    @overload
    @property
    def PageRelativeTolerance(self) -> float: ...
    @overload
    @property
    def PageUnitSystem(self) -> UnitSystem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ModelAbsoluteTolerance.setter
    def ModelAbsoluteTolerance(self) -> MutableSequence[float]: ...
    @overload
    @ModelAngleToleranceDegrees.setter
    def ModelAngleToleranceDegrees(self) -> MutableSequence[float]: ...
    @overload
    @ModelAngleToleranceRadians.setter
    def ModelAngleToleranceRadians(self) -> MutableSequence[float]: ...
    @overload
    @ModelBasepoint.setter
    def ModelBasepoint(self) -> MutableSequence[Point3d]: ...
    @overload
    @ModelRelativeTolerance.setter
    def ModelRelativeTolerance(self) -> MutableSequence[float]: ...
    @overload
    @ModelUnitSystem.setter
    def ModelUnitSystem(self) -> MutableSequence[UnitSystem]: ...
    @overload
    @ModelUrl.setter
    def ModelUrl(self) -> MutableSequence[str]: ...
    @overload
    @PageAbsoluteTolerance.setter
    def PageAbsoluteTolerance(self) -> MutableSequence[float]: ...
    @overload
    @PageAngleToleranceDegrees.setter
    def PageAngleToleranceDegrees(self) -> MutableSequence[float]: ...
    @overload
    @PageAngleToleranceRadians.setter
    def PageAngleToleranceRadians(self) -> MutableSequence[float]: ...
    @overload
    @PageRelativeTolerance.setter
    def PageRelativeTolerance(self) -> MutableSequence[float]: ...
    @overload
    @PageUnitSystem.setter
    def PageUnitSystem(self) -> MutableSequence[UnitSystem]: ...
    @overload
    def ToString(self) -> str: ...


class File3dmStringTable:
    @overload
    def Delete(self, key: str) -> None: ...
    @overload
    def Delete(self, section: str, entry: str) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def DocumentUserTextCount(self) -> int: ...
    @overload
    def GetEntryNames(self, section: str) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetKey(self, i: int) -> str: ...
    @overload
    def GetSectionNames(self) -> Iterable[str]: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetValue(self, i: int) -> str: ...
    @overload
    def GetValue(self, key: str) -> str: ...
    @overload
    def GetValue(self, section: str, entry: str) -> str: ...
    @overload
    def SetString(self, key: str, value: str) -> str: ...
    @overload
    def SetString(self, section: str, entry: str, value: str) -> str: ...
    @overload
    def ToString(self) -> str: ...


class File3dmTypeCodes:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ViewInfo
class File3dmViewTable:
    def __iter__(self) -> Iterator[ViewInfo]: ...
    def __getitem__(self, index: int) -> ViewInfo: ...
    def __setitem__(self, index: int, value: ViewInfo): ...
    @overload
    def Add(self, item: ViewInfo) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: ViewInfo) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ViewInfo], arrayIndex: int) -> None: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, item: ViewInfo) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindName(self, name: str) -> ViewInfo: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: ViewInfo) -> int: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ObjectType
class File3dmWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def EnableAnalysisMeshes(self, objectType: ObjectType, enable: bool) -> None: ...
    @overload
    def EnableRenderMeshes(self, objectType: ObjectType, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def SaveAnalysisMeshes(self) -> bool: ...
    @overload
    @property
    def SaveRenderMeshes(self) -> bool: ...
    @overload
    @property
    def SaveUserData(self) -> bool: ...
    @overload
    @property
    def Version(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @SaveAnalysisMeshes.setter
    def SaveAnalysisMeshes(self) -> MutableSequence[bool]: ...
    @overload
    @SaveRenderMeshes.setter
    def SaveRenderMeshes(self) -> MutableSequence[bool]: ...
    @overload
    @SaveUserData.setter
    def SaveUserData(self) -> MutableSequence[bool]: ...
    @overload
    @Version.setter
    def Version(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


class FileFindPreference(Enum):
    # None = 0
    FullPath = 1
    RelativePath = 2
    BasePath = 3
    ContentMatch = 4
    MostRecent = 5


from ..PlugIns import WriteFileResult
class FileObj:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(filename: str, doc: RhinoDoc, options: FileObjReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileObjWriteOptions) -> WriteFileResult: ...
    @overload
    @staticmethod
    def Write(stream: StreamWriter, doc: RhinoDoc, options: FileObjWriteOptions) -> WriteFileResult: ...
    @overload
    @staticmethod
    def Write(filename: str, meshes: Iterable[Mesh], options: FileObjWriteOptions) -> WriteFileResult: ...


from ..Geometry import Transform
class FileObjReadOptions:
    @overload
    def __init__(self, readOptions: FileReadOptions): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def DisplayColorFromObjMaterial(self) -> bool: ...
    @overload
    @property
    def IgnoreTextures(self) -> bool: ...
    @overload
    @property
    def MapYtoZ(self) -> bool: ...
    @overload
    @property
    def MorphTargetOnly(self) -> bool: ...
    @overload
    @property
    def ReverseGroupOrder(self) -> bool: ...
    @overload
    @property
    def Split32BitTextures(self) -> bool: ...
    @overload
    @property
    def UseObjGroupsAs(self) -> UseObjGsAs: ...
    @overload
    @property
    def UseObjObjects(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetTransform(self) -> Transform: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @DisplayColorFromObjMaterial.setter
    def DisplayColorFromObjMaterial(self) -> MutableSequence[bool]: ...
    @overload
    @IgnoreTextures.setter
    def IgnoreTextures(self) -> MutableSequence[bool]: ...
    @overload
    @MapYtoZ.setter
    def MapYtoZ(self) -> MutableSequence[bool]: ...
    @overload
    @MorphTargetOnly.setter
    def MorphTargetOnly(self) -> MutableSequence[bool]: ...
    @overload
    @ReverseGroupOrder.setter
    def ReverseGroupOrder(self) -> MutableSequence[bool]: ...
    @overload
    @Split32BitTextures.setter
    def Split32BitTextures(self) -> MutableSequence[bool]: ...
    @overload
    @UseObjGroupsAs.setter
    def UseObjGroupsAs(self) -> MutableSequence[UseObjGsAs]: ...
    @overload
    @UseObjObjects.setter
    def UseObjObjects(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import MeshingParameters
from ..Geometry import Transform
class FileObjWriteOptions:
    @overload
    def __init__(self, writeOptions: FileWriteOptions): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ActualFilePathOnMac(self) -> str: ...
    @overload
    @property
    def CreateNgons(self) -> bool: ...
    @overload
    @property
    def CullUnnecessaryVertexesInNgons(self) -> bool: ...
    @overload
    @property
    def EolType(self) -> AsciiEol: ...
    @overload
    @property
    def ExportAsTriangles(self) -> bool: ...
    @overload
    @property
    def ExportGroupNameLayerNames(self) -> ObjGroupNames: ...
    @overload
    @property
    def ExportMaterialDefinitions(self) -> bool: ...
    @overload
    @property
    def ExportNormals(self) -> bool: ...
    @overload
    @property
    def ExportObjectNames(self) -> ObjObjectNames: ...
    @overload
    @property
    def ExportOpenMeshes(self) -> bool: ...
    @overload
    @property
    def ExportTcs(self) -> bool: ...
    @overload
    @property
    def ExportVcs(self) -> bool: ...
    @overload
    @property
    def IncludeUnweldedEdgesInNgons(self) -> bool: ...
    @overload
    @property
    def MapZtoY(self) -> bool: ...
    @overload
    @property
    def MergeNestedGroupingNames(self) -> bool: ...
    @overload
    @property
    def MeshParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def MeshType(self) -> VertexWelding: ...
    @overload
    @property
    def MinNgonFaceCount(self) -> int: ...
    @overload
    @property
    def NgonMode(self) -> NGons: ...
    @overload
    @property
    def ObjectType(self) -> GeometryType: ...
    @overload
    @property
    def SignificantDigits(self) -> int: ...
    @overload
    @property
    def SortObjGroups(self) -> bool: ...
    @overload
    @property
    def SubDMeshType(self) -> SubDMeshing: ...
    @overload
    @property
    def SubDSurfaceMeshingDensity(self) -> int: ...
    @overload
    @property
    def TrimCurveType(self) -> CurveType: ...
    @overload
    @property
    def UnderbarMaterialNames(self) -> bool: ...
    @overload
    @property
    def UseDisplayColorForMaterial(self) -> bool: ...
    @overload
    @property
    def UseRelativeIndexing(self) -> bool: ...
    @overload
    @property
    def UseRenderMeshes(self) -> bool: ...
    @overload
    @property
    def UseSimpleDialog(self) -> bool: ...
    @overload
    @property
    def WrapLongLines(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetTransform(self) -> Transform: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ActualFilePathOnMac.setter
    def ActualFilePathOnMac(self) -> MutableSequence[str]: ...
    @overload
    @CreateNgons.setter
    def CreateNgons(self) -> MutableSequence[bool]: ...
    @overload
    @CullUnnecessaryVertexesInNgons.setter
    def CullUnnecessaryVertexesInNgons(self) -> MutableSequence[bool]: ...
    @overload
    @EolType.setter
    def EolType(self) -> MutableSequence[AsciiEol]: ...
    @overload
    @ExportAsTriangles.setter
    def ExportAsTriangles(self) -> MutableSequence[bool]: ...
    @overload
    @ExportGroupNameLayerNames.setter
    def ExportGroupNameLayerNames(self) -> MutableSequence[ObjGroupNames]: ...
    @overload
    @ExportMaterialDefinitions.setter
    def ExportMaterialDefinitions(self) -> MutableSequence[bool]: ...
    @overload
    @ExportNormals.setter
    def ExportNormals(self) -> MutableSequence[bool]: ...
    @overload
    @ExportObjectNames.setter
    def ExportObjectNames(self) -> MutableSequence[ObjObjectNames]: ...
    @overload
    @ExportOpenMeshes.setter
    def ExportOpenMeshes(self) -> MutableSequence[bool]: ...
    @overload
    @ExportTcs.setter
    def ExportTcs(self) -> MutableSequence[bool]: ...
    @overload
    @ExportVcs.setter
    def ExportVcs(self) -> MutableSequence[bool]: ...
    @overload
    @IncludeUnweldedEdgesInNgons.setter
    def IncludeUnweldedEdgesInNgons(self) -> MutableSequence[bool]: ...
    @overload
    @MapZtoY.setter
    def MapZtoY(self) -> MutableSequence[bool]: ...
    @overload
    @MergeNestedGroupingNames.setter
    def MergeNestedGroupingNames(self) -> MutableSequence[bool]: ...
    @overload
    @MeshParameters.setter
    def MeshParameters(self) -> MutableSequence[MeshingParameters]: ...
    @overload
    @MeshType.setter
    def MeshType(self) -> MutableSequence[VertexWelding]: ...
    @overload
    @MinNgonFaceCount.setter
    def MinNgonFaceCount(self) -> MutableSequence[int]: ...
    @overload
    @NgonMode.setter
    def NgonMode(self) -> MutableSequence[NGons]: ...
    @overload
    @ObjectType.setter
    def ObjectType(self) -> MutableSequence[GeometryType]: ...
    @overload
    @SignificantDigits.setter
    def SignificantDigits(self) -> MutableSequence[int]: ...
    @overload
    @SortObjGroups.setter
    def SortObjGroups(self) -> MutableSequence[bool]: ...
    @overload
    @SubDMeshType.setter
    def SubDMeshType(self) -> MutableSequence[SubDMeshing]: ...
    @overload
    @SubDSurfaceMeshingDensity.setter
    def SubDSurfaceMeshingDensity(self) -> MutableSequence[int]: ...
    @overload
    @TrimCurveType.setter
    def TrimCurveType(self) -> MutableSequence[CurveType]: ...
    @overload
    @UnderbarMaterialNames.setter
    def UnderbarMaterialNames(self) -> MutableSequence[bool]: ...
    @overload
    @UseDisplayColorForMaterial.setter
    def UseDisplayColorForMaterial(self) -> MutableSequence[bool]: ...
    @overload
    @UseRelativeIndexing.setter
    def UseRelativeIndexing(self) -> MutableSequence[bool]: ...
    @overload
    @UseRenderMeshes.setter
    def UseRenderMeshes(self) -> MutableSequence[bool]: ...
    @overload
    @UseSimpleDialog.setter
    def UseSimpleDialog(self) -> MutableSequence[bool]: ...
    @overload
    @WrapLongLines.setter
    def WrapLongLines(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Display import ViewCaptureSettings
from ..DocObjects import Font
from ..DocObjects import TextHorizontalAlignment
from ..DocObjects import TextVerticalAlignment
class FilePdf:
    @overload
    @staticmethod
    def add_PreWrite(value: EventHandler) -> None: ...
    @overload
    def AddPage(self, settings: ViewCaptureSettings) -> int: ...
    @overload
    def AddPage(self, widthInDots: int, heightInDots: int, dotsPerInch: int) -> int: ...
    @overload
    @staticmethod
    def Create() -> FilePdf: ...
    @overload
    def DrawBitmap(self, pageNumber: int, bitmap: Bitmap, left: Single, top: Single, width: Single, height: Single, rotationInDegrees: Single) -> None: ...
    @overload
    def DrawLine(self, pageNumber: int, from_: PointF, to: PointF, strokeColor: Color, strokeWidth: Single) -> None: ...
    @overload
    def DrawPolyline(self, pageNumber: int, polyline: Iterable[PointF], fillColor: Color, strokeColor: Color, strokeWidth: Single) -> None: ...
    @overload
    def DrawText(self, pageNumber: int, text: str, x: float, y: float, heightPoints: Single, onfont: Font, fillColor: Color, strokeColor: Color, strokeWidth: Single, angleDegrees: Single, horizontalAlignment: TextHorizontalAlignment, verticalAlignment: TextVerticalAlignment) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def LayersAsOptionalContentGroups(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PdfDocumentImplementation(self) -> Object: ...
    @overload
    @staticmethod
    def remove_PreWrite(value: EventHandler) -> None: ...
    @overload
    @LayersAsOptionalContentGroups.setter
    def LayersAsOptionalContentGroups(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, filename: str) -> None: ...
    @overload
    def Write(self, stream: Stream) -> None: ...


class FilePdfEventArgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Pdf(self) -> FilePdf: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..PlugIns import WriteFileResult
class FilePly:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FilePlyWriteOptions) -> WriteFileResult: ...


from ..Geometry import MeshingParameters
class FilePlyWriteOptions:
    @overload
    def __init__(self, writeOptions: FileWriteOptions): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ExportASCII(self) -> bool: ...
    @overload
    @property
    def ExportColors(self) -> bool: ...
    @overload
    @property
    def ExportDoubles(self) -> bool: ...
    @overload
    @property
    def ExportMaterial(self) -> bool: ...
    @overload
    @property
    def ExportNormals(self) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def UseSimpleDialog(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ExportASCII.setter
    def ExportASCII(self) -> MutableSequence[bool]: ...
    @overload
    @ExportColors.setter
    def ExportColors(self) -> MutableSequence[bool]: ...
    @overload
    @ExportDoubles.setter
    def ExportDoubles(self) -> MutableSequence[bool]: ...
    @overload
    @ExportMaterial.setter
    def ExportMaterial(self) -> MutableSequence[bool]: ...
    @overload
    @ExportNormals.setter
    def ExportNormals(self) -> MutableSequence[bool]: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self) -> MutableSequence[MeshingParameters]: ...
    @overload
    @UseSimpleDialog.setter
    def UseSimpleDialog(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class FileReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BatchMode(self) -> bool: ...
    @overload
    @property
    def ImportMode(self) -> bool: ...
    @overload
    @property
    def ImportReferenceMode(self) -> bool: ...
    @overload
    @property
    def InsertMode(self) -> bool: ...
    @overload
    @property
    def NewMode(self) -> bool: ...
    @overload
    @property
    def OpenMode(self) -> bool: ...
    @overload
    @property
    def ScaleGeometry(self) -> bool: ...
    @overload
    @property
    def UseScaleGeometry(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @BatchMode.setter
    def BatchMode(self) -> MutableSequence[bool]: ...
    @overload
    @ImportMode.setter
    def ImportMode(self) -> MutableSequence[bool]: ...
    @overload
    @ImportReferenceMode.setter
    def ImportReferenceMode(self) -> MutableSequence[bool]: ...
    @overload
    @InsertMode.setter
    def InsertMode(self) -> MutableSequence[bool]: ...
    @overload
    @NewMode.setter
    def NewMode(self) -> MutableSequence[bool]: ...
    @overload
    @OpenMode.setter
    def OpenMode(self) -> MutableSequence[bool]: ...
    @overload
    @ScaleGeometry.setter
    def ScaleGeometry(self) -> MutableSequence[bool]: ...
    @overload
    @UseScaleGeometry.setter
    def UseScaleGeometry(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class FileReference:
    @overload
    def __init__(self, fullPath: str, relativePath: str, hash: ContentHash, status: FileReferenceStatus): ...
    @overload
    @staticmethod
    def CreateFromFullAndRelativePaths(fullPath: str, relativePath: str) -> FileReference: ...
    @overload
    @staticmethod
    def CreateFromFullPath(fullPath: str) -> FileReference: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ContentHash(self) -> ContentHash: ...
    @overload
    @property
    def FullPath(self) -> str: ...
    @overload
    @property
    def FullPathStatus(self) -> FileReferenceStatus: ...
    @overload
    @property
    def IsSet(self) -> bool: ...
    @overload
    @property
    def RelativePath(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class FileReferenceStatus(Enum):
    Unknown = 0
    FullPathValid = 1
    FileNotFound = 2


class FileSlc:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileSlcWriteOptions) -> bool: ...


from ..Geometry import Point3d
class FileSlcWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AngleBetweenSegmentsDegrees(self) -> float: ...
    @overload
    @property
    def EndPoint(self) -> Point3d: ...
    @overload
    @property
    def SliceDistance(self) -> float: ...
    @overload
    @property
    def StartPoint(self) -> Point3d: ...
    @overload
    @property
    def UseMeshes(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AngleBetweenSegmentsDegrees.setter
    def AngleBetweenSegmentsDegrees(self) -> MutableSequence[float]: ...
    @overload
    @EndPoint.setter
    def EndPoint(self) -> MutableSequence[Point3d]: ...
    @overload
    @SliceDistance.setter
    def SliceDistance(self) -> MutableSequence[float]: ...
    @overload
    @StartPoint.setter
    def StartPoint(self) -> MutableSequence[Point3d]: ...
    @overload
    @UseMeshes.setter
    def UseMeshes(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class FileStp:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileStpWriteOptions) -> bool: ...


class FileStpWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Export2dCurves(self) -> bool: ...
    @overload
    @property
    def ExportBlack(self) -> bool: ...
    @overload
    @property
    def SplitClosedSurfaces(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Export2dCurves.setter
    def Export2dCurves(self) -> MutableSequence[bool]: ...
    @overload
    @ExportBlack.setter
    def ExportBlack(self) -> MutableSequence[bool]: ...
    @overload
    @SplitClosedSurfaces.setter
    def SplitClosedSurfaces(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class FileType:
    @overload
    def __init__(self, extension: str, description: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Extension(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import Transform
class FileWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def DestinationFileName(self) -> str: ...
    @overload
    @property
    def FileVersion(self) -> int: ...
    @overload
    @property
    def IncludeBitmapTable(self) -> bool: ...
    @overload
    @property
    def IncludeHistory(self) -> bool: ...
    @overload
    @property
    def IncludePreviewImage(self) -> bool: ...
    @overload
    @property
    def IncludeRenderMeshes(self) -> bool: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def SuppressAllInput(self) -> bool: ...
    @overload
    @property
    def SuppressDialogBoxes(self) -> bool: ...
    @overload
    @property
    def UpdateDocumentPath(self) -> bool: ...
    @overload
    @property
    def WriteAsTemplate(self) -> bool: ...
    @overload
    @property
    def WriteGeometryOnly(self) -> bool: ...
    @overload
    @property
    def WriteSelectedObjectsOnly(self) -> bool: ...
    @overload
    @property
    def WriteUserData(self) -> bool: ...
    @overload
    @property
    def Xform(self) -> Transform: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @FileVersion.setter
    def FileVersion(self) -> MutableSequence[int]: ...
    @overload
    @IncludeBitmapTable.setter
    def IncludeBitmapTable(self) -> MutableSequence[bool]: ...
    @overload
    @IncludeHistory.setter
    def IncludeHistory(self) -> MutableSequence[bool]: ...
    @overload
    @IncludePreviewImage.setter
    def IncludePreviewImage(self) -> MutableSequence[bool]: ...
    @overload
    @IncludeRenderMeshes.setter
    def IncludeRenderMeshes(self) -> MutableSequence[bool]: ...
    @overload
    @SuppressAllInput.setter
    def SuppressAllInput(self) -> MutableSequence[bool]: ...
    @overload
    @SuppressDialogBoxes.setter
    def SuppressDialogBoxes(self) -> MutableSequence[bool]: ...
    @overload
    @UpdateDocumentPath.setter
    def UpdateDocumentPath(self) -> MutableSequence[bool]: ...
    @overload
    @WriteGeometryOnly.setter
    def WriteGeometryOnly(self) -> MutableSequence[bool]: ...
    @overload
    @WriteSelectedObjectsOnly.setter
    def WriteSelectedObjectsOnly(self) -> MutableSequence[bool]: ...
    @overload
    @WriteUserData.setter
    def WriteUserData(self) -> MutableSequence[bool]: ...
    @overload
    @Xform.setter
    def Xform(self) -> MutableSequence[Transform]: ...
    @overload
    def ToString(self) -> str: ...


class GeometryType(Enum):
    Nurbs = 0
    Mesh = 1




class ImageFile:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def SupportsAlphaChannel(filename: str) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponent
from ..DocObjects import ModelComponentType
class ManifestTable:
    def __iter__(self) -> Iterator[ModelComponent]: ...
    @overload
    def ActiveObjectCount(self, type: ModelComponentType) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: ModelComponent) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ModelComponent], arrayIndex: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> ModelComponent: ...
    @overload
    def FindId(self, id: Guid) -> T: ...
    @overload
    def FindId(self, id: Guid, type: ModelComponentType) -> ModelComponent: ...
    @overload
    def FindIndex(self, index: int) -> T: ...
    @overload
    def FindIndex(self, index: int, type: ModelComponentType) -> ModelComponent: ...
    @overload
    def FindName(self, name: str, parent: Guid) -> T: ...
    @overload
    def FindName(self, name: str, type: ModelComponentType, parent: Guid) -> ModelComponent: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> T: ...
    @overload
    def FindNameHash(self, nameHash: NameHash, type: ModelComponentType) -> ModelComponent: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def LongCount(self) -> Int64: ...
    @overload
    @property
    def Parent(self) -> Object: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetEnumerator(self, type: ModelComponentType) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetModelComponentTypeFromGenericType() -> ModelComponentType: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
class NameHash:
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, parentId: Guid): ...
    @overload
    def __init__(self, name: str, parentId: Guid, type: ModelComponentType): ...
    @overload
    def __init__(self, name: str, parentId: Guid, ignoreCase: bool): ...
    @overload
    def Clone(self) -> NameHash: ...
    @overload
    @staticmethod
    def CreateFilePathHash(path: str) -> NameHash: ...
    @overload
    def Equals(self, other: NameHash) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MappedCodePoints(self) -> UInt32: ...
    @overload
    @property
    def ParentId(self) -> Guid: ...
    @overload
    @property
    def Sha1Hash(self) -> Iterable[Byte]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(left: NameHash, right: NameHash) -> bool: ...
    @overload
    def __ne__(left: NameHash, right: NameHash) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class NGons(Enum):
    # None = 0
    Preserve = 1
    Create = 2


class ObjectTypeFilter(Enum):
    # None = 0
    Point = 1
    Pointset = 2
    Curve = 4
    Surface = 8
    Brep = 16
    Mesh = 32
    Annotation = 512
    InstanceDefinition = 2048
    InstanceReference = 4096
    TextDot = 8192
    DetailView = 32768
    Hatch = 65536
    Extrusion = 1073741824
    Any = 4294967295


class ObjGroupNames(Enum):
    NoGroups = 0
    LayerAsGroup = 1
    GroupAsGroup = 2


class ObjObjectNames(Enum):
    NoObjects = 0
    ObjectAsGroup = 1
    ObjectAsObject = 2


class SerializationOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def RhinoVersion(self) -> int: ...
    @overload
    @property
    def WriteUserData(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @RhinoVersion.setter
    def RhinoVersion(self) -> MutableSequence[int]: ...
    @overload
    @WriteUserData.setter
    def WriteUserData(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class SHA1OpenNURBS:
    @overload
    def __init__(self): ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ComputeHash(self, inputStream: Stream) -> Iterable[Byte]: ...
    @overload
    def ComputeHash(self, buffer: Iterable[Byte]) -> Iterable[Byte]: ...
    @overload
    def ComputeHash(self, buffer: Iterable[Byte], offset: int, count: int) -> Iterable[Byte]: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FileSystemPathHash(path: str, ignoreCase: Nullable) -> Iterable[Byte]: ...
    @overload
    @property
    def CanReuseTransform(self) -> bool: ...
    @overload
    @property
    def CanTransformMultipleBlocks(self) -> bool: ...
    @overload
    @property
    def Hash(self) -> Iterable[Byte]: ...
    @overload
    @property
    def HashSize(self) -> int: ...
    @overload
    @property
    def InputBlockSize(self) -> int: ...
    @overload
    @property
    def OutputBlockSize(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Initialize(self) -> None: ...
    @overload
    @staticmethod
    def StringHash(input: str) -> Iterable[Byte]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TransformBlock(self, inputBuffer: Iterable[Byte], inputOffset: int, inputCount: int, outputBuffer: Iterable[Byte], outputOffset: int) -> int: ...
    @overload
    def TransformFinalBlock(self, inputBuffer: Iterable[Byte], inputOffset: int, inputCount: int) -> Iterable[Byte]: ...


class SubDMeshing(Enum):
    Surface = 0
    ControlNet = 1


class TableTypeFilter(Enum):
    # None = 0
    Properties = 1
    Settings = 2
    Bitmap = 4
    TextureMapping = 8
    Material = 16
    Linetype = 32
    Layer = 64
    Group = 128
    Font = 256
    FutureFont = 512
    Dimstyle = 1024
    Light = 2048
    Hatchpattern = 4096
    InstanceDefinition = 8192
    ObjectTable = 16384
    Historyrecord = 32768
    UserTable = 65536


class TextLog:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filename: str): ...
    @overload
    def __init__(self, ptr: IntPtr): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IndentSize(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def NewCommandLine() -> TextLog: ...
    @overload
    def PopIndent(self) -> None: ...
    @overload
    def Print(self, text: str) -> None: ...
    @overload
    def Print(self, format: str, arg0: Object) -> None: ...
    @overload
    def Print(self, format: str, arg0: Object, arg1: Object) -> None: ...
    @overload
    def PrintWrappedText(self, text: str, lineLength: int) -> None: ...
    @overload
    def PushIndent(self) -> None: ...
    @overload
    @IndentSize.setter
    def IndentSize(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


class UseObjGsAs(Enum):
    IgnoreObjGroups = 0
    ObjGroupsAsLayers = 1
    ObjGroupsAsGroups = 2
    ObjGroupsAsObjects = 3


class VertexWelding(Enum):
    Normal = 0
    Welded = 1
    Unwelded = 2
