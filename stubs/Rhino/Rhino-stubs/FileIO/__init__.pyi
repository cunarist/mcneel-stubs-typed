from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class AnimationMode(Enum):
    X = 0
    Y = 1
    Z = 2


class AsciiEol(Enum):
    Crlf = 0
    Lf = 1
    Cr = 2


class AutocadVersion(Enum):
    Release12 = 12
    Release14 = 14
    Acad2000 = 2000
    Acad2004 = 2004
    Acad2007 = 2007
    Acad2010 = 2010
    Acad2013 = 2013
    Acad2018 = 2018


class BinaryArchiveException:
    @overload
    def __init__(self, message: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Data(self) -> IDictionary: ...
    @overload
    @property
    def HelpLink(self) -> str: ...
    @overload
    @property
    def HResult(self) -> int: ...
    @overload
    @property
    def InnerException(self) -> Exception: ...
    @overload
    @property
    def Message(self) -> str: ...
    @overload
    @property
    def Source(self) -> str: ...
    @overload
    @property
    def StackTrace(self) -> str: ...
    @overload
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @overload
    @Source.setter
    def Source(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class BinaryArchiveFile:
    @overload
    def __init__(self, filename: str, mode: BinaryArchiveMode): ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Reader(self) -> BinaryArchiveReader: ...
    @overload
    @property
    def Writer(self) -> BinaryArchiveWriter: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Open(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class BinaryArchiveMode(Enum):
    Unknown = 0
    Read = 1
    Write = 2
    ReadWrite = 3
    Read3dm = 5
    Write3dm = 6


from ..Collections import ArchivableDictionary
from ..DocObjects import ObjRef
from ..Geometry import Interval
from ..Geometry import Point2d
from ..Geometry import Point3d
from ..Geometry import Point4d
from ..Geometry import Vector2d
from ..Geometry import Vector3d
from ..Geometry import BoundingBox
from ..Geometry import Ray3d
from ..Geometry import Transform
from ..Geometry import Plane
from ..Geometry import Line
from ..Geometry import Point3f
from ..Geometry import Vector3f
from ..Geometry import MeshingParameters
from ..Geometry import GeometryBase
from ..Render import RenderSettings
class BinaryArchiveReader:
    @overload
    def AtEnd(self) -> bool: ...
    @overload
    def BeginRead3dmChunk(self) -> Tuple[bool, UInt32, Int64]: ...
    @overload
    def BeginRead3dmChunk(self, expectedTypeCode: UInt32) -> Tuple[bool, int, int]: ...
    @overload
    def Dump3dmChunk(self, log: TextLog) -> UInt32: ...
    @overload
    def EnableCRCCalculation(self, enable: bool) -> bool: ...
    @overload
    def EndRead3dmChunk(self, suppressPartiallyReadChunkWarning: bool) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Archive3dmVersion(self) -> int: ...
    @overload
    @property
    def CurrentPosition(self) -> UInt64: ...
    @overload
    @property
    def ReadErrorOccured(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Read3dmChunkVersion(self) -> Tuple[int, int]: ...
    @overload
    def Read3dmStartSection(self) -> Tuple[bool, int, str]: ...
    @overload
    def ReadBool(self) -> bool: ...
    @overload
    def ReadBoolArray(self) -> Iterable[bool]: ...
    @overload
    def ReadBoundingBox(self) -> BoundingBox: ...
    @overload
    def ReadByte(self) -> Byte: ...
    @overload
    def ReadByteArray(self) -> Iterable[Byte]: ...
    @overload
    def ReadColor(self) -> Color: ...
    @overload
    def ReadCompressedBuffer(self) -> Iterable[Byte]: ...
    @overload
    def ReadDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ReadDouble(self) -> float: ...
    @overload
    def ReadDoubleArray(self) -> Iterable[float]: ...
    @overload
    def ReadFont(self) -> Font: ...
    @overload
    def ReadGeometry(self) -> GeometryBase: ...
    @overload
    def ReadGeometryArray(self) -> Iterable[GeometryBase]: ...
    @overload
    def ReadGuid(self) -> Guid: ...
    @overload
    def ReadGuidArray(self) -> Iterable[Guid]: ...
    @overload
    def ReadInt(self) -> int: ...
    @overload
    def ReadInt64(self) -> Int64: ...
    @overload
    def ReadIntArray(self) -> Iterable[int]: ...
    @overload
    def ReadInterval(self) -> Interval: ...
    @overload
    def ReadLine(self) -> Line: ...
    @overload
    def ReadMeshingParameters(self) -> MeshingParameters: ...
    @overload
    def ReadObjRef(self) -> ObjRef: ...
    @overload
    def ReadObjRefArray(self) -> Iterable[ObjRef]: ...
    @overload
    def ReadPlane(self) -> Plane: ...
    @overload
    def ReadPoint(self) -> Point: ...
    @overload
    def ReadPoint2d(self) -> Point2d: ...
    @overload
    def ReadPoint3d(self) -> Point3d: ...
    @overload
    def ReadPoint3f(self) -> Point3f: ...
    @overload
    def ReadPoint4d(self) -> Point4d: ...
    @overload
    def ReadPointF(self) -> PointF: ...
    @overload
    def ReadRay3d(self) -> Ray3d: ...
    @overload
    def ReadRectangle(self) -> Rectangle: ...
    @overload
    def ReadRectangleF(self) -> RectangleF: ...
    @overload
    def ReadRenderSettings(self) -> RenderSettings: ...
    @overload
    def ReadSByte(self) -> SByte: ...
    @overload
    def ReadSByteArray(self) -> Iterable[SByte]: ...
    @overload
    def ReadShort(self) -> Int16: ...
    @overload
    def ReadShortArray(self) -> Iterable[Int16]: ...
    @overload
    def ReadSingle(self) -> Single: ...
    @overload
    def ReadSingleArray(self) -> Iterable[Single]: ...
    @overload
    def ReadSize(self) -> Size: ...
    @overload
    def ReadSizeF(self) -> SizeF: ...
    @overload
    def ReadString(self) -> str: ...
    @overload
    def ReadStringArray(self) -> Iterable[str]: ...
    @overload
    def ReadTransform(self) -> Transform: ...
    @overload
    def ReadUInt(self) -> UInt32: ...
    @overload
    def ReadUShort(self) -> UInt16: ...
    @overload
    def ReadUtf8String(self) -> str: ...
    @overload
    def ReadVector2d(self) -> Vector2d: ...
    @overload
    def ReadVector3d(self) -> Vector3d: ...
    @overload
    def ReadVector3f(self) -> Vector3f: ...
    @overload
    def SeekFromCurrentPosition(self, byteOffset: Int64) -> bool: ...
    @overload
    def SeekFromCurrentPosition(self, byteOffset: UInt64, forward: bool) -> bool: ...
    @overload
    def SeekFromStart(self, byteOffset: UInt64) -> bool: ...
    @overload
    @ReadErrorOccured.setter
    def ReadErrorOccured(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
from ..DocObjects import ObjRef
from ..Geometry import Interval
from ..Geometry import Point2d
from ..Geometry import Point3d
from ..Geometry import Point4d
from ..Geometry import Vector2d
from ..Geometry import Vector3d
from ..Geometry import BoundingBox
from ..Geometry import Ray3d
from ..Geometry import Transform
from ..Geometry import Plane
from ..Geometry import Line
from ..Geometry import Point3f
from ..Geometry import Vector3f
from ..Geometry import MeshingParameters
from ..Geometry import GeometryBase
from ..Render import RenderSettings
class BinaryArchiveWriter:
    @overload
    def BeginWrite3dmChunk(self, typecode: UInt32, value: Int64) -> bool: ...
    @overload
    def BeginWrite3dmChunk(self, typecode: UInt32, majorVersion: int, minorVersion: int) -> bool: ...
    @overload
    def EnableCRCCalculation(self, enable: bool) -> bool: ...
    @overload
    def EndWrite3dmChunk(self) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Archive3dmVersion(self) -> int: ...
    @overload
    @property
    def WriteErrorOccured(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @WriteErrorOccured.setter
    def WriteErrorOccured(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write3dmChunkVersion(self, major: int, minor: int) -> None: ...
    @overload
    def WriteBool(self, value: bool) -> None: ...
    @overload
    def WriteBoolArray(self, value: Iterable[bool]) -> None: ...
    @overload
    def WriteBoundingBox(self, value: BoundingBox) -> None: ...
    @overload
    def WriteByte(self, value: Byte) -> None: ...
    @overload
    def WriteByteArray(self, value: Iterable[Byte]) -> None: ...
    @overload
    def WriteColor(self, value: Color) -> None: ...
    @overload
    def WriteCompressedBuffer(self, value: Iterable[Byte]) -> None: ...
    @overload
    def WriteDictionary(self, dictionary: ArchivableDictionary) -> None: ...
    @overload
    def WriteDouble(self, value: float) -> None: ...
    @overload
    def WriteDoubleArray(self, value: Iterable[float]) -> None: ...
    @overload
    def WriteFont(self, value: Font) -> None: ...
    @overload
    def WriteGeometry(self, value: GeometryBase) -> None: ...
    @overload
    def WriteGeometryArray(self, geometry: Iterable[GeometryBase]) -> None: ...
    @overload
    def WriteGuid(self, value: Guid) -> None: ...
    @overload
    def WriteGuidArray(self, value: Iterable[Guid]) -> None: ...
    @overload
    def WriteInt(self, value: int) -> None: ...
    @overload
    def WriteInt64(self, value: Int64) -> None: ...
    @overload
    def WriteIntArray(self, value: Iterable[int]) -> None: ...
    @overload
    def WriteInterval(self, value: Interval) -> None: ...
    @overload
    def WriteLine(self, value: Line) -> None: ...
    @overload
    def WriteMeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def WriteObjRef(self, objref: ObjRef) -> None: ...
    @overload
    def WriteObjRefArray(self, objrefs: Iterable[ObjRef]) -> None: ...
    @overload
    def WritePlane(self, value: Plane) -> None: ...
    @overload
    def WritePoint(self, value: Point) -> None: ...
    @overload
    def WritePoint2d(self, value: Point2d) -> None: ...
    @overload
    def WritePoint3d(self, value: Point3d) -> None: ...
    @overload
    def WritePoint3f(self, value: Point3f) -> None: ...
    @overload
    def WritePoint4d(self, value: Point4d) -> None: ...
    @overload
    def WritePointF(self, value: PointF) -> None: ...
    @overload
    def WriteRay3d(self, value: Ray3d) -> None: ...
    @overload
    def WriteRectangle(self, value: Rectangle) -> None: ...
    @overload
    def WriteRectangleF(self, value: RectangleF) -> None: ...
    @overload
    def WriteRenderSettings(self, value: RenderSettings) -> None: ...
    @overload
    def WriteSByte(self, value: SByte) -> None: ...
    @overload
    def WriteSByteArray(self, value: Iterable[SByte]) -> None: ...
    @overload
    def WriteShort(self, value: Int16) -> None: ...
    @overload
    def WriteShortArray(self, value: Iterable[Int16]) -> None: ...
    @overload
    def WriteSingle(self, value: Single) -> None: ...
    @overload
    def WriteSingleArray(self, value: Iterable[Single]) -> None: ...
    @overload
    def WriteSize(self, value: Size) -> None: ...
    @overload
    def WriteSizeF(self, value: SizeF) -> None: ...
    @overload
    def WriteString(self, value: str) -> None: ...
    @overload
    def WriteStringArray(self, value: Iterable[str]) -> None: ...
    @overload
    def WriteTransform(self, value: Transform) -> None: ...
    @overload
    def WriteUInt(self, value: UInt32) -> None: ...
    @overload
    def WriteUShort(self, value: UInt16) -> None: ...
    @overload
    def WriteUtf8String(self, value: str) -> None: ...
    @overload
    def WriteVector2d(self, value: Vector2d) -> None: ...
    @overload
    def WriteVector3d(self, value: Vector3d) -> None: ...
    @overload
    def WriteVector3f(self, value: Vector3f) -> None: ...


class CapTypes(Enum):
    # None = 0
    Flat = 1
    Box = 2
    Dome = 3


class ColorMethodType(Enum):
    ACI = 0
    RGB = 1




class ContentHash:
    @overload
    def Clone(self) -> ContentHash: ...
    @overload
    @staticmethod
    def CreateFromFile(path: str) -> ContentHash: ...
    @overload
    def Equals(self, other: ContentHash) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ByteCount(self) -> UInt64: ...
    @overload
    @property
    def HashTime(self) -> DateTime: ...
    @overload
    @property
    def Sha1ContentHash(self) -> Iterable[Byte]: ...
    @overload
    @property
    def Sha1NameHash(self) -> Iterable[Byte]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(left: ContentHash, right: ContentHash) -> bool: ...
    @overload
    def __ne__(left: ContentHash, right: ContentHash) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class CurveType(Enum):
    Polyline = 0
    Nurbs = 1


class DelimiterMode(Enum):
    Comma = 0
    Semicolon = 1
    Space = 2
    Tab = 3
    Other = 4
    Automatic = 5


class DelimiterMode(Enum):
    Comma = 0
    Semicolon = 1
    Space = 2
    Tab = 3
    Other = 4


class DracoColorFormat(Enum):
    ARGB = 0
    RGBA = 1


from ..Geometry import Mesh
from ..Geometry import PointCloud
from ..Geometry import GeometryBase
class DracoCompression:
    @overload
    @staticmethod
    def Compress(mesh: Mesh) -> DracoCompression: ...
    @overload
    @staticmethod
    def Compress(pointCloud: PointCloud) -> DracoCompression: ...
    @overload
    @staticmethod
    def Compress(mesh: Mesh, options: DracoCompressionOptions) -> DracoCompression: ...
    @overload
    @staticmethod
    def Compress(pointCloud: PointCloud, options: DracoCompressionOptions) -> DracoCompression: ...
    @overload
    @staticmethod
    def DecompressBase64String(encoded: str) -> GeometryBase: ...
    @overload
    @staticmethod
    def DecompressByteArray(bytes: Iterable[Byte]) -> GeometryBase: ...
    @overload
    @staticmethod
    def DecompressFile(path: str) -> GeometryBase: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def NormalAttributePosition(self) -> int: ...
    @overload
    @property
    def TextureCoordinatesAttributePosition(self) -> int: ...
    @overload
    @property
    def VertexAttributePosition(self) -> int: ...
    @overload
    @property
    def VertexColorAttributePosition(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToBase64String(self) -> str: ...
    @overload
    def ToByteArray(self) -> Iterable[Byte]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, path: str) -> bool: ...


class DracoCompressionOptions:
    @overload
    def __init__(self): ...
    IncludeNormals: bool
    IncludeTextureCoordinates: bool
    IncludeVertexColors: bool
    VertexColorFormat: DracoColorFormat
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CompressionLevel(self) -> int: ...
    @overload
    @property
    def NormalQuantizationBits(self) -> int: ...
    @overload
    @property
    def PositionQuantizationBits(self) -> int: ...
    @overload
    @property
    def TextureCoordintateQuantizationBits(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @CompressionLevel.setter
    def CompressionLevel(self, value: int) -> None: ...
    @overload
    @NormalQuantizationBits.setter
    def NormalQuantizationBits(self, value: int) -> None: ...
    @overload
    @PositionQuantizationBits.setter
    def PositionQuantizationBits(self, value: int) -> None: ...
    @overload
    @TextureCoordintateQuantizationBits.setter
    def TextureCoordintateQuantizationBits(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class EolMode(Enum):
    Crlf = 1
    Cr = 2
    Lf = 3


class ExportArcMode(Enum):
    Lines = 0
    Arcs = 1
    Polybulges = 2
    Polylines = 3
    Splines = 4
    ThreeDPolylines = 5


class ExportLineMode(Enum):
    Lines = 0
    Polylines = 1
    Splines = 2
    ThreeDPolylines = 3


class ExportMeshMode(Enum):
    Meshes = 0
    ThreeDFace = 1


class ExportPolycurveMode(Enum):
    Lines = 0
    Polybulges = 1
    Polylines = 2
    Splines = 3
    ThreeDPolylines = 4


class ExportPolylineMode(Enum):
    Lines = 0
    Polylines = 1
    Splines = 2
    ThreeDPolylines = 3


class ExportSplineMode(Enum):
    Lines = 0
    Polylines = 1
    Splines = 2
    ThreeDPolylines = 3


class ExportSurfaceMode(Enum):
    Solids = 0
    Curves = 1
    Meshes = 2


from ..DocObjects import EarthAnchorPoint
from ..Geometry import GeometryBase
class File3dm:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def DumpSummary(self) -> str: ...
    @overload
    def DumpToTextLog(self, log: TextLog) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromByteArray(bytes: Iterable[Byte]) -> File3dm: ...
    @overload
    @property
    def AllDimStyles(self) -> File3dmDimStyleTable: ...
    @overload
    @property
    def AllGroups(self) -> File3dmGroupTable: ...
    @overload
    @property
    def AllHatchPatterns(self) -> File3dmHatchPatternTable: ...
    @overload
    @property
    def AllInstanceDefinitions(self) -> File3dmInstanceDefinitionTable: ...
    @overload
    @property
    def AllLayers(self) -> File3dmLayerTable: ...
    @overload
    @property
    def AllLinetypes(self) -> File3dmLinetypeTable: ...
    @overload
    @property
    def AllMaterials(self) -> File3dmMaterialTable: ...
    @overload
    @property
    def AllNamedConstructionPlanes(self) -> File3dmNamedConstructionPlanes: ...
    @overload
    @property
    def AllNamedViews(self) -> File3dmViewTable: ...
    @overload
    @property
    def AllViews(self) -> File3dmViewTable: ...
    @overload
    @property
    def ApplicationDetails(self) -> str: ...
    @overload
    @property
    def ApplicationName(self) -> str: ...
    @overload
    @property
    def ApplicationUrl(self) -> str: ...
    @overload
    @property
    def ArchiveVersion(self) -> int: ...
    @overload
    @property
    def Created(self) -> DateTime: ...
    @overload
    @property
    def CreatedBy(self) -> str: ...
    @overload
    @property
    def DimStyles(self) -> Iterable[DimensionStyle]: ...
    @overload
    @property
    def EarthAnchorPoint(self) -> EarthAnchorPoint: ...
    @overload
    @property
    def EmbeddedFiles(self) -> File3dmEmbeddedFiles: ...
    @overload
    @property
    def HatchPatterns(self) -> Iterable[HatchPattern]: ...
    @overload
    @property
    def InstanceDefinitions(self) -> Iterable[InstanceDefinitionGeometry]: ...
    @overload
    @property
    def LastEdited(self) -> DateTime: ...
    @overload
    @property
    def LastEditedBy(self) -> str: ...
    @overload
    @property
    def Layers(self) -> Iterable[Layer]: ...
    @overload
    @property
    def Linetypes(self) -> Iterable[Linetype]: ...
    @overload
    @property
    def Manifest(self) -> ManifestTable: ...
    @overload
    @property
    def Materials(self) -> Iterable[Material]: ...
    @overload
    @property
    def NamedConstructionPlanes(self) -> Iterable[ConstructionPlane]: ...
    @overload
    @property
    def NamedViews(self) -> Iterable[ViewInfo]: ...
    @overload
    @property
    def Notes(self) -> File3dmNotes: ...
    @overload
    @property
    def Objects(self) -> File3dmObjectTable: ...
    @overload
    @property
    def PlugInData(self) -> File3dmPlugInDataTable: ...
    @overload
    @property
    def RenderEnvironments(self) -> File3dmRenderEnvironments: ...
    @overload
    @property
    def RenderMaterials(self) -> File3dmRenderMaterials: ...
    @overload
    @property
    def RenderTextures(self) -> File3dmRenderTextures: ...
    @overload
    @property
    def Revision(self) -> int: ...
    @overload
    @property
    def Settings(self) -> File3dmSettings: ...
    @overload
    @property
    def StartSectionComments(self) -> str: ...
    @overload
    @property
    def Strings(self) -> File3dmStringTable: ...
    @overload
    @property
    def Views(self) -> Iterable[ViewInfo]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreviewImage(self) -> Bitmap: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str) -> File3dm: ...
    @overload
    @staticmethod
    def Read(path: str, tableTypeFilterFilter: TableTypeFilter, objectTypeFilter: ObjectTypeFilter) -> File3dm: ...
    @overload
    @staticmethod
    def ReadApplicationData(path: str) -> Tuple[str, str, str]: ...
    @overload
    @staticmethod
    def ReadArchiveVersion(path: str) -> int: ...
    @overload
    @staticmethod
    def ReadDimensionStyles(path: str) -> Iterable[DimensionStyle]: ...
    @overload
    @staticmethod
    def ReadEarthAnchorPoint(path: str) -> EarthAnchorPoint: ...
    @overload
    @staticmethod
    def ReadNotes(path: str) -> str: ...
    @overload
    @staticmethod
    def ReadPreviewImage(path: str) -> Bitmap: ...
    @overload
    @staticmethod
    def ReadRevisionHistory(path: str) -> Tuple[bool, str, str, int, DateTime, DateTime]: ...
    @overload
    @staticmethod
    def ReadWithLog(path: str) -> Tuple[File3dm, str]: ...
    @overload
    @staticmethod
    def ReadWithLog(path: str, tableTypeFilterFilter: TableTypeFilter, objectTypeFilter: ObjectTypeFilter) -> Tuple[File3dm, str]: ...
    @overload
    @ApplicationDetails.setter
    def ApplicationDetails(self, value: str) -> None: ...
    @overload
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    @overload
    @ApplicationUrl.setter
    def ApplicationUrl(self, value: str) -> None: ...
    @overload
    @EarthAnchorPoint.setter
    def EarthAnchorPoint(self, value: EarthAnchorPoint) -> None: ...
    @overload
    @Notes.setter
    def Notes(self, value: File3dmNotes) -> None: ...
    @overload
    @Revision.setter
    def Revision(self, value: int) -> None: ...
    @overload
    @StartSectionComments.setter
    def StartSectionComments(self, value: str) -> None: ...
    @overload
    def SetPreviewImage(self, image: Bitmap) -> None: ...
    @overload
    def ToByteArray(self) -> Iterable[Byte]: ...
    @overload
    def ToByteArray(self, options: File3dmWriteOptions) -> Iterable[Byte]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, path: str, options: File3dmWriteOptions) -> bool: ...
    @overload
    def Write(self, path: str, version: int) -> bool: ...
    @overload
    @staticmethod
    def WriteMultipleObjects(path: str, geometry: Iterable[GeometryBase]) -> bool: ...
    @overload
    @staticmethod
    def WriteOneObject(path: str, geometry: GeometryBase) -> bool: ...
    @overload
    def WriteWithLog(self, path: str, options: File3dmWriteOptions) -> Tuple[bool, str]: ...
    @overload
    def WriteWithLog(self, path: str, version: int) -> Tuple[bool, str]: ...




class File3dmCurvePiping:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Accuracy(self) -> int: ...
    @overload
    @property
    def CapType(self) -> CapTypes: ...
    @overload
    @property
    def Faceted(self) -> bool: ...
    @overload
    @property
    def On(self) -> bool: ...
    @overload
    @property
    def Radius(self) -> float: ...
    @overload
    @property
    def Segments(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Accuracy.setter
    def Accuracy(self, value: int) -> None: ...
    @overload
    @CapType.setter
    def CapType(self, value: CapTypes) -> None: ...
    @overload
    @Faceted.setter
    def Faceted(self, value: bool) -> None: ...
    @overload
    @On.setter
    def On(self, value: bool) -> None: ...
    @overload
    @Radius.setter
    def Radius(self, value: float) -> None: ...
    @overload
    @Segments.setter
    def Segments(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import DimensionStyle
class File3dmDimStyleTable:
    def __iter__(self) -> Iterator[DimensionStyle]: ...
    def __getitem__(self, index: int) -> DimensionStyle: ...
    def __setitem__(self, index: int, value: DimensionStyle): ...
    @overload
    def Add(self, item: DimensionStyle) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: DimensionStyle) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> DimensionStyle: ...
    @overload
    def FindIndex(self, index: int) -> DimensionStyle: ...
    @overload
    def FindName(self, name: str) -> DimensionStyle: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> DimensionStyle: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class File3dmDisplacement:
    @overload
    def AddSubItem(self, face_index: int, on: bool, texture: Guid, mapping_channel: int, black_point: float, white_point: float) -> bool: ...
    @overload
    def DeleteAllSubItems(self) -> None: ...
    @overload
    def DeleteSubItem(self, face_index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BlackPoint(self) -> float: ...
    @overload
    @property
    def Fairing(self) -> int: ...
    @overload
    @property
    def FairingOn(self) -> bool: ...
    @overload
    @property
    def FinalMaxFaces(self) -> int: ...
    @overload
    @property
    def FinalMaxFacesOn(self) -> bool: ...
    @overload
    @property
    def InitialQuality(self) -> int: ...
    @overload
    @property
    def MappingChannel(self) -> int: ...
    @overload
    @property
    def MeshMemoryLimit(self) -> int: ...
    @overload
    @property
    def On(self) -> bool: ...
    @overload
    @property
    def PostWeldAngle(self) -> float: ...
    @overload
    @property
    def RefineSensitivity(self) -> float: ...
    @overload
    @property
    def RefineSteps(self) -> int: ...
    @overload
    @property
    def SweepResolutionFormula(self) -> SweepResolutionFormulas: ...
    @overload
    @property
    def TextureId(self) -> Guid: ...
    @overload
    @property
    def WhitePoint(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSubItemFaceIndexes(self) -> Iterable[int]: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @BlackPoint.setter
    def BlackPoint(self, value: float) -> None: ...
    @overload
    @Fairing.setter
    def Fairing(self, value: int) -> None: ...
    @overload
    @FairingOn.setter
    def FairingOn(self, value: bool) -> None: ...
    @overload
    @FinalMaxFaces.setter
    def FinalMaxFaces(self, value: int) -> None: ...
    @overload
    @FinalMaxFacesOn.setter
    def FinalMaxFacesOn(self, value: bool) -> None: ...
    @overload
    @InitialQuality.setter
    def InitialQuality(self, value: int) -> None: ...
    @overload
    @MappingChannel.setter
    def MappingChannel(self, value: int) -> None: ...
    @overload
    @MeshMemoryLimit.setter
    def MeshMemoryLimit(self, value: int) -> None: ...
    @overload
    @On.setter
    def On(self, value: bool) -> None: ...
    @overload
    @PostWeldAngle.setter
    def PostWeldAngle(self, value: float) -> None: ...
    @overload
    @RefineSensitivity.setter
    def RefineSensitivity(self, value: float) -> None: ...
    @overload
    @RefineSteps.setter
    def RefineSteps(self, value: int) -> None: ...
    @overload
    @SweepResolutionFormula.setter
    def SweepResolutionFormula(self, value: SweepResolutionFormulas) -> None: ...
    @overload
    @TextureId.setter
    def TextureId(self, value: Guid) -> None: ...
    @overload
    @WhitePoint.setter
    def WhitePoint(self, value: float) -> None: ...
    @overload
    def SetSubItemBlackPoint(self, face_index: int, black_point: float) -> None: ...
    @overload
    def SetSubItemMappingChannel(self, face_index: int, chan: int) -> None: ...
    @overload
    def SetSubItemOn(self, face_index: int, on: bool) -> None: ...
    @overload
    def SetSubItemTexture(self, face_index: int, texture_id: Guid) -> None: ...
    @overload
    def SetSubItemWhitePoint(self, face_index: int, white_point: float) -> None: ...
    @overload
    def SubItemBlackPoint(self, face_index: int) -> float: ...
    @overload
    def SubItemMappingChannel(self, face_index: int) -> int: ...
    @overload
    def SubItemOn(self, face_index: int) -> bool: ...
    @overload
    def SubItemTexture(self, face_index: int) -> Guid: ...
    @overload
    def SubItemWhitePoint(self, face_index: int) -> float: ...
    @overload
    def ToString(self) -> str: ...


class File3dmEdgeSoftening:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Chamfer(self) -> bool: ...
    @overload
    @property
    def EdgeAngleThreshold(self) -> float: ...
    @overload
    @property
    def Faceted(self) -> bool: ...
    @overload
    @property
    def ForceSoftening(self) -> bool: ...
    @overload
    @property
    def On(self) -> bool: ...
    @overload
    @property
    def Softening(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Chamfer.setter
    def Chamfer(self, value: bool) -> None: ...
    @overload
    @EdgeAngleThreshold.setter
    def EdgeAngleThreshold(self, value: float) -> None: ...
    @overload
    @Faceted.setter
    def Faceted(self, value: bool) -> None: ...
    @overload
    @ForceSoftening.setter
    def ForceSoftening(self, value: bool) -> None: ...
    @overload
    @On.setter
    def On(self, value: bool) -> None: ...
    @overload
    @Softening.setter
    def Softening(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..Geometry import ComponentStatus
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
from ..DocObjects import ModelComponent
class File3dmEmbeddedFile(ModelComponent):
    @overload
    def __init__(self): ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: UInt32) -> UInt32: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def DeletedName(self) -> str: ...
    @overload
    @property
    def Disposed(self) -> bool: ...
    @overload
    @property
    def Filename(self) -> str: ...
    @overload
    @property
    def HasId(self) -> bool: ...
    @overload
    @property
    def HasIndex(self) -> bool: ...
    @overload
    @property
    def HasName(self) -> bool: ...
    @overload
    @property
    def HasUserData(self) -> bool: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IdIsLocked(self) -> bool: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def IndexIsLocked(self) -> bool: ...
    @overload
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @overload
    @property
    def IsDeleted(self) -> bool: ...
    @overload
    @property
    def IsDocumentControlled(self) -> bool: ...
    @overload
    @property
    def IsReference(self) -> bool: ...
    @overload
    @property
    def IsSystemComponent(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def ModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NameIsLocked(self) -> bool: ...
    @overload
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def UserData(self) -> UserDataList: ...
    @overload
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    def SaveToFile(self, filename: str) -> bool: ...
    @overload
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @overload
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @overload
    @Index.setter
    def Index(self, value: int) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


class File3dmEmbeddedFiles:
    @overload
    def __init__(self, f: File3dm): ...
    def __iter__(self) -> Iterator[File3dmEmbeddedFile]: ...
    @overload
    def Add(self, filename: str) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Group
class File3dmGroupTable:
    def __iter__(self) -> Iterator[Group]: ...
    def __getitem__(self, index: int) -> Group: ...
    def __setitem__(self, index: int, value: Group): ...
    @overload
    def Add(self, item: Group) -> None: ...
    @overload
    def AddGroup(self) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Group) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> Group: ...
    @overload
    def FindIndex(self, groupIndex: int) -> Group: ...
    @overload
    def FindName(self, name: str) -> Group: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Group: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GroupMembers(self, groupIndex: int) -> Iterable[File3dmObject]: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import HatchPattern
class File3dmHatchPatternTable:
    def __iter__(self) -> Iterator[HatchPattern]: ...
    def __getitem__(self, index: int) -> HatchPattern: ...
    def __setitem__(self, index: int, value: HatchPattern): ...
    @overload
    def Add(self, item: HatchPattern) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: HatchPattern) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> HatchPattern: ...
    @overload
    def FindIndex(self, index: int) -> HatchPattern: ...
    @overload
    def FindName(self, name: str) -> HatchPattern: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> HatchPattern: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..Geometry import InstanceDefinitionGeometry
from ..Geometry import Point3d
from ..Geometry import GeometryBase
from ..DocObjects import ObjectAttributes
class File3dmInstanceDefinitionTable:
    def __iter__(self) -> Iterator[InstanceDefinitionGeometry]: ...
    def __getitem__(self, index: int) -> InstanceDefinitionGeometry: ...
    def __setitem__(self, index: int, value: InstanceDefinitionGeometry): ...
    @overload
    def Add(self, item: InstanceDefinitionGeometry) -> None: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: Iterable[GeometryBase]) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: Iterable[GeometryBase], attributes: Iterable[ObjectAttributes]) -> int: ...
    @overload
    def Add(self, name: str, description: str, basePoint: Point3d, geometry: GeometryBase, attributes: ObjectAttributes) -> int: ...
    @overload
    def Add(self, name: str, description: str, url: str, urlTag: str, basePoint: Point3d, geometry: Iterable[GeometryBase], attributes: Iterable[ObjectAttributes]) -> int: ...
    @overload
    def AddLinked(self, filename: str, name: str, description: str) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Delete(self, item: InstanceDefinitionGeometry) -> bool: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> InstanceDefinitionGeometry: ...
    @overload
    def FindName(self, name: str) -> InstanceDefinitionGeometry: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> InstanceDefinitionGeometry: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Layer
class File3dmLayerTable:
    def __iter__(self) -> Iterator[Layer]: ...
    def __getitem__(self, index: int) -> Layer: ...
    def __setitem__(self, index: int, value: Layer): ...
    @overload
    def Add(self, item: Layer) -> None: ...
    @overload
    def AddDefaultLayer(self, name: str, color: Color) -> int: ...
    @overload
    def AddLayer(self, name: str, color: Color) -> int: ...
    @overload
    def AddLayer(self, name: str, color: Color, parentId: Guid) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Layer) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> Layer: ...
    @overload
    def FindIndex(self, index: int) -> Layer: ...
    @overload
    def FindName(self, name: str, parentId: Guid) -> Layer: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Layer: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Linetype
class File3dmLinetypeTable:
    def __iter__(self) -> Iterator[Linetype]: ...
    def __getitem__(self, index: int) -> Linetype: ...
    def __setitem__(self, index: int, value: Linetype): ...
    @overload
    def Add(self, item: Linetype) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Linetype) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> Linetype: ...
    @overload
    def FindIndex(self, index: int) -> Linetype: ...
    @overload
    def FindName(self, name: str) -> Linetype: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> Linetype: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Material
class File3dmMaterialTable:
    def __iter__(self) -> Iterator[Material]: ...
    def __getitem__(self, index: int) -> Material: ...
    def __setitem__(self, index: int, value: Material): ...
    @overload
    def Add(self, item: Material) -> None: ...
    @overload
    def AddMaterial(self, material: Material) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: Material) -> bool: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> Material: ...
    @overload
    def FindIndex(self, index: int) -> Material: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class File3dmMeshModifiers:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CurvePiping(self) -> File3dmCurvePiping: ...
    @overload
    @property
    def Displacement(self) -> File3dmDisplacement: ...
    @overload
    @property
    def EdgeSoftening(self) -> File3dmEdgeSoftening: ...
    @overload
    @property
    def ShutLining(self) -> File3dmShutLining: ...
    @overload
    @property
    def Thickening(self) -> File3dmThickening: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ConstructionPlane
from ..Geometry import Plane
class File3dmNamedConstructionPlanes:
    def __iter__(self) -> Iterator[ConstructionPlane]: ...
    def __getitem__(self, index: int) -> ConstructionPlane: ...
    def __setitem__(self, index: int, value: ConstructionPlane): ...
    @overload
    def Add(self, cplane: ConstructionPlane) -> None: ...
    @overload
    def Add(self, name: str, plane: Plane) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, cplane: ConstructionPlane) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ConstructionPlane], arrayIndex: int) -> None: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, cplane: ConstructionPlane) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindName(self, name: str) -> ConstructionPlane: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[ConstructionPlane]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, cplane: ConstructionPlane) -> int: ...
    @overload
    def ToString(self) -> str: ...


class File3dmNotes:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsHtml(self) -> bool: ...
    @overload
    @property
    def IsVisible(self) -> bool: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def WindowRectangle(self) -> Rectangle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @IsHtml.setter
    def IsHtml(self, value: bool) -> None: ...
    @overload
    @IsVisible.setter
    def IsVisible(self, value: bool) -> None: ...
    @overload
    @Notes.setter
    def Notes(self, value: str) -> None: ...
    @overload
    @WindowRectangle.setter
    def WindowRectangle(self, value: Rectangle) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import GeometryBase
from ..DocObjects import ObjectAttributes
from ..DocObjects import ModelComponentType
from ..Geometry import Transform
from ..Render import TextureMapping
from ..Geometry import ComponentStatus
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
from ..DocObjects import ModelComponent
class File3dmObject(ModelComponent):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: UInt32) -> UInt32: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: File3dmObject) -> bool: ...
    @overload
    @property
    def Attributes(self) -> ObjectAttributes: ...
    @overload
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def DeletedName(self) -> str: ...
    @overload
    @property
    def Disposed(self) -> bool: ...
    @overload
    @property
    def Geometry(self) -> GeometryBase: ...
    @overload
    @property
    def HasId(self) -> bool: ...
    @overload
    @property
    def HasIndex(self) -> bool: ...
    @overload
    @property
    def HasName(self) -> bool: ...
    @overload
    @property
    def HasUserData(self) -> bool: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IdIsLocked(self) -> bool: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def IndexIsLocked(self) -> bool: ...
    @overload
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @overload
    @property
    def IsDeleted(self) -> bool: ...
    @overload
    @property
    def IsDocumentControlled(self) -> bool: ...
    @overload
    @property
    def IsReference(self) -> bool: ...
    @overload
    @property
    def IsSystemComponent(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def ModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NameIsLocked(self) -> bool: ...
    @overload
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def UserData(self) -> UserDataList: ...
    @overload
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetTextureMapping(self, mappingChannelId: int) -> Tuple[TextureMapping, Transform]: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @overload
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @overload
    @Index.setter
    def Index(self, value: int) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryReadUserData(self, userDataId: Guid, readFromAttributes: bool, dataReader: Func) -> bool: ...


from ..DocObjects import ModelComponentType
from ..DocObjects import Layer
from ..DocObjects import Group
from ..Geometry import BoundingBox
from ..Geometry import GeometryBase
from ..DocObjects import ObjectAttributes
from ..Geometry import Point3d
from ..Geometry import Point3f
from ..Geometry import PointCloud
from ..Geometry import Plane
from ..Geometry import LinearDimension
from ..Geometry import AngularDimension
from ..Geometry import OrdinateDimension
from ..Geometry import RadialDimension
from ..Geometry import Line
from ..Geometry import Arc
from ..Geometry import Circle
from ..Geometry import Ellipse
from ..Geometry import Sphere
from ..Geometry import Curve
from ..Geometry import TextDot
from ..Geometry import InstanceReferenceGeometry
from ..Geometry import Transform
from ..Display import Text3d
from ..Geometry import TextJustification
from ..Geometry import Surface
from ..Geometry import Extrusion
from ..Geometry import Mesh
from ..Geometry import Brep
from ..Geometry import Hatch
from ..Geometry import SubD
class File3dmObjectTable:
    def __iter__(self) -> Iterator[File3dmObject]: ...
    def __getitem__(self, index: int) -> File3dmObject: ...
    def __setitem__(self, index: int, value: File3dmObject): ...
    @overload
    def Add(self, item: File3dmObject) -> None: ...
    @overload
    def Add(self, item: GeometryBase, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddAngularDimension(self, dimension: AngularDimension) -> Guid: ...
    @overload
    def AddAngularDimension(self, dimension: AngularDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddArc(self, arc: Arc) -> Guid: ...
    @overload
    def AddArc(self, arc: Arc, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddBrep(self, brep: Brep) -> Guid: ...
    @overload
    def AddBrep(self, brep: Brep, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddCircle(self, circle: Circle) -> Guid: ...
    @overload
    def AddCircle(self, circle: Circle, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid]) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportId: Guid) -> Guid: ...
    @overload
    def AddClippingPlane(self, plane: Plane, uMagnitude: float, vMagnitude: float, clippedViewportIds: Iterable[Guid], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddCurve(self, curve: Curve) -> Guid: ...
    @overload
    def AddCurve(self, curve: Curve, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddEllipse(self, ellipse: Ellipse) -> Guid: ...
    @overload
    def AddEllipse(self, ellipse: Ellipse, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Extrusion) -> Guid: ...
    @overload
    def AddExtrusion(self, extrusion: Extrusion, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddHatch(self, hatch: Hatch) -> Guid: ...
    @overload
    def AddHatch(self, hatch: Hatch, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceReference: InstanceReferenceGeometry) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceReference: InstanceReferenceGeometry, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Transform) -> Guid: ...
    @overload
    def AddInstanceObject(self, instanceDefinitionIndex: int, instanceXform: Transform, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLeader(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddLeader(self, text: str, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddLeader(self, plane: Plane, points: Iterable[Point2d]) -> Guid: ...
    @overload
    def AddLeader(self, plane: Plane, points: Iterable[Point2d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Plane, points: Iterable[Point2d]) -> Guid: ...
    @overload
    def AddLeader(self, text: str, plane: Plane, points: Iterable[Point2d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLine(self, line: Line) -> Guid: ...
    @overload
    def AddLine(self, from_: Point3d, to: Point3d) -> Guid: ...
    @overload
    def AddLine(self, line: Line, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLine(self, from_: Point3d, to: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddLinearDimension(self, dimension: LinearDimension) -> Guid: ...
    @overload
    def AddLinearDimension(self, dimension: LinearDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddMesh(self, mesh: Mesh) -> Guid: ...
    @overload
    def AddMesh(self, mesh: Mesh, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddOrdinateDimension(self, dimension: OrdinateDimension) -> Guid: ...
    @overload
    def AddOrdinateDimension(self, dimension: OrdinateDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3f) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3d) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3f, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoint(self, point: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoint(self, x: float, y: float, z: float) -> Guid: ...
    @overload
    def AddPointCloud(self, cloud: PointCloud) -> Guid: ...
    @overload
    def AddPointCloud(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddPointCloud(self, cloud: PointCloud, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPointCloud(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddPoints(self, points: Iterable[Point3f]) -> Iterable[Guid]: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d]) -> Iterable[Guid]: ...
    @overload
    def AddPoints(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> Iterable[Guid]: ...
    @overload
    def AddPoints(self, points: Iterable[Point3f], attributes: ObjectAttributes) -> Iterable[Guid]: ...
    @overload
    def AddPolyline(self, points: Iterable[Point3d]) -> Guid: ...
    @overload
    def AddPolyline(self, points: Iterable[Point3d], attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddRadialDimension(self, dimension: RadialDimension) -> Guid: ...
    @overload
    def AddRadialDimension(self, dimension: RadialDimension, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSphere(self, sphere: Sphere) -> Guid: ...
    @overload
    def AddSphere(self, sphere: Sphere, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSubD(self, subd: SubD) -> Guid: ...
    @overload
    def AddSubD(self, subd: SubD, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddSurface(self, surface: Surface) -> Guid: ...
    @overload
    def AddSurface(self, surface: Surface, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text3d: Text3d) -> Guid: ...
    @overload
    def AddText(self, text3d: Text3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification) -> Guid: ...
    @overload
    def AddText(self, text: str, plane: Plane, height: float, fontName: str, bold: bool, italic: bool, justification: TextJustification, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddTextDot(self, dot: TextDot) -> Guid: ...
    @overload
    def AddTextDot(self, dot: TextDot, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Point3d) -> Guid: ...
    @overload
    def AddTextDot(self, text: str, location: Point3d, attributes: ObjectAttributes) -> Guid: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, item: File3dmObject) -> bool: ...
    @overload
    def Delete(self, objectId: Guid) -> bool: ...
    @overload
    def Delete(self, objectIds: Iterable[Guid]) -> int: ...
    @overload
    def Delete(self, index: int) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindByGroup(self, group: Group) -> Iterable[File3dmObject]: ...
    @overload
    def FindByLayer(self, layer: Layer) -> Iterable[File3dmObject]: ...
    @overload
    def FindByLayer(self, layer: str) -> Iterable[File3dmObject]: ...
    @overload
    def FindId(self, id: Guid) -> File3dmObject: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    def GetBoundingBox(self) -> BoundingBox: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class File3dmPlugInData:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class File3dmPlugInDataTable:
    def __iter__(self) -> Iterator[File3dmPlugInData]: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Dump(self) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[File3dmPlugInData]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryRead(self, pluginData: File3dmPlugInData, dataReader: Func) -> bool: ...


from ..DocObjects import ModelComponentType
from ..Geometry import ComponentStatus
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
from ..DocObjects import ModelComponent
class File3dmRenderContent(ModelComponent):
    @overload
    def ChildSlotOn(self, child_slot_name: str) -> bool: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: UInt32) -> UInt32: ...
    @overload
    def DeleteChild(self, child_slot_name: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, child_slot_name: str) -> File3dmRenderContent: ...
    @overload
    @property
    def AutoDelete(self) -> bool: ...
    @overload
    @property
    def Children(self) -> Iterable[File3dmRenderContent]: ...
    @overload
    @property
    def ChildSlotName(self) -> str: ...
    @overload
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def DeletedName(self) -> str: ...
    @overload
    @property
    def Disposed(self) -> bool: ...
    @overload
    @property
    def File3dmParent(self) -> File3dm: ...
    @overload
    @property
    def GroupId(self) -> Guid: ...
    @overload
    @property
    def HasId(self) -> bool: ...
    @overload
    @property
    def HasIndex(self) -> bool: ...
    @overload
    @property
    def HasName(self) -> bool: ...
    @overload
    @property
    def HasUserData(self) -> bool: ...
    @overload
    @property
    def Hidden(self) -> bool: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IdIsLocked(self) -> bool: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def IndexIsLocked(self) -> bool: ...
    @overload
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def IsChild(self) -> bool: ...
    @overload
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @overload
    @property
    def IsDeleted(self) -> bool: ...
    @overload
    @property
    def IsDocumentControlled(self) -> bool: ...
    @overload
    @property
    def IsReference(self) -> bool: ...
    @overload
    @property
    def IsSystemComponent(self) -> bool: ...
    @overload
    @property
    def IsTopLevel(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Kind(self) -> str: ...
    @overload
    @property
    def ModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NameIsLocked(self) -> bool: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> File3dmRenderContent: ...
    @overload
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    @property
    def Reference(self) -> bool: ...
    @overload
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def RenderEngineId(self) -> Guid: ...
    @overload
    @property
    def Tags(self) -> str: ...
    @overload
    @property
    def TopLevel(self) -> File3dmRenderContent: ...
    @overload
    @property
    def TypeId(self) -> Guid: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def UserData(self) -> UserDataList: ...
    @overload
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetParameter(self, param: str) -> IConvertible: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @overload
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @overload
    @Index.setter
    def Index(self, value: int) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def SetParameter(self, param: str, value: Object) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def XML(self, recursive: bool) -> str: ...


from ..DocObjects import Environment
from ..DocObjects import ModelComponentType
from ..Geometry import ComponentStatus
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
class File3dmRenderEnvironment(File3dmRenderContent):
    @overload
    def ChildSlotOn(self, child_slot_name: str) -> bool: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: UInt32) -> UInt32: ...
    @overload
    def DeleteChild(self, child_slot_name: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, child_slot_name: str) -> File3dmRenderContent: ...
    @overload
    @property
    def AutoDelete(self) -> bool: ...
    @overload
    @property
    def Children(self) -> Iterable[File3dmRenderContent]: ...
    @overload
    @property
    def ChildSlotName(self) -> str: ...
    @overload
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def DeletedName(self) -> str: ...
    @overload
    @property
    def Disposed(self) -> bool: ...
    @overload
    @property
    def File3dmParent(self) -> File3dm: ...
    @overload
    @property
    def GroupId(self) -> Guid: ...
    @overload
    @property
    def HasId(self) -> bool: ...
    @overload
    @property
    def HasIndex(self) -> bool: ...
    @overload
    @property
    def HasName(self) -> bool: ...
    @overload
    @property
    def HasUserData(self) -> bool: ...
    @overload
    @property
    def Hidden(self) -> bool: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IdIsLocked(self) -> bool: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def IndexIsLocked(self) -> bool: ...
    @overload
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def IsChild(self) -> bool: ...
    @overload
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @overload
    @property
    def IsDeleted(self) -> bool: ...
    @overload
    @property
    def IsDocumentControlled(self) -> bool: ...
    @overload
    @property
    def IsReference(self) -> bool: ...
    @overload
    @property
    def IsSystemComponent(self) -> bool: ...
    @overload
    @property
    def IsTopLevel(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Kind(self) -> str: ...
    @overload
    @property
    def ModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NameIsLocked(self) -> bool: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> File3dmRenderContent: ...
    @overload
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    @property
    def Reference(self) -> bool: ...
    @overload
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def RenderEngineId(self) -> Guid: ...
    @overload
    @property
    def Tags(self) -> str: ...
    @overload
    @property
    def TopLevel(self) -> File3dmRenderContent: ...
    @overload
    @property
    def TypeId(self) -> Guid: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def UserData(self) -> UserDataList: ...
    @overload
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetParameter(self, param: str) -> IConvertible: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @overload
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @overload
    @Index.setter
    def Index(self, value: int) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def SetParameter(self, param: str, value: Object) -> bool: ...
    @overload
    def ToEnvironment(self) -> Environment: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def XML(self, recursive: bool) -> str: ...


class File3dmRenderEnvironments:
    @overload
    def __init__(self, f: File3dm): ...
    def __iter__(self) -> Iterator[File3dmRenderEnvironment]: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Find(self, g: Guid) -> File3dmRenderEnvironment: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import Material
from ..DocObjects import ModelComponentType
from ..Geometry import ComponentStatus
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
class File3dmRenderMaterial(File3dmRenderContent):
    @overload
    def ChildSlotOn(self, child_slot_name: str) -> bool: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: UInt32) -> UInt32: ...
    @overload
    def DeleteChild(self, child_slot_name: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, child_slot_name: str) -> File3dmRenderContent: ...
    @overload
    @property
    def AutoDelete(self) -> bool: ...
    @overload
    @property
    def Children(self) -> Iterable[File3dmRenderContent]: ...
    @overload
    @property
    def ChildSlotName(self) -> str: ...
    @overload
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def DeletedName(self) -> str: ...
    @overload
    @property
    def Disposed(self) -> bool: ...
    @overload
    @property
    def File3dmParent(self) -> File3dm: ...
    @overload
    @property
    def GroupId(self) -> Guid: ...
    @overload
    @property
    def HasId(self) -> bool: ...
    @overload
    @property
    def HasIndex(self) -> bool: ...
    @overload
    @property
    def HasName(self) -> bool: ...
    @overload
    @property
    def HasUserData(self) -> bool: ...
    @overload
    @property
    def Hidden(self) -> bool: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IdIsLocked(self) -> bool: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def IndexIsLocked(self) -> bool: ...
    @overload
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def IsChild(self) -> bool: ...
    @overload
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @overload
    @property
    def IsDeleted(self) -> bool: ...
    @overload
    @property
    def IsDocumentControlled(self) -> bool: ...
    @overload
    @property
    def IsReference(self) -> bool: ...
    @overload
    @property
    def IsSystemComponent(self) -> bool: ...
    @overload
    @property
    def IsTopLevel(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Kind(self) -> str: ...
    @overload
    @property
    def ModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NameIsLocked(self) -> bool: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> File3dmRenderContent: ...
    @overload
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    @property
    def Reference(self) -> bool: ...
    @overload
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def RenderEngineId(self) -> Guid: ...
    @overload
    @property
    def Tags(self) -> str: ...
    @overload
    @property
    def TopLevel(self) -> File3dmRenderContent: ...
    @overload
    @property
    def TypeId(self) -> Guid: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def UserData(self) -> UserDataList: ...
    @overload
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetParameter(self, param: str) -> IConvertible: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @overload
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @overload
    @Index.setter
    def Index(self, value: int) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def SetParameter(self, param: str, value: Object) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToMaterial(self) -> Material: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def XML(self, recursive: bool) -> str: ...


class File3dmRenderMaterials:
    @overload
    def __init__(self, f: File3dm): ...
    def __iter__(self) -> Iterator[File3dmRenderMaterial]: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Find(self, g: Guid) -> File3dmRenderMaterial: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import Texture
from ..DocObjects import ModelComponentType
from ..Geometry import ComponentStatus
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
class File3dmRenderTexture(File3dmRenderContent):
    @overload
    def ChildSlotOn(self, child_slot_name: str) -> bool: ...
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    def DataCRC(self, currentRemainder: UInt32) -> UInt32: ...
    @overload
    def DeleteChild(self, child_slot_name: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, child_slot_name: str) -> File3dmRenderContent: ...
    @overload
    @property
    def AutoDelete(self) -> bool: ...
    @overload
    @property
    def Children(self) -> Iterable[File3dmRenderContent]: ...
    @overload
    @property
    def ChildSlotName(self) -> str: ...
    @overload
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def DeletedName(self) -> str: ...
    @overload
    @property
    def Disposed(self) -> bool: ...
    @overload
    @property
    def File3dmParent(self) -> File3dm: ...
    @overload
    @property
    def Filename(self) -> str: ...
    @overload
    @property
    def GroupId(self) -> Guid: ...
    @overload
    @property
    def HasId(self) -> bool: ...
    @overload
    @property
    def HasIndex(self) -> bool: ...
    @overload
    @property
    def HasName(self) -> bool: ...
    @overload
    @property
    def HasUserData(self) -> bool: ...
    @overload
    @property
    def Hidden(self) -> bool: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IdIsLocked(self) -> bool: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def IndexIsLocked(self) -> bool: ...
    @overload
    @property
    def InstanceDefinitionModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def IsChild(self) -> bool: ...
    @overload
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @overload
    @property
    def IsDeleted(self) -> bool: ...
    @overload
    @property
    def IsDocumentControlled(self) -> bool: ...
    @overload
    @property
    def IsReference(self) -> bool: ...
    @overload
    @property
    def IsSystemComponent(self) -> bool: ...
    @overload
    @property
    def IsTopLevel(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Kind(self) -> str: ...
    @overload
    @property
    def ModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NameIsLocked(self) -> bool: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> File3dmRenderContent: ...
    @overload
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    @property
    def Reference(self) -> bool: ...
    @overload
    @property
    def ReferenceModelSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def RenderEngineId(self) -> Guid: ...
    @overload
    @property
    def Tags(self) -> str: ...
    @overload
    @property
    def TopLevel(self) -> File3dmRenderContent: ...
    @overload
    @property
    def TypeId(self) -> Guid: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def UserData(self) -> UserDataList: ...
    @overload
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetParameter(self, param: str) -> IConvertible: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @overload
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @overload
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @overload
    @Index.setter
    def Index(self, value: int) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    def SetParameter(self, param: str, value: Object) -> bool: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToTexture(self) -> Texture: ...
    @overload
    def XML(self, recursive: bool) -> str: ...


class File3dmRenderTextures:
    @overload
    def __init__(self, f: File3dm): ...
    def __iter__(self) -> Iterator[File3dmRenderTexture]: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Find(self, g: Guid) -> File3dmRenderTexture: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import Point3d
from ..Render import RenderSettings
class File3dmSettings:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ModelAbsoluteTolerance(self) -> float: ...
    @overload
    @property
    def ModelAngleToleranceDegrees(self) -> float: ...
    @overload
    @property
    def ModelAngleToleranceRadians(self) -> float: ...
    @overload
    @property
    def ModelBasepoint(self) -> Point3d: ...
    @overload
    @property
    def ModelRelativeTolerance(self) -> float: ...
    @overload
    @property
    def ModelUnitSystem(self) -> UnitSystem: ...
    @overload
    @property
    def ModelUrl(self) -> str: ...
    @overload
    @property
    def PageAbsoluteTolerance(self) -> float: ...
    @overload
    @property
    def PageAngleToleranceDegrees(self) -> float: ...
    @overload
    @property
    def PageAngleToleranceRadians(self) -> float: ...
    @overload
    @property
    def PageRelativeTolerance(self) -> float: ...
    @overload
    @property
    def PageUnitSystem(self) -> UnitSystem: ...
    @overload
    @property
    def RenderSettings(self) -> RenderSettings: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ModelAbsoluteTolerance.setter
    def ModelAbsoluteTolerance(self, value: float) -> None: ...
    @overload
    @ModelAngleToleranceDegrees.setter
    def ModelAngleToleranceDegrees(self, value: float) -> None: ...
    @overload
    @ModelAngleToleranceRadians.setter
    def ModelAngleToleranceRadians(self, value: float) -> None: ...
    @overload
    @ModelBasepoint.setter
    def ModelBasepoint(self, value: Point3d) -> None: ...
    @overload
    @ModelRelativeTolerance.setter
    def ModelRelativeTolerance(self, value: float) -> None: ...
    @overload
    @ModelUnitSystem.setter
    def ModelUnitSystem(self, value: UnitSystem) -> None: ...
    @overload
    @ModelUrl.setter
    def ModelUrl(self, value: str) -> None: ...
    @overload
    @PageAbsoluteTolerance.setter
    def PageAbsoluteTolerance(self, value: float) -> None: ...
    @overload
    @PageAngleToleranceDegrees.setter
    def PageAngleToleranceDegrees(self, value: float) -> None: ...
    @overload
    @PageAngleToleranceRadians.setter
    def PageAngleToleranceRadians(self, value: float) -> None: ...
    @overload
    @PageRelativeTolerance.setter
    def PageRelativeTolerance(self, value: float) -> None: ...
    @overload
    @PageUnitSystem.setter
    def PageUnitSystem(self, value: UnitSystem) -> None: ...
    @overload
    def ToString(self) -> str: ...


class File3dmShutLining:
    @overload
    def AddCurve(self) -> Guid: ...
    @overload
    def CurveEnabled(self, curve_id: Guid) -> bool: ...
    @overload
    def CurveIsBump(self, curve_id: Guid) -> bool: ...
    @overload
    def CurveProfile(self, curve_id: Guid) -> int: ...
    @overload
    def CurvePull(self, curve_id: Guid) -> bool: ...
    @overload
    def CurveRadius(self, curve_id: Guid) -> float: ...
    @overload
    def DeleteAllCurves(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AutoUpdate(self) -> bool: ...
    @overload
    @property
    def Faceted(self) -> bool: ...
    @overload
    @property
    def ForceUpdate(self) -> bool: ...
    @overload
    @property
    def On(self) -> bool: ...
    @overload
    def GetCurves(self) -> Iterable[Guid]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AutoUpdate.setter
    def AutoUpdate(self, value: bool) -> None: ...
    @overload
    @Faceted.setter
    def Faceted(self, value: bool) -> None: ...
    @overload
    @ForceUpdate.setter
    def ForceUpdate(self, value: bool) -> None: ...
    @overload
    @On.setter
    def On(self, value: bool) -> None: ...
    @overload
    def SetCurveEnabled(self, curve_id: Guid, enabled: bool) -> None: ...
    @overload
    def SetCurveIsBump(self, curve_id: Guid, b: bool) -> None: ...
    @overload
    def SetCurveProfile(self, curve_id: Guid, profile: int) -> None: ...
    @overload
    def SetCurvePull(self, curve_id: Guid, pull: bool) -> None: ...
    @overload
    def SetCurveRadius(self, curve_id: Guid, radius: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class File3dmStringTable:
    @overload
    def Delete(self, key: str) -> None: ...
    @overload
    def Delete(self, section: str, entry: str) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def DocumentUserTextCount(self) -> int: ...
    @overload
    def GetEntryNames(self, section: str) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetKey(self, i: int) -> str: ...
    @overload
    def GetSectionNames(self) -> Iterable[str]: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetValue(self, i: int) -> str: ...
    @overload
    def GetValue(self, key: str) -> str: ...
    @overload
    def GetValue(self, section: str, entry: str) -> str: ...
    @overload
    def SetString(self, key: str, value: str) -> str: ...
    @overload
    def SetString(self, section: str, entry: str, value: str) -> str: ...
    @overload
    def ToString(self) -> str: ...


class File3dmThickening:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BothSides(self) -> bool: ...
    @overload
    @property
    def Distance(self) -> float: ...
    @overload
    @property
    def OffsetOnly(self) -> bool: ...
    @overload
    @property
    def On(self) -> bool: ...
    @overload
    @property
    def Solid(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @BothSides.setter
    def BothSides(self, value: bool) -> None: ...
    @overload
    @Distance.setter
    def Distance(self, value: float) -> None: ...
    @overload
    @OffsetOnly.setter
    def OffsetOnly(self, value: bool) -> None: ...
    @overload
    @On.setter
    def On(self, value: bool) -> None: ...
    @overload
    @Solid.setter
    def Solid(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class File3dmTypeCodes:
    TCODE_COMMENTBLOCK: UInt32
    TCODE_ENDOFFILE: UInt32
    TCODE_ENDOFFILE_GOO: UInt32
    TCODE_LEGACY_GEOMETRY: UInt32
    TCODE_OPENNURBS_OBJECT: UInt32
    TCODE_GEOMETRY: UInt32
    TCODE_ANNOTATION: UInt32
    TCODE_DISPLAY: UInt32
    TCODE_RENDER: UInt32
    TCODE_INTERFACE: UInt32
    TCODE_TOLERANCE: UInt32
    TCODE_TABLE: UInt32
    TCODE_TABLEREC: UInt32
    TCODE_USER: UInt32
    TCODE_SHORT: UInt32
    TCODE_CRC: UInt32
    TCODE_ANONYMOUS_CHUNK: UInt32
    TCODE_MATERIAL_TABLE: UInt32
    TCODE_LAYER_TABLE: UInt32
    TCODE_LIGHT_TABLE: UInt32
    TCODE_OBJECT_TABLE: UInt32
    TCODE_PROPERTIES_TABLE: UInt32
    TCODE_SETTINGS_TABLE: UInt32
    TCODE_BITMAP_TABLE: UInt32
    TCODE_USER_TABLE: UInt32
    TCODE_GROUP_TABLE: UInt32
    TCODE_FONT_TABLE: UInt32
    TCODE_DIMSTYLE_TABLE: UInt32
    TCODE_INSTANCE_DEFINITION_TABLE: UInt32
    TCODE_HATCHPATTERN_TABLE: UInt32
    TCODE_LINETYPE_TABLE: UInt32
    TCODE_OBSOLETE_LAYERSET_TABLE: UInt32
    TCODE_TEXTURE_MAPPING_TABLE: UInt32
    TCODE_HISTORYRECORD_TABLE: UInt32
    TCODE_ENDOFTABLE: UInt32
    TCODE_PROPERTIES_REVISIONHISTORY: UInt32
    TCODE_PROPERTIES_NOTES: UInt32
    TCODE_PROPERTIES_PREVIEWIMAGE: UInt32
    TCODE_PROPERTIES_APPLICATION: UInt32
    TCODE_PROPERTIES_COMPRESSED_PREVIEWIMAGE: UInt32
    TCODE_PROPERTIES_OPENNURBS_VERSION: UInt32
    TCODE_SETTINGS_PLUGINLIST: UInt32
    TCODE_SETTINGS_UNITSANDTOLS: UInt32
    TCODE_SETTINGS_RENDERMESH: UInt32
    TCODE_SETTINGS_ANALYSISMESH: UInt32
    TCODE_SETTINGS_ANNOTATION: UInt32
    TCODE_SETTINGS_NAMED_CPLANE_LIST: UInt32
    TCODE_SETTINGS_NAMED_VIEW_LIST: UInt32
    TCODE_SETTINGS_VIEW_LIST: UInt32
    TCODE_SETTINGS_CURRENT_LAYER_INDEX: UInt32
    TCODE_SETTINGS_CURRENT_MATERIAL_INDEX: UInt32
    TCODE_SETTINGS_CURRENT_COLOR: UInt32
    TCODE_SETTINGS__NEVER__USE__THIS: UInt32
    TCODE_SETTINGS_CURRENT_WIRE_DENSITY: UInt32
    TCODE_SETTINGS_RENDER: UInt32
    TCODE_SETTINGS_GRID_DEFAULTS: UInt32
    TCODE_SETTINGS_MODEL_URL: UInt32
    TCODE_SETTINGS_CURRENT_FONT_INDEX: UInt32
    TCODE_SETTINGS_CURRENT_DIMSTYLE_INDEX: UInt32
    TCODE_SETTINGS_ATTRIBUTES: UInt32
    TCODE_VIEW_RECORD: UInt32
    TCODE_VIEW_CPLANE: UInt32
    TCODE_VIEW_VIEWPORT: UInt32
    TCODE_VIEW_SHOWCONGRID: UInt32
    TCODE_VIEW_SHOWCONAXES: UInt32
    TCODE_VIEW_SHOWWORLDAXES: UInt32
    TCODE_VIEW_TRACEIMAGE: UInt32
    TCODE_VIEW_WALLPAPER: UInt32
    TCODE_VIEW_WALLPAPER_V3: UInt32
    TCODE_VIEW_TARGET: UInt32
    TCODE_VIEW_DISPLAYMODE: UInt32
    TCODE_VIEW_NAME: UInt32
    TCODE_VIEW_POSITION: UInt32
    TCODE_VIEW_ATTRIBUTES: UInt32
    TCODE_VIEW_VIEWPORT_USERDATA: UInt32
    TCODE_BITMAP_RECORD: UInt32
    TCODE_MATERIAL_RECORD: UInt32
    TCODE_LAYER_RECORD: UInt32
    TCODE_LIGHT_RECORD: UInt32
    TCODE_LIGHT_RECORD_ATTRIBUTES: UInt32
    TCODE_LIGHT_RECORD_ATTRIBUTES_USERDATA: UInt32
    TCODE_LIGHT_RECORD_END: UInt32
    TCODE_USER_TABLE_UUID: UInt32
    TCODE_USER_RECORD: UInt32
    TCODE_GROUP_RECORD: UInt32
    TCODE_FONT_RECORD: UInt32
    TCODE_DIMSTYLE_RECORD: UInt32
    TCODE_INSTANCE_DEFINITION_RECORD: UInt32
    TCODE_HATCHPATTERN_RECORD: UInt32
    TCODE_LINETYPE_RECORD: UInt32
    TCODE_OBSOLETE_LAYERSET_RECORD: UInt32
    TCODE_TEXTURE_MAPPING_RECORD: UInt32
    TCODE_HISTORYRECORD_RECORD: UInt32
    TCODE_OBJECT_RECORD: UInt32
    TCODE_OBJECT_RECORD_TYPE: UInt32
    TCODE_OBJECT_RECORD_ATTRIBUTES: UInt32
    TCODE_OBJECT_RECORD_ATTRIBUTES_USERDATA: UInt32
    TCODE_OBJECT_RECORD_HISTORY: UInt32
    TCODE_OBJECT_RECORD_HISTORY_HEADER: UInt32
    TCODE_OBJECT_RECORD_HISTORY_DATA: UInt32
    TCODE_OBJECT_RECORD_END: UInt32
    TCODE_OPENNURBS_CLASS: UInt32
    TCODE_OPENNURBS_CLASS_UUID: UInt32
    TCODE_OPENNURBS_CLASS_DATA: UInt32
    TCODE_OPENNURBS_CLASS_USERDATA: UInt32
    TCODE_OPENNURBS_CLASS_USERDATA_HEADER: UInt32
    TCODE_OPENNURBS_CLASS_END: UInt32
    TCODE_ANNOTATION_SETTINGS: UInt32
    TCODE_TEXT_BLOCK: UInt32
    TCODE_ANNOTATION_LEADER: UInt32
    TCODE_LINEAR_DIMENSION: UInt32
    TCODE_ANGULAR_DIMENSION: UInt32
    TCODE_RADIAL_DIMENSION: UInt32
    TCODE_RHINOIO_OBJECT_NURBS_CURVE: UInt32
    TCODE_RHINOIO_OBJECT_NURBS_SURFACE: UInt32
    TCODE_RHINOIO_OBJECT_BREP: UInt32
    TCODE_RHINOIO_OBJECT_DATA: UInt32
    TCODE_RHINOIO_OBJECT_END: UInt32
    TCODE_LEGACY_ASM: UInt32
    TCODE_LEGACY_PRT: UInt32
    TCODE_LEGACY_SHL: UInt32
    TCODE_LEGACY_FAC: UInt32
    TCODE_LEGACY_BND: UInt32
    TCODE_LEGACY_TRM: UInt32
    TCODE_LEGACY_SRF: UInt32
    TCODE_LEGACY_CRV: UInt32
    TCODE_LEGACY_SPL: UInt32
    TCODE_LEGACY_PNT: UInt32
    TCODE_STUFF: UInt32
    TCODE_LEGACY_ASMSTUFF: UInt32
    TCODE_LEGACY_PRTSTUFF: UInt32
    TCODE_LEGACY_SHLSTUFF: UInt32
    TCODE_LEGACY_FACSTUFF: UInt32
    TCODE_LEGACY_BNDSTUFF: UInt32
    TCODE_LEGACY_TRMSTUFF: UInt32
    TCODE_LEGACY_SRFSTUFF: UInt32
    TCODE_LEGACY_CRVSTUFF: UInt32
    TCODE_LEGACY_SPLSTUFF: UInt32
    TCODE_LEGACY_PNTSTUFF: UInt32
    TCODE_RH_POINT: UInt32
    TCODE_RH_SPOTLIGHT: UInt32
    TCODE_OLD_RH_TRIMESH: UInt32
    TCODE_OLD_MESH_VERTEX_NORMALS: UInt32
    TCODE_OLD_MESH_UV: UInt32
    TCODE_OLD_FULLMESH: UInt32
    TCODE_MESH_OBJECT: UInt32
    TCODE_COMPRESSED_MESH_GEOMETRY: UInt32
    TCODE_ANALYSIS_MESH: UInt32
    TCODE_NAME: UInt32
    TCODE_VIEW: UInt32
    TCODE_CPLANE: UInt32
    TCODE_NAMED_CPLANE: UInt32
    TCODE_NAMED_VIEW: UInt32
    TCODE_VIEWPORT: UInt32
    TCODE_SHOWGRID: UInt32
    TCODE_SHOWGRIDAXES: UInt32
    TCODE_SHOWWORLDAXES: UInt32
    TCODE_VIEWPORT_POSITION: UInt32
    TCODE_VIEWPORT_TRACEINFO: UInt32
    TCODE_SNAPSIZE: UInt32
    TCODE_NEAR_CLIP_PLANE: UInt32
    TCODE_HIDE_TRACE: UInt32
    TCODE_NOTES: UInt32
    TCODE_UNIT_AND_TOLERANCES: UInt32
    TCODE_MAXIMIZED_VIEWPORT: UInt32
    TCODE_VIEWPORT_WALLPAPER: UInt32
    TCODE_SUMMARY: UInt32
    TCODE_BITMAPPREVIEW: UInt32
    TCODE_VIEWPORT_DISPLAY_MODE: UInt32
    TCODE_LAYERTABLE: UInt32
    TCODE_LAYERREF: UInt32
    TCODE_XDATA: UInt32
    TCODE_RGB: UInt32
    TCODE_TEXTUREMAP: UInt32
    TCODE_BUMPMAP: UInt32
    TCODE_TRANSPARENCY: UInt32
    TCODE_DISP_AM_RESOLUTION: UInt32
    TCODE_RGBDISPLAY: UInt32
    TCODE_RENDER_MATERIAL_ID: UInt32
    TCODE_LAYER: UInt32
    TCODE_LAYER_OBSELETE_1: UInt32
    TCODE_LAYER_OBSELETE_2: UInt32
    TCODE_LAYER_OBSELETE_3: UInt32
    TCODE_LAYERON: UInt32
    TCODE_LAYERTHAWED: UInt32
    TCODE_LAYERLOCKED: UInt32
    TCODE_LAYERVISIBLE: UInt32
    TCODE_LAYERPICKABLE: UInt32
    TCODE_LAYERSNAPABLE: UInt32
    TCODE_LAYERRENDERABLE: UInt32
    TCODE_LAYERSTATE: UInt32
    TCODE_LAYERINDEX: UInt32
    TCODE_LAYERMATERIALINDEX: UInt32
    TCODE_RENDERMESHPARAMS: UInt32
    TCODE_DISP_CPLINES: UInt32
    TCODE_DISP_MAXLENGTH: UInt32
    TCODE_CURRENTLAYER: UInt32
    TCODE_LAYERNAME: UInt32
    TCODE_LEGACY_TOL_FIT: UInt32
    TCODE_LEGACY_TOL_ANGLE: UInt32
    TCODE_DICTIONARY: UInt32
    TCODE_DICTIONARY_ID: UInt32
    TCODE_DICTIONARY_ENTRY: UInt32
    TCODE_DICTIONARY_END: UInt32
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ViewInfo
class File3dmViewTable:
    def __iter__(self) -> Iterator[ViewInfo]: ...
    def __getitem__(self, index: int) -> ViewInfo: ...
    def __setitem__(self, index: int, value: ViewInfo): ...
    @overload
    def Add(self, item: ViewInfo) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: ViewInfo) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ViewInfo], arrayIndex: int) -> None: ...
    @overload
    def Delete(self, index: int) -> bool: ...
    @overload
    def Delete(self, item: ViewInfo) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindName(self, name: str) -> ViewInfo: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[ViewInfo]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: ViewInfo) -> int: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ObjectType
class File3dmWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def EnableAnalysisMeshes(self, objectType: ObjectType, enable: bool) -> None: ...
    @overload
    def EnableRenderMeshes(self, objectType: ObjectType, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def SaveAnalysisMeshes(self) -> bool: ...
    @overload
    @property
    def SaveRenderMeshes(self) -> bool: ...
    @overload
    @property
    def SaveUserData(self) -> bool: ...
    @overload
    @property
    def Version(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @SaveAnalysisMeshes.setter
    def SaveAnalysisMeshes(self, value: bool) -> None: ...
    @overload
    @SaveRenderMeshes.setter
    def SaveRenderMeshes(self, value: bool) -> None: ...
    @overload
    @SaveUserData.setter
    def SaveUserData(self, value: bool) -> None: ...
    @overload
    @Version.setter
    def Version(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class File3ds:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: File3dsReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: File3dsWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class File3dsReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ImportCameras(self) -> bool: ...
    @overload
    @property
    def ImportLights(self) -> bool: ...
    @overload
    @property
    def Unweld(self) -> bool: ...
    @overload
    @property
    def UnweldAngle(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ImportCameras.setter
    def ImportCameras(self, value: bool) -> None: ...
    @overload
    @ImportLights.setter
    def ImportLights(self, value: bool) -> None: ...
    @overload
    @Unweld.setter
    def Unweld(self, value: bool) -> None: ...
    @overload
    @UnweldAngle.setter
    def UnweldAngle(self, value: float) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class File3dsWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def SaveLights(self) -> bool: ...
    @overload
    @property
    def SaveViews(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    @SaveLights.setter
    def SaveLights(self, value: bool) -> None: ...
    @overload
    @SaveViews.setter
    def SaveViews(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class File3mf:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: File3mfWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class File3mfWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Copyright(self) -> str: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Designer(self) -> str: ...
    @overload
    @property
    def LicenseTerms(self) -> str: ...
    @overload
    @property
    def Metadata(self) -> Dictionary: ...
    @overload
    @property
    def MoveOutputToPositiveXYZOctant(self) -> bool: ...
    @overload
    @property
    def Rating(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Copyright.setter
    def Copyright(self, value: str) -> None: ...
    @overload
    @Description.setter
    def Description(self, value: str) -> None: ...
    @overload
    @Designer.setter
    def Designer(self, value: str) -> None: ...
    @overload
    @LicenseTerms.setter
    def LicenseTerms(self, value: str) -> None: ...
    @overload
    @MoveOutputToPositiveXYZOctant.setter
    def MoveOutputToPositiveXYZOctant(self, value: bool) -> None: ...
    @overload
    @Rating.setter
    def Rating(self, value: str) -> None: ...
    @overload
    @Title.setter
    def Title(self, value: str) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileAi:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileAiReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileAiWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileAiReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AiScale(self) -> float: ...
    @overload
    @property
    def AiUnits(self) -> Units: ...
    @overload
    @property
    def PreserveModelScale(self) -> bool: ...
    @overload
    @property
    def RhinoScale(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AiScale.setter
    def AiScale(self, value: float) -> None: ...
    @overload
    @AiUnits.setter
    def AiUnits(self, value: Units) -> None: ...
    @overload
    @PreserveModelScale.setter
    def PreserveModelScale(self, value: bool) -> None: ...
    @overload
    @RhinoScale.setter
    def RhinoScale(self, value: float) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileAiWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AIScale(self) -> float: ...
    @overload
    @property
    def AiUnits(self) -> Units: ...
    @overload
    @property
    def ExportHatchesAsSolidFills(self) -> bool: ...
    @overload
    @property
    def ExportViewBoundary(self) -> bool: ...
    @overload
    @property
    def OrderLayers(self) -> bool: ...
    @overload
    @property
    def PreserveModelScale(self) -> bool: ...
    @overload
    @property
    def RhinoScale(self) -> float: ...
    @overload
    @property
    def UseCMYK(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AIScale.setter
    def AIScale(self, value: float) -> None: ...
    @overload
    @AiUnits.setter
    def AiUnits(self, value: Units) -> None: ...
    @overload
    @ExportHatchesAsSolidFills.setter
    def ExportHatchesAsSolidFills(self, value: bool) -> None: ...
    @overload
    @ExportViewBoundary.setter
    def ExportViewBoundary(self, value: bool) -> None: ...
    @overload
    @OrderLayers.setter
    def OrderLayers(self, value: bool) -> None: ...
    @overload
    @PreserveModelScale.setter
    def PreserveModelScale(self, value: bool) -> None: ...
    @overload
    @RhinoScale.setter
    def RhinoScale(self, value: float) -> None: ...
    @overload
    @UseCMYK.setter
    def UseCMYK(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileAmf:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileAmfWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileAmfWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileCd:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileCdWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileCdWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileCsv:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileCsvWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileCsvWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Area(self) -> bool: ...
    @overload
    @property
    def AreaCentroid(self) -> bool: ...
    @overload
    @property
    def AreaMoments(self) -> bool: ...
    @overload
    @property
    def AttributesKeys(self) -> bool: ...
    @overload
    @property
    def AttributesTexts(self) -> bool: ...
    @overload
    @property
    def CumulativeMassProperties(self) -> bool: ...
    @overload
    @property
    def GroupIndexes(self) -> bool: ...
    @overload
    @property
    def GroupName(self) -> bool: ...
    @overload
    @property
    def Header(self) -> bool: ...
    @overload
    @property
    def LayerColor(self) -> bool: ...
    @overload
    @property
    def LayerHierarchy(self) -> bool: ...
    @overload
    @property
    def LayerIndex(self) -> bool: ...
    @overload
    @property
    def LayerName(self) -> bool: ...
    @overload
    @property
    def Length(self) -> bool: ...
    @overload
    @property
    def ObjectColor(self) -> bool: ...
    @overload
    @property
    def ObjectDescription(self) -> bool: ...
    @overload
    @property
    def ObjectID(self) -> bool: ...
    @overload
    @property
    def ObjectKeys(self) -> bool: ...
    @overload
    @property
    def ObjectMaterial(self) -> bool: ...
    @overload
    @property
    def ObjectName(self) -> bool: ...
    @overload
    @property
    def ObjectsTexts(self) -> bool: ...
    @overload
    @property
    def Perimeter(self) -> bool: ...
    @overload
    @property
    def SurroundPointsWithDoubleQuotes(self) -> bool: ...
    @overload
    @property
    def Volume(self) -> bool: ...
    @overload
    @property
    def VolumeCentroid(self) -> bool: ...
    @overload
    @property
    def VolumeMoments(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Area.setter
    def Area(self, value: bool) -> None: ...
    @overload
    @AreaCentroid.setter
    def AreaCentroid(self, value: bool) -> None: ...
    @overload
    @AreaMoments.setter
    def AreaMoments(self, value: bool) -> None: ...
    @overload
    @AttributesKeys.setter
    def AttributesKeys(self, value: bool) -> None: ...
    @overload
    @AttributesTexts.setter
    def AttributesTexts(self, value: bool) -> None: ...
    @overload
    @CumulativeMassProperties.setter
    def CumulativeMassProperties(self, value: bool) -> None: ...
    @overload
    @GroupIndexes.setter
    def GroupIndexes(self, value: bool) -> None: ...
    @overload
    @GroupName.setter
    def GroupName(self, value: bool) -> None: ...
    @overload
    @Header.setter
    def Header(self, value: bool) -> None: ...
    @overload
    @LayerColor.setter
    def LayerColor(self, value: bool) -> None: ...
    @overload
    @LayerHierarchy.setter
    def LayerHierarchy(self, value: bool) -> None: ...
    @overload
    @LayerIndex.setter
    def LayerIndex(self, value: bool) -> None: ...
    @overload
    @LayerName.setter
    def LayerName(self, value: bool) -> None: ...
    @overload
    @Length.setter
    def Length(self, value: bool) -> None: ...
    @overload
    @ObjectColor.setter
    def ObjectColor(self, value: bool) -> None: ...
    @overload
    @ObjectDescription.setter
    def ObjectDescription(self, value: bool) -> None: ...
    @overload
    @ObjectID.setter
    def ObjectID(self, value: bool) -> None: ...
    @overload
    @ObjectKeys.setter
    def ObjectKeys(self, value: bool) -> None: ...
    @overload
    @ObjectMaterial.setter
    def ObjectMaterial(self, value: bool) -> None: ...
    @overload
    @ObjectName.setter
    def ObjectName(self, value: bool) -> None: ...
    @overload
    @ObjectsTexts.setter
    def ObjectsTexts(self, value: bool) -> None: ...
    @overload
    @Perimeter.setter
    def Perimeter(self, value: bool) -> None: ...
    @overload
    @SurroundPointsWithDoubleQuotes.setter
    def SurroundPointsWithDoubleQuotes(self, value: bool) -> None: ...
    @overload
    @Volume.setter
    def Volume(self, value: bool) -> None: ...
    @overload
    @VolumeCentroid.setter
    def VolumeCentroid(self, value: bool) -> None: ...
    @overload
    @VolumeMoments.setter
    def VolumeMoments(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileDgn:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileDgnReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileDgnReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def GroupCellHeaders(self) -> bool: ...
    @overload
    @property
    def ImportUnreferencedBlocks(self) -> bool: ...
    @overload
    @property
    def ImportUnreferencedLayers(self) -> bool: ...
    @overload
    @property
    def ImportUnreferencedLineStyles(self) -> bool: ...
    @overload
    @property
    def ImportViews(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @GroupCellHeaders.setter
    def GroupCellHeaders(self, value: bool) -> None: ...
    @overload
    @ImportUnreferencedBlocks.setter
    def ImportUnreferencedBlocks(self, value: bool) -> None: ...
    @overload
    @ImportUnreferencedLayers.setter
    def ImportUnreferencedLayers(self, value: bool) -> None: ...
    @overload
    @ImportUnreferencedLineStyles.setter
    def ImportUnreferencedLineStyles(self, value: bool) -> None: ...
    @overload
    @ImportViews.setter
    def ImportViews(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileDst:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileDstReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileDstReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ImportJumps(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ImportJumps.setter
    def ImportJumps(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileDwg:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileDwgReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileDwgWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileDwgReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ConvertRegionsToCurves(self) -> bool: ...
    @overload
    @property
    def ConvertWidePolylinesToSurfaces(self) -> bool: ...
    @overload
    @property
    def IgnoreThickness(self) -> bool: ...
    @overload
    @property
    def ImportUnreferencedBlocks(self) -> bool: ...
    @overload
    @property
    def ImportUnreferencedLayers(self) -> bool: ...
    @overload
    @property
    def ImportUnreferencedLinetypes(self) -> bool: ...
    @overload
    @property
    def LayoutUnits(self) -> UnitSystem: ...
    @overload
    @property
    def MeshPrecision(self) -> MeshPrecisionMode: ...
    @overload
    @property
    def ModelUnits(self) -> UnitSystem: ...
    @overload
    @property
    def SetLayerMaterialToLayerColor(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ConvertRegionsToCurves.setter
    def ConvertRegionsToCurves(self, value: bool) -> None: ...
    @overload
    @ConvertWidePolylinesToSurfaces.setter
    def ConvertWidePolylinesToSurfaces(self, value: bool) -> None: ...
    @overload
    @IgnoreThickness.setter
    def IgnoreThickness(self, value: bool) -> None: ...
    @overload
    @ImportUnreferencedBlocks.setter
    def ImportUnreferencedBlocks(self, value: bool) -> None: ...
    @overload
    @ImportUnreferencedLayers.setter
    def ImportUnreferencedLayers(self, value: bool) -> None: ...
    @overload
    @ImportUnreferencedLinetypes.setter
    def ImportUnreferencedLinetypes(self, value: bool) -> None: ...
    @overload
    @LayoutUnits.setter
    def LayoutUnits(self, value: UnitSystem) -> None: ...
    @overload
    @MeshPrecision.setter
    def MeshPrecision(self, value: MeshPrecisionMode) -> None: ...
    @overload
    @ModelUnits.setter
    def ModelUnits(self, value: UnitSystem) -> None: ...
    @overload
    @SetLayerMaterialToLayerColor.setter
    def SetLayerMaterialToLayerColor(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileDwgWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ColorMethod(self) -> ColorMethodType: ...
    @overload
    @property
    def CurveChordHeight(self) -> float: ...
    @overload
    @property
    def CurveMaxAngleDegrees(self) -> float: ...
    @overload
    @property
    def CurveMaxAngleRadians(self) -> float: ...
    @overload
    @property
    def CurveSegmentLength(self) -> float: ...
    @overload
    @property
    def CurveUseChordHeight(self) -> bool: ...
    @overload
    @property
    def CurveUseMaxAngle(self) -> bool: ...
    @overload
    @property
    def CurveUseSegmentLength(self) -> bool: ...
    @overload
    @property
    def ExportArcsAs(self) -> ExportArcMode: ...
    @overload
    @property
    def ExportLinesAs(self) -> ExportLineMode: ...
    @overload
    @property
    def ExportMeshesAs(self) -> ExportMeshMode: ...
    @overload
    @property
    def ExportPolycurvesAs(self) -> ExportPolycurveMode: ...
    @overload
    @property
    def ExportPolylinesAs(self) -> ExportPolylineMode: ...
    @overload
    @property
    def ExportSplinesAs(self) -> ExportSplineMode: ...
    @overload
    @property
    def ExportSurfacesAs(self) -> ExportSurfaceMode: ...
    @overload
    @property
    def Flatten(self) -> FlattenMode: ...
    @overload
    @property
    def FullLayerPath(self) -> bool: ...
    @overload
    @property
    def IsDefault(self) -> bool: ...
    @overload
    @property
    def MinPointDistance(self) -> float: ...
    @overload
    @property
    def NoDxfHeader(self) -> bool: ...
    @overload
    @property
    def PreserveArcNormals(self) -> bool: ...
    @overload
    @property
    def Simplify(self) -> bool: ...
    @overload
    @property
    def SimplifyTolerance(self) -> float: ...
    @overload
    @property
    def SplitPolycurves(self) -> bool: ...
    @overload
    @property
    def SplitSplines(self) -> bool: ...
    @overload
    @property
    def UseLWPolylines(self) -> bool: ...
    @overload
    @property
    def Version(self) -> AutocadVersion: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ColorMethod.setter
    def ColorMethod(self, value: ColorMethodType) -> None: ...
    @overload
    @CurveChordHeight.setter
    def CurveChordHeight(self, value: float) -> None: ...
    @overload
    @CurveMaxAngleDegrees.setter
    def CurveMaxAngleDegrees(self, value: float) -> None: ...
    @overload
    @CurveMaxAngleRadians.setter
    def CurveMaxAngleRadians(self, value: float) -> None: ...
    @overload
    @CurveSegmentLength.setter
    def CurveSegmentLength(self, value: float) -> None: ...
    @overload
    @CurveUseChordHeight.setter
    def CurveUseChordHeight(self, value: bool) -> None: ...
    @overload
    @CurveUseMaxAngle.setter
    def CurveUseMaxAngle(self, value: bool) -> None: ...
    @overload
    @CurveUseSegmentLength.setter
    def CurveUseSegmentLength(self, value: bool) -> None: ...
    @overload
    @ExportArcsAs.setter
    def ExportArcsAs(self, value: ExportArcMode) -> None: ...
    @overload
    @ExportLinesAs.setter
    def ExportLinesAs(self, value: ExportLineMode) -> None: ...
    @overload
    @ExportMeshesAs.setter
    def ExportMeshesAs(self, value: ExportMeshMode) -> None: ...
    @overload
    @ExportPolycurvesAs.setter
    def ExportPolycurvesAs(self, value: ExportPolycurveMode) -> None: ...
    @overload
    @ExportPolylinesAs.setter
    def ExportPolylinesAs(self, value: ExportPolylineMode) -> None: ...
    @overload
    @ExportSplinesAs.setter
    def ExportSplinesAs(self, value: ExportSplineMode) -> None: ...
    @overload
    @ExportSurfacesAs.setter
    def ExportSurfacesAs(self, value: ExportSurfaceMode) -> None: ...
    @overload
    @Flatten.setter
    def Flatten(self, value: FlattenMode) -> None: ...
    @overload
    @FullLayerPath.setter
    def FullLayerPath(self, value: bool) -> None: ...
    @overload
    @IsDefault.setter
    def IsDefault(self, value: bool) -> None: ...
    @overload
    @MinPointDistance.setter
    def MinPointDistance(self, value: float) -> None: ...
    @overload
    @NoDxfHeader.setter
    def NoDxfHeader(self, value: bool) -> None: ...
    @overload
    @PreserveArcNormals.setter
    def PreserveArcNormals(self, value: bool) -> None: ...
    @overload
    @Simplify.setter
    def Simplify(self, value: bool) -> None: ...
    @overload
    @SimplifyTolerance.setter
    def SimplifyTolerance(self, value: float) -> None: ...
    @overload
    @SplitPolycurves.setter
    def SplitPolycurves(self, value: bool) -> None: ...
    @overload
    @SplitSplines.setter
    def SplitSplines(self, value: bool) -> None: ...
    @overload
    @UseLWPolylines.setter
    def UseLWPolylines(self, value: bool) -> None: ...
    @overload
    @Version.setter
    def Version(self, value: AutocadVersion) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileEps:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileEpsReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileEpsReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def EpsScale(self) -> float: ...
    @overload
    @property
    def EpsUnits(self) -> Units: ...
    @overload
    @property
    def PreserveModelScale(self) -> bool: ...
    @overload
    @property
    def RhinoScale(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @EpsScale.setter
    def EpsScale(self, value: float) -> None: ...
    @overload
    @EpsUnits.setter
    def EpsUnits(self, value: Units) -> None: ...
    @overload
    @PreserveModelScale.setter
    def PreserveModelScale(self, value: bool) -> None: ...
    @overload
    @RhinoScale.setter
    def RhinoScale(self, value: float) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileFbx:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileFbxReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileFbxWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileFbxReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ImportCameras(self) -> bool: ...
    @overload
    @property
    def ImportLights(self) -> bool: ...
    @overload
    @property
    def ImportMeshesAsSubD(self) -> bool: ...
    @overload
    @property
    def MapFbxYtoRhinoZ(self) -> bool: ...
    @overload
    @property
    def Unweld(self) -> bool: ...
    @overload
    @property
    def UnweldAngle(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ImportCameras.setter
    def ImportCameras(self, value: bool) -> None: ...
    @overload
    @ImportLights.setter
    def ImportLights(self, value: bool) -> None: ...
    @overload
    @ImportMeshesAsSubD.setter
    def ImportMeshesAsSubD(self, value: bool) -> None: ...
    @overload
    @MapFbxYtoRhinoZ.setter
    def MapFbxYtoRhinoZ(self, value: bool) -> None: ...
    @overload
    @Unweld.setter
    def Unweld(self, value: bool) -> None: ...
    @overload
    @UnweldAngle.setter
    def UnweldAngle(self, value: float) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileFbxWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MapRhinoZtoFbxY(self) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def SaveFileAs(self) -> FileType: ...
    @overload
    @property
    def SaveLights(self) -> bool: ...
    @overload
    @property
    def SaveMaterialsAs(self) -> MaterialType: ...
    @overload
    @property
    def SaveObjectsAs(self) -> ObjectType: ...
    @overload
    @property
    def SaveVertexNormals(self) -> bool: ...
    @overload
    @property
    def SaveViews(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MapRhinoZtoFbxY.setter
    def MapRhinoZtoFbxY(self, value: bool) -> None: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    @SaveFileAs.setter
    def SaveFileAs(self, value: FileType) -> None: ...
    @overload
    @SaveLights.setter
    def SaveLights(self, value: bool) -> None: ...
    @overload
    @SaveMaterialsAs.setter
    def SaveMaterialsAs(self, value: MaterialType) -> None: ...
    @overload
    @SaveObjectsAs.setter
    def SaveObjectsAs(self, value: ObjectType) -> None: ...
    @overload
    @SaveVertexNormals.setter
    def SaveVertexNormals(self, value: bool) -> None: ...
    @overload
    @SaveViews.setter
    def SaveViews(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileFindPreference(Enum):
    # None = 0
    FullPath = 1
    RelativePath = 2
    BasePath = 3
    ContentMatch = 4
    MostRecent = 5


class FileGHS:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileGHSReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileGHSReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AttachGhsData(self) -> bool: ...
    @overload
    @property
    def RemoveColinearPoints(self) -> bool: ...
    @overload
    @property
    def ViewType(self) -> ReadViewType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AttachGhsData.setter
    def AttachGhsData(self, value: bool) -> None: ...
    @overload
    @RemoveColinearPoints.setter
    def RemoveColinearPoints(self, value: bool) -> None: ...
    @overload
    @ViewType.setter
    def ViewType(self, value: ReadViewType) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileGltf:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileGltfWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileGltfWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CullBackfaces(self) -> bool: ...
    @overload
    @property
    def DracoCompressionLevel(self) -> int: ...
    @overload
    @property
    def DracoQuantizationBitsNormal(self) -> int: ...
    @overload
    @property
    def DracoQuantizationBitsPosition(self) -> int: ...
    @overload
    @property
    def DracoQuantizationBitsTextureCoordinate(self) -> int: ...
    @overload
    @property
    def ExportLayers(self) -> bool: ...
    @overload
    @property
    def ExportMaterials(self) -> bool: ...
    @overload
    @property
    def ExportOpenMeshes(self) -> bool: ...
    @overload
    @property
    def ExportTextureCoordinates(self) -> bool: ...
    @overload
    @property
    def ExportVertexColors(self) -> bool: ...
    @overload
    @property
    def ExportVertexNormals(self) -> bool: ...
    @overload
    @property
    def MapZToY(self) -> bool: ...
    @overload
    @property
    def SubDMeshType(self) -> SubDMeshing: ...
    @overload
    @property
    def SubDSurfaceMeshingDensity(self) -> int: ...
    @overload
    @property
    def UseDisplayColorForUnsetMaterials(self) -> bool: ...
    @overload
    @property
    def UseDracoCompression(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @CullBackfaces.setter
    def CullBackfaces(self, value: bool) -> None: ...
    @overload
    @DracoCompressionLevel.setter
    def DracoCompressionLevel(self, value: int) -> None: ...
    @overload
    @DracoQuantizationBitsNormal.setter
    def DracoQuantizationBitsNormal(self, value: int) -> None: ...
    @overload
    @DracoQuantizationBitsPosition.setter
    def DracoQuantizationBitsPosition(self, value: int) -> None: ...
    @overload
    @DracoQuantizationBitsTextureCoordinate.setter
    def DracoQuantizationBitsTextureCoordinate(self, value: int) -> None: ...
    @overload
    @ExportLayers.setter
    def ExportLayers(self, value: bool) -> None: ...
    @overload
    @ExportMaterials.setter
    def ExportMaterials(self, value: bool) -> None: ...
    @overload
    @ExportOpenMeshes.setter
    def ExportOpenMeshes(self, value: bool) -> None: ...
    @overload
    @ExportTextureCoordinates.setter
    def ExportTextureCoordinates(self, value: bool) -> None: ...
    @overload
    @ExportVertexColors.setter
    def ExportVertexColors(self, value: bool) -> None: ...
    @overload
    @ExportVertexNormals.setter
    def ExportVertexNormals(self, value: bool) -> None: ...
    @overload
    @MapZToY.setter
    def MapZToY(self, value: bool) -> None: ...
    @overload
    @SubDMeshType.setter
    def SubDMeshType(self, value: SubDMeshing) -> None: ...
    @overload
    @SubDSurfaceMeshingDensity.setter
    def SubDSurfaceMeshingDensity(self, value: int) -> None: ...
    @overload
    @UseDisplayColorForUnsetMaterials.setter
    def UseDisplayColorForUnsetMaterials(self, value: bool) -> None: ...
    @overload
    @UseDracoCompression.setter
    def UseDracoCompression(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileGts:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileGtsWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileGtsWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileIgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileIgsWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileIgsWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Author(self) -> str: ...
    @overload
    @property
    def CatiaTolsize(self) -> float: ...
    @overload
    @property
    def CatiaVersion(self) -> int: ...
    @overload
    @property
    def ClampCurveEndKnots(self) -> bool: ...
    @overload
    @property
    def ClampSurfaceEndKnots(self) -> bool: ...
    @overload
    @property
    def CompositeCurvesAsSingleBsplines(self) -> bool: ...
    @overload
    @property
    def CurveMaxDegree(self) -> MaxDegreeMode: ...
    @overload
    @property
    def DoublesUseE(self) -> bool: ...
    @overload
    @property
    def EolType(self) -> EolMode: ...
    @overload
    @property
    def FitRationalCurves(self) -> bool: ...
    @overload
    @property
    def FitRationalSurfaces(self) -> bool: ...
    @overload
    @property
    def FlagDependentCurvesAs03(self) -> bool: ...
    @overload
    @property
    def FlagDependentSurfacesAs03(self) -> bool: ...
    @overload
    @property
    def ForceBezierKnotsOnCurves(self) -> bool: ...
    @overload
    @property
    def ForceBezierKnotsOnSurfaces(self) -> bool: ...
    @overload
    @property
    def ForceTrimmedSurfaces(self) -> bool: ...
    @overload
    @property
    def HideDependentObjects(self) -> bool: ...
    @overload
    @property
    def IgesStringType(self) -> IgesStringTypeMode: ...
    @overload
    @property
    def IgesVersion(self) -> IgeswVersionMode: ...
    @overload
    @property
    def MaxSurfaceDegree(self) -> MaxDegreeMode: ...
    @overload
    @property
    def MeshType(self) -> MeshesMode: ...
    @overload
    @property
    def NotesInStartSection(self) -> bool: ...
    @overload
    @property
    def NoZerosInTSection(self) -> bool: ...
    @overload
    @property
    def Organization(self) -> str: ...
    @overload
    @property
    def PointType(self) -> PointObjectsMode: ...
    @overload
    @property
    def PolySurfaceType(self) -> PolySurfacesMode: ...
    @overload
    @property
    def Receiver(self) -> str: ...
    @overload
    @property
    def RenderColorAsIgesColor(self) -> bool: ...
    @overload
    @property
    def Scale(self) -> float: ...
    @overload
    @property
    def Sender(self) -> str: ...
    @overload
    @property
    def SimplifyCurves(self) -> bool: ...
    @overload
    @property
    def SimplifySurfaces(self) -> bool: ...
    @overload
    @property
    def SolidType(self) -> SolidsMode: ...
    @overload
    @property
    def SplitBiPolarSurfaces(self) -> bool: ...
    @overload
    @property
    def SplitClosedSurfaces(self) -> bool: ...
    @overload
    @property
    def SurfaceType(self) -> SurfacesMode: ...
    @overload
    @property
    def Tolerance(self) -> float: ...
    @overload
    @property
    def Units(self) -> UnitSystem: ...
    @overload
    @property
    def UseParentLabelOnCurves(self) -> bool: ...
    @overload
    @property
    def UseParentLabelOnSurfaces(self) -> bool: ...
    @overload
    @property
    def WriteNonPlanarUnitNormal(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Author.setter
    def Author(self, value: str) -> None: ...
    @overload
    @CatiaTolsize.setter
    def CatiaTolsize(self, value: float) -> None: ...
    @overload
    @CatiaVersion.setter
    def CatiaVersion(self, value: int) -> None: ...
    @overload
    @ClampCurveEndKnots.setter
    def ClampCurveEndKnots(self, value: bool) -> None: ...
    @overload
    @ClampSurfaceEndKnots.setter
    def ClampSurfaceEndKnots(self, value: bool) -> None: ...
    @overload
    @CompositeCurvesAsSingleBsplines.setter
    def CompositeCurvesAsSingleBsplines(self, value: bool) -> None: ...
    @overload
    @CurveMaxDegree.setter
    def CurveMaxDegree(self, value: MaxDegreeMode) -> None: ...
    @overload
    @DoublesUseE.setter
    def DoublesUseE(self, value: bool) -> None: ...
    @overload
    @EolType.setter
    def EolType(self, value: EolMode) -> None: ...
    @overload
    @FitRationalCurves.setter
    def FitRationalCurves(self, value: bool) -> None: ...
    @overload
    @FitRationalSurfaces.setter
    def FitRationalSurfaces(self, value: bool) -> None: ...
    @overload
    @FlagDependentCurvesAs03.setter
    def FlagDependentCurvesAs03(self, value: bool) -> None: ...
    @overload
    @FlagDependentSurfacesAs03.setter
    def FlagDependentSurfacesAs03(self, value: bool) -> None: ...
    @overload
    @ForceBezierKnotsOnCurves.setter
    def ForceBezierKnotsOnCurves(self, value: bool) -> None: ...
    @overload
    @ForceBezierKnotsOnSurfaces.setter
    def ForceBezierKnotsOnSurfaces(self, value: bool) -> None: ...
    @overload
    @ForceTrimmedSurfaces.setter
    def ForceTrimmedSurfaces(self, value: bool) -> None: ...
    @overload
    @HideDependentObjects.setter
    def HideDependentObjects(self, value: bool) -> None: ...
    @overload
    @IgesStringType.setter
    def IgesStringType(self, value: IgesStringTypeMode) -> None: ...
    @overload
    @IgesVersion.setter
    def IgesVersion(self, value: IgeswVersionMode) -> None: ...
    @overload
    @MaxSurfaceDegree.setter
    def MaxSurfaceDegree(self, value: MaxDegreeMode) -> None: ...
    @overload
    @MeshType.setter
    def MeshType(self, value: MeshesMode) -> None: ...
    @overload
    @NotesInStartSection.setter
    def NotesInStartSection(self, value: bool) -> None: ...
    @overload
    @NoZerosInTSection.setter
    def NoZerosInTSection(self, value: bool) -> None: ...
    @overload
    @Organization.setter
    def Organization(self, value: str) -> None: ...
    @overload
    @PointType.setter
    def PointType(self, value: PointObjectsMode) -> None: ...
    @overload
    @PolySurfaceType.setter
    def PolySurfaceType(self, value: PolySurfacesMode) -> None: ...
    @overload
    @Receiver.setter
    def Receiver(self, value: str) -> None: ...
    @overload
    @RenderColorAsIgesColor.setter
    def RenderColorAsIgesColor(self, value: bool) -> None: ...
    @overload
    @Scale.setter
    def Scale(self, value: float) -> None: ...
    @overload
    @Sender.setter
    def Sender(self, value: str) -> None: ...
    @overload
    @SimplifyCurves.setter
    def SimplifyCurves(self, value: bool) -> None: ...
    @overload
    @SimplifySurfaces.setter
    def SimplifySurfaces(self, value: bool) -> None: ...
    @overload
    @SolidType.setter
    def SolidType(self, value: SolidsMode) -> None: ...
    @overload
    @SplitBiPolarSurfaces.setter
    def SplitBiPolarSurfaces(self, value: bool) -> None: ...
    @overload
    @SplitClosedSurfaces.setter
    def SplitClosedSurfaces(self, value: bool) -> None: ...
    @overload
    @SurfaceType.setter
    def SurfaceType(self, value: SurfacesMode) -> None: ...
    @overload
    @Tolerance.setter
    def Tolerance(self, value: float) -> None: ...
    @overload
    @Units.setter
    def Units(self, value: UnitSystem) -> None: ...
    @overload
    @UseParentLabelOnCurves.setter
    def UseParentLabelOnCurves(self, value: bool) -> None: ...
    @overload
    @UseParentLabelOnSurfaces.setter
    def UseParentLabelOnSurfaces(self, value: bool) -> None: ...
    @overload
    @WriteNonPlanarUnitNormal.setter
    def WriteNonPlanarUnitNormal(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileLwo:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileLwoReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileLwoWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileLwoReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Unweld(self) -> bool: ...
    @overload
    @property
    def UnweldAngle(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Unweld.setter
    def Unweld(self, value: bool) -> None: ...
    @overload
    @UnweldAngle.setter
    def UnweldAngle(self, value: float) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileLwoWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def WriteVersion6(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    @WriteVersion6.setter
    def WriteVersion6(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..PlugIns import WriteFileResult
class FileObj:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(filename: str, doc: RhinoDoc, options: FileObjReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileObjWriteOptions) -> WriteFileResult: ...
    @overload
    @staticmethod
    def Write(stream: StreamWriter, doc: RhinoDoc, options: FileObjWriteOptions) -> WriteFileResult: ...
    @overload
    @staticmethod
    def Write(filename: str, meshes: Iterable[Mesh], options: FileObjWriteOptions) -> WriteFileResult: ...


from ..Geometry import Transform
class FileObjReadOptions:
    @overload
    def __init__(self, readOptions: FileReadOptions): ...
    ReadOptions: FileReadOptions
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def DisplayColorFromObjMaterial(self) -> bool: ...
    @overload
    @property
    def IgnoreTextures(self) -> bool: ...
    @overload
    @property
    def MapYtoZ(self) -> bool: ...
    @overload
    @property
    def MorphTargetOnly(self) -> bool: ...
    @overload
    @property
    def ReverseGroupOrder(self) -> bool: ...
    @overload
    @property
    def Split32BitTextures(self) -> bool: ...
    @overload
    @property
    def UseObjGroupsAs(self) -> UseObjGsAs: ...
    @overload
    @property
    def UseObjObjectsAs(self) -> UseObjOsAs: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetTransform(self) -> Transform: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @DisplayColorFromObjMaterial.setter
    def DisplayColorFromObjMaterial(self, value: bool) -> None: ...
    @overload
    @IgnoreTextures.setter
    def IgnoreTextures(self, value: bool) -> None: ...
    @overload
    @MapYtoZ.setter
    def MapYtoZ(self, value: bool) -> None: ...
    @overload
    @MorphTargetOnly.setter
    def MorphTargetOnly(self, value: bool) -> None: ...
    @overload
    @ReverseGroupOrder.setter
    def ReverseGroupOrder(self, value: bool) -> None: ...
    @overload
    @Split32BitTextures.setter
    def Split32BitTextures(self, value: bool) -> None: ...
    @overload
    @UseObjGroupsAs.setter
    def UseObjGroupsAs(self, value: UseObjGsAs) -> None: ...
    @overload
    @UseObjObjectsAs.setter
    def UseObjObjectsAs(self, value: UseObjOsAs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import MeshingParameters
from ..Geometry import Transform
class FileObjWriteOptions:
    @overload
    def __init__(self, writeOptions: FileWriteOptions): ...
    AngleTolRadians: float
    WriteOptions: FileWriteOptions
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ActualFilePathOnMac(self) -> str: ...
    @overload
    @property
    def CreateNgons(self) -> bool: ...
    @overload
    @property
    def CullUnnecessaryVertexesInNgons(self) -> bool: ...
    @overload
    @property
    def EolType(self) -> AsciiEol: ...
    @overload
    @property
    def ExportAsTriangles(self) -> bool: ...
    @overload
    @property
    def ExportGroupNameLayerNames(self) -> ObjGroupNames: ...
    @overload
    @property
    def ExportMaterialDefinitions(self) -> bool: ...
    @overload
    @property
    def ExportNormals(self) -> bool: ...
    @overload
    @property
    def ExportObjectNames(self) -> ObjObjectNames: ...
    @overload
    @property
    def ExportOpenMeshes(self) -> bool: ...
    @overload
    @property
    def ExportTcs(self) -> bool: ...
    @overload
    @property
    def ExportVcs(self) -> bool: ...
    @overload
    @property
    def IncludeUnweldedEdgesInNgons(self) -> bool: ...
    @overload
    @property
    def MapZtoY(self) -> bool: ...
    @overload
    @property
    def MergeNestedGroupingNames(self) -> bool: ...
    @overload
    @property
    def MeshParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def MeshType(self) -> VertexWelding: ...
    @overload
    @property
    def MinNgonFaceCount(self) -> int: ...
    @overload
    @property
    def NgonMode(self) -> NGons: ...
    @overload
    @property
    def ObjectType(self) -> GeometryType: ...
    @overload
    @property
    def PolylineType(self) -> PolylineExportType: ...
    @overload
    @property
    def SignificantDigits(self) -> int: ...
    @overload
    @property
    def SortObjGroups(self) -> bool: ...
    @overload
    @property
    def SubDMeshType(self) -> SubDMeshing: ...
    @overload
    @property
    def SubDSurfaceMeshingDensity(self) -> int: ...
    @overload
    @property
    def TrimCurveType(self) -> CurveType: ...
    @overload
    @property
    def UnderbarMaterialNames(self) -> bool: ...
    @overload
    @property
    def UseDisplayColorForMaterial(self) -> bool: ...
    @overload
    @property
    def UseRelativeIndexing(self) -> bool: ...
    @overload
    @property
    def UseRenderMeshes(self) -> bool: ...
    @overload
    @property
    def UseSimpleDialog(self) -> bool: ...
    @overload
    @property
    def VcsFormat(self) -> int: ...
    @overload
    @property
    def WrapLongLines(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetTransform(self) -> Transform: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ActualFilePathOnMac.setter
    def ActualFilePathOnMac(self, value: str) -> None: ...
    @overload
    @CreateNgons.setter
    def CreateNgons(self, value: bool) -> None: ...
    @overload
    @CullUnnecessaryVertexesInNgons.setter
    def CullUnnecessaryVertexesInNgons(self, value: bool) -> None: ...
    @overload
    @EolType.setter
    def EolType(self, value: AsciiEol) -> None: ...
    @overload
    @ExportAsTriangles.setter
    def ExportAsTriangles(self, value: bool) -> None: ...
    @overload
    @ExportGroupNameLayerNames.setter
    def ExportGroupNameLayerNames(self, value: ObjGroupNames) -> None: ...
    @overload
    @ExportMaterialDefinitions.setter
    def ExportMaterialDefinitions(self, value: bool) -> None: ...
    @overload
    @ExportNormals.setter
    def ExportNormals(self, value: bool) -> None: ...
    @overload
    @ExportObjectNames.setter
    def ExportObjectNames(self, value: ObjObjectNames) -> None: ...
    @overload
    @ExportOpenMeshes.setter
    def ExportOpenMeshes(self, value: bool) -> None: ...
    @overload
    @ExportTcs.setter
    def ExportTcs(self, value: bool) -> None: ...
    @overload
    @ExportVcs.setter
    def ExportVcs(self, value: bool) -> None: ...
    @overload
    @IncludeUnweldedEdgesInNgons.setter
    def IncludeUnweldedEdgesInNgons(self, value: bool) -> None: ...
    @overload
    @MapZtoY.setter
    def MapZtoY(self, value: bool) -> None: ...
    @overload
    @MergeNestedGroupingNames.setter
    def MergeNestedGroupingNames(self, value: bool) -> None: ...
    @overload
    @MeshParameters.setter
    def MeshParameters(self, value: MeshingParameters) -> None: ...
    @overload
    @MeshType.setter
    def MeshType(self, value: VertexWelding) -> None: ...
    @overload
    @MinNgonFaceCount.setter
    def MinNgonFaceCount(self, value: int) -> None: ...
    @overload
    @NgonMode.setter
    def NgonMode(self, value: NGons) -> None: ...
    @overload
    @ObjectType.setter
    def ObjectType(self, value: GeometryType) -> None: ...
    @overload
    @PolylineType.setter
    def PolylineType(self, value: PolylineExportType) -> None: ...
    @overload
    @SignificantDigits.setter
    def SignificantDigits(self, value: int) -> None: ...
    @overload
    @SortObjGroups.setter
    def SortObjGroups(self, value: bool) -> None: ...
    @overload
    @SubDMeshType.setter
    def SubDMeshType(self, value: SubDMeshing) -> None: ...
    @overload
    @SubDSurfaceMeshingDensity.setter
    def SubDSurfaceMeshingDensity(self, value: int) -> None: ...
    @overload
    @TrimCurveType.setter
    def TrimCurveType(self, value: CurveType) -> None: ...
    @overload
    @UnderbarMaterialNames.setter
    def UnderbarMaterialNames(self, value: bool) -> None: ...
    @overload
    @UseDisplayColorForMaterial.setter
    def UseDisplayColorForMaterial(self, value: bool) -> None: ...
    @overload
    @UseRelativeIndexing.setter
    def UseRelativeIndexing(self, value: bool) -> None: ...
    @overload
    @UseRenderMeshes.setter
    def UseRenderMeshes(self, value: bool) -> None: ...
    @overload
    @UseSimpleDialog.setter
    def UseSimpleDialog(self, value: bool) -> None: ...
    @overload
    @VcsFormat.setter
    def VcsFormat(self, value: int) -> None: ...
    @overload
    @WrapLongLines.setter
    def WrapLongLines(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Display import ViewCaptureSettings
from ..DocObjects import Font
from ..DocObjects import TextHorizontalAlignment
from ..DocObjects import TextVerticalAlignment
class FilePdf:
    @overload
    @staticmethod
    def add_PreWrite(value: EventHandler) -> None: ...
    @overload
    def AddPage(self, settings: ViewCaptureSettings) -> int: ...
    @overload
    def AddPage(self, widthInDots: int, heightInDots: int, dotsPerInch: int) -> int: ...
    @overload
    @staticmethod
    def Create() -> FilePdf: ...
    @overload
    def DrawBitmap(self, pageNumber: int, bitmap: Bitmap, left: Single, top: Single, width: Single, height: Single, rotationInDegrees: Single) -> None: ...
    @overload
    def DrawLine(self, pageNumber: int, from_: PointF, to: PointF, strokeColor: Color, strokeWidth: Single) -> None: ...
    @overload
    def DrawPolyline(self, pageNumber: int, polyline: Iterable[PointF], fillColor: Color, strokeColor: Color, strokeWidth: Single) -> None: ...
    @overload
    def DrawText(self, pageNumber: int, text: str, x: float, y: float, heightPoints: Single, onfont: Font, fillColor: Color, strokeColor: Color, strokeWidth: Single, angleDegrees: Single, horizontalAlignment: TextHorizontalAlignment, verticalAlignment: TextVerticalAlignment) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def LayersAsOptionalContentGroups(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PdfDocumentImplementation(self) -> Object: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FilePdfReadOptions) -> bool: ...
    @overload
    @staticmethod
    def remove_PreWrite(value: EventHandler) -> None: ...
    @overload
    @LayersAsOptionalContentGroups.setter
    def LayersAsOptionalContentGroups(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, filename: str) -> None: ...
    @overload
    def Write(self, stream: Stream) -> None: ...


class FilePdfEventArgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Pdf(self) -> FilePdf: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FilePdfReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ImportFillsAsHatches(self) -> bool: ...
    @overload
    @property
    def LoadText(self) -> bool: ...
    @overload
    @property
    def PDFScale(self) -> float: ...
    @overload
    @property
    def PdfUnits(self) -> PDF_UNITS: ...
    @overload
    @property
    def PreserveModelScale(self) -> bool: ...
    @overload
    @property
    def RhinoScale(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ImportFillsAsHatches.setter
    def ImportFillsAsHatches(self, value: bool) -> None: ...
    @overload
    @LoadText.setter
    def LoadText(self, value: bool) -> None: ...
    @overload
    @PDFScale.setter
    def PDFScale(self, value: float) -> None: ...
    @overload
    @PdfUnits.setter
    def PdfUnits(self, value: PDF_UNITS) -> None: ...
    @overload
    @PreserveModelScale.setter
    def PreserveModelScale(self, value: bool) -> None: ...
    @overload
    @RhinoScale.setter
    def RhinoScale(self, value: float) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..PlugIns import WriteFileResult
class FilePly:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FilePlyReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FilePlyWriteOptions) -> WriteFileResult: ...


from ..Collections import ArchivableDictionary
class FilePlyReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def PLYModelUnits(self) -> UnitSystem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @PLYModelUnits.setter
    def PLYModelUnits(self, value: UnitSystem) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import MeshingParameters
class FilePlyWriteOptions:
    @overload
    def __init__(self, writeOptions: FileWriteOptions): ...
    WriteOptions: FileWriteOptions
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ExportASCII(self) -> bool: ...
    @overload
    @property
    def ExportColors(self) -> bool: ...
    @overload
    @property
    def ExportDoubles(self) -> bool: ...
    @overload
    @property
    def ExportMaterial(self) -> bool: ...
    @overload
    @property
    def ExportNormals(self) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def UseSimpleDialog(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ExportASCII.setter
    def ExportASCII(self, value: bool) -> None: ...
    @overload
    @ExportColors.setter
    def ExportColors(self, value: bool) -> None: ...
    @overload
    @ExportDoubles.setter
    def ExportDoubles(self, value: bool) -> None: ...
    @overload
    @ExportMaterial.setter
    def ExportMaterial(self, value: bool) -> None: ...
    @overload
    @ExportNormals.setter
    def ExportNormals(self, value: bool) -> None: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    @UseSimpleDialog.setter
    def UseSimpleDialog(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FilePov:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FilePovWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FilePovWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ExportAsOneFile(self) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ExportAsOneFile.setter
    def ExportAsOneFile(self, value: bool) -> None: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileRaw:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileRawReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileRawWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileRawReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def RawModelUnits(self) -> UnitSystem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @RawModelUnits.setter
    def RawModelUnits(self, value: UnitSystem) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileRawWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BatchMode(self) -> bool: ...
    @overload
    @property
    def ImportMode(self) -> bool: ...
    @overload
    @property
    def ImportReferenceMode(self) -> bool: ...
    @overload
    @property
    def InsertMode(self) -> bool: ...
    @overload
    @property
    def LinkedInstanceDefinitionSerialNumber(self) -> UInt32: ...
    @overload
    @property
    def NewMode(self) -> bool: ...
    @overload
    @property
    def OpenMode(self) -> bool: ...
    @overload
    @property
    def OptionsDictionary(self) -> ArchivableDictionary: ...
    @overload
    @property
    def ReferenceModelGrandParentLayerId(self) -> Guid: ...
    @overload
    @property
    def ScaleGeometry(self) -> bool: ...
    @overload
    @property
    def UseScaleGeometry(self) -> bool: ...
    @overload
    @property
    def WorkSessionReferenceModelSerialNumber(self) -> UInt32: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @BatchMode.setter
    def BatchMode(self, value: bool) -> None: ...
    @overload
    @ImportMode.setter
    def ImportMode(self, value: bool) -> None: ...
    @overload
    @ImportReferenceMode.setter
    def ImportReferenceMode(self, value: bool) -> None: ...
    @overload
    @InsertMode.setter
    def InsertMode(self, value: bool) -> None: ...
    @overload
    @NewMode.setter
    def NewMode(self, value: bool) -> None: ...
    @overload
    @OpenMode.setter
    def OpenMode(self, value: bool) -> None: ...
    @overload
    @ScaleGeometry.setter
    def ScaleGeometry(self, value: bool) -> None: ...
    @overload
    @UseScaleGeometry.setter
    def UseScaleGeometry(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FileReference:
    @overload
    def __init__(self, fullPath: str, relativePath: str, hash: ContentHash, status: FileReferenceStatus): ...
    @overload
    @staticmethod
    def CreateFromFullAndRelativePaths(fullPath: str, relativePath: str) -> FileReference: ...
    @overload
    @staticmethod
    def CreateFromFullPath(fullPath: str) -> FileReference: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ContentHash(self) -> ContentHash: ...
    @overload
    @property
    def FullPath(self) -> str: ...
    @overload
    @property
    def FullPathStatus(self) -> FileReferenceStatus: ...
    @overload
    @property
    def IsSet(self) -> bool: ...
    @overload
    @property
    def RelativePath(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class FileReferenceStatus(Enum):
    Unknown = 0
    FullPathValid = 1
    FileNotFound = 2


class FileSat:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileSatWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileSatWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Type(self) -> SatTypes: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Type.setter
    def Type(self, value: SatTypes) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileSkp:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileSkpReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileSkpWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileSkpReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AddObjectsToGroups(self) -> bool: ...
    @overload
    @property
    def EmbedTexturesInModel(self) -> bool: ...
    @overload
    @property
    def ImportCurves(self) -> bool: ...
    @overload
    @property
    def ImportFacesAsMeshes(self) -> bool: ...
    @overload
    @property
    def JoinEdges(self) -> bool: ...
    @overload
    @property
    def JoinFaces(self) -> bool: ...
    @overload
    @property
    def UseGroupLayers(self) -> bool: ...
    @overload
    @property
    def UseSketchUpTextureWriter(self) -> bool: ...
    @overload
    @property
    def Weld(self) -> bool: ...
    @overload
    @property
    def WeldAngle(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AddObjectsToGroups.setter
    def AddObjectsToGroups(self, value: bool) -> None: ...
    @overload
    @EmbedTexturesInModel.setter
    def EmbedTexturesInModel(self, value: bool) -> None: ...
    @overload
    @ImportCurves.setter
    def ImportCurves(self, value: bool) -> None: ...
    @overload
    @ImportFacesAsMeshes.setter
    def ImportFacesAsMeshes(self, value: bool) -> None: ...
    @overload
    @JoinEdges.setter
    def JoinEdges(self, value: bool) -> None: ...
    @overload
    @JoinFaces.setter
    def JoinFaces(self, value: bool) -> None: ...
    @overload
    @UseGroupLayers.setter
    def UseGroupLayers(self, value: bool) -> None: ...
    @overload
    @UseSketchUpTextureWriter.setter
    def UseSketchUpTextureWriter(self, value: bool) -> None: ...
    @overload
    @Weld.setter
    def Weld(self, value: bool) -> None: ...
    @overload
    @WeldAngle.setter
    def WeldAngle(self, value: float) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileSkpWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ExportPlanarRegionsAsPolygons(self) -> bool: ...
    @overload
    @property
    def Version(self) -> SketchUpVersion: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ExportPlanarRegionsAsPolygons.setter
    def ExportPlanarRegionsAsPolygons(self, value: bool) -> None: ...
    @overload
    @Version.setter
    def Version(self, value: SketchUpVersion) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileSlc:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileSlcWriteOptions) -> bool: ...


from ..Geometry import Point3d
class FileSlcWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AngleBetweenSegmentsDegrees(self) -> float: ...
    @overload
    @property
    def EndPoint(self) -> Point3d: ...
    @overload
    @property
    def SliceDistance(self) -> float: ...
    @overload
    @property
    def StartPoint(self) -> Point3d: ...
    @overload
    @property
    def UseMeshes(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AngleBetweenSegmentsDegrees.setter
    def AngleBetweenSegmentsDegrees(self, value: float) -> None: ...
    @overload
    @EndPoint.setter
    def EndPoint(self, value: Point3d) -> None: ...
    @overload
    @SliceDistance.setter
    def SliceDistance(self, value: float) -> None: ...
    @overload
    @StartPoint.setter
    def StartPoint(self, value: Point3d) -> None: ...
    @overload
    @UseMeshes.setter
    def UseMeshes(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FileStl:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileStlReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileStlWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileStlReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def SplitDisjointMeshes(self) -> bool: ...
    @overload
    @property
    def STLModelUnits(self) -> UnitSystem: ...
    @overload
    @property
    def Weld(self) -> bool: ...
    @overload
    @property
    def WeldAngle(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @SplitDisjointMeshes.setter
    def SplitDisjointMeshes(self, value: bool) -> None: ...
    @overload
    @STLModelUnits.setter
    def STLModelUnits(self, value: UnitSystem) -> None: ...
    @overload
    @Weld.setter
    def Weld(self, value: bool) -> None: ...
    @overload
    @WeldAngle.setter
    def WeldAngle(self, value: float) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileStlWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BinaryFile(self) -> bool: ...
    @overload
    @property
    def ExportOpenObjects(self) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @BinaryFile.setter
    def BinaryFile(self, value: bool) -> None: ...
    @overload
    @ExportOpenObjects.setter
    def ExportOpenObjects(self, value: bool) -> None: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileStp:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileStpReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileStpWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileStpReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def JoinSurfaces(self) -> bool: ...
    @overload
    @property
    def LimitFaces(self) -> bool: ...
    @overload
    @property
    def MaxFaceCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @JoinSurfaces.setter
    def JoinSurfaces(self, value: bool) -> None: ...
    @overload
    @LimitFaces.setter
    def LimitFaces(self, value: bool) -> None: ...
    @overload
    @MaxFaceCount.setter
    def MaxFaceCount(self, value: int) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileStpWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Export2dCurves(self) -> bool: ...
    @overload
    @property
    def ExportBlack(self) -> bool: ...
    @overload
    @property
    def Schema(self) -> StepSchema: ...
    @overload
    @property
    def SplitClosedSurfaces(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Export2dCurves.setter
    def Export2dCurves(self, value: bool) -> None: ...
    @overload
    @ExportBlack.setter
    def ExportBlack(self, value: bool) -> None: ...
    @overload
    @Schema.setter
    def Schema(self, value: StepSchema) -> None: ...
    @overload
    @SplitClosedSurfaces.setter
    def SplitClosedSurfaces(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileSvg:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileSvgReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileSvgReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def GroupMultiCurvePaths(self) -> bool: ...
    @overload
    @property
    def ImportFilledObjectAs(self) -> ImportFillMode: ...
    @overload
    @property
    def RetainGrouping(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @GroupMultiCurvePaths.setter
    def GroupMultiCurvePaths(self, value: bool) -> None: ...
    @overload
    @ImportFilledObjectAs.setter
    def ImportFilledObjectAs(self, value: ImportFillMode) -> None: ...
    @overload
    @RetainGrouping.setter
    def RetainGrouping(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileSW:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileSwReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileSwReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ImportConstructionGeometry(self) -> bool: ...
    @overload
    @property
    def ImportPartsAsBlocks(self) -> bool: ...
    @overload
    @property
    def RotateYtoZ(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ImportConstructionGeometry.setter
    def ImportConstructionGeometry(self, value: bool) -> None: ...
    @overload
    @ImportPartsAsBlocks.setter
    def ImportPartsAsBlocks(self, value: bool) -> None: ...
    @overload
    @RotateYtoZ.setter
    def RotateYtoZ(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileTxt:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Read(path: str, doc: RhinoDoc, options: FileTxtReadOptions) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileTxtWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileTxtReadOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CreatePointCloud(self) -> bool: ...
    @overload
    @property
    def Delimiter(self) -> DelimiterMode: ...
    @overload
    @property
    def DelimiterCharacter(self) -> Char: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @CreatePointCloud.setter
    def CreatePointCloud(self, value: bool) -> None: ...
    @overload
    @Delimiter.setter
    def Delimiter(self, value: DelimiterMode) -> None: ...
    @overload
    @DelimiterCharacter.setter
    def DelimiterCharacter(self, value: Char) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Collections import ArchivableDictionary
class FileTxtWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Delimiter(self) -> DelimiterMode: ...
    @overload
    @property
    def DelimiterCharacter(self) -> Char: ...
    @overload
    @property
    def ExportVertexColors(self) -> bool: ...
    @overload
    @property
    def Precision(self) -> int: ...
    @overload
    @property
    def SurroundWithDoubleQuotes(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Delimiter.setter
    def Delimiter(self, value: DelimiterMode) -> None: ...
    @overload
    @DelimiterCharacter.setter
    def DelimiterCharacter(self, value: Char) -> None: ...
    @overload
    @ExportVertexColors.setter
    def ExportVertexColors(self, value: bool) -> None: ...
    @overload
    @Precision.setter
    def Precision(self, value: int) -> None: ...
    @overload
    @SurroundWithDoubleQuotes.setter
    def SurroundWithDoubleQuotes(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileType(Enum):
    Binary7 = 0
    Ascii7 = 1
    Binary6 = 2
    Ascii6 = 3


class FileType:
    @overload
    def __init__(self, extension: str, description: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Extension(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class FileUdo:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileUdoWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileUdoWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileUsd:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileUsdWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileUsdWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileVda:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileVdaWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileVdaWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Address(self) -> str: ...
    @overload
    @property
    def CompanyName(self) -> str: ...
    @overload
    @property
    def Confidentiality(self) -> str: ...
    @overload
    @property
    def DateEffective(self) -> str: ...
    @overload
    @property
    def ObjectCode(self) -> str: ...
    @overload
    @property
    def PointDeviationHairsAsMDI(self) -> bool: ...
    @overload
    @property
    def ProjectName(self) -> str: ...
    @overload
    @property
    def ReceivingDepartment(self) -> str: ...
    @overload
    @property
    def SendersName(self) -> str: ...
    @overload
    @property
    def SendingCompany(self) -> str: ...
    @overload
    @property
    def TelephoneNumber(self) -> str: ...
    @overload
    @property
    def Variant(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Address.setter
    def Address(self, value: str) -> None: ...
    @overload
    @CompanyName.setter
    def CompanyName(self, value: str) -> None: ...
    @overload
    @Confidentiality.setter
    def Confidentiality(self, value: str) -> None: ...
    @overload
    @DateEffective.setter
    def DateEffective(self, value: str) -> None: ...
    @overload
    @ObjectCode.setter
    def ObjectCode(self, value: str) -> None: ...
    @overload
    @PointDeviationHairsAsMDI.setter
    def PointDeviationHairsAsMDI(self, value: bool) -> None: ...
    @overload
    @ProjectName.setter
    def ProjectName(self, value: str) -> None: ...
    @overload
    @ReceivingDepartment.setter
    def ReceivingDepartment(self, value: str) -> None: ...
    @overload
    @SendersName.setter
    def SendersName(self, value: str) -> None: ...
    @overload
    @SendingCompany.setter
    def SendingCompany(self, value: str) -> None: ...
    @overload
    @TelephoneNumber.setter
    def TelephoneNumber(self, value: str) -> None: ...
    @overload
    @Variant.setter
    def Variant(self, value: str) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileVrml:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileVrmlWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileVrmlWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ExportTextureCoordinates(self) -> bool: ...
    @overload
    @property
    def ExportVertexColors(self) -> bool: ...
    @overload
    @property
    def ExportVertexNormals(self) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def Version(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ExportTextureCoordinates.setter
    def ExportTextureCoordinates(self, value: bool) -> None: ...
    @overload
    @ExportVertexColors.setter
    def ExportVertexColors(self, value: bool) -> None: ...
    @overload
    @ExportVertexNormals.setter
    def ExportVertexNormals(self, value: bool) -> None: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    @Version.setter
    def Version(self, value: int) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import Transform
from ..Collections import ArchivableDictionary
class FileWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def DestinationFileName(self) -> str: ...
    @overload
    @property
    def FileVersion(self) -> int: ...
    @overload
    @property
    def IncludeBitmapTable(self) -> bool: ...
    @overload
    @property
    def IncludeHistory(self) -> bool: ...
    @overload
    @property
    def IncludePreviewImage(self) -> bool: ...
    @overload
    @property
    def IncludeRenderMeshes(self) -> bool: ...
    @overload
    @property
    def OptionsDictionary(self) -> ArchivableDictionary: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def SuppressAllInput(self) -> bool: ...
    @overload
    @property
    def SuppressDialogBoxes(self) -> bool: ...
    @overload
    @property
    def UpdateDocumentPath(self) -> bool: ...
    @overload
    @property
    def WriteAsTemplate(self) -> bool: ...
    @overload
    @property
    def WriteGeometryOnly(self) -> bool: ...
    @overload
    @property
    def WriteSelectedObjectsOnly(self) -> bool: ...
    @overload
    @property
    def WriteUserData(self) -> bool: ...
    @overload
    @property
    def Xform(self) -> Transform: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @FileVersion.setter
    def FileVersion(self, value: int) -> None: ...
    @overload
    @IncludeBitmapTable.setter
    def IncludeBitmapTable(self, value: bool) -> None: ...
    @overload
    @IncludeHistory.setter
    def IncludeHistory(self, value: bool) -> None: ...
    @overload
    @IncludePreviewImage.setter
    def IncludePreviewImage(self, value: bool) -> None: ...
    @overload
    @IncludeRenderMeshes.setter
    def IncludeRenderMeshes(self, value: bool) -> None: ...
    @overload
    @SuppressAllInput.setter
    def SuppressAllInput(self, value: bool) -> None: ...
    @overload
    @SuppressDialogBoxes.setter
    def SuppressDialogBoxes(self, value: bool) -> None: ...
    @overload
    @UpdateDocumentPath.setter
    def UpdateDocumentPath(self, value: bool) -> None: ...
    @overload
    @WriteGeometryOnly.setter
    def WriteGeometryOnly(self, value: bool) -> None: ...
    @overload
    @WriteSelectedObjectsOnly.setter
    def WriteSelectedObjectsOnly(self, value: bool) -> None: ...
    @overload
    @WriteUserData.setter
    def WriteUserData(self, value: bool) -> None: ...
    @overload
    @Xform.setter
    def Xform(self, value: Transform) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FileX_T:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(filename: str, doc: RhinoDoc, options: FileX_TWriteOptions) -> bool: ...


from ..Collections import ArchivableDictionary
class FileX_TWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Type(self) -> X_T_Types: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Type.setter
    def Type(self, value: X_T_Types) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileX3dv:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileX3dvWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileX3dvWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ExportTextureCoordinates(self) -> bool: ...
    @overload
    @property
    def ExportVertexColors(self) -> bool: ...
    @overload
    @property
    def ExportVertexNormals(self) -> bool: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ExportTextureCoordinates.setter
    def ExportTextureCoordinates(self, value: bool) -> None: ...
    @overload
    @ExportVertexColors.setter
    def ExportVertexColors(self, value: bool) -> None: ...
    @overload
    @ExportVertexNormals.setter
    def ExportVertexNormals(self, value: bool) -> None: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FileXaml:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Write(path: str, doc: RhinoDoc, options: FileFbxWriteOptions) -> bool: ...


from ..Geometry import MeshingParameters
from ..Collections import ArchivableDictionary
class FileXamlWriteOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AddRotationAnimation(self) -> bool: ...
    @overload
    @property
    def AddRotationScrollbars(self) -> bool: ...
    @overload
    @property
    def AnimationAxis(self) -> AnimationMode: ...
    @overload
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @overload
    @property
    def UseExistingRenderMeshes(self) -> bool: ...
    @overload
    @property
    def UseOriginForRotationCenter(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @AddRotationAnimation.setter
    def AddRotationAnimation(self, value: bool) -> None: ...
    @overload
    @AddRotationScrollbars.setter
    def AddRotationScrollbars(self, value: bool) -> None: ...
    @overload
    @AnimationAxis.setter
    def AnimationAxis(self, value: AnimationMode) -> None: ...
    @overload
    @MeshingParameters.setter
    def MeshingParameters(self, value: MeshingParameters) -> None: ...
    @overload
    @UseExistingRenderMeshes.setter
    def UseExistingRenderMeshes(self, value: bool) -> None: ...
    @overload
    @UseOriginForRotationCenter.setter
    def UseOriginForRotationCenter(self, value: bool) -> None: ...
    @overload
    def ToDictionary(self) -> ArchivableDictionary: ...
    @overload
    def ToString(self) -> str: ...


class FlattenMode(Enum):
    # None = 0
    Cplane = 1
    View = 2


class GeometryType(Enum):
    Nurbs = 0
    Mesh = 1




class IgesStringTypeMode(Enum):
    Unicode = 0
    BIG5 = 1


class IgeswVersionMode(Enum):
    Igv52 = 1
    Igv53 = 2


class ImageFile:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def SupportsAlphaChannel(filename: str) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class ImportFillMode(Enum):
    AsCurves = 0
    AsHatches = 1
    AsTrimmedPlanes = 2


from ..DocObjects import ModelComponent
from ..DocObjects import ModelComponentType
class ManifestTable:
    def __iter__(self) -> Iterator[ModelComponent]: ...
    @overload
    def ActiveObjectCount(self, type: ModelComponentType) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: ModelComponent) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ModelComponent], arrayIndex: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindId(self, id: Guid) -> ModelComponent: ...
    @overload
    def FindId(self, id: Guid) -> T: ...
    @overload
    def FindId(self, id: Guid, type: ModelComponentType) -> ModelComponent: ...
    @overload
    def FindIndex(self, index: int) -> T: ...
    @overload
    def FindIndex(self, index: int, type: ModelComponentType) -> ModelComponent: ...
    @overload
    def FindName(self, name: str, parent: Guid) -> T: ...
    @overload
    def FindName(self, name: str, type: ModelComponentType, parent: Guid) -> ModelComponent: ...
    @overload
    def FindNameHash(self, nameHash: NameHash) -> T: ...
    @overload
    def FindNameHash(self, nameHash: NameHash, type: ModelComponentType) -> ModelComponent: ...
    @overload
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def LongCount(self) -> Int64: ...
    @overload
    @property
    def Parent(self) -> Object: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetEnumerator(self, type: ModelComponentType) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetModelComponentTypeFromGenericType() -> ModelComponentType: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class MaterialType(Enum):
    Lambert = 0
    Phong = 1


class MaxDegreeMode(Enum):
    MdNoLimit = 0
    Md3 = 3
    Md5 = 5


class MeshesMode(Enum):
    MeshNone = 0
    Mesh10612 = 12
    Mesh10613 = 13


class MeshPrecisionMode(Enum):
    Automatic = 0
    DoublePrecision = 1
    SinglePrecision = 2


from ..DocObjects import ModelComponentType
class NameHash:
    @overload
    def __init__(self, name: str): ...
    @overload
    def __init__(self, name: str, parentId: Guid): ...
    @overload
    def __init__(self, name: str, parentId: Guid, type: ModelComponentType): ...
    @overload
    def __init__(self, name: str, parentId: Guid, ignoreCase: bool): ...
    @overload
    def Clone(self) -> NameHash: ...
    @overload
    @staticmethod
    def CreateFilePathHash(path: str) -> NameHash: ...
    @overload
    def Equals(self, other: NameHash) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MappedCodePoints(self) -> UInt32: ...
    @overload
    @property
    def ParentId(self) -> Guid: ...
    @overload
    @property
    def Sha1Hash(self) -> Iterable[Byte]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(left: NameHash, right: NameHash) -> bool: ...
    @overload
    def __ne__(left: NameHash, right: NameHash) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class NGons(Enum):
    # None = 0
    Preserve = 1
    Create = 2


class ObjectType(Enum):
    Nurbs = 0
    Mesh = 1


class ObjectTypeFilter(Enum):
    # None = 0
    Point = 1
    Pointset = 2
    Curve = 4
    Surface = 8
    Brep = 16
    Mesh = 32
    Annotation = 512
    InstanceDefinition = 2048
    InstanceReference = 4096
    TextDot = 8192
    DetailView = 32768
    Hatch = 65536
    Extrusion = 1073741824
    Any = 4294967295


class ObjGroupNames(Enum):
    NoGroups = 0
    LayerAsGroup = 1
    GroupAsGroup = 2


class ObjObjectNames(Enum):
    NoObjects = 0
    ObjectAsGroup = 1
    ObjectAsObject = 2


class PDF_UNITS(Enum):
    inches = 0
    centimeters = 1
    millimeters = 2
    points = 3


class PointObjectsMode(Enum):
    PoSets = 106
    PoSeparate = 116


class PolylineExportType(Enum):
    Bspline = 0
    Single = 1
    Multiple = 2


class PolySurfacesMode(Enum):
    PsrfSeparate = 0
    PsrfUnorderedGroup = 402


class ReadViewType(Enum):
    Body = 0
    Profile = 1
    Plan = 2
    Wire = 3
    Solid = 4
    Camera = 5
    Custom = 6


class SatTypes(Enum):
    Default = 0
    ACIS15 = 1
    ACIS20 = 2
    ACIS30 = 3
    ACIS40 = 4
    AutoCAD = 5
    MechanicalDesktop = 6
    Inventor = 7
    SolidWorks = 8
    SolidEdge = 9


class SerializationOptions:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def MaxRhinoVersion() -> int: ...
    @overload
    @property
    def MinRhinoVersion() -> int: ...
    @overload
    @property
    def RhinoVersion(self) -> int: ...
    @overload
    @property
    def WriteAnalysisMeshes(self) -> bool: ...
    @overload
    @property
    def WriteRenderMeshes(self) -> bool: ...
    @overload
    @property
    def WriteUserData(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @RhinoVersion.setter
    def RhinoVersion(self, value: int) -> None: ...
    @overload
    @WriteAnalysisMeshes.setter
    def WriteAnalysisMeshes(self, value: bool) -> None: ...
    @overload
    @WriteRenderMeshes.setter
    def WriteRenderMeshes(self, value: bool) -> None: ...
    @overload
    @WriteUserData.setter
    def WriteUserData(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SHA1OpenNURBS:
    @overload
    def __init__(self): ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ComputeHash(self, inputStream: Stream) -> Iterable[Byte]: ...
    @overload
    def ComputeHash(self, buffer: Iterable[Byte]) -> Iterable[Byte]: ...
    @overload
    def ComputeHash(self, buffer: Iterable[Byte], offset: int, count: int) -> Iterable[Byte]: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FileSystemPathHash(path: str, ignoreCase: Nullable) -> Iterable[Byte]: ...
    @overload
    @property
    def CanReuseTransform(self) -> bool: ...
    @overload
    @property
    def CanTransformMultipleBlocks(self) -> bool: ...
    @overload
    @property
    def Hash(self) -> Iterable[Byte]: ...
    @overload
    @property
    def HashSize(self) -> int: ...
    @overload
    @property
    def InputBlockSize(self) -> int: ...
    @overload
    @property
    def OutputBlockSize(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Initialize(self) -> None: ...
    @overload
    @staticmethod
    def StringHash(input: str) -> Iterable[Byte]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TransformBlock(self, inputBuffer: Iterable[Byte], inputOffset: int, inputCount: int, outputBuffer: Iterable[Byte], outputOffset: int) -> int: ...
    @overload
    def TransformFinalBlock(self, inputBuffer: Iterable[Byte], inputOffset: int, inputCount: int) -> Iterable[Byte]: ...


class SketchUpVersion(Enum):
    SketchUp3 = 0
    SketchUp4 = 1
    SketchUp5 = 2
    SketchUp6 = 3
    SketchUp7 = 4
    SketchUp8 = 5
    SketchUp2013 = 6
    SketchUp2014 = 7
    SketchUp2015 = 8
    SketchUp2016 = 9
    SketchUp2017 = 10
    SketchUp2018 = 11
    SketchUp2019 = 12
    SketchUp2020 = 13
    SketchUp2021 = 14


class SolidsMode(Enum):
    SldSeparate = 0
    Sld184 = 184
    SldManifoldBRep = 186
    SldUnorderedGroup = 402


class StepSchema(Enum):
    SF_203 = 0
    SF_214 = 1
    SF_214_CC2 = 2
    SF_242 = 3


class SubDMeshing(Enum):
    Surface = 0
    ControlNet = 1


class SubDMeshing(Enum):
    Surface = 0
    ControlNet = 1


class SurfacesMode(Enum):
    Srf128 = 128
    Srf143 = 143
    Srf144 = 144


class SweepResolutionFormulas(Enum):
    Default = 0
    AbsoluteToleranceDependent = 1


class TableTypeFilter(Enum):
    # None = 0
    Properties = 1
    Settings = 2
    Bitmap = 4
    TextureMapping = 8
    Material = 16
    Linetype = 32
    Layer = 64
    Group = 128
    Font = 256
    FutureFont = 512
    Dimstyle = 1024
    Light = 2048
    Hatchpattern = 4096
    InstanceDefinition = 8192
    ObjectTable = 16384
    Historyrecord = 32768
    UserTable = 65536


class TextLog:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filename: str): ...
    @overload
    def __init__(self, ptr: IntPtr): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IndentSize(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def NewCommandLine() -> TextLog: ...
    @overload
    def PopIndent(self) -> None: ...
    @overload
    def Print(self, text: str) -> None: ...
    @overload
    def Print(self, format: str, arg0: Object) -> None: ...
    @overload
    def Print(self, format: str, arg0: Object, arg1: Object) -> None: ...
    @overload
    def PrintWrappedText(self, text: str, lineLength: int) -> None: ...
    @overload
    def PushIndent(self) -> None: ...
    @overload
    @IndentSize.setter
    def IndentSize(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Units(Enum):
    Inches = 0
    Centimeters = 1
    Millimeters = 2
    Points = 3


class Units(Enum):
    Inches = 0
    Centimeters = 1
    Millimeters = 2
    Points = 3


class Units(Enum):
    Inches = 0
    Centimeters = 1
    Millimeters = 2
    Points = 3


class UseObjGsAs(Enum):
    IgnoreObjGroups = 0
    ObjGroupsAsLayers = 1
    ObjGroupsAsGroups = 2
    ObjGroupsAsObjects = 3


class UseObjOsAs(Enum):
    IgnoreObjObjects = 0
    ObjObjectsAsLayers = 1
    ObjObjectsAsGroups = 2
    ObjObjectsAsObjects = 3


class VertexWelding(Enum):
    Normal = 0
    Welded = 1
    Unwelded = 2


class X_T_Types(Enum):
    Default = 0
    Edgecam = 1
    Mastercam = 2
    SolidEdge = 3
    SolidWorks = 4
