from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from .. import RhinoDoc
from ...FileIO import BinaryArchiveWriter
from ...FileIO import BinaryArchiveReader
from ...Geometry import Transform
from ...Geometry import BoundingBox
from ...Runtime.InteropWrappers import SimpleArrayBinaryArchiveReader
from ...FileIO import TextLog
class SnapShotsClient:
    @overload
    def __init__(self): ...
    @overload
    def AnimateDocument(self, doc: RhinoDoc, dPos: float, archive_start: BinaryArchiveReader, archive_stop: BinaryArchiveReader) -> bool: ...
    @overload
    def AnimateObject(self, doc: RhinoDoc, doc_object: RhinoObject, transform: Transform, dPos: float, archive_start: BinaryArchiveReader, archive_stop: BinaryArchiveReader) -> Tuple[bool, Transform]: ...
    @overload
    def AnimationStart(self, doc: RhinoDoc, iFrames: int) -> None: ...
    @overload
    def AnimationStop(self, doc: RhinoDoc) -> bool: ...
    @overload
    @staticmethod
    def ApplicationCategory() -> str: ...
    @overload
    def Category(self) -> str: ...
    @overload
    def ClientId(self) -> Guid: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    @staticmethod
    def DocumentCategory() -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def ExtendBoundingBoxForDocumentAnimation(self, doc: RhinoDoc, archive_start: BinaryArchiveReader, archive_stop: BinaryArchiveReader, bbox: BoundingBox) -> Tuple[BoundingBox]: ...
    @overload
    def ExtendBoundingBoxForObjectAnimation(self, doc: RhinoDoc, doc_object: RhinoObject, transform: Transform, archive_start: BinaryArchiveReader, archive_stop: BinaryArchiveReader, bbox: BoundingBox) -> Tuple[Transform, BoundingBox]: ...
    @overload
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    @property
    def SerialNumber(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsCurrentModelStateInAnySnapshot(self, doc: RhinoDoc, archive: BinaryArchiveReader, archive_array: SimpleArrayBinaryArchiveReader, text_log: TextLog) -> bool: ...
    @overload
    def IsCurrentModelStateInAnySnapshot(self, doc: RhinoDoc, doc_object: RhinoObject, archive: BinaryArchiveReader, archive_array: SimpleArrayBinaryArchiveReader, text_log: TextLog) -> bool: ...
    @overload
    @staticmethod
    def LayersCategory() -> str: ...
    @overload
    @staticmethod
    def LightsCategory() -> str: ...
    @overload
    def Name(self) -> str: ...
    @overload
    @staticmethod
    def ObjectsCategory() -> str: ...
    @overload
    def ObjectTransformNotification(self, doc: RhinoDoc, doc_object: RhinoObject, transform: Transform, archive: BinaryArchiveReader) -> Tuple[bool, Transform]: ...
    @overload
    def PlugInId(self) -> Guid: ...
    @overload
    def PrepareForDocumentAnimation(self, doc: RhinoDoc, archive_start: BinaryArchiveReader, archive_stop: BinaryArchiveReader) -> bool: ...
    @overload
    def PrepareForObjectAnimation(self, doc: RhinoDoc, doc_object: RhinoObject, transform: Transform, archive_start: BinaryArchiveReader, archive_stop: BinaryArchiveReader) -> Tuple[bool, Transform]: ...
    @overload
    @staticmethod
    def RegisterSnapShotClient(client: SnapShotsClient) -> bool: ...
    @overload
    @staticmethod
    def RenderingCategory() -> str: ...
    @overload
    def RestoreDocument(self, doc: RhinoDoc, archive: BinaryArchiveReader) -> bool: ...
    @overload
    def RestoreObject(self, doc: RhinoDoc, doc_object: RhinoObject, transform: Transform, archive: BinaryArchiveReader) -> Tuple[bool, Transform]: ...
    @overload
    def SaveDocument(self, doc: RhinoDoc, archive: BinaryArchiveWriter) -> bool: ...
    @overload
    def SaveObject(self, doc: RhinoDoc, doc_object: RhinoObject, transform: Transform, archive: BinaryArchiveWriter) -> Tuple[bool, Transform]: ...
    @overload
    @SerialNumber.setter
    def SerialNumber(self, value: int) -> None: ...
    @overload
    def SnapshotRestored(self, doc: RhinoDoc) -> None: ...
    @overload
    def SupportsAnimation(self) -> bool: ...
    @overload
    def SupportsDocument(self) -> bool: ...
    @overload
    def SupportsObject(self, doc_object: RhinoObject) -> bool: ...
    @overload
    def SupportsObjects(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def ViewsCategory() -> str: ...
