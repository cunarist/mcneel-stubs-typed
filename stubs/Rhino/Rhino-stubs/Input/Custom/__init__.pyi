from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class CommandLineOption:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def CurrentListOptionIndex(self) -> int: ...
    @overload
    @property
    def CurrentNumericValue(self) -> float: ...
    @overload
    @property
    def CurrentToggleValue(self) -> Nullable: ...
    @overload
    @property
    def EnglishName(self) -> str: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def LocalName(self) -> str: ...
    @overload
    @property
    def OptionType(self) -> CommandLineOptionType: ...
    @overload
    @property
    def StringOptionValue(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsValidOptionName(optionName: str) -> bool: ...
    @overload
    @staticmethod
    def IsValidOptionValueName(optionValue: str) -> bool: ...
    @overload
    def ListOptions(self, english: bool) -> Iterable[str]: ...
    @overload
    def ToggleValues(self, english: bool) -> Tuple[str, str]: ...
    @overload
    def ToString(self) -> str: ...


class CommandLineOptionType(Enum):
    Simple = 0
    Number = 1
    Toggle = 2
    Color = 3
    List = 4
    Hidden = 5


class ConeConstraint(Enum):
    # None = 0
    Vertical = 1
    AroundCurve = 2


class CylinderConstraint(Enum):
    # None = 0
    Vertical = 1
    AroundCurve = 2


class GeometryAttributeFilter(Enum):
    WireCurve = 1
    EdgeCurve = 2
    ClosedCurve = 4
    OpenCurve = 8
    SeamEdge = 16
    ManifoldEdge = 32
    NonmanifoldEdge = 64
    MatedEdge = 112
    SurfaceBoundaryEdge = 128
    TrimmingBoundaryEdge = 256
    BoundaryEdge = 384
    ClosedSurface = 512
    OpenSurface = 1024
    TrimmedSurface = 2048
    UntrimmedSurface = 4096
    SubSurface = 8192
    TopSurface = 16384
    ManifoldPolysrf = 32768
    NonmanifoldPolysrf = 65536
    ClosedPolysrf = 131072
    OpenPolysrf = 262144
    ClosedMesh = 524288
    OpenMesh = 1048576
    BoundaryInnerLoop = 2097152
    MatedInnerLoop = 4194304
    InnerLoop = 6291456
    BoundaryOuterLoop = 8388608
    MatedOuterLoop = 16777216
    OuterLoop = 25165824
    SpecialLoop = 33554432
    AcceptAllAttributes = 4294967295


from ...Geometry import Arc
from ...Commands import Result
class GetArc:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def AllowDeformable(self) -> bool: ...
    @overload
    @property
    def DefaultRadius(self) -> float: ...
    @overload
    @property
    def Deformable(self) -> bool: ...
    @overload
    @property
    def DeformableDegree(self) -> int: ...
    @overload
    @property
    def DeformablePointCount(self) -> int: ...
    @overload
    def Get(self) -> Tuple[Result, Arc]: ...
    @overload
    @property
    def UseActiveLayerLinetypeForCurves(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @AllowDeformable.setter
    def AllowDeformable(self, value: bool) -> None: ...
    @overload
    @DefaultRadius.setter
    def DefaultRadius(self, value: float) -> None: ...
    @overload
    @Deformable.setter
    def Deformable(self, value: bool) -> None: ...
    @overload
    @DeformableDegree.setter
    def DeformableDegree(self, value: int) -> None: ...
    @overload
    @DeformablePointCount.setter
    def DeformablePointCount(self, value: int) -> None: ...
    @overload
    @UseActiveLayerLinetypeForCurves.setter
    def UseActiveLayerLinetypeForCurves(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetBaseClass:
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    @staticmethod
    def PostCustomMessage(messageData: object) -> None: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...


from .. import RhinoDoc
from ...Commands import Result
from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetCancel(GetBaseClass):
    @overload
    def __init__(self): ...
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def add_TaskCompleted(self, value: EventHandler) -> None: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Progress(self) -> IProgress: ...
    @overload
    @property
    def ProgressMessage(self) -> str: ...
    @overload
    @property
    def ProgressReporting(self) -> bool: ...
    @overload
    @property
    def Token(self) -> CancellationToken: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def remove_TaskCompleted(self, value: EventHandler) -> None: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    @ProgressMessage.setter
    def ProgressMessage(self, value: str) -> None: ...
    @overload
    @ProgressReporting.setter
    def ProgressReporting(self, value: bool) -> None: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...
    @overload
    def Wait(self, task: Task, doc: RhinoDoc) -> Result: ...
    @overload
    def Wait(self, task: Task, doc: RhinoDoc) -> Result: ...
    @overload
    def WaitAll(self, tasks: Iterable[Task], doc: RhinoDoc) -> Result: ...
    @overload
    def WaitAll(self, tasks: Iterable[Task], doc: RhinoDoc) -> Result: ...


from ...Geometry import Circle
from ...Commands import Result
class GetCircle:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def AllowDeformable(self) -> bool: ...
    @overload
    @property
    def DefaultSize(self) -> float: ...
    @overload
    @property
    def Deformable(self) -> bool: ...
    @overload
    @property
    def DeformableDegree(self) -> int: ...
    @overload
    @property
    def DeformablePointCount(self) -> int: ...
    @overload
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get(self) -> Tuple[Result, Circle]: ...
    @overload
    @property
    def UseActiveLayerLinetypeForCurves(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @AllowDeformable.setter
    def AllowDeformable(self, value: bool) -> None: ...
    @overload
    @DefaultSize.setter
    def DefaultSize(self, value: float) -> None: ...
    @overload
    @Deformable.setter
    def Deformable(self, value: bool) -> None: ...
    @overload
    @DeformableDegree.setter
    def DeformableDegree(self, value: int) -> None: ...
    @overload
    @DeformablePointCount.setter
    def DeformablePointCount(self, value: int) -> None: ...
    @overload
    @InDiameterMode.setter
    def InDiameterMode(self, value: bool) -> None: ...
    @overload
    @UseActiveLayerLinetypeForCurves.setter
    def UseActiveLayerLinetypeForCurves(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Cone
from ...Commands import Result
class GetCone:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def AllowInputAngle(self) -> bool: ...
    @overload
    @property
    def ApexAngleDegrees(self) -> float: ...
    @overload
    @property
    def BaseAngleDegrees(self) -> float: ...
    @overload
    @property
    def Cap(self) -> bool: ...
    @overload
    @property
    def ConeConstraint(self) -> ConeConstraint: ...
    @overload
    @property
    def DefaultSize(self) -> float: ...
    @overload
    @property
    def Height(self) -> float: ...
    @overload
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get(self) -> Tuple[Result, Cone]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Cone]: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int, capStyle: int) -> Tuple[Result, int, int, int, Cone]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @AllowInputAngle.setter
    def AllowInputAngle(self, value: bool) -> None: ...
    @overload
    @ApexAngleDegrees.setter
    def ApexAngleDegrees(self, value: float) -> None: ...
    @overload
    @BaseAngleDegrees.setter
    def BaseAngleDegrees(self, value: float) -> None: ...
    @overload
    @Cap.setter
    def Cap(self, value: bool) -> None: ...
    @overload
    @ConeConstraint.setter
    def ConeConstraint(self, value: ConeConstraint) -> None: ...
    @overload
    @DefaultSize.setter
    def DefaultSize(self, value: float) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: float) -> None: ...
    @overload
    @InDiameterMode.setter
    def InDiameterMode(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Cylinder
from ...Commands import Result
class GetCylinder:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def BothSidesOption(self) -> bool: ...
    @overload
    @property
    def Cap(self) -> bool: ...
    @overload
    @property
    def CylinderConstraint(self) -> CylinderConstraint: ...
    @overload
    @property
    def DefaultSize(self) -> float: ...
    @overload
    @property
    def Height(self) -> float: ...
    @overload
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get(self) -> Tuple[Result, Cylinder]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Cylinder]: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int, capStyle: int) -> Tuple[Result, int, int, int, Cylinder]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @BothSidesOption.setter
    def BothSidesOption(self, value: bool) -> None: ...
    @overload
    @Cap.setter
    def Cap(self, value: bool) -> None: ...
    @overload
    @CylinderConstraint.setter
    def CylinderConstraint(self, value: CylinderConstraint) -> None: ...
    @overload
    @DefaultSize.setter
    def DefaultSize(self, value: float) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: float) -> None: ...
    @overload
    @InDiameterMode.setter
    def InDiameterMode(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...Geometry import NurbsCurve
from ...Commands import Result
class GetEllipse:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def FirstPoint(self) -> Point3d: ...
    @overload
    @property
    def IsModeFromFoci(self) -> bool: ...
    @overload
    @property
    def MarkFoci(self) -> bool: ...
    @overload
    def Get(self) -> Tuple[Result, NurbsCurve]: ...
    @overload
    @property
    def SecondPoint(self) -> Point3d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @MarkFoci.setter
    def MarkFoci(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...Geometry import NurbsSurface
from ...Commands import Result
from ...Geometry import Mesh
class GetEllipsoid:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def FirstPoint(self) -> Point3d: ...
    @overload
    @property
    def IsModeFromFoci(self) -> bool: ...
    @overload
    @property
    def MarkFoci(self) -> bool: ...
    @overload
    def Get(self) -> Tuple[Result, NurbsSurface]: ...
    @overload
    @property
    def SecondPoint(self) -> Point3d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Mesh]: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int, quadCaps: bool) -> Tuple[Result, int, int, bool, Mesh]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @MarkFoci.setter
    def MarkFoci(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GetFileNameMode(Enum):
    Open = 0
    OpenTemplate = 1
    OpenImage = 2
    OpenRhinoOnly = 3
    OpenTextFile = 5
    OpenWorksession = 6
    Import = 7
    Attach = 8
    LoadPlugIn = 9
    Save = 10
    SaveSmall = 11
    SaveTemplate = 12
    SaveImage = 13
    Export = 14
    SaveTextFile = 17
    SaveWorksession = 18


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetInteger(GetBaseClass):
    @overload
    def __init__(self): ...
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def Number(self) -> int: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetLowerLimit(self, lowerLimit: int, strictlyGreaterThan: bool) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetUpperLimit(self, upperLimit: int, strictlyLessThan: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...


from ...Geometry import Line
from ...Commands import Result
from ...Geometry import Point3d
class GetLine:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnableAllVariations(self, on: bool) -> None: ...
    @overload
    def EnableFromBothSidesOption(self, on: bool) -> None: ...
    @overload
    def EnableFromMidPointOption(self, on: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def AcceptZeroLengthLine(self) -> bool: ...
    @overload
    @property
    def FeedbackColor(self) -> Color: ...
    @overload
    @property
    def FirstPointPrompt(self) -> str: ...
    @overload
    @property
    def FixedLength(self) -> float: ...
    @overload
    @property
    def GetLineMode(self) -> GetLineMode: ...
    @overload
    @property
    def HaveFeedbackColor(self) -> bool: ...
    @overload
    @property
    def MidPointPrompt(self) -> str: ...
    @overload
    def Get(self) -> Tuple[Result, Line]: ...
    @overload
    @property
    def SecondPointPrompt(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @AcceptZeroLengthLine.setter
    def AcceptZeroLengthLine(self, value: bool) -> None: ...
    @overload
    @FeedbackColor.setter
    def FeedbackColor(self, value: Color) -> None: ...
    @overload
    @FirstPointPrompt.setter
    def FirstPointPrompt(self, value: str) -> None: ...
    @overload
    @FixedLength.setter
    def FixedLength(self, value: float) -> None: ...
    @overload
    @GetLineMode.setter
    def GetLineMode(self, value: GetLineMode) -> None: ...
    @overload
    @MidPointPrompt.setter
    def MidPointPrompt(self, value: str) -> None: ...
    @overload
    @SecondPointPrompt.setter
    def SecondPointPrompt(self, value: str) -> None: ...
    @overload
    def SetFirstPoint(self, point: Point3d) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GetLineMode(Enum):
    TwoPoint = 0
    SurfaceNormal = 1
    Angled = 2
    Vertical = 3
    FourPoint = 4
    Bisector = 5
    Perpendicular = 6
    Tangent = 7
    CurveEnd = 8
    CPlaneNormalVector = 9


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetNumber(GetBaseClass):
    @overload
    def __init__(self): ...
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetLowerLimit(self, lowerLimit: float, strictlyGreaterThan: bool) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetUpperLimit(self, upperLimit: float, strictlyLessThan: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...


from .. import RhinoDoc
from ...DocObjects import ObjectType
from ...DocObjects import RhinoObject
from ...Geometry import GeometryBase
from ...Geometry import ComponentIndex
from ...DocObjects import ObjRef
from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetObject(GetBaseClass):
    @overload
    def __init__(self): ...
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    @staticmethod
    def ActiveGetObject(doc: RhinoDoc) -> GetObject: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AppendToPickList(self, objref: ObjRef) -> None: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def ClearObjects(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def CustomGeometryFilter(self, rhObject: RhinoObject, geometry: GeometryBase, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def DisablePreSelect(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnableClearObjectsOnEntry(self, enable: bool) -> None: ...
    @overload
    def EnableHighlight(self, enable: bool) -> None: ...
    @overload
    def EnableIgnoreGrips(self, enable: bool) -> None: ...
    @overload
    def EnablePostSelect(self, enable: bool) -> None: ...
    @overload
    def EnablePreSelect(self, enable: bool, ignoreUnacceptablePreselectedObjects: bool) -> None: ...
    @overload
    def EnablePressEnterWhenDonePrompt(self, enable: bool) -> None: ...
    @overload
    def EnableSelPrevious(self, enable: bool) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def EnableUnselectObjectsOnExit(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @overload
    @property
    def AlreadySelectedObjectSelect(self) -> bool: ...
    @overload
    @property
    def BottomObjectPreference(self) -> bool: ...
    @overload
    @property
    def ChooseOneQuestion(self) -> bool: ...
    @overload
    @property
    def DeselectAllBeforePostSelect(self) -> bool: ...
    @overload
    @property
    def GeometryAttributeFilter(self) -> GeometryAttributeFilter: ...
    @overload
    @property
    def GeometryFilter(self) -> ObjectType: ...
    @overload
    @property
    def GroupSelect(self) -> bool: ...
    @overload
    @property
    def InactiveDetailPickEnabled(self) -> bool: ...
    @overload
    @property
    def ObjectCount(self) -> int: ...
    @overload
    @property
    def ObjectsWerePreselected(self) -> bool: ...
    @overload
    @property
    def OneByOnePostSelect(self) -> bool: ...
    @overload
    @property
    def ProxyBrepFromSubD(self) -> bool: ...
    @overload
    @property
    def ReferenceObjectSelect(self) -> bool: ...
    @overload
    @property
    def SerialNumber(self) -> UInt32: ...
    @overload
    @property
    def SubObjectSelect(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMultiple(self, minimumNumber: int, maximumNumber: int) -> GetResult: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def Object(self, index: int) -> ObjRef: ...
    @overload
    def Objects(self) -> Iterable[ObjRef]: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PassesGeometryAttributeFilter(self, rhObject: RhinoObject, geometry: GeometryBase, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    @AlreadySelectedObjectSelect.setter
    def AlreadySelectedObjectSelect(self, value: bool) -> None: ...
    @overload
    @BottomObjectPreference.setter
    def BottomObjectPreference(self, value: bool) -> None: ...
    @overload
    @ChooseOneQuestion.setter
    def ChooseOneQuestion(self, value: bool) -> None: ...
    @overload
    @DeselectAllBeforePostSelect.setter
    def DeselectAllBeforePostSelect(self, value: bool) -> None: ...
    @overload
    @GeometryAttributeFilter.setter
    def GeometryAttributeFilter(self, value: GeometryAttributeFilter) -> None: ...
    @overload
    @GeometryFilter.setter
    def GeometryFilter(self, value: ObjectType) -> None: ...
    @overload
    @GroupSelect.setter
    def GroupSelect(self, value: bool) -> None: ...
    @overload
    @InactiveDetailPickEnabled.setter
    def InactiveDetailPickEnabled(self, value: bool) -> None: ...
    @overload
    @OneByOnePostSelect.setter
    def OneByOnePostSelect(self, value: bool) -> None: ...
    @overload
    @ProxyBrepFromSubD.setter
    def ProxyBrepFromSubD(self, value: bool) -> None: ...
    @overload
    @ReferenceObjectSelect.setter
    def ReferenceObjectSelect(self, value: bool) -> None: ...
    @overload
    @SubObjectSelect.setter
    def SubObjectSelect(self, value: bool) -> None: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetCustomGeometryFilter(self, filter: GetObjectGeometryFilter) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetPressEnterWhenDonePrompt(self, prompt: str) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...


from ...DocObjects import RhinoObject
from ...Geometry import GeometryBase
from ...Geometry import ComponentIndex
class GetObjectGeometryFilter:
    @overload
    def __init__(self, object: object, method: IntPtr): ...
    @overload
    def BeginInvoke(self, rhObject: RhinoObject, geometry: GeometryBase, componentIndex: ComponentIndex, callback: AsyncCallback, object: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, rhObject: RhinoObject, geometry: GeometryBase, componentIndex: ComponentIndex) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetOption(GetBaseClass):
    @overload
    def __init__(self): ...
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...


from ...Geometry import Point3d
from ...Display import RhinoViewport
from ...Geometry import Plane
from ...UI import CursorStyle
from ...Geometry import Line
from ...Geometry import Arc
from ...Geometry import Circle
from ...Geometry import Sphere
from ...Geometry import Cylinder
from ...Geometry import Curve
from ...Geometry import Surface
from ...Geometry import Brep
from ...Geometry import Mesh
from ...ApplicationSettings import OsnapModes
from ...DocObjects import ObjRef
from ...Geometry import BrepFace
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetPoint(GetBaseClass):
    @overload
    def __init__(self): ...
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def add_DynamicDraw(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_PostDrawObjects(self, value: EventHandler) -> None: ...
    @overload
    def AddConstructionPoint(self, point: Point3d) -> int: ...
    @overload
    def AddConstructionPoints(self, points: Iterable[Point3d]) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddSnapPoint(self, point: Point3d) -> int: ...
    @overload
    def AddSnapPoints(self, points: Iterable[Point3d]) -> int: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearConstraints(self) -> None: ...
    @overload
    def ClearConstructionPoints(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def ClearSnapPoints(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def Constrain(self, cylinder: Cylinder) -> bool: ...
    @overload
    def Constrain(self, sphere: Sphere) -> bool: ...
    @overload
    def Constrain(self, circle: Circle) -> bool: ...
    @overload
    def Constrain(self, line: Line) -> bool: ...
    @overload
    def Constrain(self, arc: Arc) -> bool: ...
    @overload
    def Constrain(self, mesh: Mesh, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, surface: Surface, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, curve: Curve, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, plane: Plane, allowElevator: bool) -> bool: ...
    @overload
    def Constrain(self, from_: Point3d, to: Point3d) -> bool: ...
    @overload
    def Constrain(self, brep: Brep, wireDensity: int, faceIndex: int, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def ConstrainDistanceFromBasePoint(self, distance: float) -> None: ...
    @overload
    def ConstrainToConstructionPlane(self, throughBasePoint: bool) -> bool: ...
    @overload
    def ConstrainToTargetPlane(self) -> None: ...
    @overload
    def ConstrainToVirtualCPlaneIntersection(self, plane: Plane) -> bool: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DrawLineFromPoint(self, startPoint: Point3d, showDistanceInStatusBar: bool) -> None: ...
    @overload
    def EnableCurveSnapArrow(self, drawDirectionArrowAtSnapPoint: bool, reverseArrow: bool) -> None: ...
    @overload
    def EnableCurveSnapPerpBar(self, drawPerpBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    @overload
    def EnableCurveSnapTangentBar(self, drawTangentBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    @overload
    def EnableDrawLineFromPoint(self, enable: bool) -> None: ...
    @overload
    def EnableNoRedrawOnExit(self, noRedraw: bool) -> None: ...
    @overload
    def EnableObjectSnapCursors(self, enable: bool) -> None: ...
    @overload
    def EnableSnapToCurves(self, enable: bool) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @overload
    @property
    def DynamicDrawColor(self) -> Color: ...
    @overload
    @property
    def FullFrameRedrawDuringGet(self) -> bool: ...
    @overload
    @property
    def OsnapEventType(self) -> OsnapModes: ...
    @overload
    def Get(self, onMouseUp: bool) -> GetResult: ...
    @overload
    def Get(self, onMouseUp: bool, get2DPoint: bool) -> GetResult: ...
    @overload
    @property
    def Tag(self) -> object: ...
    @overload
    def GetConstructionPoints(self) -> Iterable[Point3d]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPlanarConstraint(self, vp: RhinoViewport) -> Tuple[bool, RhinoViewport, Plane]: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetSnapPoints(self) -> Iterable[Point3d]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def InterruptMouseMove(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def NumberPreview(self) -> Tuple[bool, float]: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PermitConstraintOptions(self, permit: bool) -> None: ...
    @overload
    def PermitElevatorMode(self, permitMode: int) -> None: ...
    @overload
    def PermitFromOption(self, permit: bool) -> None: ...
    @overload
    def PermitObjectSnap(self, permit: bool) -> None: ...
    @overload
    def PermitOrthoSnap(self, permit: bool) -> None: ...
    @overload
    def PermitTabMode(self, permit: bool) -> None: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    def PointOnBrep(self) -> Tuple[BrepFace, float, float]: ...
    @overload
    def PointOnCurve(self) -> Tuple[Curve, float]: ...
    @overload
    def PointOnObject(self) -> ObjRef: ...
    @overload
    def PointOnSurface(self) -> Tuple[Surface, float, float]: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def remove_DynamicDraw(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_PostDrawObjects(self, value: EventHandler) -> None: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    @DynamicDrawColor.setter
    def DynamicDrawColor(self, value: Color) -> None: ...
    @overload
    @FullFrameRedrawDuringGet.setter
    def FullFrameRedrawDuringGet(self, value: bool) -> None: ...
    @overload
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @overload
    def SetBasePoint(self, basePoint: Point3d, showDistanceInStatusBar: bool) -> None: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetCursor(self, cursor: CursorStyle) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetBasePoint(self) -> Tuple[bool, Point3d]: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...


from ...Geometry import Point3d
from ...Display import RhinoViewport
from ...Display import DisplayPipeline
from .. import RhinoDoc
from ...Display import DrawEventArgs
class GetPointDrawEventArgs(DrawEventArgs):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def CurrentPoint(self) -> Point3d: ...
    @overload
    @property
    def Display(self) -> DisplayPipeline: ...
    @overload
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @overload
    @property
    def Source(self) -> GetPoint: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from ...Display import RhinoViewport
from ...Geometry import Point3d
class GetPointMouseEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def ControlKeyDown(self) -> bool: ...
    @overload
    @property
    def LeftButtonDown(self) -> bool: ...
    @overload
    @property
    def MiddleButtonDown(self) -> bool: ...
    @overload
    @property
    def Point(self) -> Point3d: ...
    @overload
    @property
    def RightButtonDown(self) -> bool: ...
    @overload
    @property
    def ShiftKeyDown(self) -> bool: ...
    @overload
    @property
    def Source(self) -> GetPoint: ...
    @overload
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    @property
    def WindowPoint(self) -> Point: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Polyline
from ...Commands import Result
from ...Geometry import Point3d
class GetPolyline:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def FirstPointPrompt(self) -> str: ...
    @overload
    @property
    def FourthPointPrompt(self) -> str: ...
    @overload
    @property
    def MaxPointCount(self) -> int: ...
    @overload
    @property
    def MinPointCount(self) -> int: ...
    @overload
    def Get(self) -> Tuple[Result, Polyline]: ...
    @overload
    @property
    def SecondPointPrompt(self) -> str: ...
    @overload
    @property
    def ThirdPointPrompt(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @FirstPointPrompt.setter
    def FirstPointPrompt(self, value: str) -> None: ...
    @overload
    @FourthPointPrompt.setter
    def FourthPointPrompt(self, value: str) -> None: ...
    @overload
    @MaxPointCount.setter
    def MaxPointCount(self, value: int) -> None: ...
    @overload
    @MinPointCount.setter
    def MinPointCount(self, value: int) -> None: ...
    @overload
    @SecondPointPrompt.setter
    def SecondPointPrompt(self, value: str) -> None: ...
    @overload
    @ThirdPointPrompt.setter
    def ThirdPointPrompt(self, value: str) -> None: ...
    @overload
    def SetFirstPoint(self, point: Point3d) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Sphere
from ...Commands import Result
class GetSphere:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def DefaultSize(self) -> float: ...
    @overload
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get(self) -> Tuple[Result, Sphere]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, style: MeshSphereStyle, verticalFaces: int, aroundFaces: int, triangleSubdivisions: int, quadSubdivisions: int) -> Tuple[Result, MeshSphereStyle, int, int, int, int, Sphere]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @DefaultSize.setter
    def DefaultSize(self, value: float) -> None: ...
    @overload
    @InDiameterMode.setter
    def InDiameterMode(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetString(GetBaseClass):
    @overload
    def __init__(self): ...
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLiteralString(self) -> GetResult: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...


from ...Geometry import Torus
from ...Commands import Result
class GetTorus:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def AroundDirectionCount(self) -> int: ...
    @overload
    @property
    def AroundDirectionMinimumCount(self) -> int: ...
    @overload
    @property
    def DefaultSize(self) -> float: ...
    @overload
    @property
    def FixInnerRadius(self) -> bool: ...
    @overload
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    @property
    def InSecondDiameterMode(self) -> bool: ...
    @overload
    @property
    def PromptForMeshDensity(self) -> bool: ...
    @overload
    def Get(self) -> Tuple[Result, Torus]: ...
    @overload
    @property
    def SecondSize(self) -> float: ...
    @overload
    @property
    def VerticalDirectionCount(self) -> int: ...
    @overload
    @property
    def VerticalDirectionMinimumCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Torus]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @AroundDirectionCount.setter
    def AroundDirectionCount(self, value: int) -> None: ...
    @overload
    @AroundDirectionMinimumCount.setter
    def AroundDirectionMinimumCount(self, value: int) -> None: ...
    @overload
    @DefaultSize.setter
    def DefaultSize(self, value: float) -> None: ...
    @overload
    @FixInnerRadius.setter
    def FixInnerRadius(self, value: bool) -> None: ...
    @overload
    @InDiameterMode.setter
    def InDiameterMode(self, value: bool) -> None: ...
    @overload
    @InSecondDiameterMode.setter
    def InSecondDiameterMode(self, value: bool) -> None: ...
    @overload
    @PromptForMeshDensity.setter
    def PromptForMeshDensity(self, value: bool) -> None: ...
    @overload
    @SecondSize.setter
    def SecondSize(self, value: float) -> None: ...
    @overload
    @VerticalDirectionCount.setter
    def VerticalDirectionCount(self, value: int) -> None: ...
    @overload
    @VerticalDirectionMinimumCount.setter
    def VerticalDirectionMinimumCount(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Collections import TransformObjectList
from ...Display import RhinoViewport
from ...Geometry import Point3d
from ...Geometry import Transform
from ...Geometry import Plane
from ...UI import CursorStyle
from ...Geometry import Line
from ...Geometry import Arc
from ...Geometry import Circle
from ...Geometry import Sphere
from ...Geometry import Cylinder
from ...Geometry import Curve
from ...Geometry import Surface
from ...Geometry import Brep
from ...Geometry import Mesh
from ...ApplicationSettings import OsnapModes
from ...DocObjects import ObjRef
from ...Geometry import BrepFace
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetTransform(GetPoint):
    @overload
    def AcceptColor(self, enable: bool) -> None: ...
    @overload
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    @overload
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    @overload
    def AcceptNothing(self, enable: bool) -> None: ...
    @overload
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    @overload
    def AcceptPoint(self, enable: bool) -> None: ...
    @overload
    def AcceptString(self, enable: bool) -> None: ...
    @overload
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def add_DynamicDraw(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_PostDrawObjects(self, value: EventHandler) -> None: ...
    @overload
    def AddConstructionPoint(self, point: Point3d) -> int: ...
    @overload
    def AddConstructionPoints(self, points: Iterable[Point3d]) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    @overload
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddSnapPoint(self, point: Point3d) -> int: ...
    @overload
    def AddSnapPoints(self, points: Iterable[Point3d]) -> int: ...
    @overload
    def AddTransformObjects(self, list: TransformObjectList) -> None: ...
    @overload
    def CalculateTransform(self, viewport: RhinoViewport, point: Point3d) -> Transform: ...
    @overload
    def ClearCommandOptions(self) -> None: ...
    @overload
    def ClearConstraints(self) -> None: ...
    @overload
    def ClearConstructionPoints(self) -> None: ...
    @overload
    def ClearDefault(self) -> None: ...
    @overload
    def ClearSnapPoints(self) -> None: ...
    @overload
    def Color(self) -> Color: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def Constrain(self, arc: Arc) -> bool: ...
    @overload
    def Constrain(self, cylinder: Cylinder) -> bool: ...
    @overload
    def Constrain(self, circle: Circle) -> bool: ...
    @overload
    def Constrain(self, line: Line) -> bool: ...
    @overload
    def Constrain(self, sphere: Sphere) -> bool: ...
    @overload
    def Constrain(self, plane: Plane, allowElevator: bool) -> bool: ...
    @overload
    def Constrain(self, mesh: Mesh, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, surface: Surface, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, from_: Point3d, to: Point3d) -> bool: ...
    @overload
    def Constrain(self, curve: Curve, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, brep: Brep, wireDensity: int, faceIndex: int, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def ConstrainDistanceFromBasePoint(self, distance: float) -> None: ...
    @overload
    def ConstrainToConstructionPlane(self, throughBasePoint: bool) -> bool: ...
    @overload
    def ConstrainToTargetPlane(self) -> None: ...
    @overload
    def ConstrainToVirtualCPlaneIntersection(self, plane: Plane) -> bool: ...
    @overload
    def CustomMessage(self) -> object: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DrawLineFromPoint(self, startPoint: Point3d, showDistanceInStatusBar: bool) -> None: ...
    @overload
    def EnableCurveSnapArrow(self, drawDirectionArrowAtSnapPoint: bool, reverseArrow: bool) -> None: ...
    @overload
    def EnableCurveSnapPerpBar(self, drawPerpBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    @overload
    def EnableCurveSnapTangentBar(self, drawTangentBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    @overload
    def EnableDrawLineFromPoint(self, enable: bool) -> None: ...
    @overload
    def EnableNoRedrawOnExit(self, noRedraw: bool) -> None: ...
    @overload
    def EnableObjectSnapCursors(self, enable: bool) -> None: ...
    @overload
    def EnableSnapToCurves(self, enable: bool) -> None: ...
    @overload
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @overload
    @property
    def DynamicDrawColor(self) -> Color: ...
    @overload
    @property
    def FullFrameRedrawDuringGet(self) -> bool: ...
    @overload
    @property
    def HaveTransform(self) -> bool: ...
    @overload
    @property
    def ObjectList(self) -> TransformObjectList: ...
    @overload
    @property
    def OsnapEventType(self) -> OsnapModes: ...
    @overload
    def Get(self, onMouseUp: bool) -> GetResult: ...
    @overload
    def Get(self, onMouseUp: bool, get2DPoint: bool) -> GetResult: ...
    @overload
    @property
    def Tag(self) -> object: ...
    @overload
    @property
    def Transform(self) -> Transform: ...
    @overload
    def GetConstructionPoints(self) -> Iterable[Point3d]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPlanarConstraint(self, vp: RhinoViewport) -> Tuple[bool, RhinoViewport, Plane]: ...
    @overload
    def GetSelectedEnumValue(self) -> T: ...
    @overload
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    @overload
    def GetSnapPoints(self) -> Iterable[Point3d]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetXform(self) -> GetResult: ...
    @overload
    def GotDefault(self) -> bool: ...
    @overload
    def InterruptMouseMove(self) -> bool: ...
    @overload
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> float: ...
    @overload
    def NumberPreview(self) -> Tuple[bool, float]: ...
    @overload
    def Option(self) -> CommandLineOption: ...
    @overload
    def OptionIndex(self) -> int: ...
    @overload
    def PermitConstraintOptions(self, permit: bool) -> None: ...
    @overload
    def PermitElevatorMode(self, permitMode: int) -> None: ...
    @overload
    def PermitFromOption(self, permit: bool) -> None: ...
    @overload
    def PermitObjectSnap(self, permit: bool) -> None: ...
    @overload
    def PermitOrthoSnap(self, permit: bool) -> None: ...
    @overload
    def PermitTabMode(self, permit: bool) -> None: ...
    @overload
    def PickRectangle(self) -> Rectangle: ...
    @overload
    def Point(self) -> Point3d: ...
    @overload
    def Point2d(self) -> Point: ...
    @overload
    def PointOnBrep(self) -> Tuple[BrepFace, float, float]: ...
    @overload
    def PointOnCurve(self) -> Tuple[Curve, float]: ...
    @overload
    def PointOnObject(self) -> ObjRef: ...
    @overload
    def PointOnSurface(self) -> Tuple[Surface, float, float]: ...
    @overload
    def Rectangle2d(self) -> Rectangle: ...
    @overload
    def remove_DynamicDraw(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_PostDrawObjects(self, value: EventHandler) -> None: ...
    @overload
    def Result(self) -> GetResult: ...
    @overload
    @DynamicDrawColor.setter
    def DynamicDrawColor(self, value: Color) -> None: ...
    @overload
    @FullFrameRedrawDuringGet.setter
    def FullFrameRedrawDuringGet(self, value: bool) -> None: ...
    @overload
    @HaveTransform.setter
    def HaveTransform(self, value: bool) -> None: ...
    @overload
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @overload
    @Transform.setter
    def Transform(self, value: Transform) -> None: ...
    @overload
    def SetBasePoint(self, basePoint: Point3d, showDistanceInStatusBar: bool) -> None: ...
    @overload
    def SetCommandPrompt(self, prompt: str) -> None: ...
    @overload
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    @overload
    def SetCursor(self, cursor: CursorStyle) -> None: ...
    @overload
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    @overload
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    @overload
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    @overload
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    @overload
    def SetDefaultString(self, defaultValue: str) -> None: ...
    @overload
    def SetOptionVaries(self, optionIndex: int, varies: bool) -> None: ...
    @overload
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    @overload
    def StringResult(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetBasePoint(self) -> Tuple[bool, Point3d]: ...
    @overload
    def Vector(self) -> Vector3d: ...
    @overload
    def View(self) -> RhinoView: ...


from ...Geometry import Brep
from ...Commands import Result
from ...Geometry import Mesh
class GetTruncatedCone:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Cap(self) -> bool: ...
    @overload
    @property
    def CylinderConstraint(self) -> CylinderConstraint: ...
    @overload
    @property
    def DefaultSize(self) -> float: ...
    @overload
    @property
    def Height(self) -> float: ...
    @overload
    @property
    def InDiameterMode(self) -> bool: ...
    @overload
    def Get(self) -> Tuple[Result, Brep]: ...
    @overload
    @property
    def SecondRadius(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Mesh]: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int, capStyle: int) -> Tuple[Result, int, int, int, Mesh]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Cap.setter
    def Cap(self, value: bool) -> None: ...
    @overload
    @CylinderConstraint.setter
    def CylinderConstraint(self, value: CylinderConstraint) -> None: ...
    @overload
    @DefaultSize.setter
    def DefaultSize(self, value: float) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: float) -> None: ...
    @overload
    @InDiameterMode.setter
    def InDiameterMode(self, value: bool) -> None: ...
    @overload
    @SecondRadius.setter
    def SecondRadius(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class MeshHitFlag(Enum):
    Vertex = 0
    Edge = 1
    Face = 2
    Invalid = -1


class MeshPickStyle(Enum):
    WireframePicking = 0
    ShadedModePicking = 1
    VertexOnlyPicking = 2


class MeshSphereStyle(Enum):
    UV = 0
    Triangle = 1
    Quad = 2


class OptionColor:
    @overload
    def __init__(self, initialValue: Color): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def CurrentValue(self) -> Color: ...
    @overload
    @property
    def InitialValue(self) -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @CurrentValue.setter
    def CurrentValue(self, value: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class OptionDouble:
    @overload
    def __init__(self, initialValue: float): ...
    @overload
    def __init__(self, initialValue: float, lowerLimit: float, upperLimit: float): ...
    @overload
    def __init__(self, initialValue: float, setLowerLimit: bool, limit: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def CurrentValue(self) -> float: ...
    @overload
    @property
    def InitialValue(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @CurrentValue.setter
    def CurrentValue(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class OptionInteger:
    @overload
    def __init__(self, initialValue: int): ...
    @overload
    def __init__(self, initialValue: int, lowerLimit: int, upperLimit: int): ...
    @overload
    def __init__(self, initialValue: int, setLowerLimit: bool, limit: int): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def CurrentValue(self) -> int: ...
    @overload
    @property
    def InitialValue(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @CurrentValue.setter
    def CurrentValue(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...UI import LocalizeStringPair
class OptionToggle:
    @overload
    def __init__(self, initialValue: bool, offValue: str, onValue: str): ...
    @overload
    def __init__(self, initialValue: bool, offValue: LocalizeStringPair, onValue: LocalizeStringPair): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def CurrentValue(self) -> bool: ...
    @overload
    @property
    def InitialValue(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @CurrentValue.setter
    def CurrentValue(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Display import RhinoView
from ...Geometry import Line
from ...Geometry import Transform
from ...Geometry import BoundingBox
from ...Geometry import Point3d
from ...Geometry import PointCloud
from ...Geometry import BezierCurve
from ...Geometry import NurbsCurve
from ...Geometry import Mesh
from ...Geometry import Point2d
class PickContext:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def GetObjectUsed(self) -> GetObject: ...
    @overload
    @property
    def PickGroupsEnabled(self) -> bool: ...
    @overload
    @property
    def PickLine(self) -> Line: ...
    @overload
    @property
    def PickMode(self) -> PickMode: ...
    @overload
    @property
    def PickStyle(self) -> PickStyle: ...
    @overload
    @property
    def SubObjectSelectionEnabled(self) -> bool: ...
    @overload
    @property
    def View(self) -> RhinoView: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PickFrustumTest(self, box: BoundingBox) -> Tuple[bool, bool]: ...
    @overload
    def PickFrustumTest(self, point: Point3d) -> Tuple[bool, float, float]: ...
    @overload
    def PickFrustumTest(self, points: Iterable[Point3d]) -> Tuple[bool, int, float, float]: ...
    @overload
    def PickFrustumTest(self, cloud: PointCloud) -> Tuple[bool, int, float, float]: ...
    @overload
    def PickFrustumTest(self, line: Line) -> Tuple[bool, float, float, float]: ...
    @overload
    def PickFrustumTest(self, bezier: BezierCurve) -> Tuple[bool, float, float, float]: ...
    @overload
    def PickFrustumTest(self, curve: NurbsCurve) -> Tuple[bool, float, float, float]: ...
    @overload
    def PickFrustumTest(self, mesh: Mesh, pickStyle: MeshPickStyle) -> Tuple[bool, Point3d, float, float, MeshHitFlag, int]: ...
    @overload
    def PickFrustumTest(self, mesh: Mesh, pickStyle: MeshPickStyle) -> Tuple[bool, Point3d, Point2d, Point2d, float, float, MeshHitFlag, int]: ...
    @overload
    def PickMeshTopologyVertices(self, mesh: Mesh) -> Iterable[int]: ...
    @overload
    @PickGroupsEnabled.setter
    def PickGroupsEnabled(self, value: bool) -> None: ...
    @overload
    @PickLine.setter
    def PickLine(self, value: Line) -> None: ...
    @overload
    @PickMode.setter
    def PickMode(self, value: PickMode) -> None: ...
    @overload
    @PickStyle.setter
    def PickStyle(self, value: PickStyle) -> None: ...
    @overload
    @SubObjectSelectionEnabled.setter
    def SubObjectSelectionEnabled(self, value: bool) -> None: ...
    @overload
    @View.setter
    def View(self, value: RhinoView) -> None: ...
    @overload
    def SetPickTransform(self, transform: Transform) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateClippingPlanes(self) -> None: ...


class PickMode(Enum):
    Wireframe = 1
    Shaded = 2


class PickStyle(Enum):
    # None = 0
    PointPick = 1
    WindowPick = 2
    CrossingPick = 3


from .. import RhinoDoc
class TaskCompleteEventArgs:
    @overload
    def __init__(self, task: Task, doc: RhinoDoc): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Doc(self) -> RhinoDoc: ...
    @overload
    @property
    def Redraw(self) -> bool: ...
    @overload
    @property
    def Task(self) -> Task: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Doc.setter
    def Doc(self, value: RhinoDoc) -> None: ...
    @overload
    @Redraw.setter
    def Redraw(self, value: bool) -> None: ...
    @overload
    @Task.setter
    def Task(self, value: Task) -> None: ...
    @overload
    def ToString(self) -> str: ...
