from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class CommandLineOption:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CurrentListOptionIndex(self) -> int: ...
    @property
    def EnglishName(self) -> str: ...
    @property
    def Index(self) -> int: ...
    @property
    def LocalName(self) -> str: ...
    @property
    def StringOptionValue(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def IsValidOptionName(optionName: str) -> bool: ...
    @staticmethod
    def IsValidOptionValueName(optionValue: str) -> bool: ...
    def ToString(self) -> str: ...


class ConeConstraint(Enum):
    # None = 0
    Vertical = 1
    AroundCurve = 2


class CylinderConstraint(Enum):
    # None = 0
    Vertical = 1
    AroundCurve = 2


class GeometryAttributeFilter(Enum):
    WireCurve = 1
    EdgeCurve = 2
    ClosedCurve = 4
    OpenCurve = 8
    SeamEdge = 16
    ManifoldEdge = 32
    NonmanifoldEdge = 64
    MatedEdge = 112
    SurfaceBoundaryEdge = 128
    TrimmingBoundaryEdge = 256
    BoundaryEdge = 384
    ClosedSurface = 512
    OpenSurface = 1024
    TrimmedSurface = 2048
    UntrimmedSurface = 4096
    SubSurface = 8192
    TopSurface = 16384
    ManifoldPolysrf = 32768
    NonmanifoldPolysrf = 65536
    ClosedPolysrf = 131072
    OpenPolysrf = 262144
    ClosedMesh = 524288
    OpenMesh = 1048576
    BoundaryInnerLoop = 2097152
    MatedInnerLoop = 4194304
    InnerLoop = 6291456
    BoundaryOuterLoop = 8388608
    MatedOuterLoop = 16777216
    OuterLoop = 25165824
    SpecialLoop = 33554432
    AcceptAllAttributes = 4294967295


from ...Geometry import Arc
from ...Commands import Result
class GetArc:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AllowDeformable(self) -> bool: ...
    @property
    def DefaultRadius(self) -> float: ...
    @property
    def Deformable(self) -> bool: ...
    @property
    def DeformableDegree(self) -> int: ...
    @property
    def DeformablePointCount(self) -> int: ...
    def Get(self) -> Tuple[Result, Arc]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @AllowDeformable.setter
    def AllowDeformable(self) -> MutableSequence[bool]: ...
    @DefaultRadius.setter
    def DefaultRadius(self) -> MutableSequence[float]: ...
    @Deformable.setter
    def Deformable(self) -> MutableSequence[bool]: ...
    @DeformableDegree.setter
    def DeformableDegree(self) -> MutableSequence[int]: ...
    @DeformablePointCount.setter
    def DeformablePointCount(self) -> MutableSequence[int]: ...
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetBaseClass:
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    def CustomMessage(self) -> Object: ...
    def Dispose(self) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetType(self) -> Type: ...
    def GotDefault(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    def Number(self) -> float: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    @staticmethod
    def PostCustomMessage(messageData: Object) -> None: ...
    def Rectangle2d(self) -> Rectangle: ...
    def Result(self) -> GetResult: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...


from .. import RhinoDoc
from ...Commands import Result
from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetCancel(GetBaseClass):
    def __init__(self): ...
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    def add_TaskCompleted(self, value: EventHandler) -> None: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    def CustomMessage(self) -> Object: ...
    def Dispose(self) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Progress(self) -> IProgress: ...
    @property
    def ProgressMessage(self) -> str: ...
    @property
    def ProgressReporting(self) -> bool: ...
    @property
    def Token(self) -> CancellationToken: ...
    def GetHashCode(self) -> int: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetType(self) -> Type: ...
    def GotDefault(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    def Number(self) -> float: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    def Rectangle2d(self) -> Rectangle: ...
    def remove_TaskCompleted(self, value: EventHandler) -> None: ...
    def Result(self) -> GetResult: ...
    @ProgressMessage.setter
    def ProgressMessage(self) -> MutableSequence[str]: ...
    @ProgressReporting.setter
    def ProgressReporting(self) -> MutableSequence[bool]: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...
    @overload
    def Wait(self, task: Task, doc: RhinoDoc) -> Result: ...
    @overload
    def Wait(self, task: Task, doc: RhinoDoc) -> Result: ...
    @overload
    def WaitAll(self, tasks: Iterable[Task], doc: RhinoDoc) -> Result: ...
    @overload
    def WaitAll(self, tasks: Iterable[Task], doc: RhinoDoc) -> Result: ...


from ...Geometry import Circle
from ...Commands import Result
class GetCircle:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AllowDeformable(self) -> bool: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def Deformable(self) -> bool: ...
    @property
    def DeformableDegree(self) -> int: ...
    @property
    def DeformablePointCount(self) -> int: ...
    @property
    def InDiameterMode(self) -> bool: ...
    def Get(self) -> Tuple[Result, Circle]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @AllowDeformable.setter
    def AllowDeformable(self) -> MutableSequence[bool]: ...
    @DefaultSize.setter
    def DefaultSize(self) -> MutableSequence[float]: ...
    @Deformable.setter
    def Deformable(self) -> MutableSequence[bool]: ...
    @DeformableDegree.setter
    def DeformableDegree(self) -> MutableSequence[int]: ...
    @DeformablePointCount.setter
    def DeformablePointCount(self) -> MutableSequence[int]: ...
    @InDiameterMode.setter
    def InDiameterMode(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...


from ...Geometry import Cone
from ...Commands import Result
class GetCone:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AllowInputAngle(self) -> bool: ...
    @property
    def ApexAngleDegrees(self) -> float: ...
    @property
    def BaseAngleDegrees(self) -> float: ...
    @property
    def Cap(self) -> bool: ...
    @property
    def ConeConstraint(self) -> ConeConstraint: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def InDiameterMode(self) -> bool: ...
    def Get(self) -> Tuple[Result, Cone]: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Cone]: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int, capStyle: int) -> Tuple[Result, int, int, int, Cone]: ...
    def GetType(self) -> Type: ...
    @AllowInputAngle.setter
    def AllowInputAngle(self) -> MutableSequence[bool]: ...
    @ApexAngleDegrees.setter
    def ApexAngleDegrees(self) -> MutableSequence[float]: ...
    @BaseAngleDegrees.setter
    def BaseAngleDegrees(self) -> MutableSequence[float]: ...
    @Cap.setter
    def Cap(self) -> MutableSequence[bool]: ...
    @ConeConstraint.setter
    def ConeConstraint(self) -> MutableSequence[ConeConstraint]: ...
    @DefaultSize.setter
    def DefaultSize(self) -> MutableSequence[float]: ...
    @Height.setter
    def Height(self) -> MutableSequence[float]: ...
    @InDiameterMode.setter
    def InDiameterMode(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...


from ...Geometry import Cylinder
from ...Commands import Result
class GetCylinder:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def BothSidesOption(self) -> bool: ...
    @property
    def Cap(self) -> bool: ...
    @property
    def CylinderConstraint(self) -> CylinderConstraint: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def InDiameterMode(self) -> bool: ...
    def Get(self) -> Tuple[Result, Cylinder]: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Cylinder]: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int, capStyle: int) -> Tuple[Result, int, int, int, Cylinder]: ...
    def GetType(self) -> Type: ...
    @BothSidesOption.setter
    def BothSidesOption(self) -> MutableSequence[bool]: ...
    @Cap.setter
    def Cap(self) -> MutableSequence[bool]: ...
    @CylinderConstraint.setter
    def CylinderConstraint(self) -> MutableSequence[CylinderConstraint]: ...
    @DefaultSize.setter
    def DefaultSize(self) -> MutableSequence[float]: ...
    @Height.setter
    def Height(self) -> MutableSequence[float]: ...
    @InDiameterMode.setter
    def InDiameterMode(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...Geometry import NurbsSurface
from ...Commands import Result
from ...Geometry import Mesh
class GetEllipsoid:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def FirstPoint(self) -> Point3d: ...
    @property
    def IsModeFromFoci(self) -> bool: ...
    @property
    def MarkFoci(self) -> bool: ...
    def Get(self) -> Tuple[Result, NurbsSurface]: ...
    @property
    def SecondPoint(self) -> Point3d: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Mesh]: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int, quadCaps: bool) -> Tuple[Result, int, int, bool, Mesh]: ...
    def GetType(self) -> Type: ...
    @MarkFoci.setter
    def MarkFoci(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...


class GetFileNameMode(Enum):
    Open = 0
    OpenTemplate = 1
    OpenImage = 2
    OpenRhinoOnly = 3
    OpenTextFile = 5
    OpenWorksession = 6
    Import = 7
    Attach = 8
    LoadPlugIn = 9
    Save = 10
    SaveSmall = 11
    SaveTemplate = 12
    SaveImage = 13
    Export = 14
    SaveTextFile = 17
    SaveWorksession = 18


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetInteger(GetBaseClass):
    def __init__(self): ...
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    def CustomMessage(self) -> Object: ...
    def Dispose(self) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Get(self) -> GetResult: ...
    def GetHashCode(self) -> int: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetType(self) -> Type: ...
    def GotDefault(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    @overload
    def Number(self) -> int: ...
    @overload
    def Number(self) -> float: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    def Rectangle2d(self) -> Rectangle: ...
    def Result(self) -> GetResult: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetLowerLimit(self, lowerLimit: int, strictlyGreaterThan: bool) -> None: ...
    def SetUpperLimit(self, upperLimit: int, strictlyLessThan: bool) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...


from ...Geometry import Line
from ...Commands import Result
from ...Geometry import Point3d
class GetLine:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def EnableAllVariations(self, on: bool) -> None: ...
    def EnableFromBothSidesOption(self, on: bool) -> None: ...
    def EnableFromMidPointOption(self, on: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AcceptZeroLengthLine(self) -> bool: ...
    @property
    def FeedbackColor(self) -> Color: ...
    @property
    def FirstPointPrompt(self) -> str: ...
    @property
    def FixedLength(self) -> float: ...
    @property
    def GetLineMode(self) -> GetLineMode: ...
    @property
    def HaveFeedbackColor(self) -> bool: ...
    @property
    def MidPointPrompt(self) -> str: ...
    def Get(self) -> Tuple[Result, Line]: ...
    @property
    def SecondPointPrompt(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @AcceptZeroLengthLine.setter
    def AcceptZeroLengthLine(self) -> MutableSequence[bool]: ...
    @FeedbackColor.setter
    def FeedbackColor(self) -> MutableSequence[Color]: ...
    @FirstPointPrompt.setter
    def FirstPointPrompt(self) -> MutableSequence[str]: ...
    @FixedLength.setter
    def FixedLength(self) -> MutableSequence[float]: ...
    @GetLineMode.setter
    def GetLineMode(self) -> MutableSequence[GetLineMode]: ...
    @MidPointPrompt.setter
    def MidPointPrompt(self) -> MutableSequence[str]: ...
    @SecondPointPrompt.setter
    def SecondPointPrompt(self) -> MutableSequence[str]: ...
    def SetFirstPoint(self, point: Point3d) -> None: ...
    def ToString(self) -> str: ...


class GetLineMode(Enum):
    TwoPoint = 0
    SurfaceNormal = 1
    Angled = 2
    Vertical = 3
    FourPoint = 4
    Bisector = 5
    Perpendicular = 6
    Tangent = 7
    CurveEnd = 8
    CPlaneNormalVector = 9


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetNumber(GetBaseClass):
    def __init__(self): ...
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    def CustomMessage(self) -> Object: ...
    def Dispose(self) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Get(self) -> GetResult: ...
    def GetHashCode(self) -> int: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetType(self) -> Type: ...
    def GotDefault(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    def Number(self) -> float: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    def Rectangle2d(self) -> Rectangle: ...
    def Result(self) -> GetResult: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetLowerLimit(self, lowerLimit: float, strictlyGreaterThan: bool) -> None: ...
    def SetUpperLimit(self, upperLimit: float, strictlyLessThan: bool) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...


from .. import RhinoDoc
from ...DocObjects import ObjectType
from ...DocObjects import RhinoObject
from ...Geometry import GeometryBase
from ...Geometry import ComponentIndex
from ...DocObjects import ObjRef
from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetObject(GetBaseClass):
    def __init__(self): ...
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    @staticmethod
    def ActiveGetObject(doc: RhinoDoc) -> GetObject: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def AppendToPickList(self, objref: ObjRef) -> None: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def ClearObjects(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    def CustomGeometryFilter(self, rhObject: RhinoObject, geometry: GeometryBase, componentIndex: ComponentIndex) -> bool: ...
    def CustomMessage(self) -> Object: ...
    def DisablePreSelect(self) -> None: ...
    def Dispose(self) -> None: ...
    def EnableClearObjectsOnEntry(self, enable: bool) -> None: ...
    def EnableHighlight(self, enable: bool) -> None: ...
    def EnableIgnoreGrips(self, enable: bool) -> None: ...
    def EnablePostSelect(self, enable: bool) -> None: ...
    def EnablePreSelect(self, enable: bool, ignoreUnacceptablePreselectedObjects: bool) -> None: ...
    def EnablePressEnterWhenDonePrompt(self, enable: bool) -> None: ...
    def EnableSelPrevious(self, enable: bool) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def EnableUnselectObjectsOnExit(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Get(self) -> GetResult: ...
    @property
    def AlreadySelectedObjectSelect(self) -> bool: ...
    @property
    def BottomObjectPreference(self) -> bool: ...
    @property
    def ChooseOneQuestion(self) -> bool: ...
    @property
    def DeselectAllBeforePostSelect(self) -> bool: ...
    @property
    def GeometryAttributeFilter(self) -> GeometryAttributeFilter: ...
    @property
    def GeometryFilter(self) -> ObjectType: ...
    @property
    def GroupSelect(self) -> bool: ...
    @property
    def InactiveDetailPickEnabled(self) -> bool: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def ObjectsWerePreselected(self) -> bool: ...
    @property
    def OneByOnePostSelect(self) -> bool: ...
    @property
    def ProxyBrepFromSubD(self) -> bool: ...
    @property
    def ReferenceObjectSelect(self) -> bool: ...
    @property
    def SerialNumber(self) -> UInt32: ...
    @property
    def SubObjectSelect(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetMultiple(self, minimumNumber: int, maximumNumber: int) -> GetResult: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetType(self) -> Type: ...
    def GotDefault(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    def Number(self) -> float: ...
    def Object(self, index: int) -> ObjRef: ...
    def Objects(self) -> Iterable[ObjRef]: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PassesGeometryAttributeFilter(self, rhObject: RhinoObject, geometry: GeometryBase, componentIndex: ComponentIndex) -> bool: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    def Rectangle2d(self) -> Rectangle: ...
    def Result(self) -> GetResult: ...
    @AlreadySelectedObjectSelect.setter
    def AlreadySelectedObjectSelect(self) -> MutableSequence[bool]: ...
    @BottomObjectPreference.setter
    def BottomObjectPreference(self) -> MutableSequence[bool]: ...
    @ChooseOneQuestion.setter
    def ChooseOneQuestion(self) -> MutableSequence[bool]: ...
    @DeselectAllBeforePostSelect.setter
    def DeselectAllBeforePostSelect(self) -> MutableSequence[bool]: ...
    @GeometryAttributeFilter.setter
    def GeometryAttributeFilter(self) -> MutableSequence[GeometryAttributeFilter]: ...
    @GeometryFilter.setter
    def GeometryFilter(self) -> MutableSequence[ObjectType]: ...
    @GroupSelect.setter
    def GroupSelect(self) -> MutableSequence[bool]: ...
    @InactiveDetailPickEnabled.setter
    def InactiveDetailPickEnabled(self) -> MutableSequence[bool]: ...
    @OneByOnePostSelect.setter
    def OneByOnePostSelect(self) -> MutableSequence[bool]: ...
    @ProxyBrepFromSubD.setter
    def ProxyBrepFromSubD(self) -> MutableSequence[bool]: ...
    @ReferenceObjectSelect.setter
    def ReferenceObjectSelect(self) -> MutableSequence[bool]: ...
    @SubObjectSelect.setter
    def SubObjectSelect(self) -> MutableSequence[bool]: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetCustomGeometryFilter(self, filter: GetObjectGeometryFilter) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetPressEnterWhenDonePrompt(self, prompt: str) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...


from ...DocObjects import RhinoObject
from ...Geometry import GeometryBase
from ...Geometry import ComponentIndex
class GetObjectGeometryFilter:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, rhObject: RhinoObject, geometry: GeometryBase, componentIndex: ComponentIndex, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, rhObject: RhinoObject, geometry: GeometryBase, componentIndex: ComponentIndex) -> bool: ...
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetOption(GetBaseClass):
    def __init__(self): ...
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    def CustomMessage(self) -> Object: ...
    def Dispose(self) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Get(self) -> GetResult: ...
    def GetHashCode(self) -> int: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetType(self) -> Type: ...
    def GotDefault(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    def Number(self) -> float: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    def Rectangle2d(self) -> Rectangle: ...
    def Result(self) -> GetResult: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...


from ...Geometry import Point3d
from ...Display import RhinoViewport
from ...Geometry import Plane
from ...UI import CursorStyle
from ...Geometry import Line
from ...Geometry import Arc
from ...Geometry import Circle
from ...Geometry import Sphere
from ...Geometry import Cylinder
from ...Geometry import Curve
from ...Geometry import Surface
from ...Geometry import Brep
from ...Geometry import Mesh
from ...ApplicationSettings import OsnapModes
from ...DocObjects import ObjRef
from ...Geometry import BrepFace
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetPoint(GetBaseClass):
    def __init__(self): ...
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    def add_DynamicDraw(self, value: EventHandler) -> None: ...
    def add_MouseDown(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: EventHandler) -> None: ...
    def add_PostDrawObjects(self, value: EventHandler) -> None: ...
    def AddConstructionPoint(self, point: Point3d) -> int: ...
    def AddConstructionPoints(self, points: Iterable[Point3d]) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def AddSnapPoint(self, point: Point3d) -> int: ...
    def AddSnapPoints(self, points: Iterable[Point3d]) -> int: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearConstraints(self) -> None: ...
    def ClearConstructionPoints(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def ClearSnapPoints(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    @overload
    def Constrain(self, circle: Circle) -> bool: ...
    @overload
    def Constrain(self, line: Line) -> bool: ...
    @overload
    def Constrain(self, arc: Arc) -> bool: ...
    @overload
    def Constrain(self, cylinder: Cylinder) -> bool: ...
    @overload
    def Constrain(self, sphere: Sphere) -> bool: ...
    @overload
    def Constrain(self, mesh: Mesh, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, from_: Point3d, to: Point3d) -> bool: ...
    @overload
    def Constrain(self, surface: Surface, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, curve: Curve, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, plane: Plane, allowElevator: bool) -> bool: ...
    @overload
    def Constrain(self, brep: Brep, wireDensity: int, faceIndex: int, allowPickingPointOffObject: bool) -> bool: ...
    def ConstrainDistanceFromBasePoint(self, distance: float) -> None: ...
    def ConstrainToConstructionPlane(self, throughBasePoint: bool) -> bool: ...
    def ConstrainToTargetPlane(self) -> None: ...
    def ConstrainToVirtualCPlaneIntersection(self, plane: Plane) -> bool: ...
    def CustomMessage(self) -> Object: ...
    def Dispose(self) -> None: ...
    def DrawLineFromPoint(self, startPoint: Point3d, showDistanceInStatusBar: bool) -> None: ...
    def EnableCurveSnapArrow(self, drawDirectionArrowAtSnapPoint: bool, reverseArrow: bool) -> None: ...
    def EnableCurveSnapPerpBar(self, drawPerpBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    def EnableCurveSnapTangentBar(self, drawTangentBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    def EnableDrawLineFromPoint(self, enable: bool) -> None: ...
    def EnableNoRedrawOnExit(self, noRedraw: bool) -> None: ...
    def EnableObjectSnapCursors(self, enable: bool) -> None: ...
    def EnableSnapToCurves(self, enable: bool) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @property
    def DynamicDrawColor(self) -> Color: ...
    @property
    def FullFrameRedrawDuringGet(self) -> bool: ...
    @property
    def OsnapEventType(self) -> OsnapModes: ...
    @overload
    def Get(self, onMouseUp: bool) -> GetResult: ...
    @overload
    def Get(self, onMouseUp: bool, get2DPoint: bool) -> GetResult: ...
    @property
    def Tag(self) -> Object: ...
    def GetConstructionPoints(self) -> Iterable[Point3d]: ...
    def GetHashCode(self) -> int: ...
    def GetPlanarConstraint(self, vp: RhinoViewport) -> Tuple[bool, RhinoViewport, Plane]: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetSnapPoints(self) -> Iterable[Point3d]: ...
    def GetType(self) -> Type: ...
    def GotDefault(self) -> bool: ...
    def InterruptMouseMove(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    def Number(self) -> float: ...
    def NumberPreview(self) -> Tuple[bool, float]: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PermitConstraintOptions(self, permit: bool) -> None: ...
    def PermitElevatorMode(self, permitMode: int) -> None: ...
    def PermitFromOption(self, permit: bool) -> None: ...
    def PermitObjectSnap(self, permit: bool) -> None: ...
    def PermitOrthoSnap(self, permit: bool) -> None: ...
    def PermitTabMode(self, permit: bool) -> None: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    def PointOnBrep(self) -> Tuple[BrepFace, float, float]: ...
    def PointOnCurve(self) -> Tuple[Curve, float]: ...
    def PointOnObject(self) -> ObjRef: ...
    def PointOnSurface(self) -> Tuple[Surface, float, float]: ...
    def Rectangle2d(self) -> Rectangle: ...
    def remove_DynamicDraw(self, value: EventHandler) -> None: ...
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    def remove_PostDrawObjects(self, value: EventHandler) -> None: ...
    def Result(self) -> GetResult: ...
    @DynamicDrawColor.setter
    def DynamicDrawColor(self) -> MutableSequence[Color]: ...
    @FullFrameRedrawDuringGet.setter
    def FullFrameRedrawDuringGet(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    def SetBasePoint(self, basePoint: Point3d, showDistanceInStatusBar: bool) -> None: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetCursor(self, cursor: CursorStyle) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def TryGetBasePoint(self) -> Tuple[bool, Point3d]: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...


from ...Geometry import Point3d
from ...Display import RhinoViewport
from ...Display import DisplayPipeline
from .. import RhinoDoc
from ...Display import DrawEventArgs
class GetPointDrawEventArgs(DrawEventArgs):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CurrentPoint(self) -> Point3d: ...
    @property
    def Display(self) -> DisplayPipeline: ...
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @property
    def Source(self) -> GetPoint: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from ...Display import RhinoViewport
from ...Geometry import Point3d
class GetPointMouseEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ControlKeyDown(self) -> bool: ...
    @property
    def LeftButtonDown(self) -> bool: ...
    @property
    def MiddleButtonDown(self) -> bool: ...
    @property
    def Point(self) -> Point3d: ...
    @property
    def RightButtonDown(self) -> bool: ...
    @property
    def ShiftKeyDown(self) -> bool: ...
    @property
    def Source(self) -> GetPoint: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def WindowPoint(self) -> Point: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from ...Geometry import Polyline
from ...Commands import Result
from ...Geometry import Point3d
class GetPolyline:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def FirstPointPrompt(self) -> str: ...
    @property
    def FourthPointPrompt(self) -> str: ...
    @property
    def MaxPointCount(self) -> int: ...
    @property
    def MinPointCount(self) -> int: ...
    def Get(self) -> Tuple[Result, Polyline]: ...
    @property
    def SecondPointPrompt(self) -> str: ...
    @property
    def ThirdPointPrompt(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @FirstPointPrompt.setter
    def FirstPointPrompt(self) -> MutableSequence[str]: ...
    @FourthPointPrompt.setter
    def FourthPointPrompt(self) -> MutableSequence[str]: ...
    @MaxPointCount.setter
    def MaxPointCount(self) -> MutableSequence[int]: ...
    @MinPointCount.setter
    def MinPointCount(self) -> MutableSequence[int]: ...
    @SecondPointPrompt.setter
    def SecondPointPrompt(self) -> MutableSequence[str]: ...
    @ThirdPointPrompt.setter
    def ThirdPointPrompt(self) -> MutableSequence[str]: ...
    def SetFirstPoint(self, point: Point3d) -> None: ...
    def ToString(self) -> str: ...


from ...Geometry import Sphere
from ...Commands import Result
class GetSphere:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def InDiameterMode(self) -> bool: ...
    def Get(self) -> Tuple[Result, Sphere]: ...
    def GetHashCode(self) -> int: ...
    def GetMesh(self, style: MeshSphereStyle, verticalFaces: int, aroundFaces: int, triangleSubdivisions: int, quadSubdivisions: int) -> Tuple[Result, MeshSphereStyle, int, int, int, int, Sphere]: ...
    def GetType(self) -> Type: ...
    @DefaultSize.setter
    def DefaultSize(self) -> MutableSequence[float]: ...
    @InDiameterMode.setter
    def InDiameterMode(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...


from ...Geometry import Point3d
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetString(GetBaseClass):
    def __init__(self): ...
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    def CustomMessage(self) -> Object: ...
    def Dispose(self) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Get(self) -> GetResult: ...
    def GetHashCode(self) -> int: ...
    def GetLiteralString(self) -> GetResult: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetType(self) -> Type: ...
    def GotDefault(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    def Number(self) -> float: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    def Rectangle2d(self) -> Rectangle: ...
    def Result(self) -> GetResult: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...


from ...Geometry import Torus
from ...Commands import Result
class GetTorus:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AroundDirectionCount(self) -> int: ...
    @property
    def AroundDirectionMinimumCount(self) -> int: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def FixInnerRadius(self) -> bool: ...
    @property
    def InDiameterMode(self) -> bool: ...
    @property
    def InSecondDiameterMode(self) -> bool: ...
    @property
    def PromptForMeshDensity(self) -> bool: ...
    def Get(self) -> Tuple[Result, Torus]: ...
    @property
    def SecondSize(self) -> float: ...
    @property
    def VerticalDirectionCount(self) -> int: ...
    @property
    def VerticalDirectionMinimumCount(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Torus]: ...
    def GetType(self) -> Type: ...
    @AroundDirectionCount.setter
    def AroundDirectionCount(self) -> MutableSequence[int]: ...
    @AroundDirectionMinimumCount.setter
    def AroundDirectionMinimumCount(self) -> MutableSequence[int]: ...
    @DefaultSize.setter
    def DefaultSize(self) -> MutableSequence[float]: ...
    @FixInnerRadius.setter
    def FixInnerRadius(self) -> MutableSequence[bool]: ...
    @InDiameterMode.setter
    def InDiameterMode(self) -> MutableSequence[bool]: ...
    @InSecondDiameterMode.setter
    def InSecondDiameterMode(self) -> MutableSequence[bool]: ...
    @PromptForMeshDensity.setter
    def PromptForMeshDensity(self) -> MutableSequence[bool]: ...
    @SecondSize.setter
    def SecondSize(self) -> MutableSequence[float]: ...
    @VerticalDirectionCount.setter
    def VerticalDirectionCount(self) -> MutableSequence[int]: ...
    @VerticalDirectionMinimumCount.setter
    def VerticalDirectionMinimumCount(self) -> MutableSequence[int]: ...
    def ToString(self) -> str: ...


from ...Collections import TransformObjectList
from ...Display import RhinoViewport
from ...Geometry import Point3d
from ...Geometry import Transform
from ...Geometry import Plane
from ...UI import CursorStyle
from ...Geometry import Line
from ...Geometry import Arc
from ...Geometry import Circle
from ...Geometry import Sphere
from ...Geometry import Cylinder
from ...Geometry import Curve
from ...Geometry import Surface
from ...Geometry import Brep
from ...Geometry import Mesh
from ...ApplicationSettings import OsnapModes
from ...DocObjects import ObjRef
from ...Geometry import BrepFace
from ...UI import LocalizeStringPair
from ...Commands import Result
from ...Geometry import Vector3d
from ...Display import RhinoView
class GetTransform(GetPoint):
    def AcceptColor(self, enable: bool) -> None: ...
    def AcceptCustomMessage(self, enable: bool) -> None: ...
    def AcceptEnterWhenDone(self, enable: bool) -> None: ...
    def AcceptNothing(self, enable: bool) -> None: ...
    def AcceptNumber(self, enable: bool, acceptZero: bool) -> None: ...
    def AcceptPoint(self, enable: bool) -> None: ...
    def AcceptString(self, enable: bool) -> None: ...
    def AcceptUndo(self, enable: bool) -> None: ...
    def add_DynamicDraw(self, value: EventHandler) -> None: ...
    def add_MouseDown(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: EventHandler) -> None: ...
    def add_PostDrawObjects(self, value: EventHandler) -> None: ...
    def AddConstructionPoint(self, point: Point3d) -> int: ...
    def AddConstructionPoints(self, points: Iterable[Point3d]) -> int: ...
    @overload
    def AddOption(self, englishOption: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair) -> int: ...
    @overload
    def AddOption(self, englishOption: str, englishOptionValue: str, hiddenOption: bool) -> int: ...
    @overload
    def AddOption(self, optionName: LocalizeStringPair, optionValue: LocalizeStringPair, hiddenOption: bool) -> int: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, englishName: str, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionColor(self, optionName: LocalizeStringPair, colorValue: OptionColor, prompt: str) -> Tuple[int, OptionColor]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, optionName: LocalizeStringPair, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionDouble(self, englishName: str, numberValue: OptionDouble, prompt: str) -> Tuple[int, OptionDouble]: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T) -> int: ...
    @overload
    def AddOptionEnumList(self, englishOptionName: str, defaultValue: T, include: Iterable[T]) -> int: ...
    def AddOptionEnumSelectionList(self, englishOptionName: str, enumSelection: Iterable[T], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, optionName: LocalizeStringPair, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionInteger(self, englishName: str, intValue: OptionInteger, prompt: str) -> Tuple[int, OptionInteger]: ...
    @overload
    def AddOptionList(self, englishOptionName: str, listValues: Iterable[str], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionList(self, optionName: LocalizeStringPair, listValues: Iterable[LocalizeStringPair], listCurrentIndex: int) -> int: ...
    @overload
    def AddOptionToggle(self, englishName: str, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    @overload
    def AddOptionToggle(self, optionName: LocalizeStringPair, toggleValue: OptionToggle) -> Tuple[int, OptionToggle]: ...
    def AddSnapPoint(self, point: Point3d) -> int: ...
    def AddSnapPoints(self, points: Iterable[Point3d]) -> int: ...
    def AddTransformObjects(self, list: TransformObjectList) -> None: ...
    def CalculateTransform(self, viewport: RhinoViewport, point: Point3d) -> Transform: ...
    def ClearCommandOptions(self) -> None: ...
    def ClearConstraints(self) -> None: ...
    def ClearConstructionPoints(self) -> None: ...
    def ClearDefault(self) -> None: ...
    def ClearSnapPoints(self) -> None: ...
    def Color(self) -> Color: ...
    def CommandResult(self) -> Result: ...
    @overload
    def Constrain(self, arc: Arc) -> bool: ...
    @overload
    def Constrain(self, cylinder: Cylinder) -> bool: ...
    @overload
    def Constrain(self, circle: Circle) -> bool: ...
    @overload
    def Constrain(self, line: Line) -> bool: ...
    @overload
    def Constrain(self, sphere: Sphere) -> bool: ...
    @overload
    def Constrain(self, plane: Plane, allowElevator: bool) -> bool: ...
    @overload
    def Constrain(self, mesh: Mesh, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, surface: Surface, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, from_: Point3d, to: Point3d) -> bool: ...
    @overload
    def Constrain(self, curve: Curve, allowPickingPointOffObject: bool) -> bool: ...
    @overload
    def Constrain(self, brep: Brep, wireDensity: int, faceIndex: int, allowPickingPointOffObject: bool) -> bool: ...
    def ConstrainDistanceFromBasePoint(self, distance: float) -> None: ...
    def ConstrainToConstructionPlane(self, throughBasePoint: bool) -> bool: ...
    def ConstrainToTargetPlane(self) -> None: ...
    def ConstrainToVirtualCPlaneIntersection(self, plane: Plane) -> bool: ...
    def CustomMessage(self) -> Object: ...
    def Dispose(self) -> None: ...
    def DrawLineFromPoint(self, startPoint: Point3d, showDistanceInStatusBar: bool) -> None: ...
    def EnableCurveSnapArrow(self, drawDirectionArrowAtSnapPoint: bool, reverseArrow: bool) -> None: ...
    def EnableCurveSnapPerpBar(self, drawPerpBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    def EnableCurveSnapTangentBar(self, drawTangentBarAtSnapPoint: bool, drawEndPoints: bool) -> None: ...
    def EnableDrawLineFromPoint(self, enable: bool) -> None: ...
    def EnableNoRedrawOnExit(self, noRedraw: bool) -> None: ...
    def EnableObjectSnapCursors(self, enable: bool) -> None: ...
    def EnableSnapToCurves(self, enable: bool) -> None: ...
    def EnableTransparentCommands(self, enable: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Get(self) -> GetResult: ...
    @property
    def DynamicDrawColor(self) -> Color: ...
    @property
    def FullFrameRedrawDuringGet(self) -> bool: ...
    @property
    def HaveTransform(self) -> bool: ...
    @property
    def ObjectList(self) -> TransformObjectList: ...
    @property
    def OsnapEventType(self) -> OsnapModes: ...
    @overload
    def Get(self, onMouseUp: bool) -> GetResult: ...
    @overload
    def Get(self, onMouseUp: bool, get2DPoint: bool) -> GetResult: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Transform(self) -> Transform: ...
    def GetConstructionPoints(self) -> Iterable[Point3d]: ...
    def GetHashCode(self) -> int: ...
    def GetPlanarConstraint(self, vp: RhinoViewport) -> Tuple[bool, RhinoViewport, Plane]: ...
    def GetSelectedEnumValue(self) -> T: ...
    def GetSelectedEnumValueFromSelectionList(self, selectionList: Iterable[T]) -> T: ...
    def GetSnapPoints(self) -> Iterable[Point3d]: ...
    def GetType(self) -> Type: ...
    def GetXform(self) -> GetResult: ...
    def GotDefault(self) -> bool: ...
    def InterruptMouseMove(self) -> bool: ...
    def Line2d(self) -> Iterable[Point]: ...
    def Number(self) -> float: ...
    def NumberPreview(self) -> Tuple[bool, float]: ...
    def Option(self) -> CommandLineOption: ...
    def OptionIndex(self) -> int: ...
    def PermitConstraintOptions(self, permit: bool) -> None: ...
    def PermitElevatorMode(self, permitMode: int) -> None: ...
    def PermitFromOption(self, permit: bool) -> None: ...
    def PermitObjectSnap(self, permit: bool) -> None: ...
    def PermitOrthoSnap(self, permit: bool) -> None: ...
    def PermitTabMode(self, permit: bool) -> None: ...
    def PickRectangle(self) -> Rectangle: ...
    def Point(self) -> Point3d: ...
    def Point2d(self) -> Point: ...
    def PointOnBrep(self) -> Tuple[BrepFace, float, float]: ...
    def PointOnCurve(self) -> Tuple[Curve, float]: ...
    def PointOnObject(self) -> ObjRef: ...
    def PointOnSurface(self) -> Tuple[Surface, float, float]: ...
    def Rectangle2d(self) -> Rectangle: ...
    def remove_DynamicDraw(self, value: EventHandler) -> None: ...
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    def remove_PostDrawObjects(self, value: EventHandler) -> None: ...
    def Result(self) -> GetResult: ...
    @DynamicDrawColor.setter
    def DynamicDrawColor(self) -> MutableSequence[Color]: ...
    @FullFrameRedrawDuringGet.setter
    def FullFrameRedrawDuringGet(self) -> MutableSequence[bool]: ...
    @HaveTransform.setter
    def HaveTransform(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @Transform.setter
    def Transform(self) -> MutableSequence[Transform]: ...
    def SetBasePoint(self, basePoint: Point3d, showDistanceInStatusBar: bool) -> None: ...
    def SetCommandPrompt(self, prompt: str) -> None: ...
    def SetCommandPromptDefault(self, defaultValue: str) -> None: ...
    def SetCursor(self, cursor: CursorStyle) -> None: ...
    def SetDefaultColor(self, defaultColor: Color) -> None: ...
    def SetDefaultInteger(self, defaultValue: int) -> None: ...
    def SetDefaultNumber(self, defaultNumber: float) -> None: ...
    def SetDefaultPoint(self, point: Point3d) -> None: ...
    def SetDefaultString(self, defaultValue: str) -> None: ...
    def SetWaitDuration(self, milliseconds: int) -> None: ...
    def StringResult(self) -> str: ...
    def ToString(self) -> str: ...
    def TryGetBasePoint(self) -> Tuple[bool, Point3d]: ...
    def Vector(self) -> Vector3d: ...
    def View(self) -> RhinoView: ...


from ...Geometry import Brep
from ...Commands import Result
from ...Geometry import Mesh
class GetTruncatedCone:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Cap(self) -> bool: ...
    @property
    def CylinderConstraint(self) -> CylinderConstraint: ...
    @property
    def DefaultSize(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def InDiameterMode(self) -> bool: ...
    def Get(self) -> Tuple[Result, Brep]: ...
    @property
    def SecondRadius(self) -> float: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int) -> Tuple[Result, int, int, Mesh]: ...
    @overload
    def GetMesh(self, verticalFaces: int, aroundFaces: int, capStyle: int) -> Tuple[Result, int, int, int, Mesh]: ...
    def GetType(self) -> Type: ...
    @Cap.setter
    def Cap(self) -> MutableSequence[bool]: ...
    @CylinderConstraint.setter
    def CylinderConstraint(self) -> MutableSequence[CylinderConstraint]: ...
    @DefaultSize.setter
    def DefaultSize(self) -> MutableSequence[float]: ...
    @Height.setter
    def Height(self) -> MutableSequence[float]: ...
    @InDiameterMode.setter
    def InDiameterMode(self) -> MutableSequence[bool]: ...
    @SecondRadius.setter
    def SecondRadius(self) -> MutableSequence[float]: ...
    def ToString(self) -> str: ...


class MeshHitFlag(Enum):
    Vertex = 0
    Edge = 1
    Face = 2
    Invalid = -1


class MeshPickStyle(Enum):
    WireframePicking = 0
    ShadedModePicking = 1
    VertexOnlyPicking = 2


class MeshSphereStyle(Enum):
    UV = 0
    Triangle = 1
    Quad = 2


class OptionColor:
    def __init__(self, initialValue: Color): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CurrentValue(self) -> Color: ...
    @property
    def InitialValue(self) -> Color: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @CurrentValue.setter
    def CurrentValue(self) -> MutableSequence[Color]: ...
    def ToString(self) -> str: ...


class OptionDouble:
    @overload
    def __init__(self, initialValue: float): ...
    @overload
    def __init__(self, initialValue: float, lowerLimit: float, upperLimit: float): ...
    @overload
    def __init__(self, initialValue: float, setLowerLimit: bool, limit: float): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CurrentValue(self) -> float: ...
    @property
    def InitialValue(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @CurrentValue.setter
    def CurrentValue(self) -> MutableSequence[float]: ...
    def ToString(self) -> str: ...


class OptionInteger:
    @overload
    def __init__(self, initialValue: int): ...
    @overload
    def __init__(self, initialValue: int, lowerLimit: int, upperLimit: int): ...
    @overload
    def __init__(self, initialValue: int, setLowerLimit: bool, limit: int): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CurrentValue(self) -> int: ...
    @property
    def InitialValue(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @CurrentValue.setter
    def CurrentValue(self) -> MutableSequence[int]: ...
    def ToString(self) -> str: ...


from ...UI import LocalizeStringPair
class OptionToggle:
    @overload
    def __init__(self, initialValue: bool, offValue: str, onValue: str): ...
    @overload
    def __init__(self, initialValue: bool, offValue: LocalizeStringPair, onValue: LocalizeStringPair): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CurrentValue(self) -> bool: ...
    @property
    def InitialValue(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @CurrentValue.setter
    def CurrentValue(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...


from ...Display import RhinoView
from ...Geometry import Line
from ...Geometry import Transform
from ...Geometry import BoundingBox
from ...Geometry import Point3d
from ...Geometry import PointCloud
from ...Geometry import BezierCurve
from ...Geometry import NurbsCurve
from ...Geometry import Mesh
from ...Geometry import Point2d
class PickContext:
    def __init__(self): ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def GetObjectUsed(self) -> GetObject: ...
    @property
    def PickGroupsEnabled(self) -> bool: ...
    @property
    def PickLine(self) -> Line: ...
    @property
    def PickMode(self) -> PickMode: ...
    @property
    def PickStyle(self) -> PickStyle: ...
    @property
    def SubObjectSelectionEnabled(self) -> bool: ...
    @property
    def View(self) -> RhinoView: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def PickFrustumTest(self, box: BoundingBox) -> Tuple[bool, bool]: ...
    @overload
    def PickFrustumTest(self, point: Point3d) -> Tuple[bool, float, float]: ...
    @overload
    def PickFrustumTest(self, points: Iterable[Point3d]) -> Tuple[bool, int, float, float]: ...
    @overload
    def PickFrustumTest(self, cloud: PointCloud) -> Tuple[bool, int, float, float]: ...
    @overload
    def PickFrustumTest(self, line: Line) -> Tuple[bool, float, float, float]: ...
    @overload
    def PickFrustumTest(self, bezier: BezierCurve) -> Tuple[bool, float, float, float]: ...
    @overload
    def PickFrustumTest(self, curve: NurbsCurve) -> Tuple[bool, float, float, float]: ...
    @overload
    def PickFrustumTest(self, mesh: Mesh, pickStyle: MeshPickStyle) -> Tuple[bool, Point3d, float, float, MeshHitFlag, int]: ...
    @overload
    def PickFrustumTest(self, mesh: Mesh, pickStyle: MeshPickStyle) -> Tuple[bool, Point3d, Point2d, Point2d, float, float, MeshHitFlag, int]: ...
    def PickMeshTopologyVertices(self, mesh: Mesh) -> Iterable[int]: ...
    @PickGroupsEnabled.setter
    def PickGroupsEnabled(self) -> MutableSequence[bool]: ...
    @PickLine.setter
    def PickLine(self) -> MutableSequence[Line]: ...
    @PickMode.setter
    def PickMode(self) -> MutableSequence[PickMode]: ...
    @PickStyle.setter
    def PickStyle(self) -> MutableSequence[PickStyle]: ...
    @SubObjectSelectionEnabled.setter
    def SubObjectSelectionEnabled(self) -> MutableSequence[bool]: ...
    @View.setter
    def View(self) -> MutableSequence[RhinoView]: ...
    def SetPickTransform(self, transform: Transform) -> None: ...
    def ToString(self) -> str: ...
    def UpdateClippingPlanes(self) -> None: ...


class PickMode(Enum):
    Wireframe = 1
    Shaded = 2


class PickStyle(Enum):
    # None = 0
    PointPick = 1
    WindowPick = 2
    CrossingPick = 3


from .. import RhinoDoc
class TaskCompleteEventArgs:
    def __init__(self, task: Task, doc: RhinoDoc): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Doc(self) -> RhinoDoc: ...
    @property
    def Redraw(self) -> bool: ...
    @property
    def Task(self) -> Task: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Doc.setter
    def Doc(self) -> MutableSequence[RhinoDoc]: ...
    @Redraw.setter
    def Redraw(self) -> MutableSequence[bool]: ...
    @Task.setter
    def Task(self) -> MutableSequence[Task]: ...
    def ToString(self) -> str: ...
