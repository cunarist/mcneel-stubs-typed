from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from ...DocObjects import TextureType
class PhysicallyBased:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromTextureType(textureType: TextureType) -> str: ...
    @property
    def Alpha() -> str: ...
    @property
    def AmbientOcclusion() -> str: ...
    @property
    def Anisotropic() -> str: ...
    @property
    def AnisotropicRotation() -> str: ...
    @property
    def BaseColor() -> str: ...
    @property
    def Bump() -> str: ...
    @property
    def Clearcoat() -> str: ...
    @property
    def ClearcoatBump() -> str: ...
    @property
    def ClearcoatRoughness() -> str: ...
    @property
    def Displacement() -> str: ...
    @property
    def Emission() -> str: ...
    @property
    def Metallic() -> str: ...
    @property
    def Opacity() -> str: ...
    @property
    def OpacityIor() -> str: ...
    @property
    def OpacityRoughness() -> str: ...
    @property
    def Roughness() -> str: ...
    @property
    def Sheen() -> str: ...
    @property
    def SheenTint() -> str: ...
    @property
    def Specular() -> str: ...
    @property
    def SpecularTint() -> str: ...
    @property
    def Subsurface() -> str: ...
    @property
    def SubsurfaceScatteringColor() -> str: ...
    @property
    def SubsurfaceScatteringRadius() -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
