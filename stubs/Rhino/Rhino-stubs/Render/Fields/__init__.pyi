from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class BoolField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


class ByteArrayField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Iterable[Byte]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Iterable[Byte]]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


from ...Display import Color4f
class Color4fField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def SystemColorValue(self) -> Color: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Color4f: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @SystemColorValue.setter
    def SystemColorValue(self) -> MutableSequence[Color]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Color4f]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


class DateTimeField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> DateTime: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[DateTime]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


class DoubleField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[float]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


class Field:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


from ...Geometry import Transform
from ...Display import Color4f
from ...Geometry import Vector2d
from ...Geometry import Vector3d
from ...Geometry import Point2d
from ...Geometry import Point3d
from ...Geometry import Point4d
class FieldDictionary:
    def __iter__(self) -> Iterator[Any]: ...
    @overload
    def Add(self, key: str, value: Vector3d) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: bool) -> BoolField: ...
    @overload
    def Add(self, key: str, value: int) -> IntField: ...
    @overload
    def Add(self, key: str, value: Single) -> FloatField: ...
    @overload
    def Add(self, key: str, value: float) -> DoubleField: ...
    @overload
    def Add(self, key: str, value: DateTime) -> DateTimeField: ...
    @overload
    def Add(self, key: str, value: Color4f) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: Iterable[Byte]) -> ByteArrayField: ...
    @overload
    def Add(self, key: str, value: Color) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: Vector2d) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: str) -> StringField: ...
    @overload
    def Add(self, key: str, value: Transform) -> TransformField: ...
    @overload
    def Add(self, key: str, value: Point3d) -> Point3dField: ...
    @overload
    def Add(self, key: str, value: Point4d) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: Point2d) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: Guid) -> GuidField: ...
    @overload
    def Add(self, key: str, value: Vector3d, prompt: str) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: Transform, prompt: str) -> TransformField: ...
    @overload
    def Add(self, key: str, value: bool, prompt: str) -> BoolField: ...
    @overload
    def Add(self, key: str, value: int, prompt: str) -> IntField: ...
    @overload
    def Add(self, key: str, value: Guid, prompt: str) -> GuidField: ...
    @overload
    def Add(self, key: str, value: Single, prompt: str) -> FloatField: ...
    @overload
    def Add(self, key: str, value: float, prompt: str) -> DoubleField: ...
    @overload
    def Add(self, key: str, value: Color4f, prompt: str) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: Point3d, prompt: str) -> Point3dField: ...
    @overload
    def Add(self, key: str, value: str, prompt: str) -> StringField: ...
    @overload
    def Add(self, key: str, value: Point2d, prompt: str) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: Vector2d, prompt: str) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: Point4d, prompt: str) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: Color, prompt: str) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: DateTime, prompt: str) -> DateTimeField: ...
    @overload
    def Add(self, key: str, prompt: str, sectionId: int) -> NullField: ...
    @overload
    def Add(self, key: str, value: str, prompt: str, sectionId: int) -> StringField: ...
    @overload
    def Add(self, key: str, value: Transform, prompt: str, sectionId: int) -> TransformField: ...
    @overload
    def Add(self, key: str, value: Guid, prompt: str, sectionId: int) -> GuidField: ...
    @overload
    def Add(self, key: str, value: Point4d, prompt: str, sectionId: int) -> Point4dField: ...
    @overload
    def Add(self, key: str, value: Point3d, prompt: str, sectionId: int) -> Point3dField: ...
    @overload
    def Add(self, key: str, value: Point2d, prompt: str, sectionId: int) -> Point2dField: ...
    @overload
    def Add(self, key: str, value: Vector3d, prompt: str, sectionId: int) -> Vector3dField: ...
    @overload
    def Add(self, key: str, value: Color4f, prompt: str, sectionId: int) -> Color4fField: ...
    @overload
    def Add(self, key: str, value: Single, prompt: str, sectionId: int) -> FloatField: ...
    @overload
    def Add(self, key: str, value: int, prompt: str, sectionId: int) -> IntField: ...
    @overload
    def Add(self, key: str, value: DateTime, prompt: str, sectionId: int) -> DateTimeField: ...
    @overload
    def Add(self, key: str, value: Vector2d, prompt: str, sectionId: int) -> Vector2dField: ...
    @overload
    def Add(self, key: str, value: float, prompt: str, sectionId: int) -> DoubleField: ...
    @overload
    def Add(self, key: str, value: bool, prompt: str, sectionId: int) -> BoolField: ...
    def AddFilename(self, key: str, value: str, prompt: str, sectionId: int) -> StringField: ...
    @overload
    def AddTextured(self, key: str, prompt: str) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: Transform, prompt: str) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: Guid, prompt: str) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: Point4d, prompt: str) -> Point4dField: ...
    @overload
    def AddTextured(self, key: str, value: Point3d, prompt: str) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: Point2d, prompt: str) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, value: Vector3d, prompt: str) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: Vector2d, prompt: str) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: Color, prompt: str) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, prompt: str, treatAsLinear: bool) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str) -> BoolField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str) -> IntField: ...
    @overload
    def AddTextured(self, key: str, value: DateTime, prompt: str) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: Single, prompt: str) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: Transform, prompt: str, treatAsLinear: bool) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str, treatAsLinear: bool) -> IntField: ...
    @overload
    def AddTextured(self, key: str, value: Guid, prompt: str, treatAsLinear: bool) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: Point4d, prompt: str, treatAsLinear: bool) -> Point4dField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str, treatAsLinear: bool) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: DateTime, prompt: str, treatAsLinear: bool) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, value: Point3d, prompt: str, treatAsLinear: bool) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str, treatAsLinear: bool) -> BoolField: ...
    @overload
    def AddTextured(self, key: str, value: Single, prompt: str, treatAsLinear: bool) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: Vector3d, prompt: str, treatAsLinear: bool) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: Point2d, prompt: str, treatAsLinear: bool) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, value: Vector2d, prompt: str, treatAsLinear: bool) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: Color, prompt: str, treatAsLinear: bool) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, prompt: str, treatAsLinear: bool, sectionId: int) -> NullField: ...
    @overload
    def AddTextured(self, key: str, value: Color4f, prompt: str, treatAsLinear: bool) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: Single, prompt: str, treatAsLinear: bool, sectionId: int) -> FloatField: ...
    @overload
    def AddTextured(self, key: str, value: DateTime, prompt: str, treatAsLinear: bool, sectionId: int) -> DateTimeField: ...
    @overload
    def AddTextured(self, key: str, value: str, prompt: str, treatAsLinear: bool, sectionId: int) -> StringField: ...
    @overload
    def AddTextured(self, key: str, value: Guid, prompt: str, treatAsLinear: bool, sectionId: int) -> GuidField: ...
    @overload
    def AddTextured(self, key: str, value: Point3d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point3dField: ...
    @overload
    def AddTextured(self, key: str, value: Color4f, prompt: str, treatAsLinear: bool, sectionId: int) -> Color4fField: ...
    @overload
    def AddTextured(self, key: str, value: Point4d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point4dField: ...
    @overload
    def AddTextured(self, key: str, value: bool, prompt: str, treatAsLinear: bool, sectionId: int) -> BoolField: ...
    @overload
    def AddTextured(self, key: str, value: Point2d, prompt: str, treatAsLinear: bool, sectionId: int) -> Point2dField: ...
    @overload
    def AddTextured(self, key: str, value: Transform, prompt: str, treatAsLinear: bool, sectionId: int) -> TransformField: ...
    @overload
    def AddTextured(self, key: str, value: float, prompt: str, treatAsLinear: bool, sectionId: int) -> DoubleField: ...
    @overload
    def AddTextured(self, key: str, value: Vector2d, prompt: str, treatAsLinear: bool, sectionId: int) -> Vector2dField: ...
    @overload
    def AddTextured(self, key: str, value: Vector3d, prompt: str, treatAsLinear: bool, sectionId: int) -> Vector3dField: ...
    @overload
    def AddTextured(self, key: str, value: int, prompt: str, treatAsLinear: bool, sectionId: int) -> IntField: ...
    def ContainsField(self, fieldName: str) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetField(self, fieldName: str) -> Field: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def RemoveField(self, fieldName: str) -> None: ...
    @overload
    def Set(self, key: str, value: Point4d) -> None: ...
    @overload
    def Set(self, key: str, value: Guid) -> None: ...
    @overload
    def Set(self, key: str, value: Point3d) -> None: ...
    @overload
    def Set(self, key: str, value: bool) -> None: ...
    @overload
    def Set(self, key: str, value: int) -> None: ...
    @overload
    def Set(self, key: str, value: Vector3d) -> None: ...
    @overload
    def Set(self, key: str, value: Vector2d) -> None: ...
    @overload
    def Set(self, key: str, value: Single) -> None: ...
    @overload
    def Set(self, key: str, value: Color) -> None: ...
    @overload
    def Set(self, key: str, value: Color4f) -> None: ...
    @overload
    def Set(self, key: str, value: float) -> None: ...
    @overload
    def Set(self, key: str, value: str) -> None: ...
    @overload
    def Set(self, key: str, value: Point2d) -> None: ...
    @overload
    def Set(self, key: str, value: Transform) -> None: ...
    @overload
    def Set(self, key: str, value: DateTime) -> None: ...
    @overload
    def Set(self, key: str, value: Iterable[Byte]) -> None: ...
    def ToString(self) -> str: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, T]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, bool]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Iterable[Byte]]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, int]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, float]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Single]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Color4f]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Color]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Vector2d]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Vector3d]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Point2d]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Point3d]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Point4d]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Guid]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, Transform]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, str]: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, DateTime]: ...


class FloatField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Single]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


class GuidField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Guid: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Guid]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


class IntField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[int]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


class NullField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


from ...Geometry import Point2d
class Point2dField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Point2d: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Point2d]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


from ...Geometry import Point3d
class Point3dField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Point3d: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Point3d]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


from ...Geometry import Point4d
class Point4dField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Point4d: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Point4d]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


class StringField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[str]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


from ...Geometry import Transform
class TransformField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Transform: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Transform]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


from ...Geometry import Vector2d
class Vector2dField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Vector2d: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Vector2d]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...


from ...Geometry import Vector3d
class Vector3dField(Field):
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsHiddenInAutoUI(self) -> bool: ...
    @property
    def Key(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def TextureAmountMax(self) -> float: ...
    @property
    def TextureAmountMin(self) -> float: ...
    @property
    def UseTextureAmount(self) -> bool: ...
    @property
    def UseTextureOn(self) -> bool: ...
    @property
    def Value(self) -> Vector3d: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def GetValue(self) -> T: ...
    @IsHiddenInAutoUI.setter
    def IsHiddenInAutoUI(self) -> MutableSequence[bool]: ...
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @TextureAmountMax.setter
    def TextureAmountMax(self) -> MutableSequence[float]: ...
    @TextureAmountMin.setter
    def TextureAmountMin(self) -> MutableSequence[float]: ...
    @UseTextureAmount.setter
    def UseTextureAmount(self) -> MutableSequence[bool]: ...
    @UseTextureOn.setter
    def UseTextureOn(self) -> MutableSequence[bool]: ...
    @Value.setter
    def Value(self) -> MutableSequence[Vector3d]: ...
    def ToString(self) -> str: ...
    def ValueAsObject(self) -> Object: ...
