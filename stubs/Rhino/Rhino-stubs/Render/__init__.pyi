from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import ChangeQueue
import ChildSlotNames
import CustomRenderMeshes
import DataSources
import Fields
import ParameterNames
import PostEffects
import UI

__all__ = ['ChangeQueue', 'ChildSlotNames', 'CustomRenderMeshes', 'DataSources', 'Fields', 'ParameterNames', 'PostEffects', 'UI']


class Accuracies(Enum):
    Minimum = 0
    Maximum = 1


from System import EventHandler
class AddCustomUISections:
    @overload
    @staticmethod
    def add_OnAddCustomUISections(value: EventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_OnAddCustomUISections(value: EventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..UI.Controls import ExpandableContentUI
from System import Guid
class AddCustomUISectionsEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def EventType(self) -> Guid: ...
    @property
    def ExpandableContentUI(self) -> ExpandableContentUI: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class AssignToBlockChoices(Enum):
    Always = 0
    Never = 1
    Ask = 2


class AssignToSubFaceChoices(Enum):
    Keep = 0
    Remove = 1
    Ask = 2


from System.Threading import Thread
from System.Threading import ThreadStart
class AsyncRenderContext:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def RenderThread(self) -> Thread: ...
    @property
    def RenderWindow(self) -> RenderWindow: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def JoinRenderThread(self) -> None: ...
    @RenderWindow.setter
    def RenderWindow(self, value: RenderWindow) -> None: ...
    @overload
    def StartRenderThread(self, threadStart: ThreadStart, threadName: str) -> bool: ...
    @overload
    def StopRendering(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Axis(Enum):
    kU = 0
    kV = 1
    kW = 2


class BackgroundProjections(Enum):
    Planar = 0
    Spherical = 1
    Emap = 2
    Box = 3
    Automatic = 4
    Lightprobe = 5
    Cubemap = 6
    VerticalCrossCubemap = 7
    HorizontalCrossCubemap = 8


class BasicMaterialParameterNames:
    @overload
    def __init__(self): ...
    Ambient: str
    Emission: str
    FlamingoLibrary: str
    DisableLighting: str
    Diffuse: str
    Specular: str
    TransparencyColor: str
    ReflectivityColor: str
    Shine: str
    Transparency: str
    Reflectivity: str
    Ior: str
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from ..Geometry import Point3d
from System.Collections.Generic import IEnumerator
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from ..FileIO import SerializationOptions
from ..Runtime import CommonObject
class CachedTextureCoordinates(CommonObject):
    def __iter__(self) -> Iterator[Point3d]: ...
    def __getitem__(self, index: int) -> Point3d: ...
    def __setitem__(self, index: int, value: Point3d): ...
    @overload
    def Contains(self, item: Point3d) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[Point3d], arrayIndex: int) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Dim(self) -> int: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Item(self) -> Sequence[Point3d]: ...
    @property
    def MappingId(self) -> Guid: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @overload
    def GetEnumerator(self) -> Iterator[Point3d]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: Point3d) -> int: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetAt(self, index: int) -> Tuple[bool, float, float, float]: ...


class ChangeContexts(Enum):
    UI = 0
    Drop = 1
    Program = 2
    Ignore = 3
    Tree = 4
    Undo = 5
    FieldInit = 6
    Serialize = 7
    RealTimeUI = 8
    Script = 9


from System.Drawing import Rectangle
from System.Drawing import Size
from ..Display import Color4f
from System import Guid
class Channel:
    @overload
    def AddValue(self, x: int, y: int, value: Color4f) -> None: ...
    @overload
    def Clone(self) -> Channel: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMinMaxValues(self) -> Tuple[float, float]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self, x: int, y: int, componentOrder: ComponentOrders, values: Iterable[float]) -> Tuple[Iterable[float]]: ...
    @overload
    def GetValues(self, rectangle: Rectangle, stride: int, componentOrder: ComponentOrders, values: Iterable[float]) -> Tuple[Iterable[float]]: ...
    @overload
    def PixelSize(self) -> int: ...
    @overload
    def SetValue(self, x: int, y: int, value: float) -> None: ...
    @overload
    def SetValue(self, x: int, y: int, value: Color4f) -> None: ...
    @overload
    def SetValues(self, rectangle: Rectangle, bufferResolution: Size, colorBuffer: PixelBuffer) -> None: ...
    @overload
    def SetValuesFlipped(self, rectangle: Rectangle, bufferResolution: Size, colorBuffer: PixelBuffer) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Channel(Enum):
    kRed = 0
    kGrn = 1
    kBlu = 2
    kAlp = 3
    kLum = 4


from ..Display import DisplayTechnology
from System import Guid
from System import IntPtr
class ChannelGPU:
    @overload
    def Clone(self) -> ChannelGPU: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def CopyTo(self, channel: Channel) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DisplayTechnology(self) -> DisplayTechnology: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Height(self) -> int: ...
    @overload
    def Id(self) -> Guid: ...
    @overload
    def PixelSize(self) -> int: ...
    @overload
    def TextureHandleMetal(self) -> IntPtr: ...
    @overload
    def TextureHandleOpenGL(self) -> int: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Width(self) -> int: ...


class City:
    @overload
    @staticmethod
    def Cities() -> int: ...
    @overload
    @staticmethod
    def CityAt(index: int) -> City: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FindNearest(latitude: float, longitude: float) -> City: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @property
    def TimeZone(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ComponentOrders(Enum):
    Irrelevant = 0
    RGBA = 1
    ARGB = 2
    RGB = 3
    XYZ = 3
    BGR = 4
    ZYX = 4
    ABGR = 5
    BGRA = 6


class ContentChooserFlags(Enum):
    # None = 0
    HideNewTab = 1
    HideExistingTab = 2
    MultipleSelection = 4
    DisableImportButton = 16


from System import IntPtr
class ContentCollectionIterator:
    @overload
    def __init__(self, pCollection: IntPtr): ...
    @overload
    def DeleteThis(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def First(self) -> RenderContent: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Next(self) -> RenderContent: ...
    @overload
    def ToString(self) -> str: ...


class ContentInstanceBrowserButtons(Enum):
    # None = 0
    NewButton = 1
    EditButton = 2


class ContentUndoBlocker:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ContentUndoHelper:
    @overload
    def __init__(self, doc: RhinoDoc): ...
    @overload
    def __init__(self, doc: RhinoDoc, description: str): ...
    @overload
    def AddContent(self, content: RenderContent, parent: RenderContent) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ModifyContent(self, content: RenderContent) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TweakContent(self, content: RenderContent, parameterName: str) -> bool: ...


from System import Guid
class ContentUuids:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AddTextureType() -> Guid: ...
    @property
    def AdvancedDotTextureType() -> Guid: ...
    @property
    def BasicEnvironmentCCI() -> Guid: ...
    @property
    def BasicEnvironmentType() -> Guid: ...
    @property
    def BasicMaterialCCI() -> Guid: ...
    @property
    def BasicMaterialType() -> Guid: ...
    @property
    def BitmapTextureType() -> Guid: ...
    @property
    def BlendMaterialCCI() -> Guid: ...
    @property
    def BlendMaterialType() -> Guid: ...
    @property
    def BlendTextureType() -> Guid: ...
    @property
    def CompositeMaterialCCI() -> Guid: ...
    @property
    def CompositeMaterialType() -> Guid: ...
    @property
    def CrossHatchBumpTexture() -> Guid: ...
    @property
    def CubeMapTextureType() -> Guid: ...
    @property
    def DefaultEnvironmentInstance() -> Guid: ...
    @property
    def DefaultMaterialInstance() -> Guid: ...
    @property
    def DisplayAttributeMaterialType() -> Guid: ...
    @property
    def DotBumpTexture() -> Guid: ...
    @property
    def DoubleSidedMaterialType() -> Guid: ...
    @property
    def EmissionMaterialType() -> Guid: ...
    @property
    def ExposureTextureType() -> Guid: ...
    @property
    def EXRTextureType() -> Guid: ...
    @property
    def FBmTextureType() -> Guid: ...
    @property
    def GemMaterialType() -> Guid: ...
    @property
    def GlassMaterialType() -> Guid: ...
    @property
    def GradientTextureType() -> Guid: ...
    @property
    def GraniteTextureType() -> Guid: ...
    @property
    def GridTextureType() -> Guid: ...
    @property
    def GritBumpTexture() -> Guid: ...
    @property
    def HatchBumpTexture() -> Guid: ...
    @property
    def HDRTextureType() -> Guid: ...
    @property
    def LeatherBumpTexture() -> Guid: ...
    @property
    def MarbleTextureType() -> Guid: ...
    @property
    def MaskTextureType() -> Guid: ...
    @property
    def MetalMaterialType() -> Guid: ...
    @property
    def MultiplyTextureType() -> Guid: ...
    @property
    def NoiseTextureType() -> Guid: ...
    @property
    def PaintMaterialType() -> Guid: ...
    @property
    def PerlinMarbleTextureType() -> Guid: ...
    @property
    def PerturbingTextureType() -> Guid: ...
    @property
    def PhysicallyBasedMaterialType() -> Guid: ...
    @property
    def PhysicalSkyTextureType() -> Guid: ...
    @property
    def PictureMaterialType() -> Guid: ...
    @property
    def PlasterMaterialType() -> Guid: ...
    @property
    def PlasticMaterialType() -> Guid: ...
    @property
    def ProjectionChangerTextureType() -> Guid: ...
    @property
    def RealtimeDisplayMaterialType() -> Guid: ...
    @property
    def ResampleTextureType() -> Guid: ...
    @property
    def SimpleBitmapTextureType() -> Guid: ...
    @property
    def SingleColorTextureType() -> Guid: ...
    @property
    def SpeckleBumpTexture() -> Guid: ...
    @property
    def StuccoTextureType() -> Guid: ...
    @property
    def Texture2DCheckerTextureType() -> Guid: ...
    @property
    def Texture3DCheckerTextureType() -> Guid: ...
    @property
    def TextureAdjustmentTextureType() -> Guid: ...
    @property
    def TileTextureType() -> Guid: ...
    @property
    def TurbulenceTextureType() -> Guid: ...
    @property
    def V8BlendMaterialType() -> Guid: ...
    @property
    def WavesTextureType() -> Guid: ...
    @property
    def WoodBumpTexture() -> Guid: ...
    @property
    def WoodTextureType() -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import IConvertible
from ..Display import Color4f
from ..Geometry import Vector2d
from ..Geometry import Vector3d
class ConvertibleExtensions:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def ToColor4f(variant: IConvertible) -> Color4f: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def ToVector2d(variant: IConvertible) -> Vector2d: ...
    @overload
    @staticmethod
    def ToVector3d(variant: IConvertible) -> Vector3d: ...


class CrcRenderHashFlags(Enum):
    Normal = 0
    ExcludeLinearWorkflow = 1
    ForSimulation = 1
    ExcludeLocalMapping = 2
    ExcludeUnits = 4
    Reserved2 = 8
    ExcludeDocumentEffects = 13


from ..PlugIns import PreviewNotification
from System.Drawing import Size
from System.Drawing import Bitmap
from System import Guid
from System.Collections.Generic import List
from ..DocObjects import ViewportInfo
class CreatePreviewEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Cancel(self) -> bool: ...
    @property
    def ContentKind(self) -> RenderContentKind: ...
    @property
    def ContentTypeId(self) -> Guid: ...
    @property
    def Environment(self) -> RenderEnvironment: ...
    @property
    def Id(self) -> int: ...
    @property
    def Lights(self) -> List: ...
    @property
    def Objects(self) -> List: ...
    @property
    def PreviewContent(self) -> RenderContent: ...
    @property
    def PreviewImage(self) -> Bitmap: ...
    @property
    def PreviewImageSize(self) -> Size: ...
    @property
    def PreviewNotifier(self) -> PreviewNotification: ...
    @property
    def Quality(self) -> PreviewSceneQuality: ...
    @property
    def Reason(self) -> CreatePreviewReason: ...
    @property
    def Viewport(self) -> ViewportInfo: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @PreviewImage.setter
    def PreviewImage(self, value: Bitmap) -> None: ...
    @overload
    def SkipInitialisation(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CreatePreviewReason(Enum):
    ContentChanged = 0
    ViewChanged = 1
    RefreshDisplay = 2
    UpdateBitmap = 3
    Other = 99


from System.Drawing import Size
from System.Drawing import Bitmap
class CreateTexture2dPreviewEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def PreviewImage(self) -> Bitmap: ...
    @property
    def PreviewImageSize(self) -> Size: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @PreviewImage.setter
    def PreviewImage(self, value: Bitmap) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class CustomRenderContentAttribute:
    @overload
    def __init__(self, renderEngineGuid: str, imageBased: bool, category: str, is_elevated: bool, is_built_in: bool, is_private: bool): ...
    @overload
    def __init__(self, renderEngineGuid: str, imageBased: bool, category: str, is_elevated: bool, is_built_in: bool, is_private: bool, is_linear: bool, is_hdrcapable: bool, is_normalmap: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def ImageBased(self) -> bool: ...
    @property
    def IsBuiltIn(self) -> bool: ...
    @property
    def IsElevated(self) -> bool: ...
    @property
    def IsHdrCapable(self) -> bool: ...
    @property
    def IsLinear(self) -> bool: ...
    @property
    def IsNormalMap(self) -> bool: ...
    @property
    def IsPrivate(self) -> bool: ...
    @property
    def RenderEngineId(self) -> Guid: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @Category.setter
    def Category(self, value: str) -> None: ...
    @ImageBased.setter
    def ImageBased(self, value: bool) -> None: ...
    @IsBuiltIn.setter
    def IsBuiltIn(self, value: bool) -> None: ...
    @IsElevated.setter
    def IsElevated(self, value: bool) -> None: ...
    @IsHdrCapable.setter
    def IsHdrCapable(self, value: bool) -> None: ...
    @IsLinear.setter
    def IsLinear(self, value: bool) -> None: ...
    @IsNormalMap.setter
    def IsNormalMap(self, value: bool) -> None: ...
    @IsPrivate.setter
    def IsPrivate(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from ..Geometry import Point3d
from ..Geometry import Vector3d
from System.Collections.Generic import List
from ..Display import Color4f
from ..Geometry import Point2d
from System import IntPtr
class Decal:
    @overload
    def ConstPointer(self) -> IntPtr: ...
    @overload
    @staticmethod
    def Create(createParams: DecalCreateParams) -> Decal: ...
    @overload
    def CustomData(self) -> List: ...
    @overload
    def CustomData(self, renderer: Guid) -> List: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, isDisposing: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CRC(self) -> int: ...
    @property
    def DecalMapping(self) -> DecalMapping: ...
    @property
    def DecalProjection(self) -> DecalProjection: ...
    @property
    def EndLatitude(self) -> float: ...
    @property
    def EndLongitude(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Mapping(self) -> DecalMapping: ...
    @property
    def MapToInside(self) -> bool: ...
    @property
    def Origin(self) -> Point3d: ...
    @property
    def Projection(self) -> DecalProjection: ...
    @property
    def Radius(self) -> float: ...
    @property
    def StartLatitude(self) -> float: ...
    @property
    def StartLongitude(self) -> float: ...
    @property
    def TextureInstanceId(self) -> Guid: ...
    @property
    def Transparency(self) -> float: ...
    @property
    def VectorAcross(self) -> Vector3d: ...
    @property
    def VectorUp(self) -> Vector3d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetTextureMapping(self) -> TextureMapping: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUVBounds(self) -> Tuple[float, float, float, float]: ...
    @overload
    def HorzSweep(self) -> Tuple[float, float]: ...
    @overload
    def NonConstPointer(self) -> IntPtr: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetColor(self, point: Point3d, normal: Vector3d, colInOut: Color4f, uvOut: Point2d) -> Tuple[bool, Color4f, Point2d]: ...
    @overload
    def UVBounds(self, minUOut: float, minVOut: float, maxUOut: float, maxVOut: float) -> Tuple[float, float, float, float]: ...
    @overload
    def VertSweep(self) -> Tuple[float, float]: ...


from System import Guid
from ..Geometry import Point3d
from ..Geometry import Vector3d
class DecalCreateParams:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DecalMapping(self) -> DecalMapping: ...
    @property
    def DecalProjection(self) -> DecalProjection: ...
    @property
    def EndLatitude(self) -> float: ...
    @property
    def EndLongitude(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @property
    def MapToInside(self) -> bool: ...
    @property
    def MaxU(self) -> float: ...
    @property
    def MaxV(self) -> float: ...
    @property
    def MinU(self) -> float: ...
    @property
    def MinV(self) -> float: ...
    @property
    def Origin(self) -> Point3d: ...
    @property
    def Radius(self) -> float: ...
    @property
    def StartLatitude(self) -> float: ...
    @property
    def StartLongitude(self) -> float: ...
    @property
    def TextureInstanceId(self) -> Guid: ...
    @property
    def Transparency(self) -> float: ...
    @property
    def VectorAcross(self) -> Vector3d: ...
    @property
    def VectorUp(self) -> Vector3d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @DecalMapping.setter
    def DecalMapping(self, value: DecalMapping) -> None: ...
    @DecalProjection.setter
    def DecalProjection(self, value: DecalProjection) -> None: ...
    @EndLatitude.setter
    def EndLatitude(self, value: float) -> None: ...
    @EndLongitude.setter
    def EndLongitude(self, value: float) -> None: ...
    @Height.setter
    def Height(self, value: float) -> None: ...
    @MapToInside.setter
    def MapToInside(self, value: bool) -> None: ...
    @MaxU.setter
    def MaxU(self, value: float) -> None: ...
    @MaxV.setter
    def MaxV(self, value: float) -> None: ...
    @MinU.setter
    def MinU(self, value: float) -> None: ...
    @MinV.setter
    def MinV(self, value: float) -> None: ...
    @Origin.setter
    def Origin(self, value: Point3d) -> None: ...
    @Radius.setter
    def Radius(self, value: float) -> None: ...
    @StartLatitude.setter
    def StartLatitude(self, value: float) -> None: ...
    @StartLongitude.setter
    def StartLongitude(self, value: float) -> None: ...
    @TextureInstanceId.setter
    def TextureInstanceId(self, value: Guid) -> None: ...
    @Transparency.setter
    def Transparency(self, value: float) -> None: ...
    @VectorAcross.setter
    def VectorAcross(self, value: Vector3d) -> None: ...
    @VectorUp.setter
    def VectorUp(self, value: Vector3d) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DecalMapping(Enum):
    Planar = 0
    Cylindrical = 1
    Spherical = 2
    UV = 3


class DecalProjection(Enum):
    Forward = 0
    Backward = 1
    Both = 2
    # None = -1


from System.Collections.Generic import IEnumerator
class Decals:
    def __iter__(self) -> Iterator[Decal]: ...
    @overload
    def Add(self, decal: Decal) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetEnumerator(self) -> Iterator[Decal]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Remove(self, decal: Decal) -> bool: ...
    @overload
    def RemoveAllDecals(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Display import DisplayPipelineAttributes
class DisplayPipelineSettingsChangedEventArgs:
    @overload
    def __init__(self, dpa: DisplayPipelineAttributes): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> DisplayPipelineAttributes: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class Dithering(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, d: Dithering): ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Method(self) -> Methods: ...
    @property
    def On(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Method.setter
    def Method(self, value: Methods) -> None: ...
    @On.setter
    def On(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DocumentOrFreeFloatingBase(FreeFloatingBase):
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from ..Display import DisplayPipeline
class DrawMiddlegroundEventArgs:
    @overload
    def __init__(self, dp: DisplayPipeline): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Pipeline(self) -> DisplayPipeline: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class DynamicIconUsage(Enum):
    TreeControl = 0
    SubnodeControl = 1
    ContentControl = 2
    General = 3


class eLocalMappingType(Enum):
    lmt_none = 0
    lmt_2D = 1
    lmt_3D = 2
    lmt_force32bit = 4294967295


class EmbedFilesChoice(Enum):
    NeverEmbed = 0
    AlwaysEmbed = 1
    AskUser = 2


class EnvironmentMappingModes(Enum):
    Automatic = 0
    Spherical = 1
    Emap = 2
    Box = 3
    Lightprobe = 5
    Cubemap = 6
    VerticalCrossCubemap = 7
    HorizontalCrossCubemap = 8
    Hemispherical = 9


class EnvironmentPurpose(Enum):
    Standard = 0
    ForRendering = 1


class EnvironmentUsage(Enum):
    Background = 0
    Reflection = 1
    Skylighting = 2


class ExtensionMethods:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def ToEnvironmentMappingMode(e: EnvironmentMappingModes) -> TextureEnvironmentMappingMode: ...
    @overload
    @staticmethod
    def ToSimulatedEnvironmentMappingMode(e: TextureEnvironmentMappingMode) -> EnvironmentMappingModes: ...
    @overload
    @staticmethod
    def ToSimulatedTextureProjectionMode(e: TextureProjectionMode) -> ProjectionModes: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def ToTextureProjectionMode(e: ProjectionModes) -> TextureProjectionMode: ...


class ExtraRequirementsSetContexts(Enum):
    UI = 0
    Drop = 1
    Program = 2


class ExtraSidePanePosition(Enum):
    Left = 0
    Top = 1
    Right = 2
    Bottom = 3


class FilterContentByUsage(Enum):
    # None = 0
    Used = 1
    Unused = 2
    UsedSelected = 3


class FreeFloatingBase:
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import EventHandler
from System import Guid
from ..Geometry import Vector2d
class GroundPlane(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, g: GroundPlane): ...
    @overload
    @staticmethod
    def add_Changed(value: EventHandler) -> None: ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Altitude(self) -> float: ...
    @property
    def AutoAltitude(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def MaterialInstanceId(self) -> Guid: ...
    @property
    def ShadowOnly(self) -> bool: ...
    @property
    def ShowUnderside(self) -> bool: ...
    @property
    def TextureOffset(self) -> Vector2d: ...
    @property
    def TextureOffsetLocked(self) -> bool: ...
    @property
    def TextureRotation(self) -> float: ...
    @property
    def TextureSize(self) -> Vector2d: ...
    @property
    def TextureSizeLocked(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_Changed(value: EventHandler) -> None: ...
    @Altitude.setter
    def Altitude(self, value: float) -> None: ...
    @AutoAltitude.setter
    def AutoAltitude(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @MaterialInstanceId.setter
    def MaterialInstanceId(self, value: Guid) -> None: ...
    @ShadowOnly.setter
    def ShadowOnly(self, value: bool) -> None: ...
    @ShowUnderside.setter
    def ShowUnderside(self, value: bool) -> None: ...
    @TextureOffset.setter
    def TextureOffset(self, value: Vector2d) -> None: ...
    @TextureOffsetLocked.setter
    def TextureOffsetLocked(self, value: bool) -> None: ...
    @TextureRotation.setter
    def TextureRotation(self, value: float) -> None: ...
    @TextureSize.setter
    def TextureSize(self, value: Vector2d) -> None: ...
    @TextureSizeLocked.setter
    def TextureSizeLocked(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class HudMaxPassesChangedEventArgs:
    @overload
    def __init__(self, mp: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def MaxPasses(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ICurrentEnvironment:
    @property
    def ForBackground(self) -> RenderEnvironment: ...
    @property
    def ForBackground_CheckMode(self) -> RenderEnvironment: ...
    @property
    def ForLighting(self) -> RenderEnvironment: ...
    @property
    def ForReflectionAndRefraction(self) -> RenderEnvironment: ...
    @ForAnyUsage.setter
    def ForAnyUsage(self, value: RenderEnvironment) -> None: ...
    @ForBackground_CheckMode.setter
    def ForBackground_CheckMode(self, value: RenderEnvironment) -> None: ...
    @ForBackground.setter
    def ForBackground(self, value: RenderEnvironment) -> None: ...
    @ForLighting.setter
    def ForLighting(self, value: RenderEnvironment) -> None: ...
    @ForReflectionAndRefraction.setter
    def ForReflectionAndRefraction(self, value: RenderEnvironment) -> None: ...


class ICurrentEnvironment_Get:
    @property
    def ForBackground(self) -> RenderEnvironment: ...
    @property
    def ForBackground_CheckMode(self) -> RenderEnvironment: ...
    @property
    def ForLighting(self) -> RenderEnvironment: ...
    @property
    def ForReflectionAndRefraction(self) -> RenderEnvironment: ...


class ImageAdjust:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Dither(self) -> Methods: ...
    @property
    def Gamma(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Dither.setter
    def Dither(self, value: Methods) -> None: ...
    @Gamma.setter
    def Gamma(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import EventHandler
class ImageFile:
    @overload
    @staticmethod
    def add_Deleted(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Loaded(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_Saved(value: EventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_Deleted(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Loaded(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_Saved(value: EventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ImageFileEvent(Enum):
    Saved = 0
    Loaded = 1
    Deleted = 2


from System import Guid
class ImageFileEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def EllapsedTime(self) -> int: ...
    @property
    def Event(self) -> ImageFileEvent: ...
    @property
    def FileName(self) -> str: ...
    @property
    def RenderEngine(self) -> str: ...
    @property
    def RenderEngineId(self) -> Guid: ...
    @property
    def SessionId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from ..Display import DisplayPipeline
class InitFramebufferEventArgs:
    @overload
    def __init__(self, dp: DisplayPipeline): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Pipeline(self) -> DisplayPipeline: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class IRhRdkPreviewSceneServer_eRotationType(Enum):
    Camera = 0
    Object = 1


class it_strategy(Enum):
    ContentDataBase = 0
    ContentSelection = 1


from System import IntPtr
from ..Geometry import Light
class LightArray:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pLightArray: IntPtr): ...
    @overload
    def Append(self, light: Light) -> None: ...
    @overload
    def Count(self) -> int: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def ElementAt(self, index: int) -> Light: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from ..PlugIns import PlugIn
from System.Reflection import Assembly
from System import Guid
from ..Geometry import Light
class LightManagerSupport:
    @overload
    def DeleteLight(self, doc: RhinoDoc, light: Light, bUndelete: bool) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLights(self, doc: RhinoDoc, light_array: LightArray) -> Tuple[LightArray]: ...
    @overload
    def GetLightSolo(self, doc: RhinoDoc, uuid_light: Guid) -> bool: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GroupLights(self, doc: RhinoDoc, light_array: LightArray) -> Tuple[LightArray]: ...
    @overload
    def LightDescription(self, doc: RhinoDoc, light: Light) -> Tuple[str, Light]: ...
    @overload
    def LightFromId(self, doc: RhinoDoc, uuid: Guid, light: Light) -> Tuple[bool, Light]: ...
    @overload
    def LightsInSoloStorage(self, doc: RhinoDoc) -> int: ...
    @overload
    def ModifyLight(self, doc: RhinoDoc, light: Light) -> None: ...
    @overload
    def ObjectSerialNumberFromLight(self, doc: RhinoDoc, light: Light) -> Tuple[int, Light]: ...
    @overload
    def OnCustomLightEvent(self, doc: RhinoDoc, le: LightMangerSupportCustomEvent, light: Light) -> Tuple[Light]: ...
    @overload
    def OnEditLight(self, doc: RhinoDoc, light_array: LightArray) -> Tuple[bool, LightArray]: ...
    @overload
    def PluginId(self) -> Guid: ...
    @overload
    @staticmethod
    def RegisterLightManager(plugin: PlugIn) -> None: ...
    @overload
    @staticmethod
    def RegisterProviders(assembly: Assembly, pluginId: Guid) -> None: ...
    @overload
    def RenderEngineId(self) -> Guid: ...
    @overload
    def SetLightSolo(self, doc: RhinoDoc, uuid_light: Guid, bSolo: bool) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UnGroup(self, doc: RhinoDoc, light_array: LightArray) -> Tuple[LightArray]: ...


from System import IntPtr
from System import Guid
from ..Geometry import Light
from ..DocObjects import RhinoObject
class LightManagerSupportClient:
    @overload
    def __init__(self, doc_uuid: int): ...
    @overload
    def DeleteLight(self, light: Light) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLightFromId(self, uuid: Guid) -> Light: ...
    @overload
    def GetLights(self) -> LightArray: ...
    @overload
    def GetLightSolo(self, light: Light) -> bool: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GroupLights(self, lights: LightArray) -> None: ...
    @overload
    def LightDescription(self, light: Light) -> str: ...
    @overload
    def LightsInSoloStorage(self) -> int: ...
    @overload
    def ModifyLight(self, light: Light) -> None: ...
    @overload
    def ObjectFromLight(self, light: Light) -> RhinoObject: ...
    @overload
    def OnEditLight(self, lights: LightArray) -> None: ...
    @overload
    def SetLightSolo(self, light: Light, bSolo: bool) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UnGroup(self, lights: LightArray) -> None: ...


class LightMangerSupportCustomEvent(Enum):
    light_added = 0
    light_deleted = 1
    light_undeleted = 2
    light_modified = 3
    light_sorted = 4


class LinearWorkflow(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, src: LinearWorkflow): ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Hash(self) -> int: ...
    @property
    def PostProcessFrameBuffer(self) -> bool: ...
    @property
    def PostProcessGamma(self) -> float: ...
    @property
    def PostProcessGammaOn(self) -> bool: ...
    @property
    def PostProcessGammaReciprocal(self) -> float: ...
    @property
    def PreProcessColors(self) -> bool: ...
    @property
    def PreProcessGamma(self) -> float: ...
    @property
    def PreProcessTextures(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @PostProcessFrameBuffer.setter
    def PostProcessFrameBuffer(self, value: bool) -> None: ...
    @PostProcessGamma.setter
    def PostProcessGamma(self, value: float) -> None: ...
    @PostProcessGammaOn.setter
    def PostProcessGammaOn(self, value: bool) -> None: ...
    @PreProcessColors.setter
    def PreProcessColors(self, value: bool) -> None: ...
    @PreProcessGamma.setter
    def PreProcessGamma(self, value: float) -> None: ...
    @PreProcessTextures.setter
    def PreProcessTextures(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class LoadMultipleFlags(Enum):
    Normal = 0
    Preload = 1


from System import Guid
from ..Geometry import Transform
class MappingTag:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def MappingCRC(self) -> int: ...
    @property
    def MappingType(self) -> TextureMappingType: ...
    @property
    def MeshTransform(self) -> Transform: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @MappingCRC.setter
    def MappingCRC(self, value: int) -> None: ...
    @MappingType.setter
    def MappingType(self, value: TextureMappingType) -> None: ...
    @MeshTransform.setter
    def MeshTransform(self, value: Transform) -> None: ...
    @overload
    def ToString(self) -> str: ...


class MatchDataResult(Enum):
    # None = 0
    Some = 1
    All = 2


from System import IntPtr
from System import Guid
class MetaDataProxy:
    @overload
    def __init__(self): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetContentInstanceId(self, uuid: Guid) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Methods(Enum):
    # None = 0
    FloydSteinberg = 1
    SimpleNoise = 2


class Modes(Enum):
    Automatic = 0
    Custom = 1


class NamedValue:
    @overload
    def __init__(self, name: str, value: object): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: object) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
class PixelBuffer:
    @overload
    def __init__(self, bufferPointer: IntPtr): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Buffer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from .DataSources import MetaData
class PreviewAppearance:
    @overload
    def __init__(self, pRenderContent: IntPtr): ...
    @overload
    def Background(self) -> PreviewBackground: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FromMetaData(self, md: MetaData) -> None: ...
    @overload
    def Geometry(self) -> PreviewGeometry: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @property
    def MetaData(self) -> MetaData: ...
    @property
    def Scale(self) -> float: ...
    @property
    def SceneScale(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Lighting(self) -> PreviewLighting: ...
    @overload
    def RotationType(self) -> IRhRdkPreviewSceneServer_eRotationType: ...
    @overload
    def RotationX(self) -> float: ...
    @overload
    def RotationY(self) -> float: ...
    @Scale.setter
    def Scale(self, value: float) -> None: ...
    @overload
    def SetRotationType(self, type: IRhRdkPreviewSceneServer_eRotationType) -> None: ...
    @overload
    def SetRotationX(self, d: float) -> None: ...
    @overload
    def SetRotationY(self, d: float) -> None: ...
    @overload
    def ToMetaData(self) -> None: ...
    @overload
    def ToMetaData(self, mdp: MetaDataProxy) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import Guid
class PreviewBackground:
    @overload
    def __init__(self, pPreviewBackground: IntPtr): ...
    @overload
    def ElementKind(self) -> str: ...
    @overload
    def EnvironmentInstanceId(self) -> Guid: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetEnvironmentInstanceId(self, guid: Guid) -> None: ...
    @overload
    def SetUpPreview(self, sceneServerPointer: IntPtr, guid: Guid) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PreviewBackgroundType(Enum):
    # None = 1
    Checkered = 2
    Scene = 4


from System import IntPtr
class PreviewGeometry:
    @overload
    def __init__(self, pPreviewGeometry: IntPtr): ...
    @overload
    def ElementKind(self) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetUpPreview(self, sceneServerPointer: IntPtr, pRenderContent: IntPtr, bCopy: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PreviewGeometryType(Enum):
    Sphere = 0
    Cube = 1
    Cone = 2
    Pyramid = 3
    Torus = 4
    Plane = 5
    Scene = 7


from System import IntPtr
class PreviewJobSignature:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, intPtr: IntPtr): ...
    @overload
    def __init__(self, width: int, height: int, sig: int): ...
    @overload
    def Compare(self, pjs: PreviewJobSignature) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ImageHeight(self) -> int: ...
    @overload
    def ImageWidth(self) -> int: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
class PreviewLighting:
    @overload
    def __init__(self, pPreviewLighting: IntPtr): ...
    @overload
    def ElementKind(self) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetUpPreview(self, sceneServerPointer: IntPtr) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PreviewQuality(Enum):
    # None = 0
    Low = 1
    Medium = 2
    IntermediateProgressive = 3
    Full = 4


from System.Drawing import Bitmap
class PreviewRenderedEventArgs:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bitmap(self) -> Bitmap: ...
    @property
    def PreviewJobSignature(self) -> PreviewJobSignature: ...
    @property
    def Quality(self) -> PreviewQuality: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Bitmap.setter
    def Bitmap(self, value: Bitmap) -> None: ...
    @PreviewJobSignature.setter
    def PreviewJobSignature(self, value: PreviewJobSignature) -> None: ...
    @Quality.setter
    def Quality(self, value: PreviewQuality) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PreviewRenderResult(Enum):
    Rendering = 0
    CacheOK = 1
    CacheFail = 2
    Nothing = 3


class PreviewSceneQuality(Enum):
    # None = 0
    RealtimeQuick = 1
    Low = 1
    RefineFirstPass = 1
    RefineSecondPass = 2
    Medium = 2
    IntermediateProgressive = 3
    RefineThirdPass = 4
    Full = 4


from System import IntPtr
class PreviewSceneServer:
    @overload
    def __init__(self, pPreviewSceneServer: IntPtr): ...
    @overload
    def ApplyRotation(self, X: float, Y: float, type: IRhRdkPreviewSceneServer_eRotationType) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetSceneScale(self, scale: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Projection(Enum):
    # None = 0
    ClosestPoint = 1
    Ray = 2


class ProjectionModes(Enum):
    MappingChannel = 0
    View = 1
    Wcs = 2
    Emap = 3
    WcsBox = 4
    Screen = 5


class ProxyTypes(Enum):
    # None = 0
    Single = 1
    Multi = 2
    Texture = 3


class RdkInitialLocation(Enum):
    RenderContent = 0
    LastOpenedFolder = 1
    CustomFolder = 2


class RdkTextureSize(Enum):
    Size1 = 128
    Size2 = 256
    Size3 = 512
    Size4 = 1024
    Size5 = 2048


from System import IntPtr
class RdkUndo:
    @overload
    def __init__(self, pUndoRecord: IntPtr): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def NewUndoRecord(self) -> RdkUndoRecord: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
class RdkUndoRecord:
    @overload
    def __init__(self, pUndoRecord: IntPtr): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetDescription(self, description: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import EventHandler
from ..PlugIns import PlugIn
from System.Reflection import Assembly
from System import Guid
from ..DocObjects import ViewInfo
from System import IntPtr
from ..Display import DisplayPipelineAttributes
from ..DocObjects import ViewportInfo
from System import DateTime
class RealtimeDisplayMode:
    @overload
    def add_HudLockButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudLockButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudLockButtonPressed(self, value: EventHandler) -> None: ...
    @overload
    def add_HudLockButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPauseButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPauseButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPauseButtonPressed(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPauseButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPlayButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPlayButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPlayButtonPressed(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPlayButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPostEffectsOffButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPostEffectsOffButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPostEffectsOffButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPostEffectsOnButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPostEffectsOnButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudPostEffectsOnButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudProductNameDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudProductNameLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudProductNamePressed(self, value: EventHandler) -> None: ...
    @overload
    def add_HudProductNameRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudStatusTextDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudStatusTextLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudStatusTextPressed(self, value: EventHandler) -> None: ...
    @overload
    def add_HudStatusTextRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudTimeDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudTimeLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudTimePressed(self, value: EventHandler) -> None: ...
    @overload
    def add_HudTimeRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudUnlockButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudUnlockButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_HudUnlockButtonPressed(self, value: EventHandler) -> None: ...
    @overload
    def add_HudUnlockButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def add_MaxPassesChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_OnDisplayPipelineSettingsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_OnDrawMiddleground(self, value: EventHandler) -> None: ...
    @overload
    def add_OnInitFramebuffer(self, value: EventHandler) -> None: ...
    @overload
    def CaptureProgress(self) -> float: ...
    @overload
    def ComputeViewportCrc(self, view: ViewInfo) -> int: ...
    @overload
    def CreateWorld(self, doc: RhinoDoc, viewInfo: ViewInfo, displayPipelineAttributes: DisplayPipelineAttributes) -> None: ...
    @overload
    def DrawOpenGl(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def LinearWorkflow(self) -> LinearWorkflow: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def MaxPasses(self) -> int: ...
    @property
    def Paused(self) -> bool: ...
    @property
    def PostEffectsOn(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetRealtimeViewport(realtimeViewport: IntPtr) -> RealtimeDisplayMode: ...
    @overload
    @staticmethod
    def GetRealtimeViewport(realtimeViewport: IntPtr, create: bool) -> RealtimeDisplayMode: ...
    @overload
    def GetRenderSize(self) -> Tuple[int, int]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetView(self) -> ViewInfo: ...
    @overload
    def HudAllowEditMaxPasses(self) -> bool: ...
    @overload
    def HudCustomStatusText(self) -> str: ...
    @overload
    def HudLastRenderedPass(self) -> int: ...
    @overload
    def HudMaximumPasses(self) -> int: ...
    @overload
    def HudProductName(self) -> str: ...
    @overload
    def HudRendererLocked(self) -> bool: ...
    @overload
    def HudRendererPaused(self) -> bool: ...
    @overload
    def HudShow(self) -> bool: ...
    @overload
    def HudShowControls(self) -> bool: ...
    @overload
    def HudShowCustomStatusText(self) -> bool: ...
    @overload
    def HudShowMaxPasses(self) -> bool: ...
    @overload
    def HudShowPasses(self) -> bool: ...
    @overload
    def HudStartTime(self) -> DateTime: ...
    @overload
    def IsCompleted(self) -> bool: ...
    @overload
    def IsFrameBufferAvailable(self, view: ViewInfo) -> bool: ...
    @overload
    def IsRendererStarted(self) -> bool: ...
    @overload
    def LastRenderedPass(self) -> int: ...
    @overload
    def OnRenderSizeChanged(self, width: int, height: int) -> bool: ...
    @overload
    def OpenGlVersion(self) -> int: ...
    @overload
    def PostConstruct(self) -> None: ...
    @overload
    @staticmethod
    def RegisterDisplayModes(plugin: PlugIn) -> Iterable[RealtimeDisplayModeClassInfo]: ...
    @overload
    @staticmethod
    def RegisterDisplayModes(assembly: Assembly, pluginId: Guid) -> Iterable[RealtimeDisplayModeClassInfo]: ...
    @overload
    def remove_HudLockButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudLockButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudLockButtonPressed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudLockButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPauseButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPauseButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPauseButtonPressed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPauseButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPlayButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPlayButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPlayButtonPressed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPlayButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPostEffectsOffButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPostEffectsOffButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPostEffectsOffButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPostEffectsOnButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPostEffectsOnButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudPostEffectsOnButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudProductNameDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudProductNameLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudProductNamePressed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudProductNameRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudStatusTextDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudStatusTextLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudStatusTextPressed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudStatusTextRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudTimeDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudTimeLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudTimePressed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudTimeRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudUnlockButtonDoubleClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudUnlockButtonLeftClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudUnlockButtonPressed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HudUnlockButtonRightClicked(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaxPassesChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_OnDisplayPipelineSettingsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_OnDrawMiddleground(self, value: EventHandler) -> None: ...
    @overload
    def remove_OnInitFramebuffer(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def RemoveRealtimeViewport(realtimeViewport: IntPtr) -> None: ...
    @Locked.setter
    def Locked(self, value: bool) -> None: ...
    @MaxPasses.setter
    def MaxPasses(self, value: int) -> None: ...
    @Paused.setter
    def Paused(self, value: bool) -> None: ...
    @PostEffectsOn.setter
    def PostEffectsOn(self, value: bool) -> None: ...
    @overload
    def SetUseDrawOpenGl(self, use: bool) -> None: ...
    @overload
    def SetView(self, view: ViewInfo) -> None: ...
    @overload
    def ShowCaptureProgress(self) -> bool: ...
    @overload
    def ShutdownRenderer(self) -> None: ...
    @overload
    def SignalRedraw(self) -> None: ...
    @overload
    def StartRenderer(self, w: int, h: int, doc: RhinoDoc, view: ViewInfo, viewportInfo: ViewportInfo, forCapture: bool, renderWindow: RenderWindow) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UnregisterDisplayModes(plugin: PlugIn) -> None: ...
    @overload
    @staticmethod
    def UnregisterDisplayModes(assembly: Assembly, pluginId: Guid) -> None: ...
    @overload
    def UseFastDraw(self) -> bool: ...


from System import Guid
class RealtimeDisplayModeClassInfo:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DontRegisterAttributesOnStart(self) -> bool: ...
    @property
    def DrawOpenGl(self) -> bool: ...
    @property
    def GUID(self) -> Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def RealtimeDisplayModeType(self) -> type: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import EventHandler
class RenderChannels(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_Changed(value: EventHandler) -> None: ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CustomList(self) -> Iterable[Guid]: ...
    @property
    def Mode(self) -> Modes: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_Changed(value: EventHandler) -> None: ...
    @CustomList.setter
    def CustomList(self, value: Iterable[Guid]) -> None: ...
    @Mode.setter
    def Mode(self, value: Modes) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System.Collections.Generic import IEnumerable
from System.Drawing import Size
from System.Drawing import Bitmap
from System import EventHandler
from ..PlugIns import PlugIn
from System.Reflection import Assembly
from ..Commands import Result
from .Fields import FieldDictionary
from System import IntPtr
from .Fields import Field
from .UI import UserInterfaceSection
from ..UI.Controls import ICollapsibleSection
from .DataSources import ContentFactory
class RenderContent:
    @overload
    @staticmethod
    def add_ContentAdded(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ContentChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ContentDeleted(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ContentDeleting(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ContentFieldChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ContentRenamed(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ContentReplaced(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ContentReplacing(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ContentUpdatePreview(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_CurrentEnvironmentChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_PreviewRendered(value: EventHandler) -> None: ...
    @overload
    def AddAutomaticUserInterfaceSection(self, caption: str, id: int) -> bool: ...
    @overload
    def AddUserInterfaceSection(self, section: ICollapsibleSection) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def BeginCreateDynamicFields(self, automatic: bool) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, childSlotName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def ChildSlotAmount(self, childSlotName: str) -> float: ...
    @overload
    def ChildSlotNameFromParamName(self, paramName: str) -> str: ...
    @overload
    def ChildSlotOn(self, childSlotName: str) -> bool: ...
    @overload
    def ConvertUnits(self, from_: UnitSystem, to: UnitSystem) -> None: ...
    @overload
    @staticmethod
    def Create(doc: RhinoDoc, type: Guid) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(doc: RhinoDoc, type: type) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(type: Guid, flags: ShowContentChooserFlags, doc: RhinoDoc) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(type: type, flags: ShowContentChooserFlags, doc: RhinoDoc) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(doc: RhinoDoc, type: type, parent: RenderContent, childSlotName: str) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(doc: RhinoDoc, type: Guid, parent: RenderContent, childSlotName: str) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(type: type, parent: RenderContent, childSlotName: str, flags: ShowContentChooserFlags, doc: RhinoDoc) -> RenderContent: ...
    @overload
    @staticmethod
    def Create(type: Guid, parent: RenderContent, childSlotName: str, flags: ShowContentChooserFlags, doc: RhinoDoc) -> RenderContent: ...
    @overload
    def CreateDynamicField(self, internalName: str, localName: str, englishName: str, value: object, minValue: object, maxValue: object, sectionId: int) -> bool: ...
    @overload
    def DeleteAllChildren(self, changeContexts: ChangeContexts) -> None: ...
    @overload
    def DeleteChild(self, childSlotName: str, changeContexts: ChangeContexts) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DynamicIcon(self, size: Size, usage: DynamicIconUsage) -> Tuple[bool, Bitmap]: ...
    @overload
    def Edit(self) -> RenderContent: ...
    @overload
    def EndChange(self) -> None: ...
    @overload
    def EndCreateDynamicFields(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Factory(self) -> ContentFactory: ...
    @overload
    def FindChild(self, childSlotName: str) -> RenderContent: ...
    @overload
    def ForDisplay(self) -> RenderContent: ...
    @overload
    @staticmethod
    def FromId(document: RhinoDoc, id: Guid) -> RenderContent: ...
    @overload
    @staticmethod
    def FromXml(xml: str, doc: RhinoDoc) -> RenderContent: ...
    @overload
    @staticmethod
    def GenerateQuickContentPreview(c: RenderContent, width: int, height: int, psc: PreviewSceneServer, bSuppressLocalMapping: bool, reason: int, result: Result) -> Tuple[Bitmap, Result]: ...
    @overload
    @staticmethod
    def GenerateQuickContentPreview(lw: LinearWorkflow, c: RenderContent, width: int, height: int, psc: PreviewSceneServer, bSuppressLocalMapping: bool, reason: int, result: Result) -> Tuple[Bitmap, Result]: ...
    @overload
    @staticmethod
    def GenerateRenderContentPreview(lwf: LinearWorkflow, c: RenderContent, width: int, height: int, bSuppressLocalMapping: bool, pjs: PreviewJobSignature, pa: PreviewAppearance, result: PreviewRenderResult) -> Tuple[Bitmap, PreviewRenderResult]: ...
    @property
    def CanBeEdited(self) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def ChildSlotDisplayName(self) -> str: ...
    @property
    def ChildSlotName(self) -> str: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentAssoc(self) -> RhinoDoc: ...
    @property
    def DocumentOwner(self) -> RhinoDoc: ...
    @property
    def DocumentRegistered(self) -> RhinoDoc: ...
    @property
    def Fields(self) -> FieldDictionary: ...
    @property
    def Filename(self) -> str: ...
    @property
    def FilesToEmbed(self) -> Iterable[str]: ...
    @property
    def FirstChild(self) -> RenderContent: ...
    @property
    def GroupId(self) -> Guid: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDefaultInstance(self) -> bool: ...
    @property
    def IsHiddenByAutoDelete(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextSibling(self) -> RenderContent: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> RenderContent: ...
    @property
    def ProxyType(self) -> ProxyTypes: ...
    @property
    def RenderHash(self) -> int: ...
    @property
    def Styles(self) -> RenderContentStyles: ...
    @property
    def Tags(self) -> str: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelParent(self) -> RenderContent: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeId(self) -> Guid: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Xml(self) -> str: ...
    @overload
    def GetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetEmbeddedFilesList(self) -> Iterable[str]: ...
    @overload
    def GetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetParameter(self, parameterName: str) -> object: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUiHash(self) -> int: ...
    @overload
    def GetUnderlyingInstances(self, collection: RenderContentCollection) -> Tuple[bool, RenderContentCollection]: ...
    @overload
    def Icon(self, size: Size) -> Tuple[bool, Bitmap]: ...
    @overload
    def IsCompatible(self, renderEngineId: Guid) -> bool: ...
    @overload
    def IsContentTypeAcceptableAsChild(self, type: Guid, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, factory: ContentFactory, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, kindId: Guid, factoryKind: str, childSlotName: str) -> bool: ...
    @overload
    def IsReference(self) -> bool: ...
    @overload
    @staticmethod
    def LoadFromFile(filename: str) -> RenderContent: ...
    @overload
    def MakeCopy(self) -> RenderContent: ...
    @overload
    def MakeGroupInstance(self) -> RenderContent: ...
    @overload
    def MatchData(self, oldContent: RenderContent) -> MatchDataResult: ...
    @overload
    def NewPreviewSceneServer(self, ssd: SceneServerData) -> PreviewSceneServer: ...
    @overload
    def OpenInEditor(self) -> bool: ...
    @overload
    def ParamNameFromChildSlotName(self, childSlotName: str) -> str: ...
    @overload
    @staticmethod
    def RegisterContent(plugin: PlugIn) -> Iterable[type]: ...
    @overload
    @staticmethod
    def RegisterContent(assembly: Assembly, pluginId: Guid) -> Iterable[type]: ...
    @overload
    @staticmethod
    def remove_ContentAdded(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ContentChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ContentDeleted(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ContentDeleting(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ContentFieldChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ContentRenamed(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ContentReplaced(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ContentReplacing(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ContentUpdatePreview(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_CurrentEnvironmentChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_PreviewRendered(value: EventHandler) -> None: ...
    @overload
    def RenderHashExclude(self, flags: TextureRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str, lw: LinearWorkflow) -> int: ...
    @overload
    def Replace(self, newcontent: RenderContent) -> bool: ...
    @overload
    def SaveToFile(self, filename: str, embedFilesChoice: EmbedFilesChoice) -> bool: ...
    @ChildSlotName.setter
    def ChildSlotName(self, value: str) -> None: ...
    @DocumentAssoc.setter
    def DocumentAssoc(self, value: RhinoDoc) -> None: ...
    @Filename.setter
    def Filename(self, value: str) -> None: ...
    @GroupId.setter
    def GroupId(self, value: Guid) -> None: ...
    @Hidden.setter
    def Hidden(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @IsLocked.setter
    def IsLocked(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Notes.setter
    def Notes(self, value: str) -> None: ...
    @Tags.setter
    def Tags(self, value: str) -> None: ...
    @overload
    def SetChild(self, renderContent: RenderContent, childSlotName: str) -> bool: ...
    @overload
    def SetChildSlotAmount(self, childSlotName: str, amount: float, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotOn(self, childSlotName: str, bOn: bool, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetIsRenderHashRecursive(self, recursive: bool) -> None: ...
    @overload
    def SetName(self, name: str, renameEvents: bool, ensureNameUnique: bool) -> None: ...
    @overload
    def SetParameter(self, parameterName: str, value: object) -> bool: ...
    @overload
    @staticmethod
    def ShowContentInstanceBrowser(doc: RhinoDoc, instance_id: Guid, kinds: RenderContentKind, buttons: ContentInstanceBrowserButtons) -> Tuple[bool, Guid]: ...
    @overload
    def SmartUngroupRecursive(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Ungroup(self) -> bool: ...
    @overload
    def UngroupRecursive(self) -> bool: ...
    @overload
    def UseCount(self) -> int: ...
    @overload
    def VirtualIcon(self, size: Size) -> Tuple[bool, Bitmap]: ...


class RenderContentChangedEventArgs(RenderContentEventArgs):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ChangeContext(self) -> ChangeContexts: ...
    @property
    def Content(self) -> RenderContent: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EnvironmentUsage(self) -> Usage: ...
    @property
    def EnvironmentUsageEx(self) -> EnvironmentUsage: ...
    @property
    def OldContent(self) -> RenderContent: ...
    @property
    def Reason(self) -> RenderContentChangeReason: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class RenderContentChangeReason(Enum):
    # None = 0
    Attach = 1
    Detach = 2
    ChangeAttach = 3
    ChangeDetach = 4
    AttachUndo = 5
    DetachUndo = 6
    Open = 7
    Delete = 8


from System import IntPtr
from System import Guid
from System.Collections import IEnumerator
class RenderContentCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nativePtr: IntPtr): ...
    def __iter__(self) -> Iterator[Any]: ...
    @overload
    def Add(self, collection: RenderContentCollection) -> None: ...
    @overload
    def Append(self, content: RenderContent) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ContentAt(self, index: int) -> RenderContent: ...
    @overload
    def ContentNeedsPreviewThumbnail(self, c: RenderContent, includeChildren: bool) -> bool: ...
    @overload
    def Count(self) -> int: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find_Sel(self, uuid: Guid) -> RenderContent: ...
    @overload
    def FirstTag(self) -> str: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetEnumerator(self) -> Iterator[Any]: ...
    @overload
    def GetFilterContentByUsage(self) -> FilterContentByUsage: ...
    @overload
    def GetForcedVaries(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSearchPattern(self) -> str: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Iterator(self) -> ContentCollectionIterator: ...
    @overload
    def NextTag(self) -> str: ...
    @overload
    def Remove(self, collection: RenderContentCollection) -> None: ...
    @overload
    def Set(self, collection: RenderContentCollection) -> None: ...
    @overload
    def SetForcedVaries(self, b: bool) -> None: ...
    @overload
    def SetSearchPattern(self, pattern: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class RenderContentEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Content(self) -> RenderContent: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EnvironmentUsage(self) -> Usage: ...
    @property
    def EnvironmentUsageEx(self) -> EnvironmentUsage: ...
    @property
    def Reason(self) -> RenderContentChangeReason: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class RenderContentFieldChangedEventArgs(RenderContentChangedEventArgs):
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ChangeContext(self) -> ChangeContexts: ...
    @property
    def Content(self) -> RenderContent: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def EnvironmentUsage(self) -> Usage: ...
    @property
    def EnvironmentUsageEx(self) -> EnvironmentUsage: ...
    @property
    def FieldName(self) -> str: ...
    @property
    def OldContent(self) -> RenderContent: ...
    @property
    def Reason(self) -> RenderContentChangeReason: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class RenderContentKind(Enum):
    # None = 0
    Material = 1
    Environment = 2
    Texture = 4


from System import IntPtr
class RenderContentKindList:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, kind_list: RenderContentKindList): ...
    @overload
    def __init__(self, pRdkRenderContentKindList: IntPtr): ...
    @overload
    def Add(self, kind: RenderContentKind) -> None: ...
    @overload
    def Contains(self, kind: RenderContentKind) -> bool: ...
    @overload
    def Count(self) -> int: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SingleKind(self) -> RenderContentKind: ...
    @overload
    def ToString(self) -> str: ...


class RenderContentManager:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def UserRenderContentPath() -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def RestoreRenderContent() -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System.Collections.Generic import IEnumerable
class RenderContentSerializer:
    @overload
    def CanLoadMultiple(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...
    @property
    def ContentKind(self) -> RenderContentKind: ...
    @property
    def ContentType(self) -> RenderContentKind: ...
    @property
    def EnglishDescription(self) -> str: ...
    @property
    def FileExtension(self) -> str: ...
    @property
    def LocalDescription(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def LoadMultiple(self, doc: RhinoDoc, fileNames: Iterable[str], contentKind: RenderContentKind, flags: LoadMultipleFlags) -> bool: ...
    @overload
    def Read(self, pathToFile: str) -> RenderContent: ...
    @overload
    def RegisterSerializer(self, id: Guid) -> bool: ...
    @overload
    def ReportContentAndFile(self, renderContent: RenderContent, pathToFile: str, flags: int) -> None: ...
    @overload
    def ReportDeferredContentAndFile(self, renderContent: RenderContent, pathToFile: str, flags: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, pathToFile: str, renderContent: RenderContent, previewArgs: CreatePreviewEventArgs) -> bool: ...


class RenderContentStyles(Enum):
    # None = 0
    TextureSummary = 1
    QuickPreview = 2
    PreviewCache = 4
    ProgressivePreview = 8
    LocalTextureMapping = 16
    GraphDisplay = 32
    SharedUI = 64
    Adjustment = 128
    Fields = 256
    ModalEditing = 512
    DynamicFields = 1024
    NameTypeSection = 2048


from System import Guid
class RenderContentType:
    @overload
    def __init__(self, typeId: Guid): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def InternalName(self) -> str: ...
    @property
    def PlugInId(self) -> Guid: ...
    @property
    def RenderEngineId(self) -> Guid: ...
    @overload
    @staticmethod
    def GetAllAvailableTypes() -> Iterable[RenderContentType]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def NewContentFromTypeId(typeId: Guid) -> RenderContent: ...
    @overload
    @staticmethod
    def NewContentFromTypeId(typeId: Guid, doc: RhinoDoc) -> RenderContent: ...
    @overload
    def NewRenderContent(self) -> RenderContent: ...
    @overload
    def ToString(self) -> str: ...


class RenderEndEventArgs:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System.Collections.Generic import IEnumerable
from System.Drawing import Size
from System.Drawing import Bitmap
from .Fields import FieldDictionary
from System import IntPtr
from .Fields import Field
from .UI import UserInterfaceSection
from ..UI.Controls import ICollapsibleSection
from .DataSources import ContentFactory
class RenderEnvironment(RenderContent):
    @overload
    def AddAutomaticUserInterfaceSection(self, caption: str, id: int) -> bool: ...
    @overload
    def AddUserInterfaceSection(self, section: ICollapsibleSection) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def BeginCreateDynamicFields(self, automatic: bool) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, childSlotName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def ChildSlotAmount(self, childSlotName: str) -> float: ...
    @overload
    def ChildSlotNameFromParamName(self, paramName: str) -> str: ...
    @overload
    def ChildSlotOn(self, childSlotName: str) -> bool: ...
    @overload
    def ConvertUnits(self, from_: UnitSystem, to: UnitSystem) -> None: ...
    @overload
    def CreateDynamicField(self, internalName: str, localName: str, englishName: str, value: object, minValue: object, maxValue: object, sectionId: int) -> bool: ...
    @overload
    def DeleteAllChildren(self, changeContexts: ChangeContexts) -> None: ...
    @overload
    def DeleteChild(self, childSlotName: str, changeContexts: ChangeContexts) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DynamicIcon(self, size: Size, usage: DynamicIconUsage) -> Tuple[bool, Bitmap]: ...
    @overload
    def Edit(self) -> RenderContent: ...
    @overload
    def EndChange(self) -> None: ...
    @overload
    def EndCreateDynamicFields(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Factory(self) -> ContentFactory: ...
    @overload
    def FindChild(self, childSlotName: str) -> RenderContent: ...
    @overload
    def ForDisplay(self) -> RenderContent: ...
    @property
    def CanBeEdited(self) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def ChildSlotDisplayName(self) -> str: ...
    @property
    def ChildSlotName(self) -> str: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @property
    def CurrentEnvironment() -> RenderEnvironment: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentAssoc(self) -> RhinoDoc: ...
    @property
    def DocumentOwner(self) -> RhinoDoc: ...
    @property
    def DocumentRegistered(self) -> RhinoDoc: ...
    @property
    def Fields(self) -> FieldDictionary: ...
    @property
    def Filename(self) -> str: ...
    @property
    def FilesToEmbed(self) -> Iterable[str]: ...
    @property
    def FirstChild(self) -> RenderContent: ...
    @property
    def GroupId(self) -> Guid: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDefaultInstance(self) -> bool: ...
    @property
    def IsHiddenByAutoDelete(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextSibling(self) -> RenderContent: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> RenderContent: ...
    @property
    def ProxyType(self) -> ProxyTypes: ...
    @property
    def RenderHash(self) -> int: ...
    @property
    def Styles(self) -> RenderContentStyles: ...
    @property
    def Tags(self) -> str: ...
    @property
    def TextureChildSlotName(self) -> str: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelParent(self) -> RenderContent: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeId(self) -> Guid: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Xml(self) -> str: ...
    @overload
    def GetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetEmbeddedFilesList(self) -> Iterable[str]: ...
    @overload
    def GetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetParameter(self, parameterName: str) -> object: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUiHash(self) -> int: ...
    @overload
    def GetUnderlyingInstances(self, collection: RenderContentCollection) -> Tuple[bool, RenderContentCollection]: ...
    @overload
    def Icon(self, size: Size) -> Tuple[bool, Bitmap]: ...
    @overload
    def IsCompatible(self, renderEngineId: Guid) -> bool: ...
    @overload
    def IsContentTypeAcceptableAsChild(self, type: Guid, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, factory: ContentFactory, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, kindId: Guid, factoryKind: str, childSlotName: str) -> bool: ...
    @overload
    def IsReference(self) -> bool: ...
    @overload
    def MakeCopy(self) -> RenderContent: ...
    @overload
    def MakeGroupInstance(self) -> RenderContent: ...
    @overload
    def MatchData(self, oldContent: RenderContent) -> MatchDataResult: ...
    @overload
    @staticmethod
    def NewBasicEnvironment(environment: SimulatedEnvironment) -> RenderEnvironment: ...
    @overload
    @staticmethod
    def NewBasicEnvironment(environment: SimulatedEnvironment, doc: RhinoDoc) -> RenderEnvironment: ...
    @overload
    def NewPreviewSceneServer(self, ssd: SceneServerData) -> PreviewSceneServer: ...
    @overload
    def OpenInEditor(self) -> bool: ...
    @overload
    def ParamNameFromChildSlotName(self, childSlotName: str) -> str: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: TextureRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str, lw: LinearWorkflow) -> int: ...
    @overload
    def Replace(self, newcontent: RenderContent) -> bool: ...
    @overload
    def SaveToFile(self, filename: str, embedFilesChoice: EmbedFilesChoice) -> bool: ...
    @ChildSlotName.setter
    def ChildSlotName(self, value: str) -> None: ...
    @CurrentEnvironment.setter
    def CurrentEnvironment(value: RenderEnvironment) -> None: ...
    @DocumentAssoc.setter
    def DocumentAssoc(self, value: RhinoDoc) -> None: ...
    @Filename.setter
    def Filename(self, value: str) -> None: ...
    @GroupId.setter
    def GroupId(self, value: Guid) -> None: ...
    @Hidden.setter
    def Hidden(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @IsLocked.setter
    def IsLocked(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Notes.setter
    def Notes(self, value: str) -> None: ...
    @Tags.setter
    def Tags(self, value: str) -> None: ...
    @overload
    def SetChild(self, renderContent: RenderContent, childSlotName: str) -> bool: ...
    @overload
    def SetChildSlotAmount(self, childSlotName: str, amount: float, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotOn(self, childSlotName: str, bOn: bool, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetIsRenderHashRecursive(self, recursive: bool) -> None: ...
    @overload
    def SetName(self, name: str, renameEvents: bool, ensureNameUnique: bool) -> None: ...
    @overload
    def SetParameter(self, parameterName: str, value: object) -> bool: ...
    @overload
    def SimulateEnvironment(self, isForDataOnly: bool) -> SimulatedEnvironment: ...
    @overload
    def SimulateEnvironment(self, simulation: SimulatedEnvironment, isForDataOnly: bool) -> Tuple[SimulatedEnvironment]: ...
    @overload
    def SmartUngroupRecursive(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Ungroup(self) -> bool: ...
    @overload
    def UngroupRecursive(self) -> bool: ...
    @overload
    def UseCount(self) -> int: ...
    @overload
    def VirtualIcon(self, size: Size) -> Tuple[bool, Bitmap]: ...


from System import Guid
from System.Collections.Generic import IEnumerator
class RenderEnvironmentTable:
    def __iter__(self) -> Iterator[RenderEnvironment]: ...
    @overload
    def Add(self, c: RenderEnvironment) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def EndChange(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, id: Guid) -> RenderEnvironment: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Sequence[RenderEnvironment]: ...
    @overload
    def GetEnumerator(self) -> Iterator[RenderEnvironment]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Remove(self, c: RenderEnvironment) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class RenderingSources(Enum):
    ActiveViewport = 0
    SpecificViewport = 1
    NamedView = 2
    SnapShot = 3


from ..DocObjects import Material
from System.Collections.Generic import IEnumerable
from ..DocObjects import ObjRef
from System import Guid
from ..DocObjects import TextureType
from ..DocObjects import PhysicallyBasedMaterial
from System.Drawing import Size
from System.Drawing import Bitmap
from .Fields import FieldDictionary
from System import IntPtr
from .Fields import Field
from .UI import UserInterfaceSection
from ..UI.Controls import ICollapsibleSection
from .DataSources import ContentFactory
class RenderMaterial(RenderContent):
    @overload
    def AddAutomaticUserInterfaceSection(self, caption: str, id: int) -> bool: ...
    @overload
    def AddUserInterfaceSection(self, section: ICollapsibleSection) -> bool: ...
    @overload
    def AssignTo(self, or_: ObjRef) -> bool: ...
    @overload
    def AssignTo(self, objrefs: Iterable[ObjRef], sfc: AssignToSubFaceChoices, bc: AssignToBlockChoices, bInteractive: bool) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def BeginCreateDynamicFields(self, automatic: bool) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, childSlotName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def ChildSlotAmount(self, childSlotName: str) -> float: ...
    @overload
    def ChildSlotNameFromParamName(self, paramName: str) -> str: ...
    @overload
    def ChildSlotOn(self, childSlotName: str) -> bool: ...
    @overload
    def ConvertToPhysicallyBased(self, tg: TextureGeneration) -> PhysicallyBasedMaterial: ...
    @overload
    def ConvertUnits(self, from_: UnitSystem, to: UnitSystem) -> None: ...
    @overload
    @staticmethod
    def CreateBasicMaterial(material: Material, doc: RhinoDoc) -> RenderMaterial: ...
    @overload
    def CreateDynamicField(self, internalName: str, localName: str, englishName: str, value: object, minValue: object, maxValue: object, sectionId: int) -> bool: ...
    @overload
    @staticmethod
    def CreateImportedMaterial(material: Material, doc: RhinoDoc, reference: bool) -> RenderMaterial: ...
    @overload
    def DeleteAllChildren(self, changeContexts: ChangeContexts) -> None: ...
    @overload
    def DeleteChild(self, childSlotName: str, changeContexts: ChangeContexts) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DynamicIcon(self, size: Size, usage: DynamicIconUsage) -> Tuple[bool, Bitmap]: ...
    @overload
    def Edit(self) -> RenderContent: ...
    @overload
    def EndChange(self) -> None: ...
    @overload
    def EndCreateDynamicFields(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Factory(self) -> ContentFactory: ...
    @overload
    def FindChild(self, childSlotName: str) -> RenderContent: ...
    @overload
    def ForDisplay(self) -> RenderContent: ...
    @overload
    @staticmethod
    def FromMaterial(material: Material, doc: RhinoDoc) -> RenderMaterial: ...
    @property
    def CanBeEdited(self) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def ChildSlotDisplayName(self) -> str: ...
    @property
    def ChildSlotName(self) -> str: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @property
    def DefaultPreviewBackgroundType(self) -> PreviewBackgroundType: ...
    @property
    def DefaultPreviewGeometryType(self) -> PreviewGeometryType: ...
    @property
    def DefaultPreviewSize(self) -> float: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentAssoc(self) -> RhinoDoc: ...
    @property
    def DocumentOwner(self) -> RhinoDoc: ...
    @property
    def DocumentRegistered(self) -> RhinoDoc: ...
    @property
    def Fields(self) -> FieldDictionary: ...
    @property
    def Filename(self) -> str: ...
    @property
    def FilesToEmbed(self) -> Iterable[str]: ...
    @property
    def FirstChild(self) -> RenderContent: ...
    @property
    def GemMaterialGuid() -> Guid: ...
    @property
    def GlassMaterialGuid() -> Guid: ...
    @property
    def GroupId(self) -> Guid: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDefaultInstance(self) -> bool: ...
    @property
    def IsHiddenByAutoDelete(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def MetalMaterialGuid() -> Guid: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextSibling(self) -> RenderContent: ...
    @property
    def Notes(self) -> str: ...
    @property
    def PaintMaterialGuid() -> Guid: ...
    @property
    def Parent(self) -> RenderContent: ...
    @property
    def PictureMaterialGuid() -> Guid: ...
    @property
    def PlasterMaterialGuid() -> Guid: ...
    @property
    def PlasticMaterialGuid() -> Guid: ...
    @property
    def ProxyType(self) -> ProxyTypes: ...
    @property
    def RenderHash(self) -> int: ...
    @property
    def SmellsLikeGem(self) -> bool: ...
    @property
    def SmellsLikeGlass(self) -> bool: ...
    @property
    def SmellsLikeMetal(self) -> bool: ...
    @property
    def SmellsLikePaint(self) -> bool: ...
    @property
    def SmellsLikePlaster(self) -> bool: ...
    @property
    def SmellsLikePlastic(self) -> bool: ...
    @property
    def SmellsLikeTexturedGem(self) -> bool: ...
    @property
    def SmellsLikeTexturedGlass(self) -> bool: ...
    @property
    def SmellsLikeTexturedMetal(self) -> bool: ...
    @property
    def SmellsLikeTexturedPaint(self) -> bool: ...
    @property
    def SmellsLikeTexturedPlaster(self) -> bool: ...
    @property
    def SmellsLikeTexturedPlastic(self) -> bool: ...
    @property
    def Styles(self) -> RenderContentStyles: ...
    @property
    def Tags(self) -> str: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelParent(self) -> RenderContent: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeId(self) -> Guid: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Xml(self) -> str: ...
    @overload
    def GetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetEmbeddedFilesList(self) -> Iterable[str]: ...
    @overload
    def GetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetParameter(self, parameterName: str) -> object: ...
    @overload
    def GetTextureAmountFromUsage(self, slot: StandardChildSlots) -> float: ...
    @overload
    def GetTextureFromUsage(self, slot: StandardChildSlots) -> RenderTexture: ...
    @overload
    def GetTextureOnFromUsage(self, slot: StandardChildSlots) -> bool: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUiHash(self) -> int: ...
    @overload
    def GetUnderlyingInstances(self, collection: RenderContentCollection) -> Tuple[bool, RenderContentCollection]: ...
    @overload
    def HandleTexturedValue(self, slotname: str, tc: TexturedValue) -> bool: ...
    @overload
    def Icon(self, size: Size) -> Tuple[bool, Bitmap]: ...
    @overload
    @staticmethod
    def ImportMaterialAndAssignToLayers(doc: RhinoDoc, file: str, layer_indices: Iterable[int]) -> bool: ...
    @overload
    def IsCompatible(self, renderEngineId: Guid) -> bool: ...
    @overload
    def IsContentTypeAcceptableAsChild(self, type: Guid, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, factory: ContentFactory, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, kindId: Guid, factoryKind: str, childSlotName: str) -> bool: ...
    @overload
    def IsReference(self) -> bool: ...
    @overload
    def MakeCopy(self) -> RenderContent: ...
    @overload
    def MakeGroupInstance(self) -> RenderContent: ...
    @overload
    def MatchData(self, oldContent: RenderContent) -> MatchDataResult: ...
    @overload
    def NewPreviewSceneServer(self, ssd: SceneServerData) -> PreviewSceneServer: ...
    @overload
    def OpenInEditor(self) -> bool: ...
    @overload
    def ParamNameFromChildSlotName(self, childSlotName: str) -> str: ...
    @overload
    def RenderHashExclude(self, flags: TextureRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str, lw: LinearWorkflow) -> int: ...
    @overload
    def Replace(self, newcontent: RenderContent) -> bool: ...
    @overload
    def SaveToFile(self, filename: str, embedFilesChoice: EmbedFilesChoice) -> bool: ...
    @ChildSlotName.setter
    def ChildSlotName(self, value: str) -> None: ...
    @DefaultPreviewBackgroundType.setter
    def DefaultPreviewBackgroundType(self, value: PreviewBackgroundType) -> None: ...
    @DefaultPreviewGeometryType.setter
    def DefaultPreviewGeometryType(self, value: PreviewGeometryType) -> None: ...
    @DefaultPreviewSize.setter
    def DefaultPreviewSize(self, value: float) -> None: ...
    @DocumentAssoc.setter
    def DocumentAssoc(self, value: RhinoDoc) -> None: ...
    @Filename.setter
    def Filename(self, value: str) -> None: ...
    @GroupId.setter
    def GroupId(self, value: Guid) -> None: ...
    @Hidden.setter
    def Hidden(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @IsLocked.setter
    def IsLocked(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Notes.setter
    def Notes(self, value: str) -> None: ...
    @Tags.setter
    def Tags(self, value: str) -> None: ...
    @overload
    def SetChild(self, renderContent: RenderContent, childSlotName: str) -> bool: ...
    @overload
    def SetChildSlotAmount(self, childSlotName: str, amount: float, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotOn(self, childSlotName: str, bOn: bool, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetIsRenderHashRecursive(self, recursive: bool) -> None: ...
    @overload
    def SetName(self, name: str, renameEvents: bool, ensureNameUnique: bool) -> None: ...
    @overload
    def SetParameter(self, parameterName: str, value: object) -> bool: ...
    @overload
    def SimulateMaterial(self, simulation: Material, tg: TextureGeneration) -> Tuple[Material]: ...
    @overload
    @staticmethod
    def SlotFromTextureType(tt: TextureType) -> StandardChildSlots: ...
    @overload
    def SmartUngroupRecursive(self) -> bool: ...
    @overload
    def TextureChildSlotName(self, slot: StandardChildSlots) -> str: ...
    @overload
    @staticmethod
    def TextureTypeFromSlot(slot: StandardChildSlots) -> TextureType: ...
    @overload
    def ToMaterial(self, tg: TextureGeneration) -> Material: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Ungroup(self) -> bool: ...
    @overload
    def UngroupRecursive(self) -> bool: ...
    @overload
    def UseCount(self) -> int: ...
    @overload
    def VirtualIcon(self, size: Size) -> Tuple[bool, Bitmap]: ...


from System import Guid
from System.Collections.Generic import IEnumerator
class RenderMaterialTable:
    def __iter__(self) -> Iterator[RenderMaterial]: ...
    @overload
    def Add(self, c: RenderMaterial) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def EndChange(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, id: Guid) -> RenderMaterial: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Sequence[RenderMaterial]: ...
    @overload
    def GetEnumerator(self) -> Iterator[RenderMaterial]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Remove(self, c: RenderMaterial) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ..PlugIns import PlugIn
from System import Guid
class RenderPanels:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromRenderSessionId(plugIn: PlugIn, panelType: type, renderSessionId: Guid) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RegisterPanel(self, plugin: PlugIn, renderPanelType: RenderPanelType, panelType: type, renderEngineId: Guid, caption: str, alwaysShow: bool, initialShow: bool) -> None: ...
    @overload
    def RegisterPanel(self, plugin: PlugIn, renderPanelType: RenderPanelType, panelType: type, renderEngineId: Guid, caption: str, alwaysShow: bool, initialShow: bool, pos: ExtraSidePanePosition) -> None: ...
    @overload
    def ToString(self) -> str: ...


class RenderPanelType(Enum):
    RenderWindow = 0


from ..Commands import Result
from System import Guid
from ..Display import RhinoView
from System.Drawing import Rectangle
from System.Drawing import Size
from ..DocObjects import ViewportInfo
from ..PlugIns import PlugIn
class RenderPipeline:
    @overload
    def CloseWindow(self) -> bool: ...
    @overload
    def CommandResult(self) -> Result: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def PlugIn(self) -> PlugIn: ...
    @property
    def RenderSessionId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRenderWindow(self) -> RenderWindow: ...
    @overload
    def GetRenderWindow(self, withWireframeChannel: bool) -> RenderWindow: ...
    @overload
    def GetRenderWindow(self, withWireframeChannel: bool, fromRenderViewSource: bool) -> RenderWindow: ...
    @overload
    def GetRenderWindow(self, viewportInfo: ViewportInfo, fromRenderViewSource: bool) -> RenderWindow: ...
    @overload
    def GetRenderWindow(self, viewportInfo: ViewportInfo, fromRenderViewSource: bool, region: Rectangle) -> RenderWindow: ...
    @overload
    def GetRenderWindowFromRenderViewSource(self, fromRenderViewSource: bool) -> RenderWindow: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def LocalizeRenderReturnCode(rc: RenderReturnCode) -> str: ...
    @overload
    def PauseRendering(self) -> None: ...
    @overload
    def Render(self) -> RenderReturnCode: ...
    @overload
    @staticmethod
    def RenderSize(doc: RhinoDoc) -> Size: ...
    @overload
    @staticmethod
    def RenderSize(doc: RhinoDoc, fromRenderSources: bool) -> Size: ...
    @overload
    def RenderWindow(self, view: RhinoView, rect: Rectangle, inWindow: bool) -> RenderReturnCode: ...
    @overload
    def ResumeRendering(self) -> None: ...
    @overload
    def SaveImage(self, fileName: str, saveAlpha: bool) -> bool: ...
    @ConfirmationSeconds.setter
    def ConfirmationSeconds(self, value: int) -> None: ...
    @overload
    def SetAsyncRenderContext(self, aRC: AsyncRenderContext) -> Tuple[AsyncRenderContext]: ...
    @overload
    def SupportsPause(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class RenderPlugInInfo:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PlugInId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @PlugInId.setter
    def PlugInId(self, value: Guid) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections.Generic import IEnumerable
from System.Collections.ObjectModel import ReadOnlyCollection
from System.Collections.Generic import IComparer
from System import Predicate
from System.Collections.Generic import List
from System import Action
from System.Collections.Generic import Enumerator
from System import Comparison
from System import Converter
class RenderPlugInList:
    @overload
    def __init__(self): ...
    def __iter__(self) -> Iterator[RenderPlugInInfo]: ...
    def __getitem__(self, index: int) -> RenderPlugInInfo: ...
    def __setitem__(self, index: int, value: RenderPlugInInfo): ...
    @overload
    def Add(self, item: RenderPlugInInfo) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[RenderPlugInInfo]) -> None: ...
    @overload
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: RenderPlugInInfo) -> int: ...
    @overload
    def BinarySearch(self, item: RenderPlugInInfo, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: RenderPlugInInfo, comparer: IComparer) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: RenderPlugInInfo) -> bool: ...
    @overload
    def ConvertAll(self, converter: Converter) -> List: ...
    @overload
    def CopyTo(self, array: Iterable[RenderPlugInInfo]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[RenderPlugInInfo], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[RenderPlugInInfo], arrayIndex: int, count: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Exists(self, match: Predicate) -> bool: ...
    @overload
    def Find(self, match: Predicate) -> RenderPlugInInfo: ...
    @overload
    def FindAll(self, match: Predicate) -> List: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def FindLast(self, match: Predicate) -> RenderPlugInInfo: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRange(self, index: int, count: int) -> List: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: RenderPlugInInfo) -> int: ...
    @overload
    def IndexOf(self, item: RenderPlugInInfo, index: int) -> int: ...
    @overload
    def IndexOf(self, item: RenderPlugInInfo, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, item: RenderPlugInInfo) -> None: ...
    @overload
    def InsertRange(self, index: int, collection: Iterable[RenderPlugInInfo]) -> None: ...
    @overload
    def LastIndexOf(self, item: RenderPlugInInfo) -> int: ...
    @overload
    def LastIndexOf(self, item: RenderPlugInInfo, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: RenderPlugInInfo, index: int, count: int) -> int: ...
    @overload
    def Remove(self, item: RenderPlugInInfo) -> bool: ...
    @overload
    def RemoveAll(self, match: Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @property
    def Item(self) -> MutableSequence[RenderPlugInInfo]: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    @overload
    def ToArray(self) -> Iterable[RenderPlugInInfo]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TrimExcess(self) -> None: ...
    @overload
    def TrueForAll(self, match: Predicate) -> bool: ...


from ..DocObjects import RhinoObject
from ..Geometry import Mesh
from ..Geometry import Sphere
from ..Geometry import Box
from ..Geometry import PlaneSurface
from ..Geometry import Cone
from ..Geometry import Plane
from ..Geometry import Transform
from ..Geometry import BoundingBox
class RenderPrimitive:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BoundingBox(self) -> BoundingBox: ...
    @property
    def InstanceTransform(self) -> Transform: ...
    @property
    def PrimitiveType(self) -> RenderPrimitiveType: ...
    @property
    def RenderMaterial(self) -> RenderMaterial: ...
    @property
    def RhinoObject(self) -> RhinoObject: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Mesh(self) -> Mesh: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetBox(self) -> Tuple[bool, Box]: ...
    @overload
    def TryGetCone(self) -> Tuple[bool, Cone, Plane]: ...
    @overload
    def TryGetPlane(self) -> Tuple[bool, PlaneSurface]: ...
    @overload
    def TryGetSphere(self) -> Tuple[bool, Sphere]: ...


class RenderPrimitiveType(Enum):
    # None = 0
    Mesh = 1
    Sphere = 2
    Plane = 3
    Box = 4
    Cone = 5


class RenderPropertyChangedEvent:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Context(self) -> int: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class RenderReturnCode(Enum):
    Ok = 0
    EmptyScene = 1
    Cancel = 2
    NoActiveView = 3
    OnPreCreateWindow = 4
    NoFrameWndPointer = 5
    ErrorCreatingWindow = 6
    ErrorStartingRender = 7
    EnterModalLoop = 8
    ExitModalLoop = 9
    ExitRhino = 10
    InternalError = 11


from System.Drawing import Color
from System.Drawing import Size
from ..Display import BackgroundStyle
from System import Guid
from .PostEffects import PostEffectCollection
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from ..FileIO import SerializationOptions
from ..Runtime import CommonObject
class RenderSettings(CommonObject):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source: RenderSettings): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Duplicate(self) -> RenderSettings: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AmbientLight(self) -> Color: ...
    @property
    def AntialiasLevel(self) -> AntialiasLevel: ...
    @property
    def BackgroundColorBottom(self) -> Color: ...
    @property
    def BackgroundColorTop(self) -> Color: ...
    @property
    def BackgroundStyle(self) -> BackgroundStyle: ...
    @property
    def DepthCue(self) -> bool: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def Dithering(self) -> Dithering: ...
    @property
    def FlatShade(self) -> bool: ...
    @property
    def GroundPlane(self) -> GroundPlane: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def ImageDpi(self) -> float: ...
    @property
    def ImageSize(self) -> Size: ...
    @property
    def ImageUnitSystem(self) -> UnitSystem: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LinearWorkflow(self) -> LinearWorkflow: ...
    @property
    def NamedView(self) -> str: ...
    @property
    def PostEffects(self) -> PostEffectCollection: ...
    @property
    def RenderAnnotations(self) -> bool: ...
    @property
    def RenderBackfaces(self) -> bool: ...
    @property
    def RenderChannels(self) -> RenderChannels: ...
    @property
    def RenderCurves(self) -> bool: ...
    @property
    def RenderIsoparams(self) -> bool: ...
    @property
    def RenderMeshEdges(self) -> bool: ...
    @property
    def RenderPoints(self) -> bool: ...
    @property
    def RenderSource(self) -> RenderingSources: ...
    @property
    def SafeFrame(self) -> SafeFrame: ...
    @property
    def ScaleBackgroundToFit(self) -> bool: ...
    @property
    def ShadowmapLevel(self) -> int: ...
    @property
    def Skylight(self) -> Skylight: ...
    @property
    def Snapshot(self) -> str: ...
    @property
    def SpecificViewport(self) -> str: ...
    @property
    def Sun(self) -> Sun: ...
    @property
    def TransparentBackground(self) -> bool: ...
    @property
    def UseHiddenLights(self) -> bool: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UseViewportSize(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def RenderEnvironment(self, usage: EnvironmentUsage, purpose: EnvironmentPurpose) -> RenderEnvironment: ...
    @overload
    def RenderEnvironmentId(self, usage: EnvironmentUsage, purpose: EnvironmentPurpose) -> Guid: ...
    @overload
    def RenderEnvironmentOverride(self, usage: EnvironmentUsage) -> bool: ...
    @AmbientLight.setter
    def AmbientLight(self, value: Color) -> None: ...
    @AntialiasLevel.setter
    def AntialiasLevel(self, value: AntialiasLevel) -> None: ...
    @BackgroundColorBottom.setter
    def BackgroundColorBottom(self, value: Color) -> None: ...
    @BackgroundColorTop.setter
    def BackgroundColorTop(self, value: Color) -> None: ...
    @BackgroundStyle.setter
    def BackgroundStyle(self, value: BackgroundStyle) -> None: ...
    @DepthCue.setter
    def DepthCue(self, value: bool) -> None: ...
    @FlatShade.setter
    def FlatShade(self, value: bool) -> None: ...
    @ImageDpi.setter
    def ImageDpi(self, value: float) -> None: ...
    @ImageSize.setter
    def ImageSize(self, value: Size) -> None: ...
    @ImageUnitSystem.setter
    def ImageUnitSystem(self, value: UnitSystem) -> None: ...
    @NamedView.setter
    def NamedView(self, value: str) -> None: ...
    @RenderAnnotations.setter
    def RenderAnnotations(self, value: bool) -> None: ...
    @RenderBackfaces.setter
    def RenderBackfaces(self, value: bool) -> None: ...
    @RenderCurves.setter
    def RenderCurves(self, value: bool) -> None: ...
    @RenderIsoparams.setter
    def RenderIsoparams(self, value: bool) -> None: ...
    @RenderMeshEdges.setter
    def RenderMeshEdges(self, value: bool) -> None: ...
    @RenderPoints.setter
    def RenderPoints(self, value: bool) -> None: ...
    @RenderSource.setter
    def RenderSource(self, value: RenderingSources) -> None: ...
    @ScaleBackgroundToFit.setter
    def ScaleBackgroundToFit(self, value: bool) -> None: ...
    @ShadowmapLevel.setter
    def ShadowmapLevel(self, value: int) -> None: ...
    @Snapshot.setter
    def Snapshot(self, value: str) -> None: ...
    @SpecificViewport.setter
    def SpecificViewport(self, value: str) -> None: ...
    @TransparentBackground.setter
    def TransparentBackground(self, value: bool) -> None: ...
    @UseHiddenLights.setter
    def UseHiddenLights(self, value: bool) -> None: ...
    @UseViewportSize.setter
    def UseViewportSize(self, value: bool) -> None: ...
    @overload
    def SetRenderEnvironment(self, usage: EnvironmentUsage, env: RenderEnvironment) -> None: ...
    @overload
    def SetRenderEnvironmentId(self, usage: EnvironmentUsage, guid: Guid) -> None: ...
    @overload
    def SetRenderEnvironmentOverride(self, usage: EnvironmentUsage, on: bool) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import ViewInfo
class RenderSourceView:
    @overload
    def __init__(self, doc: RhinoDoc): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetViewInfo(self) -> ViewInfo: ...
    @overload
    def ToString(self) -> str: ...


class RenderSuccessCode(Enum):
    Completed = 0
    Failed = 1


from ..PlugIns import PlugIn
from System import Guid
from System.Drawing import Icon
class RenderTabs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromRenderSessionId(plugIn: PlugIn, tabType: type, renderSessionId: Guid) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RegisterTab(self, plugin: PlugIn, tabType: type, renderEngineId: Guid, caption: str, icon: Icon) -> None: ...
    @overload
    @staticmethod
    def SessionIdFromTab(tab: object) -> Guid: ...
    @overload
    @staticmethod
    def SidePaneUiIdFromTab(tab: object) -> Guid: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Bitmap
from ..Geometry import Transform
from System import Nullable
from ..DocObjects import RhinoObject
from ..Geometry import Vector3d
from ..Geometry import Point3d
from System import IntPtr
from System import Guid
from System.Collections.Generic import IEnumerable
from System.Drawing import Size
from .Fields import FieldDictionary
from .Fields import Field
from .UI import UserInterfaceSection
from ..UI.Controls import ICollapsibleSection
from .DataSources import ContentFactory
class RenderTexture(RenderContent):
    @overload
    def AddAutomaticUserInterfaceSection(self, caption: str, id: int) -> bool: ...
    @overload
    def AddUserInterfaceSection(self, section: ICollapsibleSection) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def BeginCreateDynamicFields(self, automatic: bool) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, childSlotName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def ChildSlotAmount(self, childSlotName: str) -> float: ...
    @overload
    def ChildSlotNameFromParamName(self, paramName: str) -> str: ...
    @overload
    def ChildSlotOn(self, childSlotName: str) -> bool: ...
    @overload
    def ConvertUnits(self, from_: UnitSystem, to: UnitSystem) -> None: ...
    @overload
    def CreateDynamicField(self, internalName: str, localName: str, englishName: str, value: object, minValue: object, maxValue: object, sectionId: int) -> bool: ...
    @overload
    def CreateEvaluator(self, evaluatorFlags: TextureEvaluatorFlags) -> TextureEvaluator: ...
    @overload
    def DeleteAllChildren(self, changeContexts: ChangeContexts) -> None: ...
    @overload
    def DeleteChild(self, childSlotName: str, changeContexts: ChangeContexts) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DynamicIcon(self, size: Size, usage: DynamicIconUsage) -> Tuple[bool, Bitmap]: ...
    @overload
    def Edit(self) -> RenderContent: ...
    @overload
    def EndChange(self) -> None: ...
    @overload
    def EndCreateDynamicFields(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Factory(self) -> ContentFactory: ...
    @overload
    def FindChild(self, childSlotName: str) -> RenderContent: ...
    @overload
    def ForDisplay(self) -> RenderContent: ...
    @overload
    def GenerateTextureSimulation(self, bitmap: Bitmap, ef: TextureEvaluatorFlags) -> Tuple[bool, Bitmap]: ...
    @property
    def CanBeEdited(self) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def ChildSlotDisplayName(self) -> str: ...
    @property
    def ChildSlotName(self) -> str: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentAssoc(self) -> RhinoDoc: ...
    @property
    def DocumentOwner(self) -> RhinoDoc: ...
    @property
    def DocumentRegistered(self) -> RhinoDoc: ...
    @property
    def Fields(self) -> FieldDictionary: ...
    @property
    def Filename(self) -> str: ...
    @property
    def FilesToEmbed(self) -> Iterable[str]: ...
    @property
    def FirstChild(self) -> RenderContent: ...
    @property
    def GroupId(self) -> Guid: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDefaultInstance(self) -> bool: ...
    @property
    def IsHiddenByAutoDelete(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def LocalMappingTransform(self) -> Transform: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextSibling(self) -> RenderContent: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> RenderContent: ...
    @property
    def PixelSize2(self) -> Nullable: ...
    @property
    def ProxyType(self) -> ProxyTypes: ...
    @property
    def RenderHash(self) -> int: ...
    @property
    def RenderHashWithoutLocalMapping(self) -> int: ...
    @property
    def RenderHashWithoutLocalMappingOrLinearWorkflow(self) -> int: ...
    @property
    def Styles(self) -> RenderContentStyles: ...
    @property
    def Tags(self) -> str: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelParent(self) -> RenderContent: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeId(self) -> Guid: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Xml(self) -> str: ...
    @overload
    def GetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetDisplayInViewport(self) -> bool: ...
    @overload
    def GetEmbeddedFilesList(self) -> Iterable[str]: ...
    @overload
    def GetEnvironmentMappingMode(self) -> TextureEnvironmentMappingMode: ...
    @overload
    @staticmethod
    def GetEnvironmentMappingProjection(mode: TextureEnvironmentMappingMode, reflectionVector: Vector3d) -> Tuple[bool, float, float]: ...
    @overload
    def GetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInternalEnvironmentMappingMode(self) -> TextureEnvironmentMappingMode: ...
    @overload
    def GetLocalMappingType(self) -> eLocalMappingType: ...
    @overload
    def GetMappingChannel(self) -> int: ...
    @overload
    def GetOffset(self) -> Vector3d: ...
    @overload
    def GetOffsetLocked(self) -> bool: ...
    @overload
    def GetParameter(self, parameterName: str) -> object: ...
    @overload
    def GetPreviewIn3D(self) -> bool: ...
    @overload
    def GetPreviewLocalMapping(self) -> bool: ...
    @overload
    @staticmethod
    def GetProceduralAaltonenNoiseArrayPointer() -> IntPtr: ...
    @overload
    @staticmethod
    def GetProceduralAaltonenNoiseArraySize() -> int: ...
    @overload
    @staticmethod
    def GetProceduralImpulseNoiseArrayPointer() -> IntPtr: ...
    @overload
    @staticmethod
    def GetProceduralImpulseNoiseArraySize() -> int: ...
    @overload
    @staticmethod
    def GetProceduralPerlinNoiseArrayPointer() -> IntPtr: ...
    @overload
    @staticmethod
    def GetProceduralPerlinNoiseArraySize() -> int: ...
    @overload
    @staticmethod
    def GetProceduralVcNoiseArrayPointer() -> IntPtr: ...
    @overload
    @staticmethod
    def GetProceduralVcNoiseArraySize() -> int: ...
    @overload
    def GetProjectionMode(self) -> TextureProjectionMode: ...
    @overload
    def GetRepeat(self) -> Vector3d: ...
    @overload
    def GetRepeatLocked(self) -> bool: ...
    @overload
    def GetRotation(self) -> Vector3d: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUiHash(self) -> int: ...
    @overload
    def GetUnderlyingInstances(self, collection: RenderContentCollection) -> Tuple[bool, RenderContentCollection]: ...
    @overload
    @staticmethod
    def GetWcsBoxMapping(worldXyz: Point3d, normal: Vector3d) -> Point3d: ...
    @overload
    def GetWrapType(self) -> TextureWrapType: ...
    @overload
    def GraphInfo(self, tgi: TextureGraphInfo) -> Tuple[TextureGraphInfo]: ...
    @overload
    def Icon(self, size: Size) -> Tuple[bool, Bitmap]: ...
    @overload
    def IsCompatible(self, renderEngineId: Guid) -> bool: ...
    @overload
    def IsContentTypeAcceptableAsChild(self, type: Guid, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, factory: ContentFactory, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, kindId: Guid, factoryKind: str, childSlotName: str) -> bool: ...
    @overload
    def IsHdrCapable(self) -> bool: ...
    @overload
    def IsImageBased(self) -> bool: ...
    @overload
    def IsLinear(self) -> bool: ...
    @overload
    def IsNormalMap(self) -> bool: ...
    @overload
    def IsReference(self) -> bool: ...
    @overload
    def MakeCopy(self) -> RenderContent: ...
    @overload
    def MakeGroupInstance(self) -> RenderContent: ...
    @overload
    def MatchData(self, oldContent: RenderContent) -> MatchDataResult: ...
    @overload
    @staticmethod
    def NewBitmapTexture(texture: SimulatedTexture, doc: RhinoDoc) -> RenderTexture: ...
    @overload
    @staticmethod
    def NewBitmapTexture(bitmap: Bitmap, doc: RhinoDoc) -> RenderTexture: ...
    @overload
    def NewPreviewSceneServer(self, ssd: SceneServerData) -> PreviewSceneServer: ...
    @overload
    def OpenInEditor(self) -> bool: ...
    @overload
    def ParamNameFromChildSlotName(self, childSlotName: str) -> str: ...
    @overload
    def PixelSize(self) -> Tuple[int, int, int]: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: TextureRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str, lw: LinearWorkflow) -> int: ...
    @overload
    def Replace(self, newcontent: RenderContent) -> bool: ...
    @overload
    def SaveAsImage(self, FullPath: str, width: int, height: int, depth: int) -> bool: ...
    @overload
    def SaveToFile(self, filename: str, embedFilesChoice: EmbedFilesChoice) -> bool: ...
    @ChildSlotName.setter
    def ChildSlotName(self, value: str) -> None: ...
    @DocumentAssoc.setter
    def DocumentAssoc(self, value: RhinoDoc) -> None: ...
    @Filename.setter
    def Filename(self, value: str) -> None: ...
    @GroupId.setter
    def GroupId(self, value: Guid) -> None: ...
    @Hidden.setter
    def Hidden(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @IsLocked.setter
    def IsLocked(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Notes.setter
    def Notes(self, value: str) -> None: ...
    @Tags.setter
    def Tags(self, value: str) -> None: ...
    @overload
    def SetChild(self, renderContent: RenderContent, childSlotName: str) -> bool: ...
    @overload
    def SetChildSlotAmount(self, childSlotName: str, amount: float, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotOn(self, childSlotName: str, bOn: bool, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetDisplayInViewport(self, value: bool) -> None: ...
    @overload
    def SetDisplayInViewport(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetEnvironmentMappingMode(self, value: TextureEnvironmentMappingMode) -> None: ...
    @overload
    def SetEnvironmentMappingMode(self, value: TextureEnvironmentMappingMode, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetGraphInfo(self, tgi: TextureGraphInfo) -> None: ...
    @overload
    def SetIsRenderHashRecursive(self, recursive: bool) -> None: ...
    @overload
    def SetMappingChannel(self, value: int, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetName(self, name: str, renameEvents: bool, ensureNameUnique: bool) -> None: ...
    @overload
    def SetOffset(self, value: Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetOffsetLocked(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetParameter(self, parameterName: str, value: object) -> bool: ...
    @overload
    def SetPreviewIn3D(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetPreviewLocalMapping(self, value: bool) -> None: ...
    @overload
    def SetPreviewLocalMapping(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetProjectionMode(self, value: TextureProjectionMode, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRepeat(self, value: Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRepeatLocked(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRotation(self, value: Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetWrapType(self, value: TextureWrapType, changeContext: ChangeContexts) -> None: ...
    @overload
    def SimulatedTexture(self, tg: TextureGeneration, size: int, obj: RhinoObject) -> SimulatedTexture: ...
    @overload
    def SimulateTexture(self, simulation: SimulatedTexture, tg: TextureGeneration, size: int, obj: RhinoObject) -> Tuple[SimulatedTexture]: ...
    @overload
    def SmartUngroupRecursive(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Ungroup(self) -> bool: ...
    @overload
    def UngroupRecursive(self) -> bool: ...
    @overload
    def UseCount(self) -> int: ...
    @overload
    def VirtualIcon(self, size: Size) -> Tuple[bool, Bitmap]: ...


from System import Guid
from System.Collections.Generic import IEnumerator
class RenderTextureTable:
    def __iter__(self) -> Iterator[RenderTexture]: ...
    @overload
    def Add(self, c: RenderTexture) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def EndChange(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, id: Guid) -> RenderTexture: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Sequence[RenderTexture]: ...
    @overload
    def GetEnumerator(self) -> Iterator[RenderTexture]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Remove(self, c: RenderTexture) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Size
from System import Guid
from System import EventHandler
from ..DocObjects import ViewInfo
from System.Drawing import Bitmap
from ..DocObjects import ViewportInfo
from System.Drawing import Rectangle
from .PostEffects import PostEffectExecutionControl
class RenderWindow:
    @overload
    @staticmethod
    def add_Cloned(value: EventHandler) -> None: ...
    @overload
    def AddChannel(self, channel: StandardChannels) -> bool: ...
    @overload
    def AddWireframeChannel(self, doc: RhinoDoc, viewport: ViewportInfo, size: Size, region: Rectangle) -> bool: ...
    @overload
    @staticmethod
    def ChannelId(ch: StandardChannels) -> Guid: ...
    @overload
    @staticmethod
    def Create(szSize: Size) -> RenderWindow: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndAsyncRender(self, successCode: RenderSuccessCode) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromSessionId(sessionId: Guid) -> RenderWindow: ...
    @property
    def SessionId(self) -> Guid: ...
    @overload
    def GetBitmap(self) -> Bitmap: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRequestedRenderChannels(self) -> Iterable[Guid]: ...
    @overload
    def GetRequestedRenderChannelsAsStandardChannels(self) -> Iterable[StandardChannels]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def InvalidateArea(self, rect: Rectangle) -> None: ...
    @overload
    def IsChannelAvailable(self, id: Guid) -> bool: ...
    @overload
    def IsChannelShown(self, id: Guid) -> bool: ...
    @overload
    def OpenChannel(self, id: StandardChannels) -> Channel: ...
    @overload
    def RegisterPostEffectExecutionControl(self, ec: PostEffectExecutionControl) -> None: ...
    @overload
    @staticmethod
    def remove_Cloned(value: EventHandler) -> None: ...
    @overload
    def SaveDibAsBitmap(self, filename: str) -> None: ...
    @overload
    def SaveRenderImageAs(self, filename: str, saveAlpha: bool) -> None: ...
    @overload
    def SaveRenderImageAs(self, filename: str, renderEngineGuid: Guid, saveAlpha: bool) -> None: ...
    @overload
    def SetIsRendering(self, is_rendering: bool) -> None: ...
    @overload
    def SetProgress(self, text: str, progress: float) -> None: ...
    @overload
    def SetRenderOutputRect(self, rect: Rectangle) -> None: ...
    @overload
    def SetRGBAChannelColors(self, size: Size, colors: Iterable[Color4f]) -> None: ...
    @overload
    def SetRGBAChannelColors(self, rectangle: Rectangle, colors: Iterable[Color4f]) -> None: ...
    @overload
    def SetSize(self, size: Size) -> None: ...
    @overload
    def SetView(self, view: ViewInfo) -> None: ...
    @overload
    def Size(self) -> Size: ...
    @overload
    @staticmethod
    def StandardChannelForGuid(id: Guid) -> StandardChannels: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class RenderWindowClonedEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def NewRenderWindow(self) -> RenderWindow: ...
    @property
    def NewSessionId(self) -> Guid: ...
    @property
    def OldRenderWindow(self) -> RenderWindow: ...
    @property
    def OldSessionId(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import EventHandler
class SafeFrame(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, doc: RhinoDoc): ...
    @overload
    def __init__(self, sf: SafeFrame): ...
    @overload
    @staticmethod
    def add_Changed(value: EventHandler) -> None: ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ActionFrameLinked(self) -> bool: ...
    @property
    def ActionFrameOn(self) -> bool: ...
    @property
    def ActionFrameXScale(self) -> float: ...
    @property
    def ActionFrameYScale(self) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FieldsOn(self) -> bool: ...
    @property
    def LiveFrameOn(self) -> bool: ...
    @property
    def PerspectiveOnly(self) -> bool: ...
    @property
    def TitleFrameLinked(self) -> bool: ...
    @property
    def TitleFrameOn(self) -> bool: ...
    @property
    def TitleFrameXScale(self) -> float: ...
    @property
    def TitleFrameYScale(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_Changed(value: EventHandler) -> None: ...
    @ActionFrameLinked.setter
    def ActionFrameLinked(self, value: bool) -> None: ...
    @ActionFrameOn.setter
    def ActionFrameOn(self, value: bool) -> None: ...
    @ActionFrameXScale.setter
    def ActionFrameXScale(self, value: float) -> None: ...
    @ActionFrameYScale.setter
    def ActionFrameYScale(self, value: float) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @FieldsOn.setter
    def FieldsOn(self, value: bool) -> None: ...
    @LiveFrameOn.setter
    def LiveFrameOn(self, value: bool) -> None: ...
    @PerspectiveOnly.setter
    def PerspectiveOnly(self, value: bool) -> None: ...
    @TitleFrameLinked.setter
    def TitleFrameLinked(self, value: bool) -> None: ...
    @TitleFrameOn.setter
    def TitleFrameOn(self, value: bool) -> None: ...
    @TitleFrameXScale.setter
    def TitleFrameXScale(self, value: float) -> None: ...
    @TitleFrameYScale.setter
    def TitleFrameYScale(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Geometry import Mesh
class SceneObject:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Material(self) -> RenderMaterial: ...
    @property
    def Mesh(self) -> Mesh: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
class SceneServerData:
    @overload
    def __init__(self, appearance: PreviewAppearance, usage: SceneServerDataUsage): ...
    @overload
    def __init__(self, geo: PreviewGeometry, back: PreviewBackground, light: PreviewLighting, usage: SceneServerDataUsage): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class SceneServerDataUsage(Enum):
    Synchronous = 0
    Asynchronous = 1


class ShowContentChooserFlags(Enum):
    # None = 0
    HideNewTab = 1
    HideExistingTab = 2
    MultipleSelection = 4


class ShowContentChooserResults(Enum):
    # None = 0
    New = 1
    Copy = 2
    Instance = 3


from System.Drawing import Color
from System import IntPtr
class SimulatedEnvironment:
    @overload
    def __init__(self): ...
    @overload
    def ConstPointer(self) -> IntPtr: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> SimulatedTexture: ...
    @property
    def BackgroundProjection(self) -> BackgroundProjections: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def ProjectionFromString(projection: str) -> BackgroundProjections: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: SimulatedTexture) -> None: ...
    @BackgroundProjection.setter
    def BackgroundProjection(self, value: BackgroundProjections) -> None: ...
    @overload
    @staticmethod
    def StringFromProjection(projection: BackgroundProjections) -> str: ...
    @overload
    def ToString(self) -> str: ...


from ..DocObjects import Texture
from ..Geometry import Transform
from ..Geometry import Vector2d
from ..Display import Color4f
from System import IntPtr
class SimulatedTexture:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, doc: RhinoDoc): ...
    @overload
    def __init__(self, texture: Texture): ...
    @overload
    def __init__(self, doc: RhinoDoc, texture: Texture): ...
    @overload
    def ConstPointer(self) -> IntPtr: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BitmapSize() -> int: ...
    @property
    def Filename(self) -> str: ...
    @property
    def Filtered(self) -> bool: ...
    @property
    def HasTransparentColor(self) -> bool: ...
    @property
    def LocalMappingTransform(self) -> Transform: ...
    @property
    def MappingChannel(self) -> int: ...
    @property
    def Offset(self) -> Vector2d: ...
    @property
    def OriginalFilename(self) -> str: ...
    @property
    def ProjectionMode(self) -> ProjectionModes: ...
    @property
    def Repeat(self) -> Vector2d: ...
    @property
    def Repeating(self) -> bool: ...
    @property
    def Rotation(self) -> float: ...
    @property
    def TransparentColor(self) -> Color4f: ...
    @property
    def TransparentColorSensitivity(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MetersToUnits(self, doc: RhinoDoc, units: float) -> float: ...
    @BitmapSize.setter
    def BitmapSize(value: int) -> None: ...
    @Filename.setter
    def Filename(self, value: str) -> None: ...
    @Filtered.setter
    def Filtered(self, value: bool) -> None: ...
    @HasTransparentColor.setter
    def HasTransparentColor(self, value: bool) -> None: ...
    @MappingChannel.setter
    def MappingChannel(self, value: int) -> None: ...
    @Offset.setter
    def Offset(self, value: Vector2d) -> None: ...
    @ProjectionMode.setter
    def ProjectionMode(self, value: ProjectionModes) -> None: ...
    @Repeat.setter
    def Repeat(self, value: Vector2d) -> None: ...
    @Repeating.setter
    def Repeating(self, value: bool) -> None: ...
    @Rotation.setter
    def Rotation(self, value: float) -> None: ...
    @TransparentColor.setter
    def TransparentColor(self, value: Color4f) -> None: ...
    @TransparentColorSensitivity.setter
    def TransparentColorSensitivity(self, value: float) -> None: ...
    @overload
    def SetMappingChannelAndProjectionMode(self, pm: ProjectionModes, mappingChannel: int, emm: EnvironmentMappingModes) -> None: ...
    @overload
    def Texture(self) -> Texture: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UnitsToMeters(self, doc: RhinoDoc, units: float) -> float: ...


from System import EventHandler
from System import Guid
class Skylight(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, src: Skylight): ...
    @overload
    @staticmethod
    def add_Changed(value: EventHandler) -> None: ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CustomEnvironment(self) -> Guid: ...
    @property
    def CustomEnvironmentOn(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ShadowIntensity(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_Changed(value: EventHandler) -> None: ...
    @CustomEnvironment.setter
    def CustomEnvironment(self, value: Guid) -> None: ...
    @CustomEnvironmentOn.setter
    def CustomEnvironmentOn(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ShadowIntensity.setter
    def ShadowIntensity(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class StandardChannels(Enum):
    # None = 0
    Red = 1
    Green = 2
    Blue = 4
    Alpha = 8
    RGBA = 14
    RGB = 15
    DistanceFromCamera = 16
    NormalX = 32
    NormalY = 64
    NormalZ = 128
    NormalXYZ = 240
    LuminanceRed = 256
    LuminanceGreen = 512
    LuminanceBlue = 1024
    BackgroundLuminanceRed = 4096
    BackgroundLuminanceGreen = 8192
    BackgroundLuminanceBlue = 16384
    MaterialIds = 65536
    ObjectIds = 131072
    Wireframe = 262144
    AlbedoRed = 1048576
    AlbedoGreen = 2097152
    AlbedoBlue = 4194304
    AlbedoRGB = 7340032
    WireframePointsRGBA = 8388608
    WireframeIsocurvesRGBA = 16777216
    WireframeCurvesRGBA = 33554432
    WireframeAnnotationsRGBA = 67108864


class StandardChildSlots(Enum):
    # None = 0
    Diffuse = 100
    PbrBaseColor = 100
    Transparency = 101
    PbrOpacity = 101
    Bump = 102
    Environment = 103
    PbrSubsurface = 104
    PbrSubSurfaceScattering = 105
    PbrSubsurfaceScatteringRadius = 106
    PbrMetallic = 107
    PbrSpecular = 108
    PbrSpecularTint = 109
    PbrRoughness = 110
    PbrAnisotropic = 111
    PbrAnisotropicRotation = 112
    PbrSheen = 113
    PbrSheenTint = 114
    PbrClearcoat = 115
    PbrClearcoatRoughness = 116
    PbrOpacityIor = 117
    PbrOpacityRoughness = 118
    PbrEmission = 119
    PbrAmbientOcclusion = 120
    PbrDisplacement = 121
    PbrClearcoatBump = 122
    PbrAlpha = 123


from System import EventHandler
from System import DateTime
from ..Geometry import Vector3d
from ..Geometry import Light
from System import DateTimeKind
from System.Drawing import Color
class Sun(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_Changed(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def AltitudeFromValues(latitude: float, longitude: float, timezoneHours: float, daylightMinutes: int, when: DateTime, hours: float, fast: bool) -> float: ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    @staticmethod
    def ColorFromAltitude(altitudeDegrees: float) -> Color: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Accuracy(self) -> Accuracies: ...
    @property
    def Altitude(self) -> float: ...
    @property
    def Azimuth(self) -> float: ...
    @property
    def DaylightSaving(self) -> bool: ...
    @property
    def DaylightSavingMinutes(self) -> int: ...
    @property
    def DaylightSavingOn(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Hash(self) -> int: ...
    @property
    def Intensity(self) -> float: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def Light(self) -> Light: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def ManualControl(self) -> bool: ...
    @property
    def ManualControlOn(self) -> bool: ...
    @property
    def North(self) -> float: ...
    @property
    def SkylightOn(self) -> bool: ...
    @property
    def TimeZone(self) -> float: ...
    @property
    def Vector(self) -> Vector3d: ...
    @overload
    def GetDateTime(self, kind: DateTimeKind) -> DateTime: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Here() -> Tuple[bool, float, float]: ...
    @overload
    @staticmethod
    def JulianDay(timezoneHours: float, daylightMinutes: int, when: DateTime, hours: float) -> float: ...
    @overload
    @staticmethod
    def remove_Changed(value: EventHandler) -> None: ...
    @Accuracy.setter
    def Accuracy(self, value: Accuracies) -> None: ...
    @Altitude.setter
    def Altitude(self, value: float) -> None: ...
    @Azimuth.setter
    def Azimuth(self, value: float) -> None: ...
    @DaylightSaving.setter
    def DaylightSaving(self, value: bool) -> None: ...
    @DaylightSavingMinutes.setter
    def DaylightSavingMinutes(self, value: int) -> None: ...
    @DaylightSavingOn.setter
    def DaylightSavingOn(self, value: bool) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Intensity.setter
    def Intensity(self, value: float) -> None: ...
    @Latitude.setter
    def Latitude(self, value: float) -> None: ...
    @Longitude.setter
    def Longitude(self, value: float) -> None: ...
    @ManualControl.setter
    def ManualControl(self, value: bool) -> None: ...
    @ManualControlOn.setter
    def ManualControlOn(self, value: bool) -> None: ...
    @North.setter
    def North(self, value: float) -> None: ...
    @SkylightOn.setter
    def SkylightOn(self, value: bool) -> None: ...
    @TimeZone.setter
    def TimeZone(self, value: float) -> None: ...
    @Vector.setter
    def Vector(self, value: Vector3d) -> None: ...
    @overload
    def SetDateTime(self, time: DateTime, kind: DateTimeKind) -> None: ...
    @overload
    @staticmethod
    def SunDirection(latitude: float, longitude: float, when: DateTime) -> Vector3d: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TwilightZone() -> float: ...


class SupportOptions:
    @overload
    @staticmethod
    def AlwaysShowSunPreview() -> bool: ...
    @overload
    @staticmethod
    def AutoSaveKeepAmount() -> int: ...
    @overload
    @staticmethod
    def AutoSaveRenderings() -> bool: ...
    @overload
    @staticmethod
    def CheckSupportFilesBeforeRendering() -> bool: ...
    @overload
    @staticmethod
    def CombineEditors() -> bool: ...
    @overload
    @staticmethod
    def DarkPreviewCheckerColor() -> int: ...
    @overload
    @staticmethod
    def EnablePreviewJobLog() -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FileExplorer_CustomPath() -> str: ...
    @overload
    @staticmethod
    def FileExplorer_CustomPathList() -> str: ...
    @overload
    @staticmethod
    def FileExplorer_InitialLocation() -> RdkInitialLocation: ...
    @overload
    @staticmethod
    def FileExplorer_InitialLocationCustomFolder() -> str: ...
    @overload
    @staticmethod
    def FileExplorer_LastNavigatedLocation() -> str: ...
    @overload
    @staticmethod
    def FileExplorer_SetCustomPath(path: str) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetCustomPathList(path: str) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetInitialLocation(l: RdkInitialLocation) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetInitialLocationCustomFolder(path: str) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetLastNavigatedLocation(folder: str) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetShowCustom(b: bool) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetShowDocuments(b: bool) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetShowRenderContent(b: bool) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_SetUseDefaultLocation(b: bool) -> None: ...
    @overload
    @staticmethod
    def FileExplorer_ShowCustom() -> bool: ...
    @overload
    @staticmethod
    def FileExplorer_ShowDocuments() -> bool: ...
    @overload
    @staticmethod
    def FileExplorer_ShowRenderContent() -> bool: ...
    @overload
    @staticmethod
    def FileExplorer_UseDefaultLocation() -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def HarvestContentParameters() -> bool: ...
    @overload
    @staticmethod
    def LabelFormatLoc() -> int: ...
    @overload
    @staticmethod
    def LabelFormatUtc() -> int: ...
    @overload
    @staticmethod
    def Libraries_CustomPath() -> str: ...
    @overload
    @staticmethod
    def Libraries_CustomPathList() -> str: ...
    @overload
    @staticmethod
    def Libraries_InitialLocation() -> RdkInitialLocation: ...
    @overload
    @staticmethod
    def Libraries_InitialLocationCustomFolder() -> str: ...
    @overload
    @staticmethod
    def Libraries_LastNavigatedLocation() -> str: ...
    @overload
    @staticmethod
    def Libraries_SetCustomPath(path: str) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetCustomPathList(path: str) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetInitialLocation(l: RdkInitialLocation) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetInitialLocationCustomFolder(path: str) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetLastNavigatedLocation(folder: str) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetShowCustom(b: bool) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetShowDocuments(b: bool) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetShowRenderContent(b: bool) -> None: ...
    @overload
    @staticmethod
    def Libraries_SetUseDefaultLocation(b: bool) -> None: ...
    @overload
    @staticmethod
    def Libraries_ShowCustom() -> bool: ...
    @overload
    @staticmethod
    def Libraries_ShowDocuments() -> bool: ...
    @overload
    @staticmethod
    def Libraries_ShowRenderContent() -> bool: ...
    @overload
    @staticmethod
    def Libraries_UseDefaultLocation() -> bool: ...
    @overload
    @staticmethod
    def LightPreviewCheckerColor() -> int: ...
    @overload
    @staticmethod
    def MaxPreviewCacheMB() -> int: ...
    @overload
    @staticmethod
    def MaxPreviewSeconds() -> int: ...
    @overload
    @staticmethod
    def MultithreadedTextureEvaluation() -> bool: ...
    @overload
    @staticmethod
    def PreferNativeRenderer() -> bool: ...
    @overload
    @staticmethod
    def PreferredUnpackFolder() -> str: ...
    @overload
    @staticmethod
    def PreviewCustomRenderMeshes() -> bool: ...
    @overload
    @staticmethod
    def SetAlwaysShowSunPreview(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetAutoSaveKeepAmount(value: int) -> None: ...
    @overload
    @staticmethod
    def SetAutoSaveRenderings(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetCheckSupportFilesBeforeRendering(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetCombineEditors(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetHarvestContentParameters(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetLabelFormatLoc(value: int) -> None: ...
    @overload
    @staticmethod
    def SetLabelFormatUtc(value: int) -> None: ...
    @overload
    @staticmethod
    def SetMultithreadedTextureEvaluation(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetPreferNativeRenderer(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetPreferredUnpackFolder(path: str) -> None: ...
    @overload
    @staticmethod
    def SetPreviewCustomRenderMeshes(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetShowDetailsPanel(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetSupportSharedUIs(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetUsePreviewCache(b: bool) -> None: ...
    @overload
    @staticmethod
    def SetUseQuickInitialPreview(b: bool) -> None: ...
    @overload
    @staticmethod
    def ShowDetailsPanel() -> bool: ...
    @overload
    @staticmethod
    def SupportSharedUIs() -> bool: ...
    @overload
    @staticmethod
    def SupportSharedUIsNoCache() -> bool: ...
    @overload
    @staticmethod
    def TextureSize() -> int: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UsePreview() -> bool: ...
    @overload
    @staticmethod
    def UsePreviewCache() -> bool: ...
    @overload
    @staticmethod
    def UseQuickInitialPreview() -> bool: ...
    @overload
    @staticmethod
    def UseRenderedPreview() -> bool: ...


from ..Display import Color4f
class TexturedColor:
    @overload
    def __init__(self, name: str, value: Color4f, on: bool, amount: float): ...
    Name: str
    Value: Color4f
    On: bool
    Amount: float
    Texture: RenderTexture
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class TexturedFloat:
    @overload
    def __init__(self, name: str, value: float, on: bool, amount: float): ...
    Name: str
    Value: float
    On: bool
    Amount: float
    Texture: RenderTexture
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...




class TextureEnvironmentMappingMode(Enum):
    Automatic = 0
    Spherical = 1
    EnvironmentMap = 2
    Box = 3
    LightProbe = 5
    Cube = 6
    VerticalCrossCube = 7
    HorizontalCrossCube = 8
    Hemispherical = 9


from ..Geometry import Point3d
from ..Geometry import Vector3d
from ..Display import Color4f
from ..Runtime.InteropWrappers import SimpleArrayByte
from ..Runtime.InteropWrappers import SimpleArrayFloat
from ..Runtime.InteropWrappers import StdVectorByte
from ..Runtime.InteropWrappers import StdVectorFloat
class TextureEvaluator:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetColor(self, uvw: Point3d, duvwdx: Vector3d, duvwdy: Vector3d) -> Color4f: ...
    @overload
    def GetColor(self, uvw: Point3d, duvwdx: Vector3d, duvwdy: Vector3d, color: Color4f) -> Tuple[bool, Color4f]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Initialize(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WriteToByteArray2(self, width: int, height: int) -> StdVectorByte: ...
    @overload
    def WriteToFloatArray2(self, width: int, height: int) -> StdVectorFloat: ...


class TextureEvaluatorFlags(Enum):
    Normal = 0
    DisableFiltering = 1
    DisableLocalMapping = 2
    DisableAdjustment = 4
    DisableProjectionChange = 8


class TextureGeneration(Enum):
    Allow = 1
    Disallow = 2
    Skip = 3


class TextureGeneration(Enum):
    Allow = 1
    Disallow = 2


from System import IntPtr
class TextureGraphInfo:
    @overload
    def __init__(self): ...
    @overload
    def ActiveAxis(self) -> Axis: ...
    @overload
    def ActiveChannel(self) -> Channel: ...
    @overload
    def AmountU(self) -> float: ...
    @overload
    def AmountV(self) -> float: ...
    @overload
    def AmountW(self) -> float: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetActiveAxis(self, axis: Axis) -> None: ...
    @overload
    def SetActiveChannel(self, channel: Channel) -> None: ...
    @overload
    def SetAmountU(self, d: float) -> None: ...
    @overload
    def SetAmountV(self, d: float) -> None: ...
    @overload
    def SetAmountW(self, d: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from ..Geometry import Transform
from ..DocObjects import ModelComponentType
from ..Geometry import Point3d
from ..Geometry import Vector3d
from ..Geometry import Plane
from ..Geometry import Interval
from ..Geometry import Sphere
from ..Geometry import Cylinder
from ..Geometry import Mesh
from ..Geometry import ComponentStatus
from ..DocObjects.Custom import UserDataList
from ..Collections import ArchivableDictionary
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from ..FileIO import SerializationOptions
from ..DocObjects import ModelComponent
class TextureMapping(ModelComponent):
    @overload
    def ClearId(self) -> None: ...
    @overload
    def ClearIndex(self) -> None: ...
    @overload
    def ClearName(self) -> None: ...
    @overload
    @staticmethod
    def CreateBoxMapping(plane: Plane, dx: Interval, dy: Interval, dz: Interval, capped: bool) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateCustomMeshMapping(mesh: Mesh) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateCylinderMapping(cylinder: Cylinder, capped: bool) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateOcsMapping(plane: Plane) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreatePlaneMapping(plane: Plane, dx: Interval, dy: Interval, dz: Interval) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreatePlaneMapping(plane: Plane, dx: Interval, dy: Interval, dz: Interval, capped: bool) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateSphereMapping(sphere: Sphere) -> TextureMapping: ...
    @overload
    @staticmethod
    def CreateSurfaceParameterMapping() -> TextureMapping: ...
    @overload
    def DataCRC(self, currentRemainder: int) -> int: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsurePrivateCopy(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Evaluate(self, p: Point3d, n: Vector3d) -> Tuple[int, Point3d]: ...
    @overload
    def Evaluate(self, p: Point3d, n: Vector3d, pXform: Transform, nXform: Transform) -> Tuple[int, Point3d]: ...
    @property
    def Capped(self) -> bool: ...
    @property
    def ComponentStatus(self) -> ComponentStatus: ...
    @property
    def ComponentType(self) -> ModelComponentType: ...
    @property
    def DeletedName(self) -> str: ...
    @property
    def Disposed(self) -> bool: ...
    @property
    def HasId(self) -> bool: ...
    @property
    def HasIndex(self) -> bool: ...
    @property
    def HasName(self) -> bool: ...
    @property
    def HasUserData(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IdIsLocked(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IndexIsLocked(self) -> bool: ...
    @property
    def InstanceDefinitionModelSerialNumber(self) -> int: ...
    @property
    def IsComponentStatusLocked(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsDocumentControlled(self) -> bool: ...
    @property
    def IsReference(self) -> bool: ...
    @property
    def IsSystemComponent(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MappingType(self) -> TextureMappingType: ...
    @property
    def ModelSerialNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameIsLocked(self) -> bool: ...
    @property
    def NormalTransform(self) -> Transform: ...
    @property
    def PrimativeTransform(self) -> Transform: ...
    @property
    def PrimitiveTransform(self) -> Transform: ...
    @property
    def Projection(self) -> Projection: ...
    @property
    def ReferenceModelSerialNumber(self) -> int: ...
    @property
    def TextureSpace(self) -> TextureSpace: ...
    @property
    def UserData(self) -> UserDataList: ...
    @property
    def UserDictionary(self) -> ArchivableDictionary: ...
    @property
    def UvwTransform(self) -> Transform: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValidWithLog(self) -> Tuple[bool, str]: ...
    @overload
    def LockId(self) -> None: ...
    @overload
    def LockIndex(self) -> None: ...
    @overload
    def LockName(self) -> None: ...
    @Capped.setter
    def Capped(self, value: bool) -> None: ...
    @ComponentStatus.setter
    def ComponentStatus(self, value: ComponentStatus) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @Index.setter
    def Index(self, value: int) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @NormalTransform.setter
    def NormalTransform(self, value: Transform) -> None: ...
    @PrimativeTransform.setter
    def PrimativeTransform(self, value: Transform) -> None: ...
    @PrimitiveTransform.setter
    def PrimitiveTransform(self, value: Transform) -> None: ...
    @Projection.setter
    def Projection(self, value: Projection) -> None: ...
    @TextureSpace.setter
    def TextureSpace(self, value: TextureSpace) -> None: ...
    @UvwTransform.setter
    def UvwTransform(self, value: Transform) -> None: ...
    @overload
    def ToJSON(self, options: SerializationOptions) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetMappingBox(self) -> Tuple[bool, Plane, Interval, Interval, Interval]: ...
    @overload
    def TryGetMappingBox(self) -> Tuple[bool, Plane, Interval, Interval, Interval, bool]: ...
    @overload
    def TryGetMappingCylinder(self) -> Tuple[bool, Cylinder]: ...
    @overload
    def TryGetMappingCylinder(self) -> Tuple[bool, Cylinder, bool]: ...
    @overload
    def TryGetMappingMesh(self) -> Tuple[bool, Mesh]: ...
    @overload
    def TryGetMappingPlane(self) -> Tuple[bool, Plane, Interval, Interval, Interval]: ...
    @overload
    def TryGetMappingPlane(self) -> Tuple[bool, Plane, Interval, Interval, Interval, bool]: ...
    @overload
    def TryGetMappingSphere(self) -> Tuple[bool, Sphere]: ...


class TextureMappingType(Enum):
    # None = 0
    SurfaceParameters = 1
    PlaneMapping = 2
    CylinderMapping = 3
    SphereMapping = 4
    BoxMapping = 5
    MeshMappingPrimitive = 6
    SurfaceMappingPrimitive = 7
    BrepMappingPrimitive = 8
    OcsMapping = 9
    FalseColors = 10


class TextureMode(Enum):
    PROJECTION_MODE = 0
    MAPPING_CHANNEL_MODE = 1
    WRAP_TYPE_MODE = 2
    REPEAT_LOCKED_MODE = 3
    OFFSET_LOCKED_MODE = 4
    PREVIEW_IN_3D_MODE = 5
    REPEAT_MODE = 6
    OFFSET_MODE = 7
    ROTATION_MODE = 8
    ENVIRONMENT_MAPPING_MODE = 9
    INTERNAL_ENVIRONMENT_MAPPING_MODE = 10
    PREVIEW_LOCAL_MAPPING_MODE = 11
    DISPLAY_IN_VIEWPORT_MODE = 12
    IS_HDR_CAPABLE_MODE = 13
    IS_LINEAR_MODE = 14
    IS_IMAGE_BASED = 15
    IS_NORMALMAP = 16
    PIXELSIZE_AS_3DVECTOR = 17


class TextureProjectionMode(Enum):
    MappingChannel = 0
    View = 1
    Wcs = 2
    EnvironmentMap = 3
    WcsBox = 4
    Screen = 5


class TextureRenderHashFlags(Enum):
    ExcludeLocalMapping = 1


class TextureSpace(Enum):
    Single = 0
    Divided = 1


class TextureWrapType(Enum):
    Clamped = 0
    Repeating = 1


class TimeZone:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Hours(self) -> float: ...
    @property
    def Latitude(self) -> float: ...
    @property
    def Longitude(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def TimeZoneAt(index: int) -> TimeZone: ...
    @overload
    @staticmethod
    def TimeZones() -> int: ...
    @overload
    def ToString(self) -> str: ...


from ..Display import Color4f
from ..Geometry import Transform
from System import Nullable
from ..DocObjects import RhinoObject
from System.Drawing import Bitmap
from ..Geometry import Vector3d
from System import Guid
from System.Collections.Generic import IEnumerable
from System.Drawing import Size
from .Fields import FieldDictionary
from System import IntPtr
from .Fields import Field
from .UI import UserInterfaceSection
from ..UI.Controls import ICollapsibleSection
from .DataSources import ContentFactory
class TwoColorRenderTexture(RenderTexture):
    @overload
    def AddAutomaticUserInterfaceSection(self, caption: str, id: int) -> bool: ...
    @overload
    def AddUserInterfaceSection(self, section: ICollapsibleSection) -> bool: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def BeginCreateDynamicFields(self, automatic: bool) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def BindParameterToField(self, parameterName: str, childSlotName: str, field: Field, setEvent: ChangeContexts) -> None: ...
    @overload
    def ChildSlotAmount(self, childSlotName: str) -> float: ...
    @overload
    def ChildSlotNameFromParamName(self, paramName: str) -> str: ...
    @overload
    def ChildSlotOn(self, childSlotName: str) -> bool: ...
    @overload
    def ConvertUnits(self, from_: UnitSystem, to: UnitSystem) -> None: ...
    @overload
    def CreateDynamicField(self, internalName: str, localName: str, englishName: str, value: object, minValue: object, maxValue: object, sectionId: int) -> bool: ...
    @overload
    def CreateEvaluator(self, evaluatorFlags: TextureEvaluatorFlags) -> TextureEvaluator: ...
    @overload
    def DeleteAllChildren(self, changeContexts: ChangeContexts) -> None: ...
    @overload
    def DeleteChild(self, childSlotName: str, changeContexts: ChangeContexts) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DynamicIcon(self, size: Size, usage: DynamicIconUsage) -> Tuple[bool, Bitmap]: ...
    @overload
    def Edit(self) -> RenderContent: ...
    @overload
    def EndChange(self) -> None: ...
    @overload
    def EndCreateDynamicFields(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Factory(self) -> ContentFactory: ...
    @overload
    def FindChild(self, childSlotName: str) -> RenderContent: ...
    @overload
    def ForDisplay(self) -> RenderContent: ...
    @overload
    def GenerateTextureSimulation(self, bitmap: Bitmap, ef: TextureEvaluatorFlags) -> Tuple[bool, Bitmap]: ...
    @property
    def CanBeEdited(self) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def ChildSlotDisplayName(self) -> str: ...
    @property
    def ChildSlotName(self) -> str: ...
    @property
    def Color1(self) -> Color4f: ...
    @property
    def Color2(self) -> Color4f: ...
    @property
    def CppPointer(self) -> IntPtr: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def DocumentAssoc(self) -> RhinoDoc: ...
    @property
    def DocumentOwner(self) -> RhinoDoc: ...
    @property
    def DocumentRegistered(self) -> RhinoDoc: ...
    @property
    def Fields(self) -> FieldDictionary: ...
    @property
    def Filename(self) -> str: ...
    @property
    def FilesToEmbed(self) -> Iterable[str]: ...
    @property
    def FirstChild(self) -> RenderContent: ...
    @property
    def GroupId(self) -> Guid: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsDefaultInstance(self) -> bool: ...
    @property
    def IsHiddenByAutoDelete(self) -> bool: ...
    @property
    def IsLocked(self) -> bool: ...
    @property
    def LocalMappingTransform(self) -> Transform: ...
    @property
    def Name(self) -> str: ...
    @property
    def NextSibling(self) -> RenderContent: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> RenderContent: ...
    @property
    def PixelSize2(self) -> Nullable: ...
    @property
    def ProxyType(self) -> ProxyTypes: ...
    @property
    def RenderHash(self) -> int: ...
    @property
    def RenderHashWithoutLocalMapping(self) -> int: ...
    @property
    def RenderHashWithoutLocalMappingOrLinearWorkflow(self) -> int: ...
    @property
    def Styles(self) -> RenderContentStyles: ...
    @property
    def SuperSample(self) -> bool: ...
    @property
    def SwapColors(self) -> bool: ...
    @property
    def Tags(self) -> str: ...
    @property
    def Texture1Amount(self) -> float: ...
    @property
    def Texture1On(self) -> bool: ...
    @property
    def Texture2Amount(self) -> float: ...
    @property
    def Texture2On(self) -> bool: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelParent(self) -> RenderContent: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeId(self) -> Guid: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Xml(self) -> str: ...
    @overload
    def GetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetDisplayInViewport(self) -> bool: ...
    @overload
    def GetEmbeddedFilesList(self) -> Iterable[str]: ...
    @overload
    def GetEnvironmentMappingMode(self) -> TextureEnvironmentMappingMode: ...
    @overload
    def GetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInternalEnvironmentMappingMode(self) -> TextureEnvironmentMappingMode: ...
    @overload
    def GetLocalMappingType(self) -> eLocalMappingType: ...
    @overload
    def GetMappingChannel(self) -> int: ...
    @overload
    def GetOffset(self) -> Vector3d: ...
    @overload
    def GetOffsetLocked(self) -> bool: ...
    @overload
    def GetParameter(self, parameterName: str) -> object: ...
    @overload
    def GetPreviewIn3D(self) -> bool: ...
    @overload
    def GetPreviewLocalMapping(self) -> bool: ...
    @overload
    def GetProjectionMode(self) -> TextureProjectionMode: ...
    @overload
    def GetRepeat(self) -> Vector3d: ...
    @overload
    def GetRepeatLocked(self) -> bool: ...
    @overload
    def GetRotation(self) -> Vector3d: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetUiHash(self) -> int: ...
    @overload
    def GetUnderlyingInstances(self, collection: RenderContentCollection) -> Tuple[bool, RenderContentCollection]: ...
    @overload
    def GetWrapType(self) -> TextureWrapType: ...
    @overload
    def GraphInfo(self, tgi: TextureGraphInfo) -> Tuple[TextureGraphInfo]: ...
    @overload
    def Icon(self, size: Size) -> Tuple[bool, Bitmap]: ...
    @overload
    def IsCompatible(self, renderEngineId: Guid) -> bool: ...
    @overload
    def IsContentTypeAcceptableAsChild(self, type: Guid, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, factory: ContentFactory, childSlotName: str) -> bool: ...
    @overload
    def IsFactoryProductAcceptableAsChild(self, kindId: Guid, factoryKind: str, childSlotName: str) -> bool: ...
    @overload
    def IsHdrCapable(self) -> bool: ...
    @overload
    def IsImageBased(self) -> bool: ...
    @overload
    def IsLinear(self) -> bool: ...
    @overload
    def IsNormalMap(self) -> bool: ...
    @overload
    def IsReference(self) -> bool: ...
    @overload
    def MakeCopy(self) -> RenderContent: ...
    @overload
    def MakeGroupInstance(self) -> RenderContent: ...
    @overload
    def MatchData(self, oldContent: RenderContent) -> MatchDataResult: ...
    @overload
    def NewPreviewSceneServer(self, ssd: SceneServerData) -> PreviewSceneServer: ...
    @overload
    def OpenInEditor(self) -> bool: ...
    @overload
    def ParamNameFromChildSlotName(self, childSlotName: str) -> str: ...
    @overload
    def PixelSize(self) -> Tuple[int, int, int]: ...
    @overload
    def RenderHashExclude(self, flags: TextureRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str) -> int: ...
    @overload
    def RenderHashExclude(self, flags: CrcRenderHashFlags, excludeParameterNames: str, lw: LinearWorkflow) -> int: ...
    @overload
    def Replace(self, newcontent: RenderContent) -> bool: ...
    @overload
    def SaveAsImage(self, FullPath: str, width: int, height: int, depth: int) -> bool: ...
    @overload
    def SaveToFile(self, filename: str, embedFilesChoice: EmbedFilesChoice) -> bool: ...
    @ChildSlotName.setter
    def ChildSlotName(self, value: str) -> None: ...
    @Color1.setter
    def Color1(self, value: Color4f) -> None: ...
    @Color2.setter
    def Color2(self, value: Color4f) -> None: ...
    @DocumentAssoc.setter
    def DocumentAssoc(self, value: RhinoDoc) -> None: ...
    @Filename.setter
    def Filename(self, value: str) -> None: ...
    @GroupId.setter
    def GroupId(self, value: Guid) -> None: ...
    @Hidden.setter
    def Hidden(self, value: bool) -> None: ...
    @Id.setter
    def Id(self, value: Guid) -> None: ...
    @IsLocked.setter
    def IsLocked(self, value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Notes.setter
    def Notes(self, value: str) -> None: ...
    @SuperSample.setter
    def SuperSample(self, value: bool) -> None: ...
    @SwapColors.setter
    def SwapColors(self, value: bool) -> None: ...
    @Tags.setter
    def Tags(self, value: str) -> None: ...
    @Texture1Amount.setter
    def Texture1Amount(self, value: float) -> None: ...
    @Texture1On.setter
    def Texture1On(self, value: bool) -> None: ...
    @Texture2Amount.setter
    def Texture2Amount(self, value: float) -> None: ...
    @Texture2On.setter
    def Texture2On(self, value: bool) -> None: ...
    @overload
    def SetChild(self, renderContent: RenderContent, childSlotName: str) -> bool: ...
    @overload
    def SetChildSlotAmount(self, childSlotName: str, amount: float, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotOn(self, childSlotName: str, bOn: bool, cc: ChangeContexts) -> None: ...
    @overload
    def SetChildSlotParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetDisplayInViewport(self, value: bool) -> None: ...
    @overload
    def SetDisplayInViewport(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetEnvironmentMappingMode(self, value: TextureEnvironmentMappingMode) -> None: ...
    @overload
    def SetEnvironmentMappingMode(self, value: TextureEnvironmentMappingMode, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetExtraRequirementParameter(self, contentParameterName: str, extraRequirementParameter: str, value: object, sc: ExtraRequirementsSetContexts) -> bool: ...
    @overload
    def SetGraphInfo(self, tgi: TextureGraphInfo) -> None: ...
    @overload
    def SetIsRenderHashRecursive(self, recursive: bool) -> None: ...
    @overload
    def SetMappingChannel(self, value: int, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetName(self, name: str, renameEvents: bool, ensureNameUnique: bool) -> None: ...
    @overload
    def SetOffset(self, value: Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetOffsetLocked(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetParameter(self, parameterName: str, value: object) -> bool: ...
    @overload
    def SetPreviewIn3D(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetPreviewLocalMapping(self, value: bool) -> None: ...
    @overload
    def SetPreviewLocalMapping(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetProjectionMode(self, value: TextureProjectionMode, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRepeat(self, value: Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRepeatLocked(self, value: bool, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetRotation(self, value: Vector3d, changeContext: ChangeContexts) -> None: ...
    @overload
    def SetWrapType(self, value: TextureWrapType, changeContext: ChangeContexts) -> None: ...
    @overload
    def SimulatedTexture(self, tg: TextureGeneration, size: int, obj: RhinoObject) -> SimulatedTexture: ...
    @overload
    def SimulateTexture(self, simulation: SimulatedTexture, tg: TextureGeneration, size: int, obj: RhinoObject) -> Tuple[SimulatedTexture]: ...
    @overload
    def SmartUngroupRecursive(self) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Ungroup(self) -> bool: ...
    @overload
    def UngroupRecursive(self) -> bool: ...
    @overload
    def UseCount(self) -> int: ...
    @overload
    def VirtualIcon(self, size: Size) -> Tuple[bool, Bitmap]: ...


from System import EventHandler
class UndoRedo:
    @overload
    @staticmethod
    def add_UndoRedoChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_UndoRedoEndedChanged(value: EventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_UndoRedoChanged(value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_UndoRedoEndedChanged(value: EventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from System.Collections.Generic import IEnumerable
from System import IntPtr
from System.Drawing import Rectangle
from System.Drawing import Point
class Utilities:
    @overload
    @staticmethod
    def ChangeContentType(oldContent: RenderContent, newType: Guid, harvestParameters: bool) -> RenderContent: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FindFile(doc: RhinoDoc, fullPathToFile: str) -> str: ...
    @overload
    @staticmethod
    def FindFile(doc: RhinoDoc, fullPathToFile: str, unpackFromBitmapTableIfNecessary: bool) -> str: ...
    @property
    def DefaultRenderPlugInId() -> Guid: ...
    @property
    def ShowIncompatibleEnvironments() -> bool: ...
    @property
    def ShowIncompatibleMaterials() -> bool: ...
    @property
    def ShowIncompatibleTextures() -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def GetUnpackedFilesCacheFolder(doc: RhinoDoc, create: bool) -> str: ...
    @overload
    @staticmethod
    def IsCachedTextureFileInUse(textureFileName: str) -> bool: ...
    @overload
    @staticmethod
    def LoadPersistentRenderContentFromFile(docSerialNumber: int, filename: str) -> RenderContent: ...
    @overload
    @staticmethod
    def MoveWindow(hwnd: IntPtr, rect: Rectangle, bRepaint: bool, bRepaintNC: bool) -> None: ...
    @overload
    @staticmethod
    def PromptForSaveImageFileParameters(filename: str, width: int, height: int, colorDepth: int) -> Tuple[str, int, int, int]: ...
    @overload
    @staticmethod
    def SafeFrameEnabled(doc: RhinoDoc) -> bool: ...
    @ShowIncompatibleEnvironments.setter
    def ShowIncompatibleEnvironments(value: bool) -> None: ...
    @ShowIncompatibleMaterials.setter
    def ShowIncompatibleMaterials(value: bool) -> None: ...
    @ShowIncompatibleTextures.setter
    def ShowIncompatibleTextures(value: bool) -> None: ...
    @overload
    @staticmethod
    def SetDefaultRenderPlugIn(pluginId: Guid) -> bool: ...
    @overload
    @staticmethod
    def ShowContentChooser(defaultType: Guid, defaultInstanceId: Guid, kinds: RenderContentKind, instanceIdOut: Guid, flags: ShowContentChooserFlags, doc: RhinoDoc) -> Tuple[ShowContentChooserResults, Guid]: ...
    @overload
    @staticmethod
    def ShowContentChooser(doc: RhinoDoc, defaultType: Guid, defaultInstanceId: Guid, kinds: RenderContentKind, flags: ContentChooserFlags, presetCategory: str, categories: Iterable[str], types: Iterable[Guid]) -> Tuple[ShowContentChooserResults, Iterable[Guid]]: ...
    @overload
    @staticmethod
    def ShowContentChooser(doc: RhinoDoc, defaultType: Guid, defaultInstanceId: Guid, kinds: RenderContentKind, flags: ShowContentChooserFlags, presetCategory: str, categories: Iterable[str], types: Iterable[Guid]) -> Tuple[ShowContentChooserResults, Iterable[Guid]]: ...
    @overload
    @staticmethod
    def ShowIORMenu(hwnd: IntPtr, pt: Point, outIOR: float, outString: str) -> Tuple[bool, float, str]: ...
    @overload
    def ToString(self) -> str: ...
