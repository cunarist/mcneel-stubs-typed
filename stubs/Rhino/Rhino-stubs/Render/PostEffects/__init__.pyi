from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class CustomPostEffectAttribute:
    @overload
    def __init__(self, postEffectType: PostEffectType, name: str, styles: PostEffectStyles, executeWhileRenderingOption: PostEffectExecuteWhileRenderingOptions, canDisplayHelp: bool, executeWhileRenderingDelay: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CanDisplayHelp(self) -> bool: ...
    @overload
    @property
    def ExecuteWhileRenderingDelay(self) -> int: ...
    @overload
    @property
    def ExecuteWhileRenderingOption(self) -> PostEffectExecuteWhileRenderingOptions: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def PostEffectType(self) -> PostEffectType: ...
    @overload
    @property
    def Styles(self) -> PostEffectStyles: ...
    @overload
    @property
    def TypeId(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: Object) -> bool: ...
    @overload
    @CanDisplayHelp.setter
    def CanDisplayHelp(self, value: bool) -> None: ...
    @overload
    @ExecuteWhileRenderingDelay.setter
    def ExecuteWhileRenderingDelay(self, value: int) -> None: ...
    @overload
    @ExecuteWhileRenderingOption.setter
    def ExecuteWhileRenderingOption(self, value: PostEffectExecuteWhileRenderingOptions) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    @PostEffectType.setter
    def PostEffectType(self, value: PostEffectType) -> None: ...
    @overload
    @Styles.setter
    def Styles(self, value: PostEffectStyles) -> None: ...
    @overload
    def ToString(self) -> str: ...


class IPostEffects:
    @overload
    def GetPostEffects(self, type: PostEffectType) -> Iterable[PostEffect]: ...
    @overload
    def PostEffectFromId(self, uuid: Guid) -> PostEffect: ...


from ...PlugIns import PlugIn
from .. import RhinoDoc
class PostEffect:
    @overload
    def __init__(self): ...
    @overload
    def AddUISections(self, ui: PostEffectUI) -> None: ...
    @overload
    def BeginChange(self, changeContext: ChangeContexts) -> None: ...
    @overload
    def CanExecute(self, pipeline: PostEffectPipeline) -> bool: ...
    @overload
    def Changed(self) -> None: ...
    @overload
    def DisplayHelp(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Execute(self, pipeline: PostEffectPipeline, rect: Rectangle) -> bool: ...
    @overload
    @property
    def CanDisplayHelp(self) -> bool: ...
    @overload
    @property
    def ExecuteWhileRenderingOption(self) -> PostEffectExecuteWhileRenderingOptions: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def IsSelected(self) -> bool: ...
    @overload
    @property
    def LocalName(self) -> str: ...
    @overload
    @property
    def On(self) -> bool: ...
    @overload
    @property
    def PostEffectType(self) -> PostEffectType: ...
    @overload
    @property
    def RequiredChannels(self) -> Iterable[Guid]: ...
    @overload
    @property
    def SerialNumber(self) -> int: ...
    @overload
    @property
    def Shown(self) -> bool: ...
    @overload
    @property
    def Styles(self) -> PostEffectStyles: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetParam(self, param: str, v: Object) -> Tuple[bool, Object]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ReadState(self, state: PostEffectState) -> bool: ...
    @overload
    @staticmethod
    def RegisterPostEffect(plugin: PlugIn) -> Iterable[type]: ...
    @overload
    @staticmethod
    def RegisterPostEffect(assembly: Assembly, pluginId: Guid) -> Iterable[type]: ...
    @overload
    def ResetToFactoryDefaults(self) -> None: ...
    @overload
    @On.setter
    def On(self, value: bool) -> None: ...
    @overload
    @SerialNumber.setter
    def SerialNumber(self, value: int) -> None: ...
    @overload
    @Shown.setter
    def Shown(self, value: bool) -> None: ...
    @overload
    def SetParam(self, param: str, v: Object) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WriteState(self, state: PostEffectState) -> Tuple[bool, PostEffectState]: ...


class PostEffectChannel:
    @overload
    def Clone(self) -> PostEffectChannel: ...
    @overload
    def Commit(self) -> None: ...
    @overload
    def CPU(self) -> Channel: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def PixelSize(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GPU(self) -> ChannelGPU: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectCollection(DocumentOrFreeFloatingBase):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, c: PostEffectCollection): ...
    def __iter__(self) -> Iterator[PostEffectData]: ...
    @overload
    def BeginChange(self, cc: ChangeContexts) -> None: ...
    @overload
    def CopyFrom(self, src: FreeFloatingBase) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EndChange(self) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSelectedPostEffect(self, type: PostEffectType) -> Tuple[bool, Guid]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MovePostEffectBefore(self, id_move: Guid, id_before: Guid) -> bool: ...
    @overload
    def PostEffectDataFromId(self, id: Guid) -> PostEffectData: ...
    @overload
    def SetSelectedPostEffect(self, type: PostEffectType, id: Guid) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectData:
    @overload
    def DataCRC(self, current_remainder: UInt32) -> UInt32: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Collection(self) -> PostEffectCollection: ...
    @overload
    @property
    def Id(self) -> Guid: ...
    @overload
    @property
    def LocalName(self) -> str: ...
    @overload
    @property
    def On(self) -> bool: ...
    @overload
    @property
    def Shown(self) -> bool: ...
    @overload
    @property
    def Type(self) -> PostEffectType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetParameter(self, param_name: str) -> IConvertible: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @On.setter
    def On(self, value: bool) -> None: ...
    @overload
    @Shown.setter
    def Shown(self, value: bool) -> None: ...
    @overload
    def SetParameter(self, param_name: str, param_value: Object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectExecuteContexts(Enum):
    ProductionRendering = 0
    RealtimeRendering = 1
    ViewportDisplay = 2
    ThumbnailCreation = 3
    ConvertingToHDR = 4


class PostEffectExecuteWhileRenderingOptions(Enum):
    # None = 0
    Never = 0
    Always = 1
    UseDelay = 2
    UseExecutionControl = 3


class PostEffectExecutionControl:
    @overload
    def __init__(self): ...
    @overload
    def Detach(self) -> IntPtr: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ReadyToExecutePostEffect(self, pep_id: Guid) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectHistograms(Enum):
    # None = 0
    BeforeEarlyEffects = 1
    BeforeToneMapping = 2
    AfterEarlyEffects = 2
    AfterToneMapping = 4
    BeforeLateEffects = 4
    ToneMappingDisplay = 6
    AfterLateEffects = 8
    All = 15


class PostEffectJob:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> PostEffectJob: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Dispose(self, bDisposing: bool) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Execute(self, rect: Rectangle, access: PostEffectJobChannels) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectJobChannels:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetChannel(self, channelId: Guid) -> PostEffectChannel: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectPipeline:
    @overload
    def Dimensions(self) -> Size: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Execute(self, p: Rectangle, renderingInProgress: bool, usageContexts: PostEffectExecuteContexts, histogramsToUpdate: PostEffectHistograms) -> bool: ...
    @overload
    def ExecutionOrder(self) -> Iterable[Guid]: ...
    @overload
    @property
    def GPUAllowed(self) -> bool: ...
    @overload
    @property
    def IsRendering(self) -> bool: ...
    @overload
    @property
    def RenderingId(self) -> Guid: ...
    @overload
    def GetChannelForRead(self, id: Guid) -> PostEffectChannel: ...
    @overload
    def GetChannelForWrite(self, id: Guid) -> PostEffectChannel: ...
    @overload
    def GetEndTimeInMilliseconds(self) -> UInt64: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMaxLuminance(self) -> float: ...
    @overload
    def GetStartTimeInMilliseconds(self) -> UInt64: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetStartTimeInMilliseconds(self, ms: UInt64) -> None: ...
    @overload
    def ThreadEngine(self) -> PostEffectThreadEngine: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectState:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetValue(self, name: str, vValue: T) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetValue(self, name: str) -> Tuple[bool, T]: ...


class PostEffectStyles(Enum):
    ExecuteForProductionRendering = 1
    ExecuteForRealtimeRendering = 2
    ExecuteForViewportDisplay = 4
    Fixed = 256
    DefaultShown = 512
    DefaultOn = 1024


class PostEffectThreadEngine:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RunPostEffect(self, job: PostEffectJob, pipeline: PostEffectPipeline, plugin: PostEffect, rect: Rectangle, channels: Iterable[Guid]) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectType(Enum):
    Early = 0
    ToneMapping = 1
    Late = 2


from ...UI.Controls import ICollapsibleSection
class PostEffectUI:
    @overload
    def AddSection(self, section: ICollapsibleSection) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PostEffectUuids:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bloom() -> Guid: ...
    @overload
    @property
    def BriCon() -> Guid: ...
    @overload
    @property
    def DepthOfField() -> Guid: ...
    @overload
    @property
    def Dithering() -> Guid: ...
    @overload
    @property
    def Fog() -> Guid: ...
    @overload
    @property
    def Gamma() -> Guid: ...
    @overload
    @property
    def GaussianBlur() -> Guid: ...
    @overload
    @property
    def Glare() -> Guid: ...
    @overload
    @property
    def Glow() -> Guid: ...
    @overload
    @property
    def HueSatLum() -> Guid: ...
    @overload
    @property
    def Multiplier() -> Guid: ...
    @overload
    @property
    def Noise() -> Guid: ...
    @overload
    @property
    def ToneMapper_BlackWhitePoint() -> Guid: ...
    @overload
    @property
    def ToneMapper_Clamp() -> Guid: ...
    @overload
    @property
    def ToneMapper_FalseColor() -> Guid: ...
    @overload
    @property
    def ToneMapper_Filmic() -> Guid: ...
    @overload
    @property
    def ToneMapper_Logarithmic() -> Guid: ...
    @overload
    @property
    def Watermark() -> Guid: ...
    @overload
    @property
    def WireframeAnnotationsRGBA() -> Guid: ...
    @overload
    @property
    def WireframeCurvesRGBA() -> Guid: ...
    @overload
    @property
    def WireframeIsocurvesRGBA() -> Guid: ...
    @overload
    @property
    def WireframePointsRGBA() -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
