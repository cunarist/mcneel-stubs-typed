from typing import Tuple, Iterable, Iterator, overload
from enum import Enum



class GH_Audience(Enum):
    Beginner = 0
    Intermediate = 1
    Expert = 2


class GH_ContentCollection:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Content(self) -> List: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> IGH_Content: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Format:
    @overload
    @staticmethod
    def Create(content: str, style: GH_Style) -> GH_Format: ...
    @overload
    @staticmethod
    def Create(content: IGH_Content, style: GH_Style) -> GH_Format: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Content(self) -> IGH_Content: ...
    @property
    def Style(self) -> GH_Style: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_GlossaryItem:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Author(self) -> IGH_Content: ...
    @property
    def Contact(self) -> IGH_Content: ...
    @property
    def Descriptions(self) -> List: ...
    @property
    def Path(self) -> str: ...
    @property
    def Pronunciation(self) -> IGH_Content: ...
    @property
    def Synonyms(self) -> ReadOnlyCollection: ...
    @property
    def Word(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def ParseFile(path: str) -> GH_GlossaryItem: ...
    def ToString(self) -> str: ...


class GH_Link:
    @overload
    @staticmethod
    def CreateExternalLink(text: str, url: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateExternalLink(text: str, url: str, tooltip: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateGlossaryLink(text: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateGlossaryLink(text: str, glossaryEntry: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateSharedLink(linkId: str, target: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateSharedLink(linkId: str, target: str, tooltip: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateTopicLink(text: str, topicName: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateTopicLink(text: str, topicName: str, tooltip: str) -> GH_Link: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Destination(self) -> str: ...
    @property
    def IsSharedLink(self) -> bool: ...
    @property
    def LinkId(self) -> str: ...
    @property
    def Target(self) -> GH_Target: ...
    @property
    def Text(self) -> IGH_Content: ...
    @property
    def Tooltip(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_List:
    @overload
    @staticmethod
    def Create(ordered: bool) -> GH_List: ...
    @overload
    @staticmethod
    def Create(ordered: bool, items: Iterable[IGH_Content]) -> GH_List: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Items(self) -> List: ...
    @property
    def Ordered(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Paragraph:
    @overload
    @staticmethod
    def Create(content: str) -> GH_Paragraph: ...
    @overload
    @staticmethod
    def Create(content: Iterable[str]) -> GH_Paragraph: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Content(self) -> IGH_Content: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Parser:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Whitespace() -> Iterable[Char]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def IsChapterHeaderLine(line: str) -> bool: ...
    @staticmethod
    def IsCommentLine(line: str) -> bool: ...
    @overload
    @staticmethod
    def IsLinkLine(line: str) -> bool: ...
    @overload
    @staticmethod
    def IsLinkLine(line: str) -> Tuple[bool, str, str, str]: ...
    @staticmethod
    def IsListLine(line: str) -> bool: ...
    @staticmethod
    def IsParagraphHeaderLine(line: str) -> bool: ...
    @staticmethod
    def IsQuoteLine(line: str) -> bool: ...
    @staticmethod
    def StringToFragment(text: str) -> IGH_Content: ...
    def ToString(self) -> str: ...


class GH_RuntimeFile:
    def ContainsKey(self, key: str) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Content(self, key: str) -> List: ...
    @property
    def Keys(self) -> List: ...
    @property
    def Path(self) -> str: ...
    @property
    def Tags() -> Iterable[str]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def IsTag(text: str) -> bool: ...
    @staticmethod
    def IsTagLine(line: str) -> Tuple[bool, str, str]: ...
    @staticmethod
    def ParseFile(path: str) -> GH_RuntimeFile: ...
    def ToString(self) -> str: ...


class GH_Style(Enum):
    # None = 0
    WeakEmphasis = 1
    StrongEmphasis = 2
    Monospaced = 3
    Boxed = 4
    ChapterHeader = 5
    ParagraphHeader = 6


class GH_Target(Enum):
    Glossary = 0
    Topic = 1
    External = 2


class GH_Text:
    @staticmethod
    def Create(text: str) -> GH_Text: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Text(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Topic:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Description(self, level: GH_Audience) -> GH_ContentCollection: ...
    @property
    def SafeDescription(self, level: GH_Audience) -> GH_ContentCollection: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def ParseFile(path: str) -> GH_Topic: ...
    def ToString(self) -> str: ...


class IGH_Content:
    pass
