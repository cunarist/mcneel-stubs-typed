from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class ColorChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_ColourPickerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_ColourPickerEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DrawSliderChannel:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, slider: GH_SliderBase, G: Graphics, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, slider: GH_SliderBase, G: Graphics) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ColourCube:
    @overload
    def __init__(self, box: Rectangle, space: GH_ColourSpace, color: Point4d): ...
    @overload
    def Average(self, A: Color, B: Color) -> Color: ...
    @overload
    def Average(self, A: Color, B: Color, C: Color, D: Color) -> Color: ...
    @overload
    def Blend(self, A: Color, B: Color, t: float) -> Color: ...
    @overload
    def ColorAtRail(self, pt: PointF) -> Point4d: ...
    @overload
    def ColorAtSlice(self, pt: PointF) -> Point4d: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def BackFace(self) -> GraphicsPath: ...
    @overload
    @property
    def BottomFace(self) -> GraphicsPath: ...
    @overload
    @property
    def C0(self) -> Point: ...
    @overload
    @property
    def C1(self) -> Point: ...
    @overload
    @property
    def C2(self) -> Point: ...
    @overload
    @property
    def C3(self) -> Point: ...
    @overload
    @property
    def C4(self) -> Point: ...
    @overload
    @property
    def C5(self) -> Point: ...
    @overload
    @property
    def C6(self) -> Point: ...
    @overload
    @property
    def C7(self) -> Point: ...
    @overload
    @property
    def Grip(self) -> Rectangle: ...
    @overload
    @property
    def LeftFace(self) -> GraphicsPath: ...
    @overload
    @property
    def Pivot(self) -> Point: ...
    @overload
    @property
    def S0(self) -> Point: ...
    @overload
    @property
    def S1(self) -> Point: ...
    @overload
    @property
    def S2(self) -> Point: ...
    @overload
    @property
    def S3(self) -> Point: ...
    @overload
    @property
    def S4(self) -> Point: ...
    @overload
    @property
    def Shadow(self) -> GraphicsPath: ...
    @overload
    @property
    def Silhouette(self) -> GraphicsPath: ...
    @overload
    @property
    def Slice(self) -> Rectangle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RenderAll(self, G: Graphics) -> None: ...
    @overload
    def RenderBackEdges(self, G: Graphics) -> None: ...
    @overload
    def RenderBackFaces(self, G: Graphics) -> None: ...
    @overload
    def RenderDropShadow(self, G: Graphics) -> None: ...
    @overload
    def RenderEdgeShadows(self, G: Graphics) -> None: ...
    @overload
    def RenderForeEdges(self, G: Graphics) -> None: ...
    @overload
    def RenderGrip(self, G: Graphics) -> None: ...
    @overload
    def RenderPivot(self, G: Graphics) -> None: ...
    @overload
    def RenderSilhouetteEdges(self, G: Graphics) -> None: ...
    @overload
    def RenderSlice(self, G: Graphics) -> None: ...
    @overload
    def RenderSliceDropShadow(self, G: Graphics) -> None: ...
    @overload
    def RenderSliceEdgeShadows(self, G: Graphics) -> None: ...
    @overload
    def RenderSliceSilhouetteEdges(self, G: Graphics) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ColourPickerBase:
    @overload
    def __init__(self): ...
    @overload
    def add_ColorChanged(self, obj: ColorChangedEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, obj: InvalidatedEventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def BackColour(self) -> Color: ...
    @overload
    @property
    def BaseColour(self) -> Color: ...
    @overload
    @property
    def BaseColourBox(self) -> Rectangle: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ChannelBox0(self) -> Rectangle: ...
    @overload
    @property
    def ChannelBox1(self) -> Rectangle: ...
    @overload
    @property
    def ChannelBox2(self) -> Rectangle: ...
    @overload
    @property
    def ChannelBox3(self) -> Rectangle: ...
    @overload
    @property
    def ColourCubeBox(self) -> Rectangle: ...
    @overload
    @property
    def ColourSpace(self) -> GH_ColourSpace: ...
    @overload
    @property
    def Cube(self) -> GH_ColourCube: ...
    @overload
    @property
    def DesiredHeight(self) -> int: ...
    @overload
    @property
    def DrawAlphaSlider(self) -> bool: ...
    @overload
    @property
    def DrawBackground(self) -> bool: ...
    @overload
    @property
    def DrawChannelSliders(self) -> bool: ...
    @overload
    @property
    def DropperPreviewBox(self) -> Rectangle: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def HSVSpaceBox(self) -> Rectangle: ...
    @overload
    @property
    def IsTextInput(self) -> bool: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def PickColour(self) -> Color: ...
    @overload
    @property
    def PickColourBox(self) -> Rectangle: ...
    @overload
    @property
    def RGBSpaceBox(self) -> Rectangle: ...
    @overload
    @property
    def SRCSpaceBox(self) -> Rectangle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def MouseClick(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def MouseDoubleClick(self, args: MouseEventArgs, pt: PointF, owner: Control, transform: Matrix) -> bool: ...
    @overload
    def MouseDown(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def MouseMove(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def MouseUp(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def OnColorChanged(self, intermediate: bool) -> None: ...
    @overload
    def remove_ColorChanged(self, obj: ColorChangedEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, obj: InvalidatedEventHandler) -> None: ...
    @overload
    def Render(self, G: Graphics) -> None: ...
    @overload
    def RespondToEnter(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @overload
    def RespondToEscape(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @overload
    @AutoSize.setter
    def AutoSize(self, Value: bool) -> None: ...
    @overload
    @BackColour.setter
    def BackColour(self, Value: Color) -> None: ...
    @overload
    @Bounds.setter
    def Bounds(self, Value: Rectangle) -> None: ...
    @overload
    @DrawAlphaSlider.setter
    def DrawAlphaSlider(self, Value: bool) -> None: ...
    @overload
    @DrawBackground.setter
    def DrawBackground(self, Value: bool) -> None: ...
    @overload
    @DrawChannelSliders.setter
    def DrawChannelSliders(self, Value: bool) -> None: ...
    @overload
    @Font.setter
    def Font(self, Value: Font) -> None: ...
    @overload
    @Padding.setter
    def Padding(self, Value: Padding) -> None: ...
    @overload
    def SetUiScaling(self, factor: float) -> None: ...
    @overload
    def SetupColourPicker(self, col0: Color, col1: Color, space: GH_ColourSpace) -> None: ...
    @overload
    def SetupColourPicker(self, col0: Color, col1: Point4d, space: GH_ColourSpace) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ColourPickerEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Colour(self) -> Color: ...
    @overload
    @property
    def ColourPicker(self) -> GH_ColourPickerBase: ...
    @overload
    @property
    def Intermediate(self) -> bool: ...
    @overload
    @property
    def Original(self) -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_ColourSpace(Enum):
    # None = 0
    RGB = 1
    HSV = 2


class GH_DigitAlign(Enum):
    Justify = 0
    Left = 1
    Center = 2
    Right = 3


class GH_DigitNumber:
    @overload
    def __init__(self, decimalPlaces: int): ...
    @overload
    def __init__(self, other: GH_DigitNumber): ...
    @overload
    def __init__(self, decimalPlaces: int, radixPosition: int): ...
    @overload
    def AssignOffset(self, index: int, offset: Decimal) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def DigitCount(self) -> int: ...
    @overload
    @property
    def Epsilon(self) -> Decimal: ...
    @overload
    @property
    def IsPrimaryDigitSignificant(self) -> Sequence[bool]: ...
    @overload
    @property
    def IsSecondaryDigitSignificant(self) -> Sequence[bool]: ...
    @overload
    @property
    def Maximum(self) -> Decimal: ...
    @overload
    @property
    def Minimum(self) -> Decimal: ...
    @overload
    @property
    def Offset(self) -> Decimal: ...
    @overload
    @property
    def PrimaryDigits(self) -> Iterable[int]: ...
    @overload
    @property
    def PrimaryPositive(self) -> bool: ...
    @overload
    @property
    def Radix(self) -> int: ...
    @overload
    @property
    def RadixIndex(self) -> int: ...
    @overload
    @property
    def SecondaryDigits(self) -> Iterable[int]: ...
    @overload
    @property
    def SecondaryPositive(self) -> bool: ...
    @overload
    @property
    def Value(self) -> Decimal: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def LimitValue(self) -> None: ...
    @overload
    def Reset(self) -> None: ...
    @overload
    def Round(self) -> None: ...
    @overload
    @Maximum.setter
    def Maximum(self, Value: Decimal) -> None: ...
    @overload
    @Minimum.setter
    def Minimum(self, Value: Decimal) -> None: ...
    @overload
    @PrimaryPositive.setter
    def PrimaryPositive(self, Value: bool) -> None: ...
    @overload
    @Radix.setter
    def Radix(self, Value: int) -> None: ...
    @overload
    @Value.setter
    def Value(self, Value: Decimal) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Gradient import GH_Gradient
class GH_DigitScrollerBase(GH_TextBoxInputBase):
    @overload
    def __init__(self): ...
    @overload
    def add_Invalidated(self, obj: InvalidatedEventHandler) -> None: ...
    @overload
    def add_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def AllowRadixDrag(self) -> bool: ...
    @overload
    @property
    def AllowTextInput(self) -> bool: ...
    @overload
    @property
    def AmplifyMotion(self) -> bool: ...
    @overload
    @property
    def BackgroundGradient(self) -> GH_Gradient: ...
    @overload
    @property
    def BottomColour(self) -> Color: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def DecimalPlaces(self) -> int: ...
    @overload
    @property
    def DigitAlign(self) -> GH_DigitAlign: ...
    @overload
    @property
    def Digits(self) -> int: ...
    @overload
    @property
    def DrawBackground(self) -> bool: ...
    @overload
    @property
    def DrawBorder(self) -> bool: ...
    @overload
    @property
    def DrawShadows(self) -> bool: ...
    @overload
    @property
    def EdgeColour(self) -> Color: ...
    @overload
    @property
    def Epsilon(self) -> Decimal: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def IsTextInput(self) -> bool: ...
    @overload
    @property
    def MaximumValue(self) -> Decimal: ...
    @overload
    @property
    def MinimumValue(self) -> Decimal: ...
    @overload
    @property
    def Prefix(self) -> str: ...
    @overload
    @property
    def PrefixBox(self) -> Rectangle: ...
    @overload
    @property
    def Radix(self) -> int: ...
    @overload
    @property
    def RadixBox(self) -> Rectangle: ...
    @overload
    @property
    def RailColour(self) -> Color: ...
    @overload
    @property
    def RaiseEvents(self) -> bool: ...
    @overload
    @property
    def ScrollBoxes(self) -> List: ...
    @overload
    @property
    def ShadowColour(self) -> Color: ...
    @overload
    @property
    def ShadowSize(self) -> Padding: ...
    @overload
    @property
    def SignBox(self) -> Rectangle: ...
    @overload
    @property
    def Suffix(self) -> str: ...
    @overload
    @property
    def SuffixBox(self) -> Rectangle: ...
    @overload
    @property
    def TextColour(self) -> Color: ...
    @overload
    @property
    def TopColour(self) -> Color: ...
    @overload
    @property
    def Value(self) -> Decimal: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HideTextInputBox(self) -> None: ...
    @overload
    def MouseDown(self, args: MouseEventArgs, pt: PointF) -> GH_MouseAction: ...
    @overload
    def MouseMove(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def MouseUp(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def OnInvalidated(self) -> None: ...
    @overload
    def OnValueChanged(self, intermediate: bool) -> None: ...
    @overload
    def remove_Invalidated(self, obj: InvalidatedEventHandler) -> None: ...
    @overload
    def remove_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @overload
    def Render(self, G: Graphics) -> None: ...
    @overload
    def RespondToEnter(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @overload
    def RespondToEscape(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @overload
    @AllowRadixDrag.setter
    def AllowRadixDrag(self, Value: bool) -> None: ...
    @overload
    @AllowTextInput.setter
    def AllowTextInput(self, Value: bool) -> None: ...
    @overload
    @AmplifyMotion.setter
    def AmplifyMotion(self, Value: bool) -> None: ...
    @overload
    @BackgroundGradient.setter
    def BackgroundGradient(self, Value: GH_Gradient) -> None: ...
    @overload
    @BottomColour.setter
    def BottomColour(self, Value: Color) -> None: ...
    @overload
    @Bounds.setter
    def Bounds(self, Value: Rectangle) -> None: ...
    @overload
    @DecimalPlaces.setter
    def DecimalPlaces(self, Value: int) -> None: ...
    @overload
    @DigitAlign.setter
    def DigitAlign(self, Value: GH_DigitAlign) -> None: ...
    @overload
    @Digits.setter
    def Digits(self, Value: int) -> None: ...
    @overload
    @DrawBackground.setter
    def DrawBackground(self, Value: bool) -> None: ...
    @overload
    @DrawBorder.setter
    def DrawBorder(self, Value: bool) -> None: ...
    @overload
    @DrawShadows.setter
    def DrawShadows(self, Value: bool) -> None: ...
    @overload
    @EdgeColour.setter
    def EdgeColour(self, Value: Color) -> None: ...
    @overload
    @Font.setter
    def Font(self, Value: Font) -> None: ...
    @overload
    @MaximumValue.setter
    def MaximumValue(self, Value: Decimal) -> None: ...
    @overload
    @MinimumValue.setter
    def MinimumValue(self, Value: Decimal) -> None: ...
    @overload
    @Prefix.setter
    def Prefix(self, Value: str) -> None: ...
    @overload
    @Radix.setter
    def Radix(self, Value: int) -> None: ...
    @overload
    @RailColour.setter
    def RailColour(self, Value: Color) -> None: ...
    @overload
    @RaiseEvents.setter
    def RaiseEvents(self, Value: bool) -> None: ...
    @overload
    @ShadowColour.setter
    def ShadowColour(self, Value: Color) -> None: ...
    @overload
    @ShadowSize.setter
    def ShadowSize(self, Value: Padding) -> None: ...
    @overload
    @Suffix.setter
    def Suffix(self, Value: str) -> None: ...
    @overload
    @TextColour.setter
    def TextColour(self, Value: Color) -> None: ...
    @overload
    @TopColour.setter
    def TopColour(self, Value: Color) -> None: ...
    @overload
    @Value.setter
    def Value(self, Value: Decimal) -> None: ...
    @overload
    def SetupScroller(self, minimum: Decimal, maximum: Decimal, value: Decimal) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, limitToBoundary: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, limitToBoundary: bool, transform: Matrix) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool, limitToBoundary: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool, limitToBoundary: bool, transform: Matrix) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_DigitScrollerEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Intermediate(self) -> bool: ...
    @overload
    @property
    def Scroller(self) -> GH_DigitScrollerBase: ...
    @overload
    @property
    def Value(self) -> Decimal: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_MouseAction(Enum):
    # None = 0
    SignDown = 1
    DigitDown = 2
    DigitDrag = 3
    RadixDown = 4
    RadixDrag = 5


class GH_ScrollBarVerticalBase:
    @overload
    def __init__(self): ...
    @overload
    def BeginDrag(self, region: RectangleF, start: float) -> None: ...
    @overload
    def ContinueDrag(self, position: float) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Content(self) -> int: ...
    @overload
    @property
    def ContentOffset(self) -> float: ...
    @overload
    @property
    def Display(self) -> int: ...
    @overload
    @property
    def Minimum(self) -> int: ...
    @overload
    @property
    def Offset(self) -> int: ...
    @overload
    @property
    def OffsetNormalised(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ScrollBar(self, rail: Rectangle) -> Rectangle: ...
    @overload
    def ScrollBar(self, rail: RectangleF) -> RectangleF: ...
    @overload
    @Content.setter
    def Content(self, Value: int) -> None: ...
    @overload
    @Display.setter
    def Display(self, Value: int) -> None: ...
    @overload
    @Minimum.setter
    def Minimum(self, Value: int) -> None: ...
    @overload
    @OffsetNormalised.setter
    def OffsetNormalised(self, Value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_SliderAccuracy(Enum):
    Float = 0
    Integer = 1
    Even = 2
    Odd = 3


class GH_SliderBase(GH_TextBoxInputBase):
    @overload
    def __init__(self): ...
    @overload
    def add_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FixDomain(self) -> None: ...
    @overload
    def FixValue(self) -> None: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlBackColour(self) -> Color: ...
    @overload
    @property
    def ControlEdgeColour(self) -> Color: ...
    @overload
    @property
    def ControlShadowColour(self) -> Color: ...
    @overload
    @property
    def DecimalPlaces(self) -> int: ...
    @overload
    @property
    def DrawControlBackground(self) -> bool: ...
    @overload
    @property
    def DrawControlBorder(self) -> bool: ...
    @overload
    @property
    def DrawControlShadows(self) -> bool: ...
    @overload
    @property
    def Epsilon(self) -> Decimal: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def FormatMask(self) -> str: ...
    @overload
    @property
    def Grip(self) -> RectangleF: ...
    @overload
    @property
    def GripBottomColour(self) -> Color: ...
    @overload
    @property
    def GripDisplay(self) -> GH_SliderGripDisplay: ...
    @overload
    @property
    def GripEdgeColour(self) -> Color: ...
    @overload
    @property
    def GripText(self) -> str: ...
    @overload
    @property
    def GripTextPure(self) -> str: ...
    @overload
    @property
    def GripTopColour(self) -> Color: ...
    @overload
    @property
    def GripWidth(self) -> int: ...
    @overload
    @property
    def IsTextInput(self) -> bool: ...
    @overload
    @property
    def Maximum(self) -> Decimal: ...
    @overload
    @property
    def Minimum(self) -> Decimal: ...
    @overload
    @property
    def NormalizedValue(self) -> float: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Rail(self) -> Rectangle: ...
    @overload
    @property
    def RailBrightColour(self) -> Color: ...
    @overload
    @property
    def RailDarkColour(self) -> Color: ...
    @overload
    @property
    def RailDisplay(self) -> GH_SliderRailDisplay: ...
    @overload
    @property
    def RailEmptyColour(self) -> Color: ...
    @overload
    @property
    def RailFullColour(self) -> Color: ...
    @overload
    @property
    def RaiseEvents(self) -> bool: ...
    @overload
    @property
    def RenderDelegate_Background(self) -> DrawSliderChannel: ...
    @overload
    @property
    def RenderDelegate_Border(self) -> DrawSliderChannel: ...
    @overload
    @property
    def RenderDelegate_Grip(self) -> DrawSliderChannel: ...
    @overload
    @property
    def RenderDelegate_Rail(self) -> DrawSliderChannel: ...
    @overload
    @property
    def RenderDelegate_Ticks(self) -> DrawSliderChannel: ...
    @overload
    @property
    def ShadowSize(self) -> Padding: ...
    @overload
    @property
    def SnapDistance(self) -> Decimal: ...
    @overload
    @property
    def TextColour(self) -> Color: ...
    @overload
    @property
    def TextInputHandlerDelegate(self) -> TextInputHandler: ...
    @overload
    @property
    def TickCount(self) -> int: ...
    @overload
    @property
    def TickDisplay(self) -> GH_SliderTickDisplay: ...
    @overload
    @property
    def TickFrequency(self) -> int: ...
    @overload
    @property
    def Ticks(self) -> List: ...
    @overload
    @property
    def Type(self) -> GH_SliderAccuracy: ...
    @overload
    @property
    def Value(self) -> Decimal: ...
    @overload
    @property
    def ValueF(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HideTextInputBox(self) -> None: ...
    @overload
    def KeyDown(self, args: KeyEventArgs) -> bool: ...
    @overload
    def MouseDown(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def MouseMove(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def MouseUp(self, args: MouseEventArgs, pt: PointF) -> bool: ...
    @overload
    def OnValueChanged(self, intermediate: bool) -> None: ...
    @overload
    @staticmethod
    def ProcessNumber(val: Decimal, accuracy: GH_SliderAccuracy, digits: int) -> Decimal: ...
    @overload
    def remove_ValueChanged(self, obj: ValueChangedEventHandler) -> None: ...
    @overload
    def Render(self, G: Graphics) -> None: ...
    @overload
    def RespondToEnter(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @overload
    def RespondToEscape(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @overload
    @Bounds.setter
    def Bounds(self, Value: Rectangle) -> None: ...
    @overload
    @ControlBackColour.setter
    def ControlBackColour(self, Value: Color) -> None: ...
    @overload
    @ControlEdgeColour.setter
    def ControlEdgeColour(self, Value: Color) -> None: ...
    @overload
    @ControlShadowColour.setter
    def ControlShadowColour(self, Value: Color) -> None: ...
    @overload
    @DecimalPlaces.setter
    def DecimalPlaces(self, Value: int) -> None: ...
    @overload
    @DrawControlBackground.setter
    def DrawControlBackground(self, Value: bool) -> None: ...
    @overload
    @DrawControlBorder.setter
    def DrawControlBorder(self, Value: bool) -> None: ...
    @overload
    @DrawControlShadows.setter
    def DrawControlShadows(self, Value: bool) -> None: ...
    @overload
    @Font.setter
    def Font(self, Value: Font) -> None: ...
    @overload
    @FormatMask.setter
    def FormatMask(self, Value: str) -> None: ...
    @overload
    @GripBottomColour.setter
    def GripBottomColour(self, Value: Color) -> None: ...
    @overload
    @GripDisplay.setter
    def GripDisplay(self, Value: GH_SliderGripDisplay) -> None: ...
    @overload
    @GripEdgeColour.setter
    def GripEdgeColour(self, Value: Color) -> None: ...
    @overload
    @GripTopColour.setter
    def GripTopColour(self, Value: Color) -> None: ...
    @overload
    @Maximum.setter
    def Maximum(self, Value: Decimal) -> None: ...
    @overload
    @Minimum.setter
    def Minimum(self, Value: Decimal) -> None: ...
    @overload
    @NormalizedValue.setter
    def NormalizedValue(self, Value: float) -> None: ...
    @overload
    @Padding.setter
    def Padding(self, Value: Padding) -> None: ...
    @overload
    @RailBrightColour.setter
    def RailBrightColour(self, Value: Color) -> None: ...
    @overload
    @RailDarkColour.setter
    def RailDarkColour(self, Value: Color) -> None: ...
    @overload
    @RailDisplay.setter
    def RailDisplay(self, Value: GH_SliderRailDisplay) -> None: ...
    @overload
    @RailEmptyColour.setter
    def RailEmptyColour(self, Value: Color) -> None: ...
    @overload
    @RailFullColour.setter
    def RailFullColour(self, Value: Color) -> None: ...
    @overload
    @RaiseEvents.setter
    def RaiseEvents(self, Value: bool) -> None: ...
    @overload
    @RenderDelegate_Background.setter
    def RenderDelegate_Background(self, Value: DrawSliderChannel) -> None: ...
    @overload
    @RenderDelegate_Border.setter
    def RenderDelegate_Border(self, Value: DrawSliderChannel) -> None: ...
    @overload
    @RenderDelegate_Grip.setter
    def RenderDelegate_Grip(self, Value: DrawSliderChannel) -> None: ...
    @overload
    @RenderDelegate_Rail.setter
    def RenderDelegate_Rail(self, Value: DrawSliderChannel) -> None: ...
    @overload
    @RenderDelegate_Ticks.setter
    def RenderDelegate_Ticks(self, Value: DrawSliderChannel) -> None: ...
    @overload
    @ShadowSize.setter
    def ShadowSize(self, Value: Padding) -> None: ...
    @overload
    @SnapDistance.setter
    def SnapDistance(self, AutoPropertyValue: Decimal) -> None: ...
    @overload
    @TextColour.setter
    def TextColour(self, Value: Color) -> None: ...
    @overload
    @TextInputHandlerDelegate.setter
    def TextInputHandlerDelegate(self, AutoPropertyValue: TextInputHandler) -> None: ...
    @overload
    @TickCount.setter
    def TickCount(self, Value: int) -> None: ...
    @overload
    @TickDisplay.setter
    def TickDisplay(self, Value: GH_SliderTickDisplay) -> None: ...
    @overload
    @TickFrequency.setter
    def TickFrequency(self, Value: int) -> None: ...
    @overload
    @Type.setter
    def Type(self, Value: GH_SliderAccuracy) -> None: ...
    @overload
    @Value.setter
    def Value(self, Value: Decimal) -> None: ...
    @overload
    @ValueF.setter
    def ValueF(self, Value: float) -> None: ...
    @overload
    def SetSnapRanges(self, ranges: Iterable[SliderSnapRange]) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, limitToBoundary: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, limitToBoundary: bool, transform: Matrix) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool, limitToBoundary: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, limitToBoundary: bool, transform: Matrix, content: str) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool, limitToBoundary: bool, transform: Matrix) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_SliderEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Intermediate(self) -> bool: ...
    @overload
    @property
    def Slider(self) -> GH_SliderBase: ...
    @overload
    @property
    def Value(self) -> Decimal: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_SliderGripDisplay(Enum):
    # None = 0
    Numeric = 1
    Shape = 2
    ShapeAndText = 3


class GH_SliderRailDisplay(Enum):
    # None = 0
    Simple = 1
    Etched = 2
    Filled = 3


class GH_SliderTickDisplay(Enum):
    # None = 0
    Simple = 1
    Etched = 2


class GH_TextBoxInputBase:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def IsTextInput(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HideTextInputBox(self) -> None: ...
    @overload
    def RespondToEnter(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @overload
    def RespondToEscape(self) -> GH_ToolstripItemKeyHandlerResult: ...
    @overload
    @Bounds.setter
    def Bounds(self, Value: Rectangle) -> None: ...
    @overload
    @Font.setter
    def Font(self, Value: Font) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool, limitToBoundary: bool) -> None: ...
    @overload
    def ShowTextInputBox(self, owner: Control, content: str, selectContent: bool, limitToBoundary: bool, transform: Matrix) -> None: ...
    @overload
    def ToString(self) -> str: ...


class InvalidatedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: EventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class InvalidatedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: EventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SliderSnapRange:
    @overload
    def __init__(self, value: Decimal): ...
    @overload
    def __init__(self, value0: Decimal, value1: Decimal): ...
    @overload
    def CanMerge(self, other: SliderSnapRange) -> bool: ...
    @overload
    def CompareTo(self, other: SliderSnapRange) -> int: ...
    @overload
    def DistanceTo(self, value: Decimal) -> Decimal: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def IsSingleton(self) -> bool: ...
    @overload
    @property
    def Max(self) -> Decimal: ...
    @overload
    @property
    def Min(self) -> Decimal: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Merge(self, other: SliderSnapRange) -> SliderSnapRange: ...
    @overload
    def SnapValue(self, value: Decimal) -> Decimal: ...
    @overload
    def ToString(self) -> str: ...


class TextInputHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, slider: GH_SliderBase, text: str, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, slider: GH_SliderBase, text: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ValueChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DigitScrollerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DigitScrollerEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ValueChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_SliderEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_SliderEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
