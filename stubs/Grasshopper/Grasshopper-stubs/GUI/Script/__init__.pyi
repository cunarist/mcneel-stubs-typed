from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Reflection import MethodInfo
class CompileCodeRequestEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_ScriptEditor, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_ScriptEditor) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections.ObjectModel import ReadOnlyCollection
from System.Drawing import Size
from System.Windows.Forms import AutoValidate
from System.Drawing import Color
from System.Windows.Forms import ValidationConstraints
from System.Windows.Forms import IButtonControl
from System.Windows.Forms import Form
from System import EventHandler
from System.Windows.Forms import AutoSizeMode
from System.Windows.Forms import FormBorderStyle
from System.Drawing import Rectangle
from System.Drawing import Point
from System.Windows.Forms import DialogResult
from System.ComponentModel import CancelEventHandler
from System.Drawing import Icon
from System.Windows.Forms import MenuStrip
from System.Windows.Forms import Padding
from System.Windows.Forms import MainMenu
from System.Windows.Forms import SizeGripStyle
from System.Windows.Forms import FormStartPosition
from System.Windows.Forms import FormWindowState
from System.Windows.Forms import FormClosingEventHandler
from System.Windows.Forms import FormClosedEventHandler
from System.Windows.Forms import InputLanguageChangedEventHandler
from System.Windows.Forms import InputLanguageChangingEventHandler
from System.Windows.Forms import MdiLayout
from System.Windows.Forms import DpiChangedEventHandler
from System.Windows.Forms import IWin32Window
from System.Windows.Forms import BindingContext
from System.Windows.Forms import Control
from System.Drawing import SizeF
from System.Windows.Forms import AutoScaleMode
from System.Windows.Forms import HScrollProperties
from System.Windows.Forms import VScrollProperties
from System.Windows.Forms import DockPaddingEdges
from System.Windows.Forms import ScrollEventHandler
from System.Windows.Forms import AnchorStyles
from System.Windows.Forms.Layout import LayoutEngine
from System.Drawing import Image
from System.Windows.Forms import ImageLayout
from System.Windows.Forms import ContextMenu
from System.Windows.Forms import ContextMenuStrip
from System.Windows.Forms import Cursor
from System.Windows.Forms import ControlBindingsCollection
from System.Windows.Forms import DockStyle
from System.Drawing import Font
from System.Windows.Forms import RightToLeft
from System.ComponentModel import ISite
from System import Delegate
from System import IAsyncResult
from System.Windows.Forms import Message
from System.Windows.Forms import AccessibleObject
from System.Windows.Forms import AccessibleRole
from System.Windows.Forms import ControlCollection
from System import IntPtr
from System.Drawing import Region
from System.Windows.Forms import IWindowTarget
from System.Windows.Forms import ControlEventHandler
from System.Windows.Forms import DragEventHandler
from System.Windows.Forms import GiveFeedbackEventHandler
from System.Windows.Forms import HelpEventHandler
from System.Windows.Forms import InvalidateEventHandler
from System.Windows.Forms import PaintEventHandler
from System.Windows.Forms import QueryContinueDragEventHandler
from System.Windows.Forms import QueryAccessibilityHelpEventHandler
from System.Windows.Forms import KeyEventHandler
from System.Windows.Forms import KeyPressEventHandler
from System.Windows.Forms import LayoutEventHandler
from System.Windows.Forms import MouseEventHandler
from System.Windows.Forms import PreviewKeyDownEventHandler
from System.Windows.Forms import UICuesEventHandler
from System.Drawing import Graphics
from System.Windows.Forms import DragDropEffects
from System.Drawing import Bitmap
from System.Windows.Forms import GetChildAtPointSkip
from System.Windows.Forms import IContainerControl
from System.Windows.Forms import PreProcessControlState
from System.Windows.Forms import BoundsSpecified
from System.Windows.Forms import ImeMode
from System.ComponentModel import IContainer
from System.Runtime.Remoting import ObjRef
class GH_AssemblyBrowser:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddAssemblies(self, paths: Iterable[str]) -> None: ...
    @overload
    def AddAssembly(self, path: str) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def AssignExtraAssemblies(self, tabName: str, assemblies: Iterable[str]) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def ActiveControl(self) -> Control: ...
    @property
    def ActiveMdiChild(self) -> Form: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def Assemblies(self) -> ReadOnlyCollection: ...
    @property
    def AssembliesChanged(self) -> bool: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @property
    def DesktopLocation(self) -> Point: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMdiChild(self) -> bool: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @property
    def MdiParent(self) -> Form: ...
    @property
    def Menu(self) -> MainMenu: ...
    @property
    def MergedMenu(self) -> MainMenu: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Modal(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @property
    def Owner(self) -> Form: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def ParentForm(self) -> Form: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Region: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowIcon(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Color: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def UpdateUI(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


from System.Drawing import Bitmap
from System.Windows.Forms import MouseEventArgs
from System.Drawing import Rectangle
class GH_BeforeAfterSolveInstanceSnippetButton(GH_ScriptEditorButton):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FormHandleCreated(self, window: GH_ScriptEditor) -> None: ...
    @overload
    def FormHandleDestroyed(self, window: GH_ScriptEditor) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Highlight(self) -> bool: ...
    @property
    def HighlightOnHover(self) -> bool: ...
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PopulateTooltip(self, sender: object, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def RespondToMouseDown(self, window: GH_ScriptEditor, e: MouseEventArgs) -> None: ...
    @Bounds.setter
    def Bounds(self, AutoPropertyValue: Rectangle) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_CodeBlock:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, line: str, readonly: bool): ...
    @overload
    def __init__(self, lines: Iterable[str], readonly: bool): ...
    @overload
    def AddLine(self, line: str) -> None: ...
    @overload
    def AddLines(self, lines: Iterable[str]) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Lines(self) -> Iterable[str]: ...
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @ReadOnly.setter
    def ReadOnly(self, AutoPropertyValue: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections.ObjectModel import ReadOnlyCollection
from System.Collections.Generic import IComparer
from System import Predicate
from System import Action
from System.Collections.Generic import Enumerator
from System import Comparison
from System import Converter
class GH_CodeBlocks:
    @overload
    def __init__(self): ...
    def __iter__(self) -> Iterator[GH_CodeBlock]: ...
    def __getitem__(self, index: int) -> GH_CodeBlock: ...
    def __setitem__(self, index: int, value: GH_CodeBlock): ...
    @overload
    def Add(self, item: GH_CodeBlock) -> None: ...
    @overload
    def Add(self, line: str, readonly: bool) -> None: ...
    @overload
    def Add(self, lines: Iterable[str], readonly: bool) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[GH_CodeBlock]) -> None: ...
    @overload
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: GH_CodeBlock) -> int: ...
    @overload
    def BinarySearch(self, item: GH_CodeBlock, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: GH_CodeBlock, comparer: IComparer) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: GH_CodeBlock) -> bool: ...
    @overload
    def ConvertAll(self, converter: Converter) -> List: ...
    @overload
    def CopyTo(self, array: Iterable[GH_CodeBlock]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[GH_CodeBlock], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[GH_CodeBlock], arrayIndex: int, count: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Exists(self, match: Predicate) -> bool: ...
    @overload
    def Find(self, match: Predicate) -> GH_CodeBlock: ...
    @overload
    def FindAll(self, match: Predicate) -> List: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def FindLast(self, match: Predicate) -> GH_CodeBlock: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetAllLines(self, lines: Iterable[str], readonly: Iterable[bool]) -> Tuple[Iterable[str], Iterable[bool]]: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetMutableCodeBlock(self, index: int) -> GH_CodeBlock: ...
    @overload
    def GetRange(self, index: int, count: int) -> List: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: GH_CodeBlock) -> int: ...
    @overload
    def IndexOf(self, item: GH_CodeBlock, index: int) -> int: ...
    @overload
    def IndexOf(self, item: GH_CodeBlock, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, item: GH_CodeBlock) -> None: ...
    @overload
    def InsertRange(self, index: int, collection: Iterable[GH_CodeBlock]) -> None: ...
    @overload
    def LastIndexOf(self, item: GH_CodeBlock) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_CodeBlock, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_CodeBlock, index: int, count: int) -> int: ...
    @overload
    def MergeConsecutiveBlocks(self) -> int: ...
    @overload
    def Remove(self, item: GH_CodeBlock) -> bool: ...
    @overload
    def RemoveAll(self, match: Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @property
    def Item(self) -> MutableSequence[GH_CodeBlock]: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    @overload
    @staticmethod
    def StringSplit(delim: str, stream: str) -> List: ...
    @overload
    def ToArray(self) -> Iterable[GH_CodeBlock]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TrimExcess(self) -> None: ...
    @overload
    def TrueForAll(self, match: Predicate) -> bool: ...


from System.Reflection import Assembly
class GH_CustomReference:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, path: str, assembly: Assembly): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Path(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Assembly.setter
    def Assembly(self, Value: Assembly) -> None: ...
    @Path.setter
    def Path(self, Value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Windows.Forms import MouseEventArgs
from System.Drawing import Bitmap
from System.Drawing import Rectangle
class GH_FontPickButton(GH_ScriptEditorButton):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FormHandleCreated(self, window: GH_ScriptEditor) -> None: ...
    @overload
    def FormHandleDestroyed(self, window: GH_ScriptEditor) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Highlight(self) -> bool: ...
    @property
    def HighlightOnHover(self) -> bool: ...
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PopulateTooltip(self, sender: object, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def RespondToMouseDown(self, window: GH_ScriptEditor, e: MouseEventArgs) -> None: ...
    @Bounds.setter
    def Bounds(self, AutoPropertyValue: Rectangle) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import DateTime
class GH_HistoricAssembly:
    @overload
    def __init__(self): ...
    Path: str
    Date: DateTime
    @overload
    def CompareTo(self, other: GH_HistoricAssembly) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Bitmap
from System.Windows.Forms import MouseEventArgs
from System.Drawing import Rectangle
class GH_PreviewSnippetButton(GH_ScriptEditorButton):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FormHandleCreated(self, window: GH_ScriptEditor) -> None: ...
    @overload
    def FormHandleDestroyed(self, window: GH_ScriptEditor) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Highlight(self) -> bool: ...
    @property
    def HighlightOnHover(self) -> bool: ...
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PopulateTooltip(self, sender: object, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def RespondToMouseDown(self, window: GH_ScriptEditor, e: MouseEventArgs) -> None: ...
    @Bounds.setter
    def Bounds(self, AutoPropertyValue: Rectangle) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import IGH_DocumentObject
from System import EventHandler
from System.Threading.Tasks import Task
from System.Drawing import Font
from System.Drawing import Point
from System import EventArgs
class GH_ScriptEditor:
    @overload
    def __init__(self, language: GH_ScriptLanguage): ...
    @overload
    def __init__(self, language: GH_ScriptLanguage, owner: IGH_DocumentObject): ...
    InstanceTable: List
    CacheLimit: int
    @overload
    def add_Closed(self, obj: EventHandler) -> None: ...
    @overload
    def add_CompileCodeRequest(self, obj: CompileCodeRequestEventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, obj: EventHandler) -> None: ...
    @overload
    def add_SourceCodeChanged(self, obj: SourceCodeChangedEventHandler) -> None: ...
    @overload
    def AddButton(self, button: GH_ScriptEditorButton) -> None: ...
    @overload
    def AppendSourceCode(self, code: List) -> None: ...
    @overload
    def CacheCurrentScriptAsync(self) -> Task: ...
    @overload
    def CenterFormOnCursor(self, limitToScreen: bool) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def CodeEditor_TextChanged(self) -> None: ...
    @overload
    def CompileTimerTick(self, sender: object, args: EventArgs) -> None: ...
    @overload
    @staticmethod
    def DefaultAssemblyLocations() -> List: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FindScriptEditor(owner: IGH_DocumentObject) -> GH_ScriptEditor: ...
    @overload
    def FocusOnSource(self) -> None: ...
    @property
    def AutoSolveEnabled() -> bool: ...
    @property
    def Cache_AppDataDirectory() -> str: ...
    @property
    def CurrentPosition(self) -> Point: ...
    @property
    def EditorFont(self) -> Font: ...
    @property
    def Language(self) -> GH_ScriptLanguage: ...
    @property
    def Owner(self) -> object: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    @staticmethod
    def GetAllCacheFiles() -> List: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSourceCodeAsync(self) -> Task: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Initialize(self, language: GH_ScriptLanguage, owner: IGH_DocumentObject) -> None: ...
    @overload
    def RegisterAssemblies(self, customReferences: List) -> None: ...
    @overload
    def remove_Closed(self, obj: EventHandler) -> None: ...
    @overload
    def remove_CompileCodeRequest(self, obj: CompileCodeRequestEventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, obj: EventHandler) -> None: ...
    @overload
    def remove_SourceCodeChanged(self, obj: SourceCodeChangedEventHandler) -> None: ...
    @overload
    def RestoreScriptCache(self, path: str) -> None: ...
    @AutoSolveEnabled.setter
    def AutoSolveEnabled(AutoPropertyValue: bool) -> None: ...
    @EditorFont.setter
    def EditorFont(self, Value: Font) -> None: ...
    @Owner.setter
    def Owner(self, AutoPropertyValue: object) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    @overload
    def SetCurrentPosition(self, position: Point) -> None: ...
    @overload
    def SetSourceCode(self, code: GH_CodeBlocks) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, documentEditor: GH_DocumentEditor) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Rectangle
from System.Drawing import Bitmap
from System.Windows.Forms import MouseEventArgs
class GH_ScriptEditorButton:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FormHandleCreated(self, window: GH_ScriptEditor) -> None: ...
    @overload
    def FormHandleDestroyed(self, window: GH_ScriptEditor) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Highlight(self) -> bool: ...
    @property
    def HighlightOnHover(self) -> bool: ...
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PopulateTooltip(self, sender: object, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def RespondToMouseDown(self, window: GH_ScriptEditor, e: MouseEventArgs) -> None: ...
    @Bounds.setter
    def Bounds(self, AutoPropertyValue: Rectangle) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ScriptLanguage(Enum):
    # None = 0
    VB = 1
    CS = 2


from System.Drawing import Rectangle
from System.Drawing import Bitmap
from System.Windows.Forms import MouseEventArgs
class GH_ShrinkEditorButton(GH_ScriptEditorButton):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FormHandleCreated(self, window: GH_ScriptEditor) -> None: ...
    @overload
    def FormHandleDestroyed(self, window: GH_ScriptEditor) -> None: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Frame(self) -> Rectangle: ...
    @property
    def Highlight(self) -> bool: ...
    @property
    def HighlightOnHover(self) -> bool: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Shrink(self) -> bool: ...
    @property
    def Shrunk(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PopulateTooltip(self, sender: object, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def RespondToMouseDown(self, window: GH_ScriptEditor, e: MouseEventArgs) -> None: ...
    @Bounds.setter
    def Bounds(self, AutoPropertyValue: Rectangle) -> None: ...
    @Frame.setter
    def Frame(self, Value: Rectangle) -> None: ...
    @Shrink.setter
    def Shrink(self, Value: bool) -> None: ...
    @Shrunk.setter
    def Shrunk(self, Value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Reflection import MethodInfo
class SourceCodeChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_ScriptEditor, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_ScriptEditor) -> None: ...
    @overload
    def ToString(self) -> str: ...
