from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class GH_CssConstants:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BlockChapter(self) -> GH_CssStyle: ...
    @overload
    @property
    def BlockContent(self) -> GH_CssStyle: ...
    @overload
    @property
    def BlockListTight(self) -> GH_CssStyle: ...
    @overload
    @property
    def BlockParagraph(self) -> GH_CssStyle: ...
    @overload
    @property
    def BlockSection(self) -> GH_CssStyle: ...
    @overload
    @property
    def BlockSeparator(self) -> GH_CssStyle: ...
    @overload
    @property
    def BlockTight(self) -> GH_CssStyle: ...
    @overload
    @property
    def ColourBackground(self) -> Color: ...
    @overload
    @property
    def ColourChapterBackground(self) -> Color: ...
    @overload
    @property
    def ColourFakeFaint(self) -> Color: ...
    @overload
    @property
    def ColourForeground(self) -> Color: ...
    @overload
    @property
    def ColourSectionBackground(self) -> Color: ...
    @overload
    @property
    def Default(self) -> GH_CssStyle: ...
    @overload
    @property
    def Text(self) -> GH_CssStyle: ...
    @overload
    @property
    def TextChapter(self) -> GH_CssStyle: ...
    @overload
    @property
    def TextFaint(self) -> GH_CssStyle: ...
    @overload
    @property
    def TextFaintCheat(self) -> GH_CssStyle: ...
    @overload
    @property
    def TextMonospace(self) -> GH_CssStyle: ...
    @overload
    @property
    def TextParagraph(self) -> GH_CssStyle: ...
    @overload
    @property
    def TextSection(self) -> GH_CssStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ColourBackground.setter
    def ColourBackground(self) -> MutableSequence[Color]: ...
    @overload
    @ColourChapterBackground.setter
    def ColourChapterBackground(self) -> MutableSequence[Color]: ...
    @overload
    @ColourFakeFaint.setter
    def ColourFakeFaint(self) -> MutableSequence[Color]: ...
    @overload
    @ColourForeground.setter
    def ColourForeground(self) -> MutableSequence[Color]: ...
    @overload
    @ColourSectionBackground.setter
    def ColourSectionBackground(self) -> MutableSequence[Color]: ...
    @overload
    def ToString(self) -> str: ...


class GH_CssProperty:
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, property: str, value: str): ...
    @overload
    def __init__(self, property: str, values: Iterable[str]): ...
    @overload
    def AddValue(self, value: str) -> None: ...
    @overload
    def AddValues(self, values: Iterable[str]) -> None: ...
    @overload
    def CompareTo(self, other: GH_CssProperty) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FormatCss(self, indent: int) -> str: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Value(self) -> Sequence[int]: ...
    @overload
    @property
    def ValueCount(self) -> int: ...
    @overload
    @property
    def Values(self) -> ReadOnlyCollection: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class GH_CssStyle:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, selector: str): ...
    @overload
    def __init__(self, selector: str, property: GH_CssProperty): ...
    @overload
    def __init__(self, selector: str, properties: Iterable[GH_CssProperty]): ...
    @overload
    def AddComment(self, comment: str) -> None: ...
    @overload
    def AddProperty(self, property: GH_CssProperty) -> None: ...
    @overload
    def AddProperty(self, name: str, value: str) -> None: ...
    @overload
    def CompareTo(self, other: GH_CssStyle) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FormatCss(self, indent: int) -> str: ...
    @overload
    @property
    def Comments(self) -> ReadOnlyCollection: ...
    @overload
    @property
    def IsClassSelector(self) -> bool: ...
    @overload
    @property
    def IsIdSelector(self) -> bool: ...
    @overload
    @property
    def IsPluralSelector(self) -> bool: ...
    @overload
    @property
    def Properties(self) -> ReadOnlyCollection: ...
    @overload
    @property
    def Selector(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Selector.setter
    def Selector(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class GH_CssStyleSheet:
    @overload
    def __init__(self): ...
    @overload
    def AddStyle(self, styles: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FormatCss(self, indent: int) -> str: ...
    @overload
    @property
    def Links(self) -> ReadOnlyCollection: ...
    @overload
    @property
    def Styles(self) -> ReadOnlyCollection: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsStyleDefined(self, style: GH_CssStyle) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import IGH_InstanceDescription
class GH_HtmlFormatter:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nSource: IGH_InstanceDescription): ...
    @overload
    def __init__(self, nSource: IGH_InstanceDescription, nTitle: str): ...
    @overload
    def __init__(self, nSource: IGH_InstanceDescription, nTitle: str, nDescription: str): ...
    @overload
    def AddRemark(self, text: str, forecolour: GH_HtmlFormatterPalette, backcolour: GH_HtmlFormatterPalette) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ContactURI(self) -> str: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Remarks(self) -> List: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def WebPageURI(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def HtmlFormat(self) -> str: ...
    @overload
    @staticmethod
    def HtmlPaletteTag(palette: GH_HtmlFormatterPalette) -> str: ...
    @overload
    @staticmethod
    def ReplaceBoxDrawingCodes(source: str) -> str: ...
    @overload
    @staticmethod
    def ReplaceSpecialCharCodes(source: str) -> str: ...
    @overload
    @ContactURI.setter
    def ContactURI(self) -> MutableSequence[str]: ...
    @overload
    @Description.setter
    def Description(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @WebPageURI.setter
    def WebPageURI(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class GH_HtmlFormatterPalette(Enum):
    Black = 0
    Gray = 1
    White = 2
    Red = 3
    Green = 4
    Blue = 5
    Yellow = 6
    Cyan = 7
    Magenta = 8


from ...Kernel import GH_DocumentObject
class GH_HtmlHelpPopup:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[Object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    @staticmethod
    def CloseAllPopupDialogs() -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: Type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: Object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> Object: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @overload
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @overload
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @overload
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @overload
    @property
    def AccessibleDescription(self) -> str: ...
    @overload
    @property
    def AccessibleName(self) -> str: ...
    @overload
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @overload
    @property
    def ActiveControl(self) -> Control: ...
    @overload
    @property
    def ActiveMdiChild(self) -> Form: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AllowTransparency(self) -> bool: ...
    @overload
    @property
    def Anchor(self) -> AnchorStyles: ...
    @overload
    @property
    def AutoScale(self) -> bool: ...
    @overload
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @overload
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @overload
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @overload
    @property
    def AutoScroll(self) -> bool: ...
    @overload
    @property
    def AutoScrollMargin(self) -> Size: ...
    @overload
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @overload
    @property
    def AutoScrollOffset(self) -> Point: ...
    @overload
    @property
    def AutoScrollPosition(self) -> Point: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @overload
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @overload
    @property
    def BackColor(self) -> Color: ...
    @overload
    @property
    def BackgroundImage(self) -> Image: ...
    @overload
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @overload
    @property
    def BindingContext(self) -> BindingContext: ...
    @overload
    @property
    def Bottom(self) -> int: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def BrowserControl(self) -> WebBrowser: ...
    @overload
    @property
    def CancelButton(self) -> IButtonControl: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def CanSelect(self) -> bool: ...
    @overload
    @property
    def Capture(self) -> bool: ...
    @overload
    @property
    def CausesValidation(self) -> bool: ...
    @overload
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def CompanyName(self) -> str: ...
    @overload
    @property
    def Container(self) -> IContainer: ...
    @overload
    @property
    def ContainsFocus(self) -> bool: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @overload
    @property
    def ControlBox(self) -> bool: ...
    @overload
    @property
    def Controls(self) -> ControlCollection: ...
    @overload
    @property
    def Created(self) -> bool: ...
    @overload
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @overload
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @overload
    @property
    def DesktopLocation(self) -> Point: ...
    @overload
    @property
    def DeviceDpi(self) -> int: ...
    @overload
    @property
    def DialogResult(self) -> DialogResult: ...
    @overload
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @overload
    @property
    def Disposing(self) -> bool: ...
    @overload
    @property
    def Dock(self) -> DockStyle: ...
    @overload
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Focused(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForeColor(self) -> Color: ...
    @overload
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @overload
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    @property
    def HasChildren(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HelpButton(self) -> bool: ...
    @overload
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ImeMode(self) -> ImeMode: ...
    @overload
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    @property
    def IsAccessible(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsHandleCreated(self) -> bool: ...
    @overload
    @property
    def IsMdiChild(self) -> bool: ...
    @overload
    @property
    def IsMdiContainer(self) -> bool: ...
    @overload
    @property
    def IsMirrored(self) -> bool: ...
    @overload
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @overload
    @property
    def KeyPreview(self) -> bool: ...
    @overload
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @overload
    @property
    def Left(self) -> int: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def MaximizeBox(self) -> bool: ...
    @overload
    @property
    def MaximumSize(self) -> Size: ...
    @overload
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @overload
    @property
    def MdiParent(self) -> Form: ...
    @overload
    @property
    def Menu(self) -> MainMenu: ...
    @overload
    @property
    def MergedMenu(self) -> MainMenu: ...
    @overload
    @property
    def MinimizeBox(self) -> bool: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def Modal(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @overload
    @property
    def Owner(self) -> Form: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Control: ...
    @overload
    @property
    def ParentForm(self) -> Form: ...
    @overload
    @property
    def PreferredSize(self) -> Size: ...
    @overload
    @property
    def ProductName(self) -> str: ...
    @overload
    @property
    def ProductVersion(self) -> str: ...
    @overload
    @property
    def RecreatingHandle(self) -> bool: ...
    @overload
    @property
    def Region(self) -> Region: ...
    @overload
    @property
    def RegisteredForms() -> List: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Right(self) -> int: ...
    @overload
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @overload
    @property
    def RightToLeftLayout(self) -> bool: ...
    @overload
    @property
    def ShowIcon(self) -> bool: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Site(self) -> ISite: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @overload
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Top(self) -> int: ...
    @overload
    @property
    def TopLevel(self) -> bool: ...
    @overload
    @property
    def TopLevelControl(self) -> Control: ...
    @overload
    @property
    def TopMost(self) -> bool: ...
    @overload
    @property
    def TransparencyKey(self) -> Color: ...
    @overload
    @property
    def UseWaitCursor(self) -> bool: ...
    @overload
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowState(self) -> FormWindowState: ...
    @overload
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> Object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> Object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> Object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[Object]) -> Object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LoadHTML(self, syntax: str) -> None: ...
    @overload
    def LoadHTML(self, syntax: GH_HtmlFormatter) -> None: ...
    @overload
    def LoadObject(self, obj: GH_DocumentObject) -> bool: ...
    @overload
    def LoadRemoteHTML(self, uri: str) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AcceptButton.setter
    def AcceptButton(self) -> MutableSequence[IButtonControl]: ...
    @overload
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self) -> MutableSequence[str]: ...
    @overload
    @AccessibleDescription.setter
    def AccessibleDescription(self) -> MutableSequence[str]: ...
    @overload
    @AccessibleName.setter
    def AccessibleName(self) -> MutableSequence[str]: ...
    @overload
    @AccessibleRole.setter
    def AccessibleRole(self) -> MutableSequence[AccessibleRole]: ...
    @overload
    @ActiveControl.setter
    def ActiveControl(self) -> MutableSequence[Control]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AllowTransparency.setter
    def AllowTransparency(self) -> MutableSequence[bool]: ...
    @overload
    @Anchor.setter
    def Anchor(self) -> MutableSequence[AnchorStyles]: ...
    @overload
    @AutoScale.setter
    def AutoScale(self) -> MutableSequence[bool]: ...
    @overload
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self) -> MutableSequence[Size]: ...
    @overload
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self) -> MutableSequence[SizeF]: ...
    @overload
    @AutoScaleMode.setter
    def AutoScaleMode(self) -> MutableSequence[AutoScaleMode]: ...
    @overload
    @AutoScroll.setter
    def AutoScroll(self) -> MutableSequence[bool]: ...
    @overload
    @AutoScrollMargin.setter
    def AutoScrollMargin(self) -> MutableSequence[Size]: ...
    @overload
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self) -> MutableSequence[Size]: ...
    @overload
    @AutoScrollOffset.setter
    def AutoScrollOffset(self) -> MutableSequence[Point]: ...
    @overload
    @AutoScrollPosition.setter
    def AutoScrollPosition(self) -> MutableSequence[Point]: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSizeMode.setter
    def AutoSizeMode(self) -> MutableSequence[AutoSizeMode]: ...
    @overload
    @AutoValidate.setter
    def AutoValidate(self) -> MutableSequence[AutoValidate]: ...
    @overload
    @BackColor.setter
    def BackColor(self) -> MutableSequence[Color]: ...
    @overload
    @BackgroundImage.setter
    def BackgroundImage(self) -> MutableSequence[Image]: ...
    @overload
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self) -> MutableSequence[ImageLayout]: ...
    @overload
    @BindingContext.setter
    def BindingContext(self) -> MutableSequence[BindingContext]: ...
    @overload
    @Bounds.setter
    def Bounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    @CancelButton.setter
    def CancelButton(self) -> MutableSequence[IButtonControl]: ...
    @overload
    @Capture.setter
    def Capture(self) -> MutableSequence[bool]: ...
    @overload
    @CausesValidation.setter
    def CausesValidation(self) -> MutableSequence[bool]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @ContextMenuStrip.setter
    def ContextMenuStrip(self) -> MutableSequence[ContextMenuStrip]: ...
    @overload
    @ControlBox.setter
    def ControlBox(self) -> MutableSequence[bool]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DesktopBounds.setter
    def DesktopBounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    @DesktopLocation.setter
    def DesktopLocation(self) -> MutableSequence[Point]: ...
    @overload
    @DialogResult.setter
    def DialogResult(self) -> MutableSequence[DialogResult]: ...
    @overload
    @Dock.setter
    def Dock(self) -> MutableSequence[DockStyle]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @ForeColor.setter
    def ForeColor(self) -> MutableSequence[Color]: ...
    @overload
    @FormBorderStyle.setter
    def FormBorderStyle(self) -> MutableSequence[FormBorderStyle]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @HelpButton.setter
    def HelpButton(self) -> MutableSequence[bool]: ...
    @overload
    @Icon.setter
    def Icon(self) -> MutableSequence[Icon]: ...
    @overload
    @ImeMode.setter
    def ImeMode(self) -> MutableSequence[ImeMode]: ...
    @overload
    @IsAccessible.setter
    def IsAccessible(self) -> MutableSequence[bool]: ...
    @overload
    @IsMdiContainer.setter
    def IsMdiContainer(self) -> MutableSequence[bool]: ...
    @overload
    @KeyPreview.setter
    def KeyPreview(self) -> MutableSequence[bool]: ...
    @overload
    @Left.setter
    def Left(self) -> MutableSequence[int]: ...
    @overload
    @Location.setter
    def Location(self) -> MutableSequence[Point]: ...
    @overload
    @Location.setter
    def Location(self) -> MutableSequence[Point]: ...
    @overload
    @MainMenuStrip.setter
    def MainMenuStrip(self) -> MutableSequence[MenuStrip]: ...
    @overload
    @Margin.setter
    def Margin(self) -> MutableSequence[Padding]: ...
    @overload
    @Margin.setter
    def Margin(self) -> MutableSequence[Padding]: ...
    @overload
    @MaximizeBox.setter
    def MaximizeBox(self) -> MutableSequence[bool]: ...
    @overload
    @MaximumSize.setter
    def MaximumSize(self) -> MutableSequence[Size]: ...
    @overload
    @MdiParent.setter
    def MdiParent(self) -> MutableSequence[Form]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[MainMenu]: ...
    @overload
    @MinimizeBox.setter
    def MinimizeBox(self) -> MutableSequence[bool]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Name.setter
    def Name(self) -> MutableSequence[str]: ...
    @overload
    @Opacity.setter
    def Opacity(self) -> MutableSequence[float]: ...
    @overload
    @Owner.setter
    def Owner(self) -> MutableSequence[Form]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Parent.setter
    def Parent(self) -> MutableSequence[Control]: ...
    @overload
    @Region.setter
    def Region(self) -> MutableSequence[Region]: ...
    @overload
    @RightToLeft.setter
    def RightToLeft(self) -> MutableSequence[RightToLeft]: ...
    @overload
    @RightToLeftLayout.setter
    def RightToLeftLayout(self) -> MutableSequence[bool]: ...
    @overload
    @ShowIcon.setter
    def ShowIcon(self) -> MutableSequence[bool]: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self) -> MutableSequence[bool]: ...
    @overload
    @Site.setter
    def Site(self) -> MutableSequence[ISite]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @SizeGripStyle.setter
    def SizeGripStyle(self) -> MutableSequence[SizeGripStyle]: ...
    @overload
    @StartPosition.setter
    def StartPosition(self) -> MutableSequence[FormStartPosition]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @TabStop.setter
    def TabStop(self) -> MutableSequence[bool]: ...
    @overload
    @TabStop.setter
    def TabStop(self) -> MutableSequence[bool]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @Top.setter
    def Top(self) -> MutableSequence[int]: ...
    @overload
    @TopLevel.setter
    def TopLevel(self) -> MutableSequence[bool]: ...
    @overload
    @TopMost.setter
    def TopMost(self) -> MutableSequence[bool]: ...
    @overload
    @TransparencyKey.setter
    def TransparencyKey(self) -> MutableSequence[Color]: ...
    @overload
    @UseWaitCursor.setter
    def UseWaitCursor(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @WindowState.setter
    def WindowState(self) -> MutableSequence[FormWindowState]: ...
    @overload
    @WindowTarget.setter
    def WindowTarget(self) -> MutableSequence[IWindowTarget]: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def SetLocation(self, pt: Point) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class GH_HtmlListType(Enum):
    # None = 0
    Unordered = 1
    Ordered = 2


class GH_HtmlRemark:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class GH_HtmlTable:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rows: int, columns: int, FirstRowIsHeader: bool): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FormatHtml(self) -> str: ...
    @overload
    @property
    def Border(self) -> int: ...
    @overload
    @property
    def ColumnWidth(self) -> Sequence[int]: ...
    @overload
    @property
    def Content(self) -> Sequence[int]: ...
    @overload
    @property
    def Padding(self) -> int: ...
    @overload
    @property
    def Row(self) -> Sequence[int]: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Border.setter
    def Border(self) -> MutableSequence[int]: ...
    @overload
    @ColumnWidth.setter
    def ColumnWidth(self) -> MutableSequence[int]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[int]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[int]: ...
    @overload
    @Row.setter
    def Row(self) -> MutableSequence[int]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SetAllTextSizes(self, nSize: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_HtmlTableRow:
    @overload
    def __init__(self, n_Cells: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FormatHtml(self) -> str: ...
    @overload
    @property
    def BackColor(self) -> Color: ...
    @overload
    @property
    def Bold(self) -> bool: ...
    @overload
    @property
    def Content(self) -> Sequence[int]: ...
    @overload
    @property
    def ForeColor(self) -> Color: ...
    @overload
    @property
    def Header(self) -> bool: ...
    @overload
    @property
    def Italic(self) -> bool: ...
    @overload
    @property
    def Size(self) -> int: ...
    @overload
    @property
    def Width(self) -> Sequence[int]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @BackColor.setter
    def BackColor(self) -> MutableSequence[Color]: ...
    @overload
    @Bold.setter
    def Bold(self) -> MutableSequence[bool]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[int]: ...
    @overload
    @ForeColor.setter
    def ForeColor(self) -> MutableSequence[Color]: ...
    @overload
    @Header.setter
    def Header(self) -> MutableSequence[bool]: ...
    @overload
    @Italic.setter
    def Italic(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[int]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


class GH_HtmlTextProperties(Enum):
    # None = 0
    Strong = 1
    Emphasis = 2
    SuperScript = 4
    SubScript = 8
    Code = 16


class GH_HtmlWriter:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cssStyles: Iterable[GH_CssStyle]): ...
    @overload
    def ComposeHTMLDocument(self, cssBodyStyles: Iterable[GH_CssStyle]) -> str: ...
    @overload
    def ComposeHTMLDocument(self, cssBodyStyles: Iterable[str]) -> str: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CssStyleSheet(self) -> GH_CssStyleSheet: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WriteBlankSpace(self, height: int) -> None: ...
    @overload
    def WriteComment(self, comment: str) -> None: ...
    @overload
    def WriteDivEnd(self) -> None: ...
    @overload
    def WriteDivStart(self) -> None: ...
    @overload
    def WriteDivStart(self, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WriteDivStart(self, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteHorizontalGradient(self, top: Color, bottom: Color, steps: int, stepHeight: int) -> None: ...
    @overload
    def WriteHorizontalRule(self) -> None: ...
    @overload
    def WriteHorizontalRule(self, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteHorizontalRule(self, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WriteLineBreak(self) -> None: ...
    @overload
    def WriteLink(self, target: str, name: str) -> None: ...
    @overload
    def WriteLink(self, target: str, name: str, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteLink(self, target: str, name: str, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WriteListEnd(self) -> None: ...
    @overload
    def WriteListItem(self, itemContent: str) -> None: ...
    @overload
    def WriteListItem(self, itemContent: str, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteListItem(self, itemContent: str, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WriteListItemEnd(self) -> None: ...
    @overload
    def WriteListItemStart(self) -> None: ...
    @overload
    def WriteListItemStart(self, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WriteListItemStart(self, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteOrderedListStart(self, start: int) -> None: ...
    @overload
    def WriteOrderedListStart(self, start: int, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteOrderedListStart(self, start: int, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WritePreEnd(self) -> None: ...
    @overload
    def WritePreStart(self) -> None: ...
    @overload
    def WritePreStart(self, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WritePreStart(self, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteSpanEnd(self) -> None: ...
    @overload
    def WriteSpanStart(self) -> None: ...
    @overload
    def WriteSpanStart(self, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WriteSpanStart(self, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteText(self, text: str) -> None: ...
    @overload
    def WriteText(self, text: str, cssClasses: Iterable[GH_CssStyle]) -> None: ...
    @overload
    def WriteText(self, text: str, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteText(self, text: str, properties: GH_HtmlTextProperties) -> None: ...
    @overload
    def WriteUnorderedListStart(self) -> None: ...
    @overload
    def WriteUnorderedListStart(self, cssClasses: Iterable[str]) -> None: ...
    @overload
    def WriteUnorderedListStart(self, cssClasses: Iterable[GH_CssStyle]) -> None: ...
