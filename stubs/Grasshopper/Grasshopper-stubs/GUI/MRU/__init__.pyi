from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class FileSelectedEventHandler:
    @overload
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_TimeLine, path: str, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> Object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invoke(self, sender: GH_TimeLine, path: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_FileEntry:
    @overload
    def __init__(self, owner: GH_TimeLine, path: str, date: DateTime, name: str): ...
    @overload
    def CompareTo(self, other: GH_FileEntry) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def FileDate(self) -> DateTime: ...
    @overload
    @property
    def FileName(self) -> str: ...
    @overload
    @property
    def FilePath(self) -> str: ...
    @overload
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    @property
    def ResolvedState(self) -> GH_FileResolveState: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def LayoutWidth(self, width: int) -> None: ...
    @overload
    def PaintEntry(self, graphics: Graphics) -> None: ...
    @overload
    def ResolveFileState(self) -> None: ...
    @overload
    @Bounds.setter
    def Bounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    def ToString(self) -> str: ...


class GH_FileResolveState(Enum):
    Unresolved = 0
    Invalid = 1
    Valid = 2


class GH_MRU_Entry:
    @overload
    def __init__(self, new_date: DateTime, new_path: str): ...
    @overload
    def CompareTo(self, other: GH_MRU_Entry) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def FileDate(self) -> DateTime: ...
    @overload
    @property
    def FileName(self) -> str: ...
    @overload
    @property
    def FilePath(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @FileDate.setter
    def FileDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @FileName.setter
    def FileName(self) -> MutableSequence[str]: ...
    @overload
    @FilePath.setter
    def FilePath(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class GH_MRU_Server:
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_MRURecordCountChanged(obj: MRURecordCountChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_VisibleRecordCountChanged(obj: VisibleRecordCountChangedEventHandler) -> None: ...
    @overload
    def AppendRecentFileRecord(self, new_date: DateTime, new_path: str) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ClearMissingRecords(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def RecordCount(self) -> int: ...
    @overload
    @property
    def Records(self) -> List: ...
    @overload
    @property
    def VisibleRecords() -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ReadList(self) -> None: ...
    @overload
    @staticmethod
    def remove_MRURecordCountChanged(obj: MRURecordCountChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_VisibleRecordCountChanged(obj: VisibleRecordCountChangedEventHandler) -> None: ...
    @overload
    @VisibleRecords.setter
    def VisibleRecords() -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WriteList(self) -> None: ...


class GH_TimeLine(GH_DoubleBufferedPanel):
    @overload
    def __init__(self): ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FileSelected(self, obj: FileSelectedEventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[Object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: Type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: Object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> Object: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @overload
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @overload
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @overload
    @property
    def AccessibleDescription(self) -> str: ...
    @overload
    @property
    def AccessibleName(self) -> str: ...
    @overload
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @overload
    @property
    def ActiveEntry(self) -> GH_FileEntry: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def Anchor(self) -> AnchorStyles: ...
    @overload
    @property
    def AutoScroll(self) -> bool: ...
    @overload
    @property
    def AutoScrollMargin(self) -> Size: ...
    @overload
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @overload
    @property
    def AutoScrollOffset(self) -> Point: ...
    @overload
    @property
    def AutoScrollPosition(self) -> Point: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @overload
    @property
    def BackColor(self) -> Color: ...
    @overload
    @property
    def BackgroundImage(self) -> Image: ...
    @overload
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @overload
    @property
    def BindingContext(self) -> BindingContext: ...
    @overload
    @property
    def BorderStyle(self) -> BorderStyle: ...
    @overload
    @property
    def Bottom(self) -> int: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def CanSelect(self) -> bool: ...
    @overload
    @property
    def Capture(self) -> bool: ...
    @overload
    @property
    def CausesValidation(self) -> bool: ...
    @overload
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def CompanyName(self) -> str: ...
    @overload
    @property
    def Container(self) -> IContainer: ...
    @overload
    @property
    def ContainsFocus(self) -> bool: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @overload
    @property
    def Controls(self) -> ControlCollection: ...
    @overload
    @property
    def Created(self) -> bool: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @overload
    @property
    def DeviceDpi(self) -> int: ...
    @overload
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @overload
    @property
    def Disposing(self) -> bool: ...
    @overload
    @property
    def Dock(self) -> DockStyle: ...
    @overload
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Focused(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForeColor(self) -> Color: ...
    @overload
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    @property
    def HasChildren(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @overload
    @property
    def ImeMode(self) -> ImeMode: ...
    @overload
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    @property
    def IsAccessible(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsHandleCreated(self) -> bool: ...
    @overload
    @property
    def IsMirrored(self) -> bool: ...
    @overload
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @overload
    @property
    def Left(self) -> int: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def MaximumSize(self) -> Size: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Offset(self) -> int: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Control: ...
    @overload
    @property
    def PreferredSize(self) -> Size: ...
    @overload
    @property
    def ProductName(self) -> str: ...
    @overload
    @property
    def ProductVersion(self) -> str: ...
    @overload
    @property
    def RecreatingHandle(self) -> bool: ...
    @overload
    @property
    def Region(self) -> Region: ...
    @overload
    @property
    def Right(self) -> int: ...
    @overload
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @overload
    @property
    def Site(self) -> ISite: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Top(self) -> int: ...
    @overload
    @property
    def TopLevelControl(self) -> Control: ...
    @overload
    @property
    def UseWaitCursor(self) -> bool: ...
    @overload
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> Object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> Object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> Object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[Object]) -> Object: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FileSelected(self, obj: FileSelectedEventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self) -> MutableSequence[str]: ...
    @overload
    @AccessibleDescription.setter
    def AccessibleDescription(self) -> MutableSequence[str]: ...
    @overload
    @AccessibleName.setter
    def AccessibleName(self) -> MutableSequence[str]: ...
    @overload
    @AccessibleRole.setter
    def AccessibleRole(self) -> MutableSequence[AccessibleRole]: ...
    @overload
    @ActiveEntry.setter
    def ActiveEntry(self) -> MutableSequence[GH_FileEntry]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @Anchor.setter
    def Anchor(self) -> MutableSequence[AnchorStyles]: ...
    @overload
    @AutoScroll.setter
    def AutoScroll(self) -> MutableSequence[bool]: ...
    @overload
    @AutoScrollMargin.setter
    def AutoScrollMargin(self) -> MutableSequence[Size]: ...
    @overload
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self) -> MutableSequence[Size]: ...
    @overload
    @AutoScrollOffset.setter
    def AutoScrollOffset(self) -> MutableSequence[Point]: ...
    @overload
    @AutoScrollPosition.setter
    def AutoScrollPosition(self) -> MutableSequence[Point]: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSizeMode.setter
    def AutoSizeMode(self) -> MutableSequence[AutoSizeMode]: ...
    @overload
    @BackColor.setter
    def BackColor(self) -> MutableSequence[Color]: ...
    @overload
    @BackgroundImage.setter
    def BackgroundImage(self) -> MutableSequence[Image]: ...
    @overload
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self) -> MutableSequence[ImageLayout]: ...
    @overload
    @BindingContext.setter
    def BindingContext(self) -> MutableSequence[BindingContext]: ...
    @overload
    @BorderStyle.setter
    def BorderStyle(self) -> MutableSequence[BorderStyle]: ...
    @overload
    @Bounds.setter
    def Bounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    @Capture.setter
    def Capture(self) -> MutableSequence[bool]: ...
    @overload
    @CausesValidation.setter
    def CausesValidation(self) -> MutableSequence[bool]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @ContextMenuStrip.setter
    def ContextMenuStrip(self) -> MutableSequence[ContextMenuStrip]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @Dock.setter
    def Dock(self) -> MutableSequence[DockStyle]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @ForeColor.setter
    def ForeColor(self) -> MutableSequence[Color]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ImeMode.setter
    def ImeMode(self) -> MutableSequence[ImeMode]: ...
    @overload
    @IsAccessible.setter
    def IsAccessible(self) -> MutableSequence[bool]: ...
    @overload
    @Left.setter
    def Left(self) -> MutableSequence[int]: ...
    @overload
    @Location.setter
    def Location(self) -> MutableSequence[Point]: ...
    @overload
    @Margin.setter
    def Margin(self) -> MutableSequence[Padding]: ...
    @overload
    @MaximumSize.setter
    def MaximumSize(self) -> MutableSequence[Size]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Name.setter
    def Name(self) -> MutableSequence[str]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Parent.setter
    def Parent(self) -> MutableSequence[Control]: ...
    @overload
    @Region.setter
    def Region(self) -> MutableSequence[Region]: ...
    @overload
    @RightToLeft.setter
    def RightToLeft(self) -> MutableSequence[RightToLeft]: ...
    @overload
    @Site.setter
    def Site(self) -> MutableSequence[ISite]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @TabStop.setter
    def TabStop(self) -> MutableSequence[bool]: ...
    @overload
    @TabStop.setter
    def TabStop(self) -> MutableSequence[bool]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @Top.setter
    def Top(self) -> MutableSequence[int]: ...
    @overload
    @UseWaitCursor.setter
    def UseWaitCursor(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @WindowTarget.setter
    def WindowTarget(self) -> MutableSequence[IWindowTarget]: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetupTimeline(self) -> None: ...
    @overload
    def SetupTimeline(self, entries: Iterable[GH_MRU_Entry]) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...


class GH_TimeSpan:
    @overload
    def __init__(self, owner: GH_TimeLine): ...
    @overload
    def ContainsDate(self, d: DateTime) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Entries(self) -> List: ...
    @overload
    @property
    def SpanEnd(self) -> DateTime: ...
    @overload
    @property
    def SpanStart(self) -> DateTime: ...
    @overload
    @property
    def SpanText(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Layout(self, y: int, width: int) -> None: ...
    @overload
    def LayoutWidth(self, width: int) -> None: ...
    @overload
    def PaintSpan(self, graphics: Graphics) -> None: ...
    @overload
    @Bounds.setter
    def Bounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    @SpanEnd.setter
    def SpanEnd(self) -> MutableSequence[DateTime]: ...
    @overload
    @SpanStart.setter
    def SpanStart(self) -> MutableSequence[DateTime]: ...
    @overload
    @SpanText.setter
    def SpanText(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class MRURecordCountChangedEventHandler:
    @overload
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, server: GH_MRU_Server, count: int, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> Object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invoke(self, server: GH_MRU_Server, count: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class VisibleRecordCountChangedEventHandler:
    @overload
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, newCount: int, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> Object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invoke(self, newCount: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
