from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class GH_Gradient:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Gradient): ...
    @overload
    def __init__(self, parameters: Iterable[float], colours: Iterable[Color]): ...
    def add_GradientChanged(self, obj: GradientChangedEventHandler) -> None: ...
    def add_SelectionChanged(self, obj: SelectionChangedEventHandler) -> None: ...
    @overload
    def AddGrip(self, grip: GH_Grip) -> None: ...
    @overload
    def AddGrip(self, t: float) -> GH_Grip: ...
    @overload
    def AddGrip(self, t: float, c: Color) -> GH_Grip: ...
    @overload
    def AddGrip(self, t: float, c0: Color, c1: Color) -> GH_Grip: ...
    def ColourAt(self, t: float) -> Color: ...
    @staticmethod
    def DeleteGripRegion(destination: RectangleF) -> RectangleF: ...
    def DisplayGradientEditor(self) -> None: ...
    def DisplayGripColourPicker(self, grip: GH_Grip) -> None: ...
    @staticmethod
    def EarthlyBrown() -> GH_Gradient: ...
    def Equals(self, obj: Object) -> bool: ...
    @staticmethod
    def Forest() -> GH_Gradient: ...
    @property
    def Grip(self) -> Sequence[int]: ...
    @property
    def GripCount(self) -> int: ...
    @property
    def Linear(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def SelectedGrip(self) -> GH_Grip: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def GreyScale() -> GH_Gradient: ...
    @staticmethod
    def Heat() -> GH_Gradient: ...
    def MouseDown(self, dest: RectangleF, pt: PointF) -> bool: ...
    def MouseDragAbort(self) -> bool: ...
    def MouseMove(self, dest: RectangleF, pt: PointF) -> bool: ...
    def MouseUp(self, dest: RectangleF, pt: PointF, deselect: bool) -> bool: ...
    @overload
    def NearestGrip(self, t: float) -> int: ...
    @overload
    def NearestGrip(self, t: float, side: GH_GripSide) -> int: ...
    @overload
    def NearestGrip(self, dest: RectangleF, pt: PointF, maxRadius: float) -> int: ...
    @staticmethod
    def NewGripRegion(destination: RectangleF) -> RectangleF: ...
    def NormalizeGrips(self) -> None: ...
    def OnGradientChanged(self) -> None: ...
    def OnGradientChangedIntermediate(self) -> None: ...
    def OnSelectionChanged(self) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def remove_GradientChanged(self, obj: GradientChangedEventHandler) -> None: ...
    def remove_SelectionChanged(self, obj: SelectionChangedEventHandler) -> None: ...
    @overload
    def RemoveGrip(self, index: int) -> None: ...
    @overload
    def RemoveGrip(self, grip: GH_Grip) -> None: ...
    def Render_Background(self, g: Graphics, dest: RectangleF) -> None: ...
    def Render_Gradient(self, g: Graphics, dest: RectangleF) -> None: ...
    def Render_Grips(self, g: Graphics, dest: RectangleF) -> None: ...
    @Grip.setter
    def Grip(self) -> MutableSequence[int]: ...
    @Linear.setter
    def Linear(self) -> MutableSequence[bool]: ...
    @Locked.setter
    def Locked(self) -> MutableSequence[bool]: ...
    @SelectedGrip.setter
    def SelectedGrip(self) -> MutableSequence[GH_Grip]: ...
    @staticmethod
    def SoGay() -> GH_Gradient: ...
    @staticmethod
    def Spectrum() -> GH_Gradient: ...
    def ToString(self) -> str: ...
    @staticmethod
    def Traffic() -> GH_Gradient: ...
    def Write(self, writer: GH_IWriter) -> bool: ...
    @staticmethod
    def Zebra() -> GH_Gradient: ...


class GH_GradientChangedEventArgs:
    def __init__(self, gradient: GH_Gradient, intermediate: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Gradient(self) -> GH_Gradient: ...
    @property
    def Intermediate(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Grip:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Grip): ...
    @overload
    def __init__(self, parameter: float, colour: Color): ...
    @overload
    def __init__(self, parameter: float, colourLeft: Color, colourRight: Color): ...
    @staticmethod
    def Blend(A: Color, B: Color, t: float) -> Color: ...
    def CompareTo(self, other: GH_Grip) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ColourLeft(self) -> Color: ...
    @property
    def ColourRight(self) -> Color: ...
    @property
    def GripId(self) -> Guid: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Parameter(self) -> float: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Type(self) -> GH_GripType: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MutateId(self) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @ColourLeft.setter
    def ColourLeft(self) -> MutableSequence[Color]: ...
    @ColourRight.setter
    def ColourRight(self) -> MutableSequence[Color]: ...
    @Parameter.setter
    def Parameter(self) -> MutableSequence[float]: ...
    @Selected.setter
    def Selected(self) -> MutableSequence[bool]: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GripSide(Enum):
    Both = 0
    Left = 1
    Right = 2


class GH_GripType(Enum):
    Continuous = 0
    Discontinuous = 1


class GradientChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_GradientChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_GradientChangedEventArgs) -> None: ...
    def ToString(self) -> str: ...


class SelectionChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_GradientChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_GradientChangedEventArgs) -> None: ...
    def ToString(self) -> str: ...
