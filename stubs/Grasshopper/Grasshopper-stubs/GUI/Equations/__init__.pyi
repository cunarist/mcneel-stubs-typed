from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class GH_EquationFragment:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bounds(self) -> RectangleF: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Pivot(self) -> PointF: ...
    @overload
    @property
    def Size(self) -> SizeF: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Layout(self, font: Font) -> bool: ...
    @overload
    def Position(self, location: PointF) -> bool: ...
    @overload
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    @overload
    @Pivot.setter
    def Pivot(self) -> MutableSequence[PointF]: ...
    @overload
    def ToExpression(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class GH_SequenceFragment(GH_EquationFragment):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bounds(self) -> RectangleF: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Fragments(self) -> List: ...
    @overload
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Pivot(self) -> PointF: ...
    @overload
    @property
    def Size(self) -> SizeF: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Layout(self, font: Font) -> bool: ...
    @overload
    def Position(self, location: PointF) -> bool: ...
    @overload
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    @overload
    @Pivot.setter
    def Pivot(self) -> MutableSequence[PointF]: ...
    @overload
    def ToExpression(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class GH_TextFragment(GH_EquationFragment):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bounds(self) -> RectangleF: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Pivot(self) -> PointF: ...
    @overload
    @property
    def Size(self) -> SizeF: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Layout(self, font: Font) -> bool: ...
    @overload
    def Position(self, location: PointF) -> bool: ...
    @overload
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    @overload
    @Pivot.setter
    def Pivot(self) -> MutableSequence[PointF]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    def ToExpression(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class IGH_EquationFragment:
    @overload
    @property
    def Bounds(self) -> RectangleF: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Icon(self) -> Bitmap: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Pivot(self) -> PointF: ...
    @overload
    @property
    def Size(self) -> SizeF: ...
    @overload
    def Layout(self, font: Font) -> bool: ...
    @overload
    def Position(self, location: PointF) -> bool: ...
    @overload
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    @overload
    @Pivot.setter
    def Pivot(self) -> MutableSequence[PointF]: ...
    @overload
    def ToExpression(self) -> str: ...
