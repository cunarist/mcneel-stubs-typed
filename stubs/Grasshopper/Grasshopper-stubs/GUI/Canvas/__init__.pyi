from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum
from System import *
from System.Drawing import *

import Interaction
import TagArtists

__all__ = ['Interaction', 'TagArtists']


class CanvasPaintBackgroundEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPaintBeginEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPaintEndEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintGroupsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintObjectsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintOverlayEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintWidgetsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintWiresEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintGroupsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintObjectsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintOverlayEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintWidgetsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintWiresEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import GH_Document
from ...Kernel import GH_DocModifiedEventArgs
class Document_ModifiedChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocModifiedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocModifiedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import GH_Document
from ...Kernel import GH_DocObjectEventArgs
class Document_ObjectsAddedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import GH_Document
from ...Kernel import GH_DocObjectEventArgs
class Document_ObjectsDeletedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import GH_Document
from ...Kernel import GH_DocSettingsEventArgs
class Document_SettingsChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocSettingsEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocSettingsEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DocumentChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, e: GH_CanvasDocumentChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas, e: GH_CanvasDocumentChangedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DocumentObjectMouseDownEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_CanvasObjectMouseDownEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_CanvasObjectMouseDownEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import GH_Document
from ...Kernel import GH_DocObjectEventArgs
class DocumentObjectsDeletedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_Border:
    @overload
    def __init__(self, rectangle: RectangleF, topology: GH_BorderTopology): ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    @staticmethod
    def CreateBorders(box: RectangleF, borderSize: int) -> List: ...
    @overload
    @staticmethod
    def CreateBorders(box: RectangleF, padding: Padding) -> List: ...
    @overload
    @staticmethod
    def CreateBorders(box: RectangleF, borderWidth: int, borderHeight: int) -> List: ...
    @overload
    @staticmethod
    def CreateBorders(box: RectangleF, borderLeft: int, borderRight: int, borderTop: int, borderBottom: int) -> List: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Region(self) -> RectangleF: ...
    @overload
    @property
    def Size_Cursor(self) -> Cursor: ...
    @overload
    @property
    def Topology(self) -> GH_BorderTopology: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_BorderTopology(Enum):
    TopRight = 0
    TopLeft = 1
    BottomLeft = 2
    BottomRight = 3
    Top = 4
    Left = 5
    Bottom = 6
    Right = 7
    # None = -2
    All = -1


from .TagArtists import IGH_TagArtist
from .Interaction import IGH_MouseInteraction
from ..Widgets import IGH_Widget
from ...Kernel import IGH_DocumentObject
from ...Kernel import GH_Document
from ...Kernel import GH_AutoSaveTrigger
class GH_Canvas:
    @overload
    def __init__(self): ...
    ThumbnailWidth: int
    ThumbnailHeight: int
    ScheduleInactive: int
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CanvasPaintBackground(self, obj: CanvasPaintBackgroundEventHandler) -> None: ...
    @overload
    def add_CanvasPaintBegin(self, obj: CanvasPaintBeginEventHandler) -> None: ...
    @overload
    def add_CanvasPaintEnd(self, obj: CanvasPaintEndEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintGroups(self, obj: CanvasPostPaintGroupsEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintObjects(self, obj: CanvasPostPaintObjectsEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintOverlay(self, obj: CanvasPostPaintOverlayEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintWidgets(self, obj: CanvasPostPaintWidgetsEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintWires(self, obj: CanvasPostPaintWiresEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintGroups(self, obj: CanvasPrePaintGroupsEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintObjects(self, obj: CanvasPrePaintObjectsEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintOverlay(self, obj: CanvasPrePaintOverlayEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintWidgets(self, obj: CanvasPrePaintWidgetsEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintWires(self, obj: CanvasPrePaintWiresEventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Document_ModifiedChanged(self, obj: Document_ModifiedChangedEventHandler) -> None: ...
    @overload
    def add_Document_ObjectsAdded(self, obj: Document_ObjectsAddedEventHandler) -> None: ...
    @overload
    def add_Document_ObjectsDeleted(self, obj: Document_ObjectsDeletedEventHandler) -> None: ...
    @overload
    def add_Document_SettingsChanged(self, obj: Document_SettingsChangedEventHandler) -> None: ...
    @overload
    def add_DocumentChanged(self, obj: DocumentChangedEventHandler) -> None: ...
    @overload
    def add_DocumentObjectMouseDown(self, obj: DocumentObjectMouseDownEventHandler) -> None: ...
    @overload
    def add_DocumentObjectsDeleted(self, obj: DocumentObjectsDeletedEventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ModifiersChanged(self, obj: ModifiersChangedEventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_NavigationSettingsChanged(obj: NavigationSettingsChangedEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ViewportChanged(self, obj: ViewportChangedEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_WidgetListCreated(obj: WidgetListCreatedEventHandler) -> None: ...
    @overload
    def AddTagArtist(self, artist: IGH_TagArtist) -> None: ...
    @overload
    def AddValidator(self, validator: IGH_CanvasValidator) -> None: ...
    @overload
    def AutoSaveDocument(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def CanvasOldSchoolMenu(self) -> ToolStripDropDownMenu: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateMRUPanels(self) -> None: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def CreatePreview(self, size: Size) -> Bitmap: ...
    @overload
    def DestroyMRUPanels(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @overload
    def GenerateHiResImage(self, rec: Rectangle, settings: GH_ImageSettings) -> Tuple[List, Size]: ...
    @overload
    def GenerateHiResImageTile(self, vp: GH_Viewport, bg: Color) -> Bitmap: ...
    @overload
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @overload
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @overload
    @property
    def AccessibleDescription(self) -> str: ...
    @overload
    @property
    def AccessibleName(self) -> str: ...
    @overload
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @overload
    @property
    def ActiveInteraction(self) -> IGH_MouseInteraction: ...
    @overload
    @property
    def ActiveObject(self) -> IGH_DocumentObject: ...
    @overload
    @property
    def ActiveWidget(self) -> IGH_Widget: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def Anchor(self) -> AnchorStyles: ...
    @overload
    @property
    def AutoScrollOffset(self) -> Point: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def BackColor(self) -> Color: ...
    @overload
    @property
    def BackgroundImage(self) -> Image: ...
    @overload
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @overload
    @property
    def BindingContext(self) -> BindingContext: ...
    @overload
    @property
    def Bottom(self) -> int: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def CanSelect(self) -> bool: ...
    @overload
    @property
    def Capture(self) -> bool: ...
    @overload
    @property
    def CausesValidation(self) -> bool: ...
    @overload
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def CompanyName(self) -> str: ...
    @overload
    @property
    def Container(self) -> IContainer: ...
    @overload
    @property
    def ContainsFocus(self) -> bool: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @overload
    @property
    def Controls(self) -> ControlCollection: ...
    @overload
    @property
    def Created(self) -> bool: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def CursorCanvasPosition(self) -> PointF: ...
    @overload
    @property
    def CursorControlPosition(self) -> Point: ...
    @overload
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @overload
    @property
    def DeviceDpi(self) -> int: ...
    @overload
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @overload
    @property
    def DisplayVoronoiWarning() -> bool: ...
    @overload
    @property
    def Disposing(self) -> bool: ...
    @overload
    @property
    def Dock(self) -> DockStyle: ...
    @overload
    @property
    def Document(self) -> GH_Document: ...
    @overload
    @property
    def DrawingMode(self) -> GH_CanvasMode: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Focused(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForeColor(self) -> Color: ...
    @overload
    @property
    def Graphics(self) -> Graphics: ...
    @overload
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    @property
    def HasChildren(self) -> bool: ...
    @overload
    @property
    def HasControlWithFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ImeMode(self) -> ImeMode: ...
    @overload
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    @property
    def IsAccessible(self) -> bool: ...
    @overload
    @property
    def IsActiveInteraction(self) -> bool: ...
    @overload
    @property
    def IsActiveObject(self) -> bool: ...
    @overload
    @property
    def IsActiveWidget(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsDocument(self) -> bool: ...
    @overload
    @property
    def IsHandleCreated(self) -> bool: ...
    @overload
    @property
    def IsMirrored(self) -> bool: ...
    @overload
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @overload
    @property
    def Left(self) -> int: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def MarkovSuggestions(self) -> List: ...
    @overload
    @property
    def MaximumSize(self) -> Size: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def ModifiersEnabled(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NavigationPanDown() -> Keys: ...
    @overload
    @property
    def NavigationPanLeft() -> Keys: ...
    @overload
    @property
    def NavigationPanPixels() -> int: ...
    @overload
    @property
    def NavigationPanRight() -> Keys: ...
    @overload
    @property
    def NavigationPanUp() -> Keys: ...
    @overload
    @property
    def NavigationZoomFactor() -> float: ...
    @overload
    @property
    def NavigationZoomIn() -> Keys: ...
    @overload
    @property
    def NavigationZoomOut() -> Keys: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Painter(self) -> GH_Painter: ...
    @overload
    @property
    def Painting(self) -> bool: ...
    @overload
    @property
    def Parent(self) -> Control: ...
    @overload
    @property
    def PreferredSize(self) -> Size: ...
    @overload
    @property
    def ProductName(self) -> str: ...
    @overload
    @property
    def ProductVersion(self) -> str: ...
    @overload
    @property
    def RecordPreviewBoundary(self) -> bool: ...
    @overload
    @property
    def RecreatingHandle(self) -> bool: ...
    @overload
    @property
    def Region(self) -> Region: ...
    @overload
    @property
    def Right(self) -> int: ...
    @overload
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @overload
    @property
    def Site(self) -> ISite: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def Tag(self) -> object: ...
    @overload
    @property
    def TagArtistIDs(self) -> List: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ThumbnailSize() -> Size: ...
    @overload
    @property
    def TooltipDelay(self) -> int: ...
    @overload
    @property
    def Top(self) -> int: ...
    @overload
    @property
    def TopLevelControl(self) -> Control: ...
    @overload
    @property
    def UseWaitCursor(self) -> bool: ...
    @overload
    @property
    def Validator(self) -> IGH_CanvasValidator: ...
    @overload
    @property
    def ValidGraphics(self) -> bool: ...
    @overload
    @property
    def Viewport(self) -> GH_Viewport: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Widgets(self) -> List: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    @property
    def ZoomFadeHigh() -> int: ...
    @overload
    @property
    def ZoomFadeLow() -> int: ...
    @overload
    @property
    def ZoomFadeMedium() -> int: ...
    @overload
    def GetCanvasScreenBuffer(self, modeOverride: GH_CanvasMode) -> Bitmap: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetGraphicsObject(self, setupDisplayTransform: bool) -> Graphics: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def HideMRUPanels(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def InstantiateNewObject(self, id: Guid, at: PointF, update: bool) -> bool: ...
    @overload
    def InstantiateNewObject(self, id: Guid, init_code: str, at: PointF, update: bool) -> bool: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def Navigate(self, navigation: GH_CanvasNavigation) -> None: ...
    @overload
    def OnViewportChanged(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def ReevaluateMarkovSuggestions(self) -> None: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CanvasPaintBackground(self, obj: CanvasPaintBackgroundEventHandler) -> None: ...
    @overload
    def remove_CanvasPaintBegin(self, obj: CanvasPaintBeginEventHandler) -> None: ...
    @overload
    def remove_CanvasPaintEnd(self, obj: CanvasPaintEndEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintGroups(self, obj: CanvasPostPaintGroupsEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintObjects(self, obj: CanvasPostPaintObjectsEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintOverlay(self, obj: CanvasPostPaintOverlayEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintWidgets(self, obj: CanvasPostPaintWidgetsEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintWires(self, obj: CanvasPostPaintWiresEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintGroups(self, obj: CanvasPrePaintGroupsEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintObjects(self, obj: CanvasPrePaintObjectsEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintOverlay(self, obj: CanvasPrePaintOverlayEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintWidgets(self, obj: CanvasPrePaintWidgetsEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintWires(self, obj: CanvasPrePaintWiresEventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Document_ModifiedChanged(self, obj: Document_ModifiedChangedEventHandler) -> None: ...
    @overload
    def remove_Document_ObjectsAdded(self, obj: Document_ObjectsAddedEventHandler) -> None: ...
    @overload
    def remove_Document_ObjectsDeleted(self, obj: Document_ObjectsDeletedEventHandler) -> None: ...
    @overload
    def remove_Document_SettingsChanged(self, obj: Document_SettingsChangedEventHandler) -> None: ...
    @overload
    def remove_DocumentChanged(self, obj: DocumentChangedEventHandler) -> None: ...
    @overload
    def remove_DocumentObjectMouseDown(self, obj: DocumentObjectMouseDownEventHandler) -> None: ...
    @overload
    def remove_DocumentObjectsDeleted(self, obj: DocumentObjectsDeletedEventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ModifiersChanged(self, obj: ModifiersChangedEventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_NavigationSettingsChanged(obj: NavigationSettingsChangedEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ViewportChanged(self, obj: ViewportChangedEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_WidgetListCreated(obj: WidgetListCreatedEventHandler) -> None: ...
    @overload
    def RemoveAllTagArtists(self) -> None: ...
    @overload
    def RemoveTagArtist(self, artist: IGH_TagArtist) -> int: ...
    @overload
    def RemoveTagArtist(self, artistId: Guid) -> int: ...
    @overload
    def RemoveValidator(self, validator: IGH_CanvasValidator) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    @overload
    def ScheduleRegen(self, delay: int) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @overload
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @overload
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @overload
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @overload
    @ActiveInteraction.setter
    def ActiveInteraction(self, Value: IGH_MouseInteraction) -> None: ...
    @overload
    @ActiveObject.setter
    def ActiveObject(self, Value: IGH_DocumentObject) -> None: ...
    @overload
    @ActiveWidget.setter
    def ActiveWidget(self, Value: IGH_Widget) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @overload
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @overload
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @overload
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @overload
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @overload
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @overload
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @overload
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @overload
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @overload
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @overload
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @overload
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @overload
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @overload
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @overload
    @DisplayVoronoiWarning.setter
    def DisplayVoronoiWarning(AutoPropertyValue: bool) -> None: ...
    @overload
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @overload
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...
    @overload
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @overload
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @overload
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: int) -> None: ...
    @overload
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @overload
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @overload
    @Left.setter
    def Left(self, value: int) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @overload
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @overload
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @overload
    @ModifiersEnabled.setter
    def ModifiersEnabled(self, Value: bool) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    @NavigationPanDown.setter
    def NavigationPanDown(Value: Keys) -> None: ...
    @overload
    @NavigationPanLeft.setter
    def NavigationPanLeft(Value: Keys) -> None: ...
    @overload
    @NavigationPanPixels.setter
    def NavigationPanPixels(Value: int) -> None: ...
    @overload
    @NavigationPanRight.setter
    def NavigationPanRight(Value: Keys) -> None: ...
    @overload
    @NavigationPanUp.setter
    def NavigationPanUp(Value: Keys) -> None: ...
    @overload
    @NavigationZoomFactor.setter
    def NavigationZoomFactor(Value: float) -> None: ...
    @overload
    @NavigationZoomIn.setter
    def NavigationZoomIn(Value: Keys) -> None: ...
    @overload
    @NavigationZoomOut.setter
    def NavigationZoomOut(Value: Keys) -> None: ...
    @overload
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @overload
    @RecordPreviewBoundary.setter
    def RecordPreviewBoundary(self, AutoPropertyValue: bool) -> None: ...
    @overload
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @overload
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @overload
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @overload
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @overload
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @overload
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    @Top.setter
    def Top(self, value: int) -> None: ...
    @overload
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @overload
    @ValidGraphics.setter
    def ValidGraphics(self, Value: bool) -> None: ...
    @overload
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @overload
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetSmartTextRenderingHint(self) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def ShowComponentSearchBox(self) -> bool: ...
    @overload
    def ShowComponentSearchBox(self, at: Point) -> bool: ...
    @overload
    def ShowMRUPanels(self) -> None: ...
    @overload
    def ShowNavigationPane(self) -> None: ...
    @overload
    def ShowSearchDialog(self, centerOnCursor: bool) -> None: ...
    @overload
    def StartAutoPan(self) -> None: ...
    @overload
    def StopAutoPan(self) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def UpdateDocumentPreview(self) -> None: ...


class GH_CanvasChannel(Enum):
    First = 0
    Groups = 0
    Wires = 10
    Objects = 20
    Overlay = 30
    Last = 30


from ...Kernel import GH_Document
class GH_CanvasDocumentChangedEventArgs:
    @overload
    def __init__(self, newDoc: GH_Document, oldDoc: GH_Document): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def NewDocument(self) -> GH_Document: ...
    @overload
    @property
    def OldDocument(self) -> GH_Document: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import IGH_DocumentObject
from ...Kernel import IGH_Param
class GH_CanvasDropTargetValidator(GH_CanvasValidator):
    @overload
    def __init__(self): ...
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id: Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id: Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    @overload
    def CanNavigateCanvas(self) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def DropDelegate(self) -> Action: ...
    @overload
    @property
    def DropID(self) -> Guid: ...
    @overload
    @property
    def DropRegion(self) -> RectangleF: ...
    @overload
    @property
    def DropText(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    @DropDelegate.setter
    def DropDelegate(self, AutoPropertyValue: Action) -> None: ...
    @overload
    @DropID.setter
    def DropID(self, AutoPropertyValue: Guid) -> None: ...
    @overload
    @DropRegion.setter
    def DropRegion(self, AutoPropertyValue: RectangleF) -> None: ...
    @overload
    @DropText.setter
    def DropText(self, AutoPropertyValue: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_CanvasMode(Enum):
    Control = 0
    Thumbnail = 1
    Export = 2


class GH_CanvasNavigation(Enum):
    # None = 0
    PanLeft = 1
    PanRight = 2
    PanUp = 3
    PanDown = 4
    ZoomIn = 5
    ZoomOut = 6


from ...Kernel import IGH_DocumentObject
from ...Kernel import IGH_Param
class GH_CanvasValidator:
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id: Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id: Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    @overload
    def CanNavigateCanvas(self) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_CanvasViewportChangedEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Canvas(self) -> GH_Canvas: ...
    @overload
    @property
    def Viewport(self) -> GH_Viewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from ..Widgets import IGH_Widget
class GH_CanvasWidgetListEventArgs:
    @overload
    def AddWidget(self, widget: IGH_Widget) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import IGH_DocumentObject
from ...Kernel import IGH_Param
class GH_CanvasWireValidator(GH_CanvasValidator):
    @overload
    def __init__(self): ...
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id: Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id: Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    @overload
    def CanNavigateCanvas(self) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def WireDelegate(self) -> Action: ...
    @overload
    @property
    def WireMotionText(self) -> str: ...
    @overload
    @property
    def WireSource(self) -> Guid: ...
    @overload
    @property
    def WireSourceText(self) -> str: ...
    @overload
    @property
    def WireTarget(self) -> Guid: ...
    @overload
    @property
    def WireTargetText(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    @WireDelegate.setter
    def WireDelegate(self, AutoPropertyValue: Action) -> None: ...
    @overload
    @WireMotionText.setter
    def WireMotionText(self, AutoPropertyValue: str) -> None: ...
    @overload
    @WireSource.setter
    def WireSource(self, AutoPropertyValue: Guid) -> None: ...
    @overload
    @WireSourceText.setter
    def WireSourceText(self, AutoPropertyValue: str) -> None: ...
    @overload
    @WireTarget.setter
    def WireTarget(self, AutoPropertyValue: Guid) -> None: ...
    @overload
    @WireTargetText.setter
    def WireTargetText(self, AutoPropertyValue: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_Capsule:
    DefaultHighlight: int
    DefaultRadius: int
    @overload
    def AddInputGrip(self, P: PointF) -> None: ...
    @overload
    def AddInputGrip(self, P: Point) -> None: ...
    @overload
    def AddInputGrip(self, Y: float) -> None: ...
    @overload
    def AddInputGrip(self, X: float, Y: float) -> None: ...
    @overload
    def AddOutputGrip(self, P: Point) -> None: ...
    @overload
    def AddOutputGrip(self, P: PointF) -> None: ...
    @overload
    def AddOutputGrip(self, Y: float) -> None: ...
    @overload
    def AddOutputGrip(self, X: float, Y: float) -> None: ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    @staticmethod
    def CreateCapsule(box: RectangleF, palette: GH_Palette) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Rectangle, palette: GH_Palette) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Rectangle, palette: GH_Palette, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: RectangleF, palette: GH_Palette, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: RectangleF, palette: GH_Palette, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Rectangle, palette: GH_Palette, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Box(self) -> Rectangle: ...
    @overload
    @property
    def Box_Content(self) -> Rectangle: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Highlight(self) -> int: ...
    @overload
    @property
    def HighlightShape(self) -> GraphicsPath: ...
    @overload
    @property
    def InputGrips(self) -> List: ...
    @overload
    @property
    def JaggedLeft(self) -> bool: ...
    @overload
    @property
    def JaggedRight(self) -> bool: ...
    @overload
    @property
    def MaxRadius(self) -> int: ...
    @overload
    @property
    def OutlineShape(self) -> GraphicsPath: ...
    @overload
    @property
    def OutputGrips(self) -> List: ...
    @overload
    @property
    def Palette(self) -> GH_Palette: ...
    @overload
    @property
    def Radius(self) -> Sequence[int]: ...
    @overload
    @property
    def RenderEngine(self) -> GH_CapsuleRenderEngine: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextOrientation(self) -> GH_Orientation: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Render(self, G: Graphics, colour: Color) -> None: ...
    @overload
    def Render(self, G: Graphics, style: GH_PaletteStyle) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, colour: Color) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, style: GH_PaletteStyle) -> None: ...
    @overload
    def Render(self, G: Graphics, selected: bool, locked: bool, hidden: bool) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, selected: bool, locked: bool, hidden: bool) -> None: ...
    @overload
    @Font.setter
    def Font(self, Value: Font) -> None: ...
    @overload
    @Palette.setter
    def Palette(self, Value: GH_Palette) -> None: ...
    @overload
    @Text.setter
    def Text(self, Value: str) -> None: ...
    @overload
    @TextOrientation.setter
    def TextOrientation(self, Value: GH_Orientation) -> None: ...
    @overload
    def SetJaggedEdges(self, left: bool, right: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import IGH_Attributes
from ...Kernel import IGH_ActiveObject
class GH_CapsuleRenderEngine:
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Rectangle, radius: int, size: int) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Rectangle, R0: int, R1: int, size: int) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Rectangle, radius: int, size: int, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Rectangle, R0: int, R1: int, size: int, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateJaggedRectangle(rec: RectangleF, R0: float, R1: float, R2: float, R3: float, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: Rectangle, radius: int) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: RectangleF, radius: float) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: RectangleF, R0: float, R1: float, R2: float, R3: float) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: Rectangle, R0: int, R1: int, R2: int, R3: int) -> GraphicsPath: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetImpliedPalette(obj: IGH_ActiveObject) -> GH_Palette: ...
    @overload
    @staticmethod
    def GetImpliedStyle(palette: GH_Palette, attributes: IGH_Attributes) -> GH_PaletteStyle: ...
    @overload
    @staticmethod
    def GetImpliedStyle(palette: GH_Palette, selected: bool, locked: bool, hidden: bool) -> GH_PaletteStyle: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RenderAlphaFill(self, G: Graphics) -> None: ...
    @overload
    def RenderBackground_Alternative(self, G: Graphics, colourOverride: Color, drawAlphaGrid: bool) -> None: ...
    @overload
    def RenderBackground(self, G: Graphics, zoom: float, style: GH_PaletteStyle) -> None: ...
    @overload
    def RenderBoundaryDots(self, G: Graphics, count: int, style: GH_PaletteStyle) -> None: ...
    @overload
    def RenderGrips_Alternative(self, G: Graphics) -> None: ...
    @overload
    def RenderGrips(self, G: Graphics) -> None: ...
    @overload
    def RenderHighlight(self, G: Graphics) -> None: ...
    @overload
    def RenderIcon(self, G: Graphics, icon: Image, offsetX: int, offsetY: int) -> None: ...
    @overload
    def RenderIcon(self, G: Graphics, icon: Image, box: RectangleF, offsetX: int, offsetY: int) -> None: ...
    @overload
    @staticmethod
    def RenderInputGrip(G: Graphics, zoom: float, loc: PointF, full: bool) -> None: ...
    @overload
    def RenderMessage(self, G: Graphics, message: str, style: GH_PaletteStyle) -> Rectangle: ...
    @overload
    def RenderOutlines(self, G: Graphics, zoom: float, style: GH_PaletteStyle) -> None: ...
    @overload
    @staticmethod
    def RenderOutputGrip(G: Graphics, zoom: float, loc: PointF, full: bool) -> None: ...
    @overload
    def RenderText(self, G: Graphics, colour: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_DisplayMatrix(Enum):
    CanvasToControl = 0
    ControlToCanvas = 1


class GH_DocDiagramPainter:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def BoundingBox(self) -> RectangleF: ...
    @overload
    @property
    def DrawingBox(self) -> Rectangle: ...
    @overload
    @property
    def IgnoreSelectedStates(self) -> bool: ...
    @overload
    @property
    def Image(self) -> Bitmap: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Zoom(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MapPoint(self, pt: PointF) -> PointF: ...
    @overload
    def MapPoint(self, pt: Point) -> Point: ...
    @overload
    def MapRectangle(self, rec: Rectangle) -> Rectangle: ...
    @overload
    def MapX(self, x: float) -> float: ...
    @overload
    def MapX(self, x: int) -> int: ...
    @overload
    def MapY(self, y: int) -> int: ...
    @overload
    def MapY(self, y: float) -> float: ...
    @overload
    def PaintDiagram(self, objs: Iterable[IGH_DocumentObject], approx_size: int, inflate: int) -> bool: ...
    @overload
    def PaintDiagram(self, objs: Iterable[IGH_DocumentObject], mapWidth: int, mapHeight: int, inflate: int) -> bool: ...
    @overload
    @IgnoreSelectedStates.setter
    def IgnoreSelectedStates(self, Value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UnmapPoint(self, pt: Point) -> Point: ...
    @overload
    def UnmapRectangle(self, rec: Rectangle) -> Rectangle: ...
    @overload
    def UnmapX(self, x: int) -> int: ...
    @overload
    def UnmapY(self, y: int) -> int: ...


class GH_DragDropFileAction(Enum):
    # None = 0
    Open = 1
    Examine = 2
    Insert = 3
    Group = 4
    Cluster = 5


class GH_FilePanel:
    PanelPadding: int
    PanelWidth: int
    PanelHeight: int
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ClientBounds(self) -> Rectangle: ...
    @overload
    @property
    def Color(self) -> Color: ...
    @overload
    @property
    def DisplayDate(self) -> str: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def Hover(self) -> bool: ...
    @overload
    @property
    def ImageBounds(self) -> Rectangle: ...
    @overload
    @property
    def IsAnimating(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def TargetDate(self) -> DateTime: ...
    @overload
    @property
    def TargetFile(self) -> str: ...
    @overload
    @property
    def TargetThumbnail(self) -> Bitmap: ...
    @overload
    @property
    def TextBounds(self) -> Rectangle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MouseEnter(self) -> None: ...
    @overload
    def MouseLeave(self) -> None: ...
    @overload
    @staticmethod
    def NewPanel(targetFile: str, targetDate: DateTime) -> GH_FilePanel: ...
    @overload
    def RenderPanel(self, graphics: Graphics) -> None: ...
    @overload
    @Color.setter
    def Color(self, AutoPropertyValue: Color) -> None: ...
    @overload
    @Hover.setter
    def Hover(self, AutoPropertyValue: bool) -> None: ...
    @overload
    @Location.setter
    def Location(self, Value: Point) -> None: ...
    @overload
    @TargetDate.setter
    def TargetDate(self, AutoPropertyValue: DateTime) -> None: ...
    @overload
    @TargetFile.setter
    def TargetFile(self, AutoPropertyValue: str) -> None: ...
    @overload
    @TargetThumbnail.setter
    def TargetThumbnail(self, AutoPropertyValue: Bitmap) -> None: ...
    @overload
    def SetNewLocation(self, point: Point, start: int, duration: int) -> None: ...
    @overload
    def TargetFileChanged(self, watcher: GH_AsynchFileData) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ImageSettings:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filePath: str): ...
    @overload
    def __init__(self, folder: str, filename: str, extension: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def BackColour(self) -> Color: ...
    @overload
    @property
    def Extension(self) -> str: ...
    @overload
    @property
    def FileName(self) -> str: ...
    @overload
    @property
    def Folder(self) -> str: ...
    @overload
    @property
    def TileSize() -> Size: ...
    @overload
    @property
    def Zoom(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @BackColour.setter
    def BackColour(self, Value: Color) -> None: ...
    @overload
    @Extension.setter
    def Extension(self, Value: str) -> None: ...
    @overload
    @FileName.setter
    def FileName(self, Value: str) -> None: ...
    @overload
    @Folder.setter
    def Folder(self, Value: str) -> None: ...
    @overload
    @Zoom.setter
    def Zoom(self, Value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_NamedView:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, view_box: Rectangle, target_box: RectangleF): ...
    @overload
    def __init__(self, view: GH_Viewport, region: Rectangle, target: PointF): ...
    @overload
    def __init__(self, view: GH_Viewport, point: Point, target: PointF): ...
    @overload
    def __init__(self, view_name: str, view_point: PointF, view_zoom: float, view_type: GH_NamedViewType): ...
    @overload
    def add_SmoothFrame(self, obj: SmoothFrameEventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Point(self) -> PointF: ...
    @overload
    @property
    def Type(self) -> GH_NamedViewType: ...
    @overload
    @property
    def Zoom(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def LoadFromViewport(self, vp: GH_Viewport, view_type: GH_NamedViewType) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_SmoothFrame(self, obj: SmoothFrameEventHandler) -> None: ...
    @overload
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @overload
    @Point.setter
    def Point(self, Value: PointF) -> None: ...
    @overload
    @Type.setter
    def Type(self, Value: GH_NamedViewType) -> None: ...
    @overload
    @Zoom.setter
    def Zoom(self, Value: float) -> None: ...
    @overload
    def SetToViewport(self, cv: GH_Canvas) -> None: ...
    @overload
    def SetToViewport(self, vp: GH_Viewport) -> None: ...
    @overload
    def SetToViewport(self, cv: GH_Canvas, length: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_NamedViewEditor:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_NamedViewChanged(self, obj: NamedViewChangedEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @overload
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @overload
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @overload
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @overload
    @property
    def AccessibleDescription(self) -> str: ...
    @overload
    @property
    def AccessibleName(self) -> str: ...
    @overload
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @overload
    @property
    def ActiveControl(self) -> Control: ...
    @overload
    @property
    def ActiveMdiChild(self) -> Form: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AllowTransparency(self) -> bool: ...
    @overload
    @property
    def Anchor(self) -> AnchorStyles: ...
    @overload
    @property
    def AutoScale(self) -> bool: ...
    @overload
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @overload
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @overload
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @overload
    @property
    def AutoScroll(self) -> bool: ...
    @overload
    @property
    def AutoScrollMargin(self) -> Size: ...
    @overload
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @overload
    @property
    def AutoScrollOffset(self) -> Point: ...
    @overload
    @property
    def AutoScrollPosition(self) -> Point: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @overload
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @overload
    @property
    def BackColor(self) -> Color: ...
    @overload
    @property
    def BackgroundImage(self) -> Image: ...
    @overload
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @overload
    @property
    def BindingContext(self) -> BindingContext: ...
    @overload
    @property
    def Bottom(self) -> int: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CancelButton(self) -> IButtonControl: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def CanSelect(self) -> bool: ...
    @overload
    @property
    def Capture(self) -> bool: ...
    @overload
    @property
    def CausesValidation(self) -> bool: ...
    @overload
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def CompanyName(self) -> str: ...
    @overload
    @property
    def Container(self) -> IContainer: ...
    @overload
    @property
    def ContainsFocus(self) -> bool: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @overload
    @property
    def ControlBox(self) -> bool: ...
    @overload
    @property
    def Controls(self) -> ControlCollection: ...
    @overload
    @property
    def Created(self) -> bool: ...
    @overload
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @overload
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @overload
    @property
    def DesktopLocation(self) -> Point: ...
    @overload
    @property
    def DeviceDpi(self) -> int: ...
    @overload
    @property
    def DialogResult(self) -> DialogResult: ...
    @overload
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @overload
    @property
    def Disposing(self) -> bool: ...
    @overload
    @property
    def Dock(self) -> DockStyle: ...
    @overload
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Focused(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForeColor(self) -> Color: ...
    @overload
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @overload
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    @property
    def HasChildren(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HelpButton(self) -> bool: ...
    @overload
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ImeMode(self) -> ImeMode: ...
    @overload
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    @property
    def IsAccessible(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsHandleCreated(self) -> bool: ...
    @overload
    @property
    def IsMdiChild(self) -> bool: ...
    @overload
    @property
    def IsMdiContainer(self) -> bool: ...
    @overload
    @property
    def IsMirrored(self) -> bool: ...
    @overload
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @overload
    @property
    def KeyPreview(self) -> bool: ...
    @overload
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @overload
    @property
    def Left(self) -> int: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def MaximizeBox(self) -> bool: ...
    @overload
    @property
    def MaximumSize(self) -> Size: ...
    @overload
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @overload
    @property
    def MdiParent(self) -> Form: ...
    @overload
    @property
    def Menu(self) -> MainMenu: ...
    @overload
    @property
    def MergedMenu(self) -> MainMenu: ...
    @overload
    @property
    def MinimizeBox(self) -> bool: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def Modal(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @overload
    @property
    def Owner(self) -> Form: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Control: ...
    @overload
    @property
    def ParentForm(self) -> Form: ...
    @overload
    @property
    def PreferredSize(self) -> Size: ...
    @overload
    @property
    def ProductName(self) -> str: ...
    @overload
    @property
    def ProductVersion(self) -> str: ...
    @overload
    @property
    def RecreatingHandle(self) -> bool: ...
    @overload
    @property
    def Region(self) -> Region: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Right(self) -> int: ...
    @overload
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @overload
    @property
    def RightToLeftLayout(self) -> bool: ...
    @overload
    @property
    def ShowIcon(self) -> bool: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Site(self) -> ISite: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @overload
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def Tag(self) -> object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Top(self) -> int: ...
    @overload
    @property
    def TopLevel(self) -> bool: ...
    @overload
    @property
    def TopLevelControl(self) -> Control: ...
    @overload
    @property
    def TopMost(self) -> bool: ...
    @overload
    @property
    def TransparencyKey(self) -> Color: ...
    @overload
    @property
    def UseWaitCursor(self) -> bool: ...
    @overload
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowState(self) -> FormWindowState: ...
    @overload
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LoadNamedView(self, view: GH_NamedView) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def OnNamedViewChanged(self) -> None: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_NamedViewChanged(self, obj: NamedViewChangedEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @overload
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @overload
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @overload
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @overload
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @overload
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @overload
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @overload
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @overload
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @overload
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @overload
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @overload
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @overload
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @overload
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @overload
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @overload
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @overload
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @overload
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @overload
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @overload
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @overload
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @overload
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @overload
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @overload
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @overload
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @overload
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @overload
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @overload
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @overload
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @overload
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @overload
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @overload
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @overload
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @overload
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @overload
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @overload
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @overload
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @overload
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @overload
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @overload
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @overload
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: int) -> None: ...
    @overload
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @overload
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @overload
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @overload
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @overload
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @overload
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @overload
    @Left.setter
    def Left(self, value: int) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @overload
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @overload
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @overload
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @overload
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @overload
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @overload
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @overload
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @overload
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @overload
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @overload
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @overload
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @overload
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @overload
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @overload
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @overload
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @overload
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @overload
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @overload
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @overload
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @overload
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @overload
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @overload
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    @Top.setter
    def Top(self, value: int) -> None: ...
    @overload
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @overload
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @overload
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @overload
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @overload
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @overload
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @overload
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class GH_NamedViewType(Enum):
    target = 0
    center = 1


class GH_NavigationPaneDialog:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @overload
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @overload
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @overload
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @overload
    @property
    def AccessibleDescription(self) -> str: ...
    @overload
    @property
    def AccessibleName(self) -> str: ...
    @overload
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @overload
    @property
    def ActiveControl(self) -> Control: ...
    @overload
    @property
    def ActiveMdiChild(self) -> Form: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AllowTransparency(self) -> bool: ...
    @overload
    @property
    def Anchor(self) -> AnchorStyles: ...
    @overload
    @property
    def AutoScale(self) -> bool: ...
    @overload
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @overload
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @overload
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @overload
    @property
    def AutoScroll(self) -> bool: ...
    @overload
    @property
    def AutoScrollMargin(self) -> Size: ...
    @overload
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @overload
    @property
    def AutoScrollOffset(self) -> Point: ...
    @overload
    @property
    def AutoScrollPosition(self) -> Point: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @overload
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @overload
    @property
    def BackColor(self) -> Color: ...
    @overload
    @property
    def BackgroundImage(self) -> Image: ...
    @overload
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @overload
    @property
    def BindingContext(self) -> BindingContext: ...
    @overload
    @property
    def Bottom(self) -> int: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CancelButton(self) -> IButtonControl: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def CanSelect(self) -> bool: ...
    @overload
    @property
    def Canvas(self) -> GH_Canvas: ...
    @overload
    @property
    def Capture(self) -> bool: ...
    @overload
    @property
    def CausesValidation(self) -> bool: ...
    @overload
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def CompanyName(self) -> str: ...
    @overload
    @property
    def Container(self) -> IContainer: ...
    @overload
    @property
    def ContainsFocus(self) -> bool: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @overload
    @property
    def ControlBox(self) -> bool: ...
    @overload
    @property
    def Controls(self) -> ControlCollection: ...
    @overload
    @property
    def Created(self) -> bool: ...
    @overload
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @overload
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @overload
    @property
    def DesktopLocation(self) -> Point: ...
    @overload
    @property
    def DeviceDpi(self) -> int: ...
    @overload
    @property
    def DialogResult(self) -> DialogResult: ...
    @overload
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @overload
    @property
    def Disposing(self) -> bool: ...
    @overload
    @property
    def Dock(self) -> DockStyle: ...
    @overload
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Focused(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForeColor(self) -> Color: ...
    @overload
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @overload
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    @property
    def HasChildren(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HelpButton(self) -> bool: ...
    @overload
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ImeMode(self) -> ImeMode: ...
    @overload
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    @property
    def IsAccessible(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsHandleCreated(self) -> bool: ...
    @overload
    @property
    def IsMdiChild(self) -> bool: ...
    @overload
    @property
    def IsMdiContainer(self) -> bool: ...
    @overload
    @property
    def IsMirrored(self) -> bool: ...
    @overload
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @overload
    @property
    def KeyPreview(self) -> bool: ...
    @overload
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @overload
    @property
    def Left(self) -> int: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def MaximizeBox(self) -> bool: ...
    @overload
    @property
    def MaximumSize(self) -> Size: ...
    @overload
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @overload
    @property
    def MdiParent(self) -> Form: ...
    @overload
    @property
    def Menu(self) -> MainMenu: ...
    @overload
    @property
    def MergedMenu(self) -> MainMenu: ...
    @overload
    @property
    def MinimizeBox(self) -> bool: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def Modal(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @overload
    @property
    def Owner(self) -> Form: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Pane(self) -> GH_DocDiagramPainter: ...
    @overload
    @property
    def Parent(self) -> Control: ...
    @overload
    @property
    def ParentForm(self) -> Form: ...
    @overload
    @property
    def PreferredSize(self) -> Size: ...
    @overload
    @property
    def ProductName(self) -> str: ...
    @overload
    @property
    def ProductVersion(self) -> str: ...
    @overload
    @property
    def RecreatingHandle(self) -> bool: ...
    @overload
    @property
    def Region(self) -> Region: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Right(self) -> int: ...
    @overload
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @overload
    @property
    def RightToLeftLayout(self) -> bool: ...
    @overload
    @property
    def ShowIcon(self) -> bool: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Site(self) -> ISite: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @overload
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def Tag(self) -> object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Top(self) -> int: ...
    @overload
    @property
    def TopLevel(self) -> bool: ...
    @overload
    @property
    def TopLevelControl(self) -> Control: ...
    @overload
    @property
    def TopMost(self) -> bool: ...
    @overload
    @property
    def TransparencyKey(self) -> Color: ...
    @overload
    @property
    def UseWaitCursor(self) -> bool: ...
    @overload
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowState(self) -> FormWindowState: ...
    @overload
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @overload
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @overload
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @overload
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @overload
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @overload
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @overload
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @overload
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @overload
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @overload
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @overload
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @overload
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @overload
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @overload
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @overload
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @overload
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @overload
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @overload
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @overload
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @overload
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @overload
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @overload
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @overload
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @overload
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @overload
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @overload
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @overload
    @Canvas.setter
    def Canvas(self, Value: GH_Canvas) -> None: ...
    @overload
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @overload
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @overload
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @overload
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @overload
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @overload
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @overload
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @overload
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @overload
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @overload
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @overload
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @overload
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @overload
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @overload
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @overload
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: int) -> None: ...
    @overload
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @overload
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @overload
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @overload
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @overload
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @overload
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @overload
    @Left.setter
    def Left(self, value: int) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @overload
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @overload
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @overload
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @overload
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @overload
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @overload
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @overload
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @overload
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @overload
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @overload
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @overload
    @Pane.setter
    def Pane(self, Value: GH_DocDiagramPainter) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @overload
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @overload
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @overload
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @overload
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @overload
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @overload
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @overload
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @overload
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @overload
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @overload
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @overload
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @overload
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    @Top.setter
    def Top(self, value: int) -> None: ...
    @overload
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @overload
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @overload
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @overload
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @overload
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @overload
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @overload
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class GH_ObjectResponse(Enum):
    Ignore = 0
    Capture = 1
    Release = 2
    Handled = 3


class GH_Orientation(Enum):
    horizontal_center = 0
    horizontal_near = 1
    horizontal_far = 2
    vertical_center = 10
    vertical_near = 11
    vertical_far = 12


from ...Kernel.Data import IGH_Structure
from ...Kernel import GH_Document
class GH_Painter:
    @overload
    def __init__(self, owner: GH_Canvas): ...
    @overload
    @staticmethod
    def ConnectionPath(pointA: PointF, pointB: PointF, directionA: GH_WireDirection, directionB: GH_WireDirection) -> GraphicsPath: ...
    @overload
    @staticmethod
    def ConnectionPathBezier(source: PointF, target: PointF) -> BezierF: ...
    @overload
    def ConnectionVisible(self, a: PointF, b: PointF) -> bool: ...
    @overload
    @staticmethod
    def DetermineWireType(target: IGH_Structure) -> GH_WireType: ...
    @overload
    def DrawBackground(self, viewport: GH_Viewport) -> None: ...
    @overload
    def DrawConnection(self, pointA: PointF, pointB: PointF, directionA: GH_WireDirection, directionB: GH_WireDirection, selectedA: bool, selectedB: bool, type: GH_WireType) -> None: ...
    @overload
    def DrawMiddleGround(self, doc: GH_Document, channel: GH_CanvasChannel) -> None: ...
    @overload
    def DrawNoDocumentMessage(self) -> None: ...
    @overload
    def DrawNULLBuffer(self) -> None: ...
    @overload
    def DrawPivots(self, doc: GH_Document) -> None: ...
    @overload
    def DrawRecipientLinks(self, doc: GH_Document) -> None: ...
    @overload
    def DrawStateFlags(self, doc: GH_Document) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GenerateWirePen_Fill(self, a: PointF, b: PointF, asel: bool, bsel: bool, empty: bool) -> Brush: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Palette(Enum):
    Normal = 0
    Hidden = 1
    Locked = 2
    Warning = 3
    Error = 4
    White = 5
    Grey = 6
    Black = 7
    Brown = 8
    Pink = 9
    Blue = 10
    Transparent = 11


class GH_PaletteStyle:
    @overload
    def __init__(self, fill: Color): ...
    @overload
    def __init__(self, fill: Color, edge: Color): ...
    @overload
    def __init__(self, fill: Color, edge: Color, text: Color): ...
    m_fill: Color
    m_edge: Color
    m_text: Color
    @overload
    def CreateBrush(self, rec: RectangleF, zoom: float) -> Brush: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Edge(self) -> Color: ...
    @overload
    @property
    def Fill(self) -> Color: ...
    @overload
    @property
    def Text(self) -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Edge.setter
    def Edge(self, Value: Color) -> None: ...
    @overload
    @Fill.setter
    def Fill(self, Value: Color) -> None: ...
    @overload
    @Text.setter
    def Text(self, Value: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_PopupSearchDialog:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def ClearMessage(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @overload
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @overload
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @overload
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @overload
    @property
    def AccessibleDescription(self) -> str: ...
    @overload
    @property
    def AccessibleName(self) -> str: ...
    @overload
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @overload
    @property
    def ActiveControl(self) -> Control: ...
    @overload
    @property
    def ActiveMdiChild(self) -> Form: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AllowTransparency(self) -> bool: ...
    @overload
    @property
    def Anchor(self) -> AnchorStyles: ...
    @overload
    @property
    def AutoScale(self) -> bool: ...
    @overload
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @overload
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @overload
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @overload
    @property
    def AutoScroll(self) -> bool: ...
    @overload
    @property
    def AutoScrollMargin(self) -> Size: ...
    @overload
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @overload
    @property
    def AutoScrollOffset(self) -> Point: ...
    @overload
    @property
    def AutoScrollPosition(self) -> Point: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @overload
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @overload
    @property
    def BackColor(self) -> Color: ...
    @overload
    @property
    def BackgroundImage(self) -> Image: ...
    @overload
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @overload
    @property
    def BasePoint(self) -> Point: ...
    @overload
    @property
    def BindingContext(self) -> BindingContext: ...
    @overload
    @property
    def Bottom(self) -> int: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CancelButton(self) -> IButtonControl: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def CanSelect(self) -> bool: ...
    @overload
    @property
    def Canvas(self) -> GH_Canvas: ...
    @overload
    @property
    def Capture(self) -> bool: ...
    @overload
    @property
    def CausesValidation(self) -> bool: ...
    @overload
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def CompanyName(self) -> str: ...
    @overload
    @property
    def Container(self) -> IContainer: ...
    @overload
    @property
    def ContainsFocus(self) -> bool: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @overload
    @property
    def ControlBox(self) -> bool: ...
    @overload
    @property
    def Controls(self) -> ControlCollection: ...
    @overload
    @property
    def Created(self) -> bool: ...
    @overload
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @overload
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @overload
    @property
    def DesktopLocation(self) -> Point: ...
    @overload
    @property
    def DeviceDpi(self) -> int: ...
    @overload
    @property
    def DialogResult(self) -> DialogResult: ...
    @overload
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @overload
    @property
    def Disposing(self) -> bool: ...
    @overload
    @property
    def Dock(self) -> DockStyle: ...
    @overload
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Focused(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForeColor(self) -> Color: ...
    @overload
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @overload
    @property
    def Handle(self) -> IntPtr: ...
    @overload
    @property
    def HasChildren(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HelpButton(self) -> bool: ...
    @overload
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ImeMode(self) -> ImeMode: ...
    @overload
    @property
    def InvokeRequired(self) -> bool: ...
    @overload
    @property
    def IsAccessible(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsHandleCreated(self) -> bool: ...
    @overload
    @property
    def IsMdiChild(self) -> bool: ...
    @overload
    @property
    def IsMdiContainer(self) -> bool: ...
    @overload
    @property
    def IsMirrored(self) -> bool: ...
    @overload
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @overload
    @property
    def KeyPreview(self) -> bool: ...
    @overload
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @overload
    @property
    def Left(self) -> int: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def Margin(self) -> Padding: ...
    @overload
    @property
    def MaximizeBox(self) -> bool: ...
    @overload
    @property
    def MaximumSize(self) -> Size: ...
    @overload
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @overload
    @property
    def MdiParent(self) -> Form: ...
    @overload
    @property
    def Menu(self) -> MainMenu: ...
    @overload
    @property
    def MergedMenu(self) -> MainMenu: ...
    @overload
    @property
    def MinimizeBox(self) -> bool: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def Modal(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @overload
    @property
    def Owner(self) -> Form: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Control: ...
    @overload
    @property
    def ParentForm(self) -> Form: ...
    @overload
    @property
    def PreferredSize(self) -> Size: ...
    @overload
    @property
    def ProductName(self) -> str: ...
    @overload
    @property
    def ProductVersion(self) -> str: ...
    @overload
    @property
    def RecreatingHandle(self) -> bool: ...
    @overload
    @property
    def Region(self) -> Region: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Right(self) -> int: ...
    @overload
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @overload
    @property
    def RightToLeftLayout(self) -> bool: ...
    @overload
    @property
    def ShowIcon(self) -> bool: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Site(self) -> ISite: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @overload
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def TabStop(self) -> bool: ...
    @overload
    @property
    def Tag(self) -> object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Top(self) -> int: ...
    @overload
    @property
    def TopLevel(self) -> bool: ...
    @overload
    @property
    def TopLevelControl(self) -> Control: ...
    @overload
    @property
    def TopMost(self) -> bool: ...
    @overload
    @property
    def TransparencyKey(self) -> Color: ...
    @overload
    @property
    def UseWaitCursor(self) -> bool: ...
    @overload
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowState(self) -> FormWindowState: ...
    @overload
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @overload
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @overload
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @overload
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @overload
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @overload
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @overload
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @overload
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @overload
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @overload
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @overload
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @overload
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @overload
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @overload
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @overload
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @overload
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @overload
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @overload
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @overload
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @overload
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @overload
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @overload
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @overload
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @overload
    @BasePoint.setter
    def BasePoint(self, AutoPropertyValue: Point) -> None: ...
    @overload
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @overload
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @overload
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @overload
    @Canvas.setter
    def Canvas(self, AutoPropertyValue: GH_Canvas) -> None: ...
    @overload
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @overload
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @overload
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @overload
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @overload
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @overload
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @overload
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @overload
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @overload
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @overload
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @overload
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @overload
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @overload
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @overload
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @overload
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: int) -> None: ...
    @overload
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @overload
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @overload
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @overload
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @overload
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @overload
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @overload
    @Left.setter
    def Left(self, value: int) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @overload
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @overload
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @overload
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @overload
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @overload
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @overload
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @overload
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @overload
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @overload
    @Name.setter
    def Name(self, value: str) -> None: ...
    @overload
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @overload
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @overload
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @overload
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @overload
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @overload
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @overload
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @overload
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @overload
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @overload
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @overload
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @overload
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @overload
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @overload
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @overload
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    @Top.setter
    def Top(self, value: int) -> None: ...
    @overload
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @overload
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @overload
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @overload
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @overload
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @overload
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @overload
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDefaultMessage(self) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def SetMessage(self, msg: str) -> None: ...
    @overload
    def SetNoResultsMessage(self) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


from ...Kernel import IGH_Attributes
class GH_ResizeBorder(GH_Border):
    @overload
    def __init__(self, borders: GH_Border): ...
    @overload
    def __init__(self, region: RectangleF, topology: GH_BorderTopology): ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Anchor(self) -> PointF: ...
    @overload
    @property
    def Region(self) -> RectangleF: ...
    @overload
    @property
    def Size_Cursor(self) -> Cursor: ...
    @overload
    @property
    def Topology(self) -> GH_BorderTopology: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Anchor.setter
    def Anchor(self, Value: PointF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF, MinSize: SizeF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF, MinSize: SizeF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF, MinSize: SizeF, MaxSize: SizeF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF, MinSize: SizeF, MaxSize: SizeF) -> None: ...
    @overload
    def Solve(self, nCursor: PointF) -> Tuple[RectangleF, PointF]: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import IGH_ActiveObject
class GH_Skin:
    canvas_mono: bool
    canvas_mono_color: Color
    canvas_back: Color
    canvas_edge: Color
    canvas_grid: Color
    canvas_shade: Color
    canvas_grid_col: int
    canvas_grid_row: int
    canvas_shade_size: int
    wire_default: Color
    wire_empty: Color
    wire_selected_a: Color
    wire_selected_b: Color
    group_back: Color
    panel_back: Color
    zui_fill: Color
    zui_edge: Color
    zui_fill_highlight: Color
    zui_edge_highlight: Color
    palette_black_standard: GH_PaletteStyle
    palette_black_selected: GH_PaletteStyle
    palette_grey_standard: GH_PaletteStyle
    palette_grey_selected: GH_PaletteStyle
    palette_white_standard: GH_PaletteStyle
    palette_white_selected: GH_PaletteStyle
    palette_blue_standard: GH_PaletteStyle
    palette_blue_selected: GH_PaletteStyle
    palette_brown_standard: GH_PaletteStyle
    palette_brown_selected: GH_PaletteStyle
    palette_pink_standard: GH_PaletteStyle
    palette_pink_selected: GH_PaletteStyle
    palette_trans_standard: GH_PaletteStyle
    palette_trans_selected: GH_PaletteStyle
    palette_normal_standard: GH_PaletteStyle
    palette_normal_selected: GH_PaletteStyle
    palette_hidden_standard: GH_PaletteStyle
    palette_hidden_selected: GH_PaletteStyle
    palette_locked_standard: GH_PaletteStyle
    palette_locked_selected: GH_PaletteStyle
    palette_warning_standard: GH_PaletteStyle
    palette_warning_selected: GH_PaletteStyle
    palette_error_standard: GH_PaletteStyle
    palette_error_selected: GH_PaletteStyle
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def LoadSkin() -> None: ...
    @overload
    @staticmethod
    def SaveSkin() -> None: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel import IGH_Attributes
class GH_Viewport:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, target: Point): ...
    @overload
    def __init__(self, viewport: GH_Viewport): ...
    @overload
    def __init__(self, target: Point, zoom: float): ...
    ZoomDefault: float
    ZoomDefaultLower: float
    ZoomDefaultUpper: float
    ZoomMinimum: float
    ZoomMaximum: float
    @overload
    def ApplyProjection(self, G: Graphics) -> None: ...
    @overload
    def ComputeProjection(self) -> None: ...
    @overload
    def DollyZoom(self, e: GH_CanvasMouseEvent) -> bool: ...
    @overload
    def Duplicate(self) -> GH_Viewport: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self, pt: Point) -> None: ...
    @overload
    def Focus(self, attributes: List) -> None: ...
    @overload
    def Focus(self, attribute: IGH_Attributes) -> None: ...
    @overload
    def Focus(self, pt: PointF) -> None: ...
    @overload
    @property
    def ControlMidPoint(self) -> PointF: ...
    @overload
    @property
    def Diagonal(self) -> float: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def MidPoint(self) -> PointF: ...
    @overload
    @property
    def ScreenPort(self) -> Rectangle: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Target(self) -> Point: ...
    @overload
    @property
    def TargetRatio(self) -> SizeF: ...
    @overload
    @property
    def Tx(self) -> int: ...
    @overload
    @property
    def Ty(self) -> int: ...
    @overload
    @property
    def VisibleRegion(self) -> RectangleF: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def Zoom(self) -> float: ...
    @overload
    @property
    def ZoomInverse(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsVisible(self, rec: RectangleF, margin: float) -> Tuple[bool, RectangleF]: ...
    @overload
    def IsVisible(self, pt: PointF, margin: float) -> Tuple[bool, PointF]: ...
    @overload
    def LimitUnit(self, guide_value: float, no_less_than: float, no_more_than: float) -> float: ...
    @overload
    def Project(self, pt: PointF) -> Tuple[PointF]: ...
    @overload
    def ProjectPoint(self, pt: PointF) -> PointF: ...
    @overload
    def ProjectRectangle(self, rec: RectangleF) -> RectangleF: ...
    @overload
    def ProjectX(self, x: float) -> float: ...
    @overload
    def ProjectY(self, y: float) -> float: ...
    @overload
    @Height.setter
    def Height(self, Value: int) -> None: ...
    @overload
    @MidPoint.setter
    def MidPoint(self, Value: PointF) -> None: ...
    @overload
    def Set(self, other: GH_Viewport) -> None: ...
    @overload
    @Size.setter
    def Size(self, Value: Size) -> None: ...
    @overload
    @Target.setter
    def Target(self, Value: Point) -> None: ...
    @overload
    @TargetRatio.setter
    def TargetRatio(self, Value: SizeF) -> None: ...
    @overload
    @Tx.setter
    def Tx(self, Value: int) -> None: ...
    @overload
    @Ty.setter
    def Ty(self, Value: int) -> None: ...
    @overload
    @Width.setter
    def Width(self, Value: int) -> None: ...
    @overload
    @Zoom.setter
    def Zoom(self, Value: float) -> None: ...
    @overload
    @Zoom.setter
    def Zoom(self, adjustTarget: bool, Value: float) -> None: ...
    @overload
    def SolveUnit(self, desired: float, no_less_than: float, no_more_than: float) -> float: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unproject(self, pt: PointF) -> Tuple[PointF]: ...
    @overload
    def UnprojectPoint(self, pt: PointF) -> PointF: ...
    @overload
    def UnprojectRectangle(self, rec: RectangleF) -> RectangleF: ...
    @overload
    def UnprojectX(self, x: float) -> float: ...
    @overload
    def UnprojectY(self, y: float) -> float: ...
    @overload
    def XFormMatrix(self, projection: GH_DisplayMatrix) -> Matrix: ...


class GH_WireDirection(Enum):
    left = 0
    right = 1


class GH_WireType(Enum):
    dynamic = 0
    wireless = 1
    generic = 2
    faint = 3
    null = 4
    item = 5
    list = 6
    tree = 7
    dynamicAlternative1 = 8


from ...Kernel import IGH_Param
from ...Kernel import IGH_DocumentObject
class IGH_CanvasValidator:
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id: Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id: Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    @overload
    def CanNavigateCanvas(self) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...


class IGH_ResponsiveObject:
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...


class IGH_TooltipAwareObject:
    @overload
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def IsTooltipRegion(self, canvasPoint: PointF) -> bool: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...


class ModifiersChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: EventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class NamedViewChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_NamedViewEditor, nView: GH_NamedView, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_NamedViewEditor, nView: GH_NamedView) -> None: ...
    @overload
    def ToString(self) -> str: ...


class NavigationSettingsChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SmoothFrameEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_NamedView, canvas: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_NamedView, canvas: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ViewportChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_CanvasViewportChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_CanvasViewportChangedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class WidgetListCreatedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_CanvasWidgetListEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_CanvasWidgetListEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
