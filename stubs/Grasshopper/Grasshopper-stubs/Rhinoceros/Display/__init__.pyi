from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Params

__all__ = ['Params']


class Attributes:
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Attributes) -> bool: ...
    @overload
    @property
    def Hidden(self) -> Nullable: ...
    @overload
    @property
    def Locked(self) -> Nullable: ...
    @overload
    @property
    def Viewport(self) -> ModelViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Hidden.setter
    def Hidden(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @Locked.setter
    def Locked(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @Viewport.setter
    def Viewport(self, AutoPropertyValue: ModelViewport) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Attributes) -> bool: ...
    @overload
    @property
    def Color(self) -> Nullable: ...
    @overload
    @property
    def Mode(self) -> ModelDisplayMode: ...
    @overload
    @property
    def WireDensity(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Color.setter
    def Color(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @Mode.setter
    def Mode(self, AutoPropertyValue: ModelDisplayMode) -> None: ...
    @overload
    @WireDensity.setter
    def WireDensity(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def DisplayMode(self) -> ModelDisplayMode: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    @property
    def View(self) -> ModelView: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @DisplayMode.setter
    def DisplayMode(self, AutoPropertyValue: ModelDisplayMode) -> None: ...
    @overload
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @overload
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @overload
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @overload
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @overload
    @UserText.setter
    def UserText(self, AutoPropertyValue: ModelUserText) -> None: ...
    @overload
    @View.setter
    def View(self, AutoPropertyValue: ModelView) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def DisplayMode(self) -> ModelDisplayMode: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    @property
    def View(self) -> ModelView: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @DisplayMode.setter
    def DisplayMode(self, AutoPropertyValue: ModelDisplayMode) -> None: ...
    @overload
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @overload
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @overload
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @overload
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @overload
    @UserText.setter
    def UserText(self, AutoPropertyValue: ModelUserText) -> None: ...
    @overload
    @View.setter
    def View(self, AutoPropertyValue: ModelView) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def DisplayMode(self) -> ModelDisplayMode: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def PageNumber(self) -> Nullable: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    @property
    def View(self) -> ModelView: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @DisplayMode.setter
    def DisplayMode(self, AutoPropertyValue: ModelDisplayMode) -> None: ...
    @overload
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @overload
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @overload
    @PageNumber.setter
    def PageNumber(self, value: Nullable) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @overload
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @overload
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @overload
    @UserText.setter
    def UserText(self, AutoPropertyValue: ModelUserText) -> None: ...
    @overload
    @View.setter
    def View(self, AutoPropertyValue: ModelView) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def View(self) -> ModelView: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @overload
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @overload
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @overload
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @overload
    @View.setter
    def View(self, AutoPropertyValue: ModelView) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @overload
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @overload
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @overload
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel.Types import IGH_Goo
from ...Kernel import GH_PreviewWireArgs
from ...Kernel import GH_PreviewMeshArgs
from ...Kernel.Types import IGH_GooProxy
class DisplayColorGradient:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, colour: ColorGradient): ...
    @overload
    def __init__(self, other: DisplayColorGradient): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    @overload
    def Duplicate(self) -> IGH_Goo: ...
    @overload
    def DuplicateColourGradient(self) -> DisplayColorGradient: ...
    @overload
    def EmitProxy(self) -> IGH_GooProxy: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def IsValidWhyNot(self) -> str: ...
    @overload
    @property
    def TypeDescription(self) -> str: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def Value(self) -> ColorGradient: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ScriptVariable(self) -> object: ...
    @overload
    @Value.setter
    def Value(self, new_value: ColorGradient) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from ...Kernel.Types import IGH_Goo
from ...Kernel.Types import GH_QuickCastType
from ...Kernel.Types import IGH_QuickCast
from ...Kernel.Types import Complex
from ...Kernel.Types import IGH_GooProxy
class DisplayColorStop:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, colour: ColorStop): ...
    @overload
    def __init__(self, other: DisplayColorStop): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Duplicate(self) -> IGH_Goo: ...
    @overload
    def DuplicateColorStop(self) -> DisplayColorStop: ...
    @overload
    def EmitProxy(self) -> IGH_GooProxy: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def IsValidWhyNot(self) -> str: ...
    @overload
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @overload
    @property
    def TypeDescription(self) -> str: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def Value(self) -> ColorStop: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def QC_Bool(self) -> bool: ...
    @overload
    def QC_Col(self) -> Color: ...
    @overload
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    @overload
    def QC_Complex(self) -> Complex: ...
    @overload
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    @overload
    def QC_Hash(self) -> int: ...
    @overload
    def QC_Int(self) -> int: ...
    @overload
    def QC_Interval(self) -> Interval: ...
    @overload
    def QC_Matrix(self) -> Matrix: ...
    @overload
    def QC_Num(self) -> float: ...
    @overload
    def QC_Pt(self) -> Point3d: ...
    @overload
    def QC_Text(self) -> str: ...
    @overload
    def QC_Vec(self) -> Vector3d: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ScriptVariable(self) -> object: ...
    @overload
    @Value.setter
    def Value(self, new_value: ColorStop) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class ModelDisplayMode(ModelContent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, displayMode: DisplayModeDescription): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelDisplayMode: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def Id(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def Unset() -> ModelDisplayMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(name: str) -> ModelDisplayMode: ...
    @overload
    def op_Implicit(id: Guid) -> ModelDisplayMode: ...
    @overload
    def op_Implicit(mode: DisplayModeDescription) -> ModelDisplayMode: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelDisplayMode: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ModelNamedView(ModelContent):
    @overload
    @staticmethod
    def Cast(data: object) -> ModelNamedView: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def Id(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def View(self) -> ModelView: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(viewportInfo: ViewInfo) -> ModelNamedView: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelNamedView: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ModelPageViewport(ModelViewport):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, viewport: RhinoViewport): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    @staticmethod
    def Cast(data: object) -> ModelPageViewport: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    @property
    def DisplayMode(self) -> ModelDisplayMode: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def Id(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def PageNumber(self) -> Nullable: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Space(self) -> ActiveSpace: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    @property
    def View(self) -> ModelView: ...
    @overload
    @property
    def ViewportType(self) -> ViewportType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(viewport: RhinoViewport) -> ModelPageViewport: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelPageViewport: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ModelStandardViewport(ModelViewport):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, viewport: RhinoViewport): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    @staticmethod
    def Cast(data: object) -> ModelStandardViewport: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    @property
    def DisplayMode(self) -> ModelDisplayMode: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def Id(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Space(self) -> ActiveSpace: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    @property
    def View(self) -> ModelView: ...
    @overload
    @property
    def ViewportType(self) -> ViewportType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(viewport: RhinoViewport) -> ModelStandardViewport: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelStandardViewport: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel.Types import IGH_GeometricGoo
class ModelView:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, viewportInfo: ViewportInfo): ...
    @overload
    def __init__(self, viewInfo: ViewInfo): ...
    @overload
    def __init__(self, view: RhinoView): ...
    @overload
    def __init__(self, viewport: RhinoViewport): ...
    @overload
    def __init__(self, ref_guid: Guid): ...
    @overload
    def __init__(self, other: ModelView): ...
    @overload
    def __init__(self, viewportInfo: ViewportInfo, title: str): ...
    @overload
    @staticmethod
    def Cast(data: object) -> ModelView: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelView) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetBoundingBox(self, xform: Transform) -> BoundingBox: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Morph(self, xmorph: SpaceMorph) -> IGH_GeometricGoo: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToViewportInfo(self) -> ViewportInfo: ...
    @overload
    def Transform(self, xform: Transform) -> IGH_GeometricGoo: ...


class ModelViewport(ModelContent):
    @overload
    @staticmethod
    def Cast(data: object) -> ModelViewport: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    @property
    def DisplayMode(self) -> ModelDisplayMode: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def Id(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Space(self) -> ActiveSpace: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def Unset() -> ModelViewport: ...
    @overload
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    @property
    def View(self) -> ModelView: ...
    @overload
    @property
    def ViewportType(self) -> ViewportType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(viewport: RhinoViewport) -> ModelViewport: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelViewport: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ObjectDisplay(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDisplay: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @overload
    @property
    def Color(self) -> Nullable: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Mode(self) -> ModelDisplayMode: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def WireDensity(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ObjectDisplay: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ObjectDisplayColor(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Value): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDisplayColor: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @overload
    @property
    def Color(self) -> Nullable: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Source(self) -> ObjectColorSource: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(data: ObjectDisplayColor) -> Value: ...
    @overload
    def op_Implicit(data: Value) -> ObjectDisplayColor: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ObjectVisibility(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectVisibility: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def Hidden(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Locked(self) -> Nullable: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def Viewport(self) -> ModelViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ObjectVisibility: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class Value:
    @overload
    def __init__(self, source: ObjectColorSource): ...
    @overload
    def __init__(self, color: ModelColor): ...
    @overload
    def __init__(self, source: ObjectColorSource, color: ModelColor): ...
    @overload
    def CompareTo(self, other: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Deconstruct(self) -> Tuple[ObjectColorSource, ModelColor]: ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def ByLayer() -> Value: ...
    @overload
    @property
    def ByMaterial() -> Value: ...
    @overload
    @property
    def ByParent() -> Value: ...
    @overload
    @property
    def Color(self) -> ModelColor: ...
    @overload
    @property
    def Source(self) -> ObjectColorSource: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(color: ModelColor) -> Value: ...
    @overload
    def op_Implicit(source: ObjectColorSource) -> Value: ...
    @overload
    def op_Implicit(value: Value) -> ModelColor: ...
    @overload
    def op_Implicit(value: Value) -> ObjectColorSource: ...
    @overload
    def ToString(self) -> str: ...
