from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Params

__all__ = ['Params']


class AnnotationArrow(ModelData):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, arrowType: ArrowType): ...
    @overload
    @staticmethod
    def Cast(source: object) -> AnnotationArrow: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    @property
    def ArrowType(self) -> Nullable: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(attributes: Attributes) -> AnnotationArrow: ...
    @overload
    def op_Implicit(arrowType: ArrowType) -> AnnotationArrow: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class AnnotationArrowSettings(ModelData):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, dimStyle: DimensionStyle): ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def Arrow1(self) -> AnnotationArrow: ...
    @overload
    @property
    def Arrow2(self) -> AnnotationArrow: ...
    @overload
    @property
    def ArrowSize(self) -> Nullable: ...
    @overload
    @property
    def DimensionInline(self) -> Nullable: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def FitArrow(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def LeaderArrow(self) -> AnnotationArrow: ...
    @overload
    @property
    def LeaderArrowSize(self) -> Nullable: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetDimensionStyle(self, baseDimensionStyle: DimensionStyle) -> Tuple[DimensionStyle]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Explicit(settings: AnnotationArrowSettings) -> DimensionStyle: ...
    @overload
    def op_Implicit(attributes: Attributes) -> AnnotationArrowSettings: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from ...Kernel.Types import GH_String
from ...Kernel.Types import IGH_Goo
from ...Kernel.Types import T
from ...Kernel.Types import GH_QuickCastType
from ...Kernel.Types import IGH_QuickCast
from ...Kernel.Types import Complex
from ...Kernel.Types import IGH_GooProxy
from ...Kernel.Types import GH_String
class AnnotationDateTimeFormat(GH_String):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: GH_String): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Duplicate(self) -> IGH_Goo: ...
    @overload
    def DuplicateString(self) -> GH_String: ...
    @overload
    def EmitProxy(self) -> IGH_GooProxy: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: AnnotationDateTimeFormat) -> bool: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def IsValidWhyNot(self) -> str: ...
    @overload
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @overload
    @property
    def TypeDescription(self) -> str: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def Value(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def QC_Bool(self) -> bool: ...
    @overload
    def QC_Col(self) -> Color: ...
    @overload
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    @overload
    def QC_Complex(self) -> Complex: ...
    @overload
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    @overload
    def QC_Hash(self) -> int: ...
    @overload
    def QC_Int(self) -> int: ...
    @overload
    def QC_Interval(self) -> Interval: ...
    @overload
    def QC_Matrix(self) -> Matrix: ...
    @overload
    def QC_Num(self) -> float: ...
    @overload
    def QC_Pt(self) -> Point3d: ...
    @overload
    def QC_Text(self) -> str: ...
    @overload
    def QC_Vec(self) -> Vector3d: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ScriptVariable(self) -> object: ...
    @overload
    @Value.setter
    def Value(self, new_value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class AnnotationDimensionSettings(ModelData):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, dimStyle: DimensionStyle): ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def BaselineSpacing(self) -> Nullable: ...
    @overload
    @property
    def CentermarkSize(self) -> Nullable: ...
    @overload
    @property
    def CentermarkStyle(self) -> Nullable: ...
    @overload
    @property
    def DecimalSeparator(self) -> Nullable: ...
    @overload
    @property
    def DimensionLineExtension(self) -> Nullable: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def ExtensionLineExtension(self) -> Nullable: ...
    @overload
    @property
    def ExtensionLineOffset(self) -> Nullable: ...
    @overload
    @property
    def FixedExtension(self) -> Nullable: ...
    @overload
    @property
    def FixedExtensionLength(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def RadialTextAngleType(self) -> Nullable: ...
    @overload
    @property
    def RadialTextLocation(self) -> Nullable: ...
    @overload
    @property
    def RadialTextOrientation(self) -> Nullable: ...
    @overload
    @property
    def SuppressExtension1(self) -> Nullable: ...
    @overload
    @property
    def SuppressExtension2(self) -> Nullable: ...
    @overload
    @property
    def TextAngleType(self) -> Nullable: ...
    @overload
    @property
    def TextLocation(self) -> Nullable: ...
    @overload
    @property
    def TextOrientation(self) -> Nullable: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetDimensionStyle(self, baseDimensionStyle: DimensionStyle) -> Tuple[DimensionStyle]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Explicit(setings: AnnotationDimensionSettings) -> DimensionStyle: ...
    @overload
    def op_Implicit(attributes: Attributes) -> AnnotationDimensionSettings: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class AnnotationLeaderSettings(ModelData):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, dimStyle: DimensionStyle): ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def ContentAngleType(self) -> Nullable: ...
    @overload
    @property
    def CurveType(self) -> Nullable: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def HasLanding(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def LandingLength(self) -> Nullable: ...
    @overload
    @property
    def TextHorizontalAlignment(self) -> Nullable: ...
    @overload
    @property
    def TextOrientation(self) -> Nullable: ...
    @overload
    @property
    def TextVerticalAlignment(self) -> Nullable: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetDimensionStyle(self, baseDimensionStyle: DimensionStyle) -> Tuple[DimensionStyle]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Explicit(settings: AnnotationLeaderSettings) -> DimensionStyle: ...
    @overload
    def op_Implicit(attributes: Attributes) -> AnnotationLeaderSettings: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class AnnotationTextSettings(ModelData):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, dimStyle: DimensionStyle): ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def DrawForward(self) -> Nullable: ...
    @overload
    @property
    def DrawTextMask(self) -> Nullable: ...
    @overload
    @property
    def FitText(self) -> Nullable: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def MaskColor(self) -> Nullable: ...
    @overload
    @property
    def MaskColorSource(self) -> Nullable: ...
    @overload
    @property
    def MaskFrame(self) -> Nullable: ...
    @overload
    @property
    def MaskOffset(self) -> Nullable: ...
    @overload
    @property
    def TextGap(self) -> Nullable: ...
    @overload
    @property
    def TextHeight(self) -> Nullable: ...
    @overload
    @property
    def TextHorizontalAlignment(self) -> Nullable: ...
    @overload
    @property
    def TextOrientation(self) -> Nullable: ...
    @overload
    @property
    def TextVerticalAlignment(self) -> Nullable: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetDimensionStyle(self, baseDimensionStyle: DimensionStyle) -> Tuple[DimensionStyle]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Explicit(settings: AnnotationTextSettings) -> DimensionStyle: ...
    @overload
    def op_Implicit(attributes: Attributes) -> AnnotationTextSettings: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class AnnotationToleranceSettings(ModelData):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, dimStyle: DimensionStyle): ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def AlternateToleranceResolution(self) -> Nullable: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def ToleranceFormat(self) -> Nullable: ...
    @overload
    @property
    def ToleranceHeightScale(self) -> Nullable: ...
    @overload
    @property
    def ToleranceLowerValue(self) -> Nullable: ...
    @overload
    @property
    def ToleranceResolution(self) -> Nullable: ...
    @overload
    @property
    def ToleranceUpperValue(self) -> Nullable: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetDimensionStyle(self, baseDimensionStyle: DimensionStyle) -> Tuple[DimensionStyle]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Explicit(settings: AnnotationToleranceSettings) -> DimensionStyle: ...
    @overload
    def op_Implicit(attributes: Attributes) -> AnnotationToleranceSettings: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class AnnotationUnitsSettings(ModelData):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, dimStyle: DimensionStyle): ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    @property
    def AngleFormat(self) -> Nullable: ...
    @overload
    @property
    def AngleResolution(self) -> Nullable: ...
    @overload
    @property
    def AngleRoundoff(self) -> Nullable: ...
    @overload
    @property
    def AngleZeroSuppression(self) -> Nullable: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def LengthDisplay(self) -> Nullable: ...
    @overload
    @property
    def LengthFactor(self) -> Nullable: ...
    @overload
    @property
    def LengthPrefix(self) -> str: ...
    @overload
    @property
    def LengthResolution(self) -> Nullable: ...
    @overload
    @property
    def LengthRoundoff(self) -> Nullable: ...
    @overload
    @property
    def LengthSuffix(self) -> str: ...
    @overload
    @property
    def LengthZeroSuppression(self) -> Nullable: ...
    @overload
    @property
    def StackFractionFormat(self) -> Nullable: ...
    @overload
    @property
    def StackHeightScale(self) -> Nullable: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetDimensionStyle(self, baseDimensionStyle: DimensionStyle) -> Tuple[DimensionStyle]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Explicit(settings: AnnotationUnitsSettings) -> DimensionStyle: ...
    @overload
    def op_Implicit(attributes: Attributes) -> AnnotationUnitsSettings: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @staticmethod
    def From(dimStyle: DimensionStyle) -> Attributes: ...
    @overload
    @property
    def AlternateToleranceResolution(self) -> Nullable: ...
    @overload
    @property
    def ToleranceFormat(self) -> Nullable: ...
    @overload
    @property
    def ToleranceHeightScale(self) -> Nullable: ...
    @overload
    @property
    def ToleranceLowerValue(self) -> Nullable: ...
    @overload
    @property
    def ToleranceResolution(self) -> Nullable: ...
    @overload
    @property
    def ToleranceUpperValue(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @AlternateToleranceResolution.setter
    def AlternateToleranceResolution(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @ToleranceFormat.setter
    def ToleranceFormat(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @ToleranceHeightScale.setter
    def ToleranceHeightScale(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @ToleranceLowerValue.setter
    def ToleranceLowerValue(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @ToleranceResolution.setter
    def ToleranceResolution(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @ToleranceUpperValue.setter
    def ToleranceUpperValue(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @staticmethod
    def From(dimStyle: DimensionStyle) -> Attributes: ...
    @overload
    @property
    def DrawForward(self) -> Nullable: ...
    @overload
    @property
    def DrawTextMask(self) -> Nullable: ...
    @overload
    @property
    def FitText(self) -> Nullable: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def MaskColor(self) -> Nullable: ...
    @overload
    @property
    def MaskColorSource(self) -> Nullable: ...
    @overload
    @property
    def MaskFrame(self) -> Nullable: ...
    @overload
    @property
    def MaskOffset(self) -> Nullable: ...
    @overload
    @property
    def TextGap(self) -> Nullable: ...
    @overload
    @property
    def TextHeight(self) -> Nullable: ...
    @overload
    @property
    def TextHorizontalAlignment(self) -> Nullable: ...
    @overload
    @property
    def TextOrientation(self) -> Nullable: ...
    @overload
    @property
    def TextVerticalAlignment(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @DrawForward.setter
    def DrawForward(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @DrawTextMask.setter
    def DrawTextMask(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @FitText.setter
    def FitText(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @Font.setter
    def Font(self, AutoPropertyValue: Font) -> None: ...
    @overload
    @MaskColor.setter
    def MaskColor(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @MaskColorSource.setter
    def MaskColorSource(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @MaskFrame.setter
    def MaskFrame(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @MaskOffset.setter
    def MaskOffset(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextGap.setter
    def TextGap(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextHeight.setter
    def TextHeight(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextHorizontalAlignment.setter
    def TextHorizontalAlignment(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextOrientation.setter
    def TextOrientation(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextVerticalAlignment.setter
    def TextVerticalAlignment(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @staticmethod
    def From(dimStyle: DimensionStyle) -> Attributes: ...
    @overload
    @property
    def ContentAngleType(self) -> Nullable: ...
    @overload
    @property
    def CurveType(self) -> Nullable: ...
    @overload
    @property
    def HasLanding(self) -> Nullable: ...
    @overload
    @property
    def LandingLength(self) -> Nullable: ...
    @overload
    @property
    def TextHorizontalAlignment(self) -> Nullable: ...
    @overload
    @property
    def TextOrientation(self) -> Nullable: ...
    @overload
    @property
    def TextVerticalAlignment(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @ContentAngleType.setter
    def ContentAngleType(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @CurveType.setter
    def CurveType(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @HasLanding.setter
    def HasLanding(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @LandingLength.setter
    def LandingLength(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextHorizontalAlignment.setter
    def TextHorizontalAlignment(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextOrientation.setter
    def TextOrientation(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextVerticalAlignment.setter
    def TextVerticalAlignment(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @property
    def ArrowSettings(self) -> AnnotationArrowSettings: ...
    @overload
    @property
    def DimensionScale(self) -> Nullable: ...
    @overload
    @property
    def DimensionSettings(self) -> AnnotationDimensionSettings: ...
    @overload
    @property
    def LeaderSettings(self) -> AnnotationLeaderSettings: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def TextSettings(self) -> AnnotationTextSettings: ...
    @overload
    @property
    def ToleranceSettings(self) -> AnnotationToleranceSettings: ...
    @overload
    @property
    def UnitsSettings(self) -> AnnotationUnitsSettings: ...
    @overload
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(path: str) -> Attributes: ...
    @overload
    @ArrowSettings.setter
    def ArrowSettings(self, AutoPropertyValue: AnnotationArrowSettings) -> None: ...
    @overload
    @DimensionScale.setter
    def DimensionScale(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @DimensionSettings.setter
    def DimensionSettings(self, AutoPropertyValue: AnnotationDimensionSettings) -> None: ...
    @overload
    @LeaderSettings.setter
    def LeaderSettings(self, AutoPropertyValue: AnnotationLeaderSettings) -> None: ...
    @overload
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @overload
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @overload
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @overload
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @overload
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @overload
    @TextSettings.setter
    def TextSettings(self, AutoPropertyValue: AnnotationTextSettings) -> None: ...
    @overload
    @ToleranceSettings.setter
    def ToleranceSettings(self, AutoPropertyValue: AnnotationToleranceSettings) -> None: ...
    @overload
    @UnitsSettings.setter
    def UnitsSettings(self, AutoPropertyValue: AnnotationUnitsSettings) -> None: ...
    @overload
    @UserText.setter
    def UserText(self, AutoPropertyValue: ModelUserText) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @staticmethod
    def From(dimStyle: DimensionStyle) -> Attributes: ...
    @overload
    @property
    def Arrow1(self) -> AnnotationArrow: ...
    @overload
    @property
    def Arrow2(self) -> AnnotationArrow: ...
    @overload
    @property
    def ArrowSize(self) -> Nullable: ...
    @overload
    @property
    def DimensionInline(self) -> Nullable: ...
    @overload
    @property
    def FitArrow(self) -> Nullable: ...
    @overload
    @property
    def LeaderArrow(self) -> AnnotationArrow: ...
    @overload
    @property
    def LeaderArrowSize(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @Arrow1.setter
    def Arrow1(self, AutoPropertyValue: AnnotationArrow) -> None: ...
    @overload
    @Arrow2.setter
    def Arrow2(self, AutoPropertyValue: AnnotationArrow) -> None: ...
    @overload
    @ArrowSize.setter
    def ArrowSize(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @DimensionInline.setter
    def DimensionInline(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @FitArrow.setter
    def FitArrow(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @LeaderArrow.setter
    def LeaderArrow(self, AutoPropertyValue: AnnotationArrow) -> None: ...
    @overload
    @LeaderArrowSize.setter
    def LeaderArrowSize(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @staticmethod
    def From(arrowType: ArrowType) -> Attributes: ...
    @overload
    @property
    def ArrowType(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @ArrowType.setter
    def ArrowType(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @staticmethod
    def From(dimStyle: DimensionStyle) -> Attributes: ...
    @overload
    @property
    def AngleFormat(self) -> Nullable: ...
    @overload
    @property
    def AngleResolution(self) -> Nullable: ...
    @overload
    @property
    def AngleRoundoff(self) -> Nullable: ...
    @overload
    @property
    def AngleZeroSuppression(self) -> Nullable: ...
    @overload
    @property
    def LengthDisplay(self) -> Nullable: ...
    @overload
    @property
    def LengthFactor(self) -> Nullable: ...
    @overload
    @property
    def LengthPrefix(self) -> str: ...
    @overload
    @property
    def LengthResolution(self) -> Nullable: ...
    @overload
    @property
    def LengthRoundoff(self) -> Nullable: ...
    @overload
    @property
    def LengthSuffix(self) -> str: ...
    @overload
    @property
    def LengthZeroSuppression(self) -> Nullable: ...
    @overload
    @property
    def StackFractionFormat(self) -> Nullable: ...
    @overload
    @property
    def StackHeightScale(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @AngleFormat.setter
    def AngleFormat(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @AngleResolution.setter
    def AngleResolution(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @AngleRoundoff.setter
    def AngleRoundoff(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @AngleZeroSuppression.setter
    def AngleZeroSuppression(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @LengthDisplay.setter
    def LengthDisplay(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @LengthFactor.setter
    def LengthFactor(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @LengthPrefix.setter
    def LengthPrefix(self, AutoPropertyValue: str) -> None: ...
    @overload
    @LengthResolution.setter
    def LengthResolution(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @LengthRoundoff.setter
    def LengthRoundoff(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @LengthSuffix.setter
    def LengthSuffix(self, AutoPropertyValue: str) -> None: ...
    @overload
    @LengthZeroSuppression.setter
    def LengthZeroSuppression(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @StackFractionFormat.setter
    def StackFractionFormat(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @StackHeightScale.setter
    def StackHeightScale(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    @staticmethod
    def From(dimStyle: DimensionStyle) -> Attributes: ...
    @overload
    @property
    def BaselineSpacing(self) -> Nullable: ...
    @overload
    @property
    def CentermarkSize(self) -> Nullable: ...
    @overload
    @property
    def CentermarkStyle(self) -> Nullable: ...
    @overload
    @property
    def DecimalSeparator(self) -> Nullable: ...
    @overload
    @property
    def DimensionLineExtension(self) -> Nullable: ...
    @overload
    @property
    def ExtensionLineExtension(self) -> Nullable: ...
    @overload
    @property
    def ExtensionLineOffset(self) -> Nullable: ...
    @overload
    @property
    def FixedExtension(self) -> Nullable: ...
    @overload
    @property
    def FixedExtensionLength(self) -> Nullable: ...
    @overload
    @property
    def RadialTextAngleType(self) -> Nullable: ...
    @overload
    @property
    def RadialTextLocation(self) -> Nullable: ...
    @overload
    @property
    def RadialTextOrientation(self) -> Nullable: ...
    @overload
    @property
    def SuppressExtension1(self) -> Nullable: ...
    @overload
    @property
    def SuppressExtension2(self) -> Nullable: ...
    @overload
    @property
    def TextAngleType(self) -> Nullable: ...
    @overload
    @property
    def TextLocation(self) -> Nullable: ...
    @overload
    @property
    def TextOrientation(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @BaselineSpacing.setter
    def BaselineSpacing(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @CentermarkSize.setter
    def CentermarkSize(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @CentermarkStyle.setter
    def CentermarkStyle(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @DecimalSeparator.setter
    def DecimalSeparator(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @DimensionLineExtension.setter
    def DimensionLineExtension(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @ExtensionLineExtension.setter
    def ExtensionLineExtension(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @ExtensionLineOffset.setter
    def ExtensionLineOffset(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @FixedExtension.setter
    def FixedExtension(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @FixedExtensionLength.setter
    def FixedExtensionLength(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @RadialTextAngleType.setter
    def RadialTextAngleType(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @RadialTextLocation.setter
    def RadialTextLocation(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @RadialTextOrientation.setter
    def RadialTextOrientation(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @SuppressExtension1.setter
    def SuppressExtension1(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @SuppressExtension2.setter
    def SuppressExtension2(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextAngleType.setter
    def TextAngleType(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextLocation.setter
    def TextLocation(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    @TextOrientation.setter
    def TextOrientation(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class ModelAnnotationStyle(ModelComponentContent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, dimStyle: DimensionStyle): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelAnnotationStyle: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    @property
    def ArrowSettings(self) -> AnnotationArrowSettings: ...
    @overload
    @property
    def DimensionScale(self) -> Nullable: ...
    @overload
    @property
    def DimensionSettings(self) -> AnnotationDimensionSettings: ...
    @overload
    @property
    def DisplayName(self) -> str: ...
    @overload
    @property
    def Id(self) -> Nullable: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def LeaderSettings(self) -> AnnotationLeaderSettings: ...
    @overload
    @property
    def Name(self) -> ModelContentName: ...
    @overload
    @property
    def Notes(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ModelContentName: ...
    @overload
    @property
    def Path(self) -> ModelContentName: ...
    @overload
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    @property
    def TextSettings(self) -> AnnotationTextSettings: ...
    @overload
    @property
    def ToleranceSettings(self) -> AnnotationToleranceSettings: ...
    @overload
    @property
    def TypeName(self) -> str: ...
    @overload
    @property
    def UnitsSettings(self) -> AnnotationUnitsSettings: ...
    @overload
    @property
    def Unset() -> ModelAnnotationStyle: ...
    @overload
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(style: DimensionStyle) -> ModelAnnotationStyle: ...
    @overload
    def op_Implicit(path: str) -> ModelAnnotationStyle: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelAnnotationStyle: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...
