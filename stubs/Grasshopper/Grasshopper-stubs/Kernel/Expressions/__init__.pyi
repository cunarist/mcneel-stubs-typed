from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class GH_CharType(Enum):
    undefined = 0
    whitespace = 1
    dot = 2
    comma = 3
    colon = 4
    semicolon = 5
    continuation = 6
    newline = 7
    operator = 20
    parenthesis_open = 21
    parenthesis_close = 22
    bracket_open = 23
    bracket_close = 24
    stringstart = 50
    stringend = 51
    stringbody = 52
    commentstart = 60
    commentend = 61
    commentbody = 62


class GH_CodeString:
    @overload
    def __init__(self, input: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Flatten(self) -> str: ...
    @property
    def Segments(self) -> List: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ParseNewString(self, input: str) -> None: ...
    @overload
    def Replace(self, search: str, replace: str, bIgnoreCase: bool, bOmitNonCode: bool) -> None: ...
    @overload
    def ReplaceToken(self, search: str, replace: str, bIgnoreCase: bool, bOmitNonCode: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_CodeStringSegment:
    @overload
    def __init__(self, nString: str, bIsCode: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsCode(self) -> bool: ...
    @property
    def String(self) -> str: ...
    @property
    def StringValue(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Replace(self, search: str, replace: str, bIgnoreCase: bool) -> None: ...
    @overload
    def ReplaceToken(self, token: str, replace: str, bIgnoreCase: bool) -> None: ...
    @IsCode.setter
    def IsCode(self, Value: bool) -> None: ...
    @String.setter
    def String(self, Value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Windows.Forms import IWin32Window
from ..Types import Complex
from Rhino.Geometry import Vector3d
from Rhino.Geometry import Point3d
from Rhino.Geometry import Plane
from ..Types import IGH_Goo
from System.Collections.Generic import SortedDictionary
from System.Collections.Generic import Queue
from System import Char
class GH_ExpressionParser:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, bThrowExceptions: bool): ...
    @overload
    def AddVariable(self, name: str, val: bool) -> None: ...
    @overload
    def AddVariable(self, name: str, val: int) -> None: ...
    @overload
    def AddVariable(self, name: str, val: float) -> None: ...
    @overload
    def AddVariable(self, name: str, val: Complex) -> None: ...
    @overload
    def AddVariable(self, name: str, val: str) -> None: ...
    @overload
    def AddVariable(self, name: str, val: Vector3d) -> None: ...
    @overload
    def AddVariable(self, name: str, val: Point3d) -> None: ...
    @overload
    def AddVariable(self, name: str, val: Plane) -> None: ...
    @overload
    def AddVariableEx(self, name: str, val: IGH_Goo) -> None: ...
    @overload
    def AddVariableEx(self, name: str, val: GH_Variant) -> None: ...
    @overload
    @staticmethod
    def BalancedCharTest(str: str, char_open: Char, char_close: Char) -> Tuple[bool, int]: ...
    @overload
    def CachedSymbols(self) -> Queue: ...
    @overload
    def CacheSymbols(self, Expression: str) -> bool: ...
    @overload
    def ClearSymbols(self) -> None: ...
    @overload
    def ClearVariables(self) -> None: ...
    @overload
    def DisplayFunctionList(self, wnd: IWin32Window) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Evaluate(self) -> GH_Variant: ...
    @overload
    def Evaluate(self, qHint: Queue) -> GH_Variant: ...
    @overload
    def Evaluate(self, expression: str) -> GH_Variant: ...
    @property
    def ThrowExceptions(self) -> bool: ...
    @property
    def Variables(self) -> SortedDictionary: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsValidVariableName(name: str) -> bool: ...
    @ThrowExceptions.setter
    def ThrowExceptions(self, Value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Char
from System.Collections.ObjectModel import ReadOnlyCollection
from System.Collections.Generic import IComparer
from System import Predicate
from System import Action
from System.Collections.Generic import Enumerator
from System import Comparison
from System import Converter
class GH_ExpressionString:
    @overload
    def __init__(self, in_: str): ...
    def __iter__(self) -> Iterator[Char]: ...
    def __getitem__(self, index: int) -> Char: ...
    def __setitem__(self, index: int, value: Char): ...
    @overload
    def Add(self, item: Char) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[Char]) -> None: ...
    @overload
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: Char) -> int: ...
    @overload
    def BinarySearch(self, item: Char, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: Char, comparer: IComparer) -> int: ...
    @overload
    def BuildLUT(self) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: Char) -> bool: ...
    @overload
    def ConvertAll(self, converter: Converter) -> List: ...
    @overload
    def CopyTo(self, array: Iterable[Char]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[Char], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[Char], arrayIndex: int, count: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Exists(self, match: Predicate) -> bool: ...
    @overload
    def Find(self, match: Predicate) -> Char: ...
    @overload
    def FindAll(self, match: Predicate) -> List: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def FindLast(self, match: Predicate) -> Char: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Char(self) -> Sequence[Char]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Next(self) -> Sequence[Char]: ...
    @property
    def Prev(self) -> Sequence[Char]: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRange(self, index: int, count: int) -> List: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: Char) -> int: ...
    @overload
    def IndexOf(self, item: Char, index: int) -> int: ...
    @overload
    def IndexOf(self, item: Char, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, item: Char) -> None: ...
    @overload
    def InsertRange(self, index: int, collection: Iterable[Char]) -> None: ...
    @overload
    def IsWhiteSpace(self, index: int) -> bool: ...
    @overload
    def LastIndexOf(self, item: Char) -> int: ...
    @overload
    def LastIndexOf(self, item: Char, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: Char, index: int, count: int) -> int: ...
    @overload
    def Remove(self, item: Char) -> bool: ...
    @overload
    def RemoveAll(self, match: Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @property
    def Item(self) -> MutableSequence[Char]: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    @overload
    def ToArray(self) -> Iterable[Char]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TrimExcess(self) -> None: ...
    @overload
    def TrueForAll(self, match: Predicate) -> bool: ...


class GH_ExpressionSyntaxWriter:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def RewriteAll(Expression: str) -> str: ...
    @overload
    @staticmethod
    def RewriteForEvaluator(Expression: str) -> str: ...
    @overload
    @staticmethod
    def RewriteForEvaluator(sCode: GH_CodeString) -> None: ...
    @overload
    @staticmethod
    def RewriteForGraphicInterface(expression: str) -> str: ...
    @overload
    @staticmethod
    def RewriteForGraphicInterface(code: GH_CodeString) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_OperatorType(Enum):
    UnaryOnLeft = 0
    UnaryOnRight = 1
    Binary = 2


from System import Char
class GH_ParserOperator:
    @overload
    def __init__(self, name: str, symbol: Char, precedence: GH_ParserPrecedence, type: GH_OperatorType, description: str): ...
    m_name: str
    m_symbol: Char
    m_description: str
    m_type: GH_OperatorType
    m_precedence: GH_ParserPrecedence
    @overload
    def CompareTo(self, other: GH_ParserOperator) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_ParserPrecedence(Enum):
    # None = 0
    Level0 = 1
    Level1 = 2
    Level2 = 3
    Level3 = 4
    Level4 = 5
    Level5 = 6
    Invalid = -1


class GH_ParserSymbol:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, token: str, class_: GH_ParserTokenClass, level: GH_ParserPrecedence): ...
    m_token: str
    m_class: GH_ParserTokenClass
    m_level: GH_ParserPrecedence
    @overload
    def CompareTo(self, other: GH_ParserSymbol) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_ParserTokenClass(Enum):
    Keyword = 1
    Identifier = 2
    Numeric = 3
    Literal = 4
    Operator = 5
    Punctuation = 6


from System import DateTime
from Rhino.Geometry import Point3d
from Rhino.Geometry import Vector3d
from Rhino.Geometry import Plane
class GH_ScriptVariant:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, val: float): ...
    @overload
    def __init__(self, val: int): ...
    @overload
    def __init__(self, val: int): ...
    @overload
    def __init__(self, val: bool): ...
    @overload
    def __init__(self, val: str): ...
    @overload
    def __init__(self, val: DateTime): ...
    @overload
    def __init__(self, val: Point3d): ...
    @overload
    def __init__(self, val: Vector3d): ...
    @overload
    def __init__(self, val: Plane): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Boolean(self) -> bool: ...
    @property
    def DateTime(self) -> DateTime: ...
    @property
    def Double(self) -> float: ...
    @property
    def Integer(self) -> int: ...
    @property
    def Object(self) -> object: ...
    @property
    def Plane(self) -> Plane: ...
    @property
    def Point(self) -> Point3d: ...
    @property
    def String(self) -> str: ...
    @property
    def Type(self) -> GH_ScriptVariantType: ...
    @property
    def Vector(self) -> Vector3d: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __add__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __and__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def __or__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def __add__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __truediv__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __eq__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def __xor__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def op_Explicit(in_: GH_ScriptVariant) -> Point3d: ...
    @overload
    def op_Explicit(in_: GH_ScriptVariant) -> str: ...
    @overload
    def op_Explicit(in_: GH_ScriptVariant) -> float: ...
    @overload
    def op_Explicit(in_: GH_ScriptVariant) -> int: ...
    @overload
    def op_Explicit(in_: GH_ScriptVariant) -> bool: ...
    @overload
    def op_Explicit(in_: GH_ScriptVariant) -> Plane: ...
    @overload
    def op_Explicit(in_: GH_ScriptVariant) -> Vector3d: ...
    @overload
    def op_Explicit(in_: GH_ScriptVariant) -> DateTime: ...
    @overload
    def __pow__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __bool__(A: GH_ScriptVariant) -> bool: ...
    @overload
    def __gt__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def __ge__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def op_Implicit(in_: Plane) -> GH_ScriptVariant: ...
    @overload
    def op_Implicit(in_: Point3d) -> GH_ScriptVariant: ...
    @overload
    def op_Implicit(in_: DateTime) -> GH_ScriptVariant: ...
    @overload
    def op_Implicit(in_: str) -> GH_ScriptVariant: ...
    @overload
    def op_Implicit(in_: float) -> GH_ScriptVariant: ...
    @overload
    def op_Implicit(in_: int) -> GH_ScriptVariant: ...
    @overload
    def op_Implicit(in_: Vector3d) -> GH_ScriptVariant: ...
    @overload
    def op_Implicit(in_: bool) -> GH_ScriptVariant: ...
    @overload
    def __ne__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def __floordiv__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __lshift__(A: GH_ScriptVariant, B: int) -> GH_ScriptVariant: ...
    @overload
    def __lt__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def __le__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> bool: ...
    @overload
    def __mod__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __mul__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __invert__(A: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __rshift__(A: GH_ScriptVariant, B: int) -> GH_ScriptVariant: ...
    @overload
    def __sub__(A: GH_ScriptVariant, B: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __bool__(A: GH_ScriptVariant) -> bool: ...
    @overload
    def __neg__(A: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def __pos__(A: GH_ScriptVariant) -> GH_ScriptVariant: ...
    @overload
    def ToString(self) -> str: ...


class GH_ScriptVariantType(Enum):
    nothing = 0
    boolean = 1
    integer = 2
    double = 3
    string = 5
    datetime = 6
    point = 10
    vector = 11
    plane = 12
    object = 20


from System.Collections import IDictionary
from System.Reflection import MethodBase
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
class GH_SignatureException:
    @overload
    def __init__(self, args: List, name: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetType(self) -> type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections import IDictionary
from System.Reflection import MethodBase
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
class GH_SolverException:
    @overload
    def __init__(self, nMessage: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetType(self) -> type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections import IDictionary
from System.Reflection import MethodBase
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
class GH_SyntaxException:
    @overload
    def __init__(self, nMessage: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @property
    def HResult(self) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetType(self) -> type: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @Source.setter
    def Source(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Types import Complex
from Rhino.Geometry import Point3d
from Rhino.Geometry import Vector3d
from Rhino.Geometry import Plane
from ..Types import IGH_Goo
class GH_Variant:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: bool): ...
    @overload
    def __init__(self, value: int): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, value: str): ...
    @overload
    def __init__(self, value: Complex): ...
    @overload
    def __init__(self, value: Point3d): ...
    @overload
    def __init__(self, value: Vector3d): ...
    @overload
    def __init__(self, value: Plane): ...
    @overload
    def __init__(self, other: GH_Variant): ...
    @overload
    def Data(self) -> T: ...
    @overload
    def Duplicate(self) -> GH_Variant: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Evaluate(self) -> bool: ...
    @property
    def _Bool(self) -> bool: ...
    @property
    def _Complex(self) -> Complex: ...
    @property
    def _Double(self) -> float: ...
    @property
    def _Int(self) -> int: ...
    @property
    def _Plane(self) -> Plane: ...
    @property
    def _Point(self) -> Point3d: ...
    @property
    def _String(self) -> str: ...
    @property
    def _Vector(self) -> Vector3d: ...
    @property
    def IsNumeric(self) -> bool: ...
    @property
    def Type(self) -> GH_VariantType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToGoo(self) -> IGH_Goo: ...
    @overload
    def ToString(self) -> str: ...


class GH_VariantType(Enum):
    null = 0
    bool = 1
    int = 2
    double = 4
    string = 8
    point = 16
    plane = 32
    complex = 64
    unknown = -1
