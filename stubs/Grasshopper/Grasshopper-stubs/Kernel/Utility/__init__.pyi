from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from Rhino.Geometry import Interval
class GH_Interval_Wrapper:
    @overload
    def __init__(self, interval: Interval, wrapperdelegate: GH_IntervalWrapperDelegate): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def A(self) -> float: ...
    @property
    def B(self) -> float: ...
    @property
    def Increasing(self) -> str: ...
    @property
    def Length(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InternalInterval(self) -> Interval: ...
    @A.setter
    def A(self, set_value: float) -> None: ...
    @B.setter
    def B(self, set_value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.ComponentModel import ITypeDescriptorContext
from System.Globalization import CultureInfo
from System.ComponentModel import PropertyDescriptorCollection
from System.Collections import IDictionary
from System.Collections import ICollection
from System.ComponentModel import StandardValuesCollection
class GH_Interval_Wrapper_TypeConverter:
    @overload
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, sourceType: type) -> bool: ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: type) -> bool: ...
    @overload
    def CanConvertTo(self, destinationType: type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: type) -> bool: ...
    @overload
    def ConvertFrom(self, value: object) -> object: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object: ...
    @overload
    def ConvertFromInvariantString(self, text: str) -> object: ...
    @overload
    def ConvertFromInvariantString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, culture: CultureInfo, text: str) -> object: ...
    @overload
    def ConvertTo(self, value: object, destinationType: type) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: type) -> object: ...
    @overload
    def ConvertToInvariantString(self, value: object) -> str: ...
    @overload
    def ConvertToInvariantString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> str: ...
    @overload
    def CreateInstance(self, propertyValues: IDictionary) -> object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetProperties(self, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: Iterable[Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self) -> bool: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValues(self) -> ICollection: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self) -> bool: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValid(self, value: object) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from Rhino.Geometry import Interval
from System import AsyncCallback
from System import IAsyncResult
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Reflection import MethodInfo
class GH_IntervalWrapperDelegate:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Interval_Wrapper, interval: Interval, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Interval_Wrapper, interval: Interval) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import Plane
from Rhino.Geometry import Vector3d
class GH_PlaneModifier:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Set_X(P: Plane, x_axis: Vector3d) -> Plane: ...
    @overload
    @staticmethod
    def Set_Y(P: Plane, y_axis: Vector3d) -> Plane: ...
    @overload
    @staticmethod
    def Set_Z(P: Plane, z_axis: Vector3d) -> Plane: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import Point3d
class GH_Point3d_Wrapper:
    @overload
    def __init__(self, pt: Point3d, wrapperdelegate: GH_Point3dWrapperDelegate): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @property
    def Z(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InternalPoint(self) -> Point3d: ...
    @X.setter
    def X(self, set_value: float) -> None: ...
    @Y.setter
    def Y(self, set_value: float) -> None: ...
    @Z.setter
    def Z(self, set_value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.ComponentModel import ITypeDescriptorContext
from System.Globalization import CultureInfo
from System.ComponentModel import PropertyDescriptorCollection
from System.Collections import IDictionary
from System.Collections import ICollection
from System.ComponentModel import StandardValuesCollection
class GH_Point3d_Wrapper_TypeConverter:
    @overload
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, sourceType: type) -> bool: ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: type) -> bool: ...
    @overload
    def CanConvertTo(self, destinationType: type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: type) -> bool: ...
    @overload
    def ConvertFrom(self, value: object) -> object: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object: ...
    @overload
    def ConvertFromInvariantString(self, text: str) -> object: ...
    @overload
    def ConvertFromInvariantString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, culture: CultureInfo, text: str) -> object: ...
    @overload
    def ConvertTo(self, value: object, destinationType: type) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: type) -> object: ...
    @overload
    def ConvertToInvariantString(self, value: object) -> str: ...
    @overload
    def ConvertToInvariantString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> str: ...
    @overload
    def CreateInstance(self, propertyValues: IDictionary) -> object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetProperties(self, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: Iterable[Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self) -> bool: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValues(self) -> ICollection: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self) -> bool: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValid(self, value: object) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from Rhino.Geometry import Point3d
from System import AsyncCallback
from System import IAsyncResult
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Reflection import MethodInfo
class GH_Point3dWrapperDelegate:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Point3d_Wrapper, point: Point3d, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Point3d_Wrapper, point: Point3d) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Types import GH_PointRefData
class GH_PointRefUV_Wrapper:
    @overload
    def __init__(self, ref: GH_PointRefData, wrapperdelegate: GH_PointRefUVWrapperDelegate): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def U(self) -> float: ...
    @property
    def V(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InternalRefence(self) -> GH_PointRefData: ...
    @U.setter
    def U(self, set_value: float) -> None: ...
    @V.setter
    def V(self, set_value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.ComponentModel import ITypeDescriptorContext
from System.Globalization import CultureInfo
from System.ComponentModel import PropertyDescriptorCollection
from System.Collections import IDictionary
from System.Collections import ICollection
from System.ComponentModel import StandardValuesCollection
class GH_PointRefUV_Wrapper_TypeConverter:
    @overload
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, sourceType: type) -> bool: ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: type) -> bool: ...
    @overload
    def CanConvertTo(self, destinationType: type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: type) -> bool: ...
    @overload
    def ConvertFrom(self, value: object) -> object: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object: ...
    @overload
    def ConvertFromInvariantString(self, text: str) -> object: ...
    @overload
    def ConvertFromInvariantString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, culture: CultureInfo, text: str) -> object: ...
    @overload
    def ConvertTo(self, value: object, destinationType: type) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: type) -> object: ...
    @overload
    def ConvertToInvariantString(self, value: object) -> str: ...
    @overload
    def ConvertToInvariantString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> str: ...
    @overload
    def CreateInstance(self, propertyValues: IDictionary) -> object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetProperties(self, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: Iterable[Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self) -> bool: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValues(self) -> ICollection: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self) -> bool: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValid(self, value: object) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from ..Types import GH_PointRefData
from System import AsyncCallback
from System import IAsyncResult
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Reflection import MethodInfo
class GH_PointRefUVWrapperDelegate:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_PointRefUV_Wrapper, ref: GH_PointRefData, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_PointRefUV_Wrapper, ref: GH_PointRefData) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import Vector3d
class GH_Vector3d_Wrapper:
    @overload
    def __init__(self, vec: Vector3d, wrapperdelegate: GH_Vector3dWrapperDelegate): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Length(self) -> str: ...
    @property
    def Tiny(self) -> str: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @property
    def Z(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InternalVector(self) -> Vector3d: ...
    @X.setter
    def X(self, set_value: float) -> None: ...
    @Y.setter
    def Y(self, set_value: float) -> None: ...
    @Z.setter
    def Z(self, set_value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.ComponentModel import ITypeDescriptorContext
from System.Globalization import CultureInfo
from System.ComponentModel import PropertyDescriptorCollection
from System.Collections import IDictionary
from System.Collections import ICollection
from System.ComponentModel import StandardValuesCollection
class GH_Vector3d_Wrapper_TypeConverter:
    @overload
    def __init__(self): ...
    @overload
    def CanConvertFrom(self, sourceType: type) -> bool: ...
    @overload
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: type) -> bool: ...
    @overload
    def CanConvertTo(self, destinationType: type) -> bool: ...
    @overload
    def CanConvertTo(self, context: ITypeDescriptorContext, destinationType: type) -> bool: ...
    @overload
    def ConvertFrom(self, value: object) -> object: ...
    @overload
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object: ...
    @overload
    def ConvertFromInvariantString(self, text: str) -> object: ...
    @overload
    def ConvertFromInvariantString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, text: str) -> object: ...
    @overload
    def ConvertFromString(self, context: ITypeDescriptorContext, culture: CultureInfo, text: str) -> object: ...
    @overload
    def ConvertTo(self, value: object, destinationType: type) -> object: ...
    @overload
    def ConvertTo(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: type) -> object: ...
    @overload
    def ConvertToInvariantString(self, value: object) -> str: ...
    @overload
    def ConvertToInvariantString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, value: object) -> str: ...
    @overload
    def ConvertToString(self, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> str: ...
    @overload
    def CreateInstance(self, propertyValues: IDictionary) -> object: ...
    @overload
    def CreateInstance(self, context: ITypeDescriptorContext, propertyValues: IDictionary) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self) -> bool: ...
    @overload
    def GetCreateInstanceSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetProperties(self, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object) -> PropertyDescriptorCollection: ...
    @overload
    def GetProperties(self, context: ITypeDescriptorContext, value: object, attributes: Iterable[Attribute]) -> PropertyDescriptorCollection: ...
    @overload
    def GetPropertiesSupported(self) -> bool: ...
    @overload
    def GetPropertiesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValues(self) -> ICollection: ...
    @overload
    def GetStandardValues(self, context: ITypeDescriptorContext) -> StandardValuesCollection: ...
    @overload
    def GetStandardValuesExclusive(self) -> bool: ...
    @overload
    def GetStandardValuesExclusive(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetStandardValuesSupported(self) -> bool: ...
    @overload
    def GetStandardValuesSupported(self, context: ITypeDescriptorContext) -> bool: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsValid(self, value: object) -> bool: ...
    @overload
    def IsValid(self, context: ITypeDescriptorContext, value: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from Rhino.Geometry import Vector3d
from System import AsyncCallback
from System import IAsyncResult
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Reflection import MethodInfo
class GH_Vector3dWrapperDelegate:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Vector3d_Wrapper, vector: Vector3d, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Vector3d_Wrapper, vector: Vector3d) -> None: ...
    @overload
    def ToString(self) -> str: ...
