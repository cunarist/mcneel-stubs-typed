from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class Generic:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, transform: Transform): ...
    def Duplicate(self) -> ITransform: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Transform(self) -> Transform: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Reverse(self) -> ITransform: ...
    @Transform.setter
    def Transform(self) -> MutableSequence[Transform]: ...
    def ToMatrix(self) -> Transform: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class Identity:
    def __init__(self): ...
    def Duplicate(self) -> ITransform: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Reverse(self) -> ITransform: ...
    def ToMatrix(self) -> Transform: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class ITransform:
    def Duplicate(self) -> ITransform: ...
    @property
    def Name(self) -> str: ...
    def Reverse(self) -> ITransform: ...
    def ToMatrix(self) -> Transform: ...
    def ToString(self) -> str: ...


class Orientation:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source: Plane, target: Plane): ...
    def Duplicate(self) -> ITransform: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SourceFrame(self) -> Plane: ...
    @property
    def TargetFrame(self) -> Plane: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Reverse(self) -> ITransform: ...
    @SourceFrame.setter
    def SourceFrame(self) -> MutableSequence[Plane]: ...
    @TargetFrame.setter
    def TargetFrame(self) -> MutableSequence[Plane]: ...
    def ToMatrix(self) -> Transform: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class Projection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, plane: Plane): ...
    def Duplicate(self) -> ITransform: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ProjectionPlane(self) -> Plane: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Reverse(self) -> ITransform: ...
    @ProjectionPlane.setter
    def ProjectionPlane(self) -> MutableSequence[Plane]: ...
    def ToMatrix(self) -> Transform: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class Rotation:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, center: Point3d, axis: Vector3d, angle: float): ...
    @overload
    def __init__(self, center: Point3d, dir0: Vector3d, dir1: Vector3d): ...
    def Duplicate(self) -> ITransform: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def RotationAngle(self) -> float: ...
    @property
    def RotationAxis(self) -> Vector3d: ...
    @property
    def RotationCenter(self) -> Point3d: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Reverse(self) -> ITransform: ...
    @RotationAngle.setter
    def RotationAngle(self) -> MutableSequence[float]: ...
    @RotationAxis.setter
    def RotationAxis(self) -> MutableSequence[Vector3d]: ...
    @RotationCenter.setter
    def RotationCenter(self) -> MutableSequence[Point3d]: ...
    def ToMatrix(self) -> Transform: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class Scale:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, point: Point3d, scale: float): ...
    @overload
    def __init__(self, frame: Plane, scale: float): ...
    @overload
    def __init__(self, frame: Plane, xscale: float, yscale: float, zscale: float): ...
    def Duplicate(self) -> ITransform: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ScaleXFactor(self) -> float: ...
    @property
    def ScaleYFactor(self) -> float: ...
    @property
    def ScaleZFactor(self) -> float: ...
    @property
    def ScalingFrame(self) -> Plane: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Reverse(self) -> ITransform: ...
    @ScaleXFactor.setter
    def ScaleXFactor(self) -> MutableSequence[float]: ...
    @ScaleYFactor.setter
    def ScaleYFactor(self) -> MutableSequence[float]: ...
    @ScaleZFactor.setter
    def ScaleZFactor(self) -> MutableSequence[float]: ...
    @ScalingFrame.setter
    def ScalingFrame(self) -> MutableSequence[Plane]: ...
    def ToMatrix(self) -> Transform: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class Translation:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, translation: Vector3d): ...
    def Duplicate(self) -> ITransform: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TranslationVector(self) -> Vector3d: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Reverse(self) -> ITransform: ...
    @TranslationVector.setter
    def TranslationVector(self) -> MutableSequence[Vector3d]: ...
    def ToMatrix(self) -> Transform: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...
