from typing import Tuple, Iterable, overload
from enum import Enum

import Attributes
import Components
import Data
import Expressions
import Geometry
import Graphs
import Parameters
import Sorting
import Special
import Types
import Undo
import Utility

__all__ = ['Attributes', 'Components', 'Data', 'Expressions', 'Geometry', 'Graphs', 'Parameters', 'Sorting', 'Special', 'Types', 'Undo', 'Utility']


class AttributesChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_AttributesChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: IGH_DocumentObject, e: GH_AttributesChangedEventArgs) -> None: ...
    def ToString(self) -> str: ...


class AutoSaveFileFormatChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


from ..GUI import GH_ColourPicker
from ..GUI.Base import GH_ColourPickerEventArgs
class ColourEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_ColourPicker, e: GH_ColourPickerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: GH_ColourPicker, e: GH_ColourPickerEventArgs) -> None: ...
    def ToString(self) -> str: ...


class ConsoleFamilyChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class ContextChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DocContextEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_DocContextEventArgs) -> None: ...
    def ToString(self) -> str: ...


class DefaultPreviewColourChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, colour: Color, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, colour: Color) -> None: ...
    def ToString(self) -> str: ...


class DefaultSelectedPreviewColourChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, colour: Color, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, colour: Color) -> None: ...
    def ToString(self) -> str: ...


class DisplayExpiredEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_DisplayExpiredEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: IGH_DocumentObject, e: GH_DisplayExpiredEventArgs) -> None: ...
    def ToString(self) -> str: ...


class DocumentAddedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_DocumentServer, doc: GH_Document, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: GH_DocumentServer, doc: GH_Document) -> None: ...
    def ToString(self) -> str: ...


class DocumentRemovedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_DocumentServer, doc: GH_Document, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: GH_DocumentServer, doc: GH_Document) -> None: ...
    def ToString(self) -> str: ...


class EnableAutoSaveChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class EnabledChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DocEnabledEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_DocEnabledEventArgs) -> None: ...
    def ToString(self) -> str: ...


class EnableSolutionsChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, state: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, state: bool) -> None: ...
    def ToString(self) -> str: ...


class FileChanged:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: GH_FileWatcher, filename: str, change: WatcherChangeTypes, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: GH_FileWatcher, filename: str, change: WatcherChangeTypes) -> None: ...
    def ToString(self) -> str: ...


class FileChangedSimple:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, filename: str, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, filename: str) -> None: ...
    def ToString(self) -> str: ...


class FileEvent:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, path: str, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, path: str) -> None: ...
    def ToString(self) -> str: ...


class FilePathChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DocFilePathEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_DocFilePathEventArgs) -> None: ...
    def ToString(self) -> str: ...


from .Undo import IGH_UndoAction
from .Undo import GH_UndoRecord
class GH_ActiveObject(GH_DocumentObject):
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def add_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    def add_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    def add_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    def add_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    def add_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    def AddedToDocument(self, document: GH_Document) -> None: ...
    def AddRuntimeMessage(self, level: GH_RuntimeMessageLevel, text: str) -> None: ...
    def AppendAdditionalMenuItems(self, menu: ToolStripDropDown) -> None: ...
    def AppendMenuItems(self, menu: ToolStripDropDown) -> bool: ...
    def ClearData(self) -> None: ...
    def ClearRuntimeMessages(self) -> None: ...
    def CollectData(self) -> None: ...
    def ComputeData(self) -> None: ...
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    def CreateAttributes(self) -> None: ...
    def DependsOn(self, PotentialSource: IGH_ActiveObject) -> bool: ...
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def ExpirePreview(self, redraw: bool) -> None: ...
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Category(self) -> str: ...
    @property
    def ComponentGuid(self) -> Guid: ...
    @property
    def Description(self) -> str: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Bitmap: ...
    @property
    def IconCapableUI(self) -> bool: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def MutableNickName(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def Phase(self) -> GH_SolutionPhase: ...
    @property
    def ProcessorTime(self) -> TimeSpan: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    @property
    def SubCategory(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsolateObject(self) -> None: ...
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    def OnAttributesChanged(self) -> None: ...
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: Object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: Object) -> None: ...
    def OnPingDocument(self) -> GH_Document: ...
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ReadFull(self, reader: GH_IReader) -> bool: ...
    @overload
    def RecordUndoEvent(self, record: GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> Guid: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: IGH_UndoAction) -> Guid: ...
    def RegisterRemoteIDs(self, id_list: GH_GuidTable) -> None: ...
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def remove_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    def remove_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    def remove_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    def remove_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    def remove_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Iterable[str]: ...
    def SDKCompliancy(self, exeVersion: int, exeServiceRelease: int) -> bool: ...
    @Attributes.setter
    def Attributes(self, Value: IGH_Attributes) -> None: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, Value: GH_IconDisplayMode) -> None: ...
    @Locked.setter
    def Locked(self, Value: bool) -> None: ...
    @MutableNickName.setter
    def MutableNickName(self, Value: bool) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @Phase.setter
    def Phase(self, Value: GH_SolutionPhase) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    def SetIconOverride(self, customIcon: Bitmap) -> None: ...
    def ToString(self) -> str: ...
    @overload
    def TriggerAutoSave(self) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, id: Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...
    def WriteFull(self, writer: GH_IWriter) -> bool: ...


class GH_ActiveObjectFilter:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, iObj: IGH_ActiveObject, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, iObj: IGH_ActiveObject) -> bool: ...
    def ToString(self) -> str: ...


class GH_Alias:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Alias): ...
    @overload
    def __init__(self, alias: str, target: Guid): ...
    def AliasToString(aliases: Iterable[str]) -> str: ...
    def CompareTo(self, other: GH_Alias) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Alias(self) -> str: ...
    @property
    def Target(self) -> Guid: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Alias.setter
    def Alias(self, AutoPropertyValue: str) -> None: ...
    @Target.setter
    def Target(self, AutoPropertyValue: Guid) -> None: ...
    def StringToAlias(text: str) -> Iterable[str]: ...
    def ToString(self) -> str: ...


class GH_Arrange(Enum):
    MoveToFront = 0
    MoveForwards = 1
    MoveToBack = 2
    MoveBackwards = 3


class GH_AssemblyFolderInfo:
    def __init__(self, folder: str, type: GH_PluginFolderType): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def SearchOption(self) -> SearchOption: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_AssemblyInfo:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def AssemblyDescription(self) -> str: ...
    @property
    def AssemblyIcon(self) -> Bitmap: ...
    @property
    def AssemblyLicense(self) -> GH_LibraryLicense: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def AssemblyVersion(self) -> str: ...
    @property
    def AuthorContact(self) -> str: ...
    @property
    def AuthorName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsCoreLibrary(self) -> bool: ...
    @property
    def License(self) -> GH_LibraryLicense: ...
    @property
    def LoadingMechanism(self) -> GH_LoadingMechanism: ...
    @property
    def Location(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_AssemblyInfoStub(GH_AssemblyInfo):
    def __init__(self, assembly: Assembly): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def AssemblyDescription(self) -> str: ...
    @property
    def AssemblyIcon(self) -> Bitmap: ...
    @property
    def AssemblyLicense(self) -> GH_LibraryLicense: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def AssemblyVersion(self) -> str: ...
    @property
    def AuthorContact(self) -> str: ...
    @property
    def AuthorName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsCoreLibrary(self) -> bool: ...
    @property
    def License(self) -> GH_LibraryLicense: ...
    @property
    def LoadingMechanism(self) -> GH_LoadingMechanism: ...
    @property
    def Location(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_AssemblyPriority:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def PriorityLoad(self) -> GH_LoadingInstruction: ...
    def ToString(self) -> str: ...




class GH_AttributesChangedEventArgs:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Author:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: IGH_Author): ...
    def Clear(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Address(self) -> str: ...
    @property
    def AddressReadonly(self) -> str: ...
    @property
    def Company(self) -> str: ...
    @property
    def CompanyReadonly(self) -> str: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def CopyrightReadonly(self) -> str: ...
    @property
    def EMail(self) -> str: ...
    @property
    def EMailReadonly(self) -> str: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameReadonly(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def PhoneReadonly(self) -> str: ...
    @property
    def Website(self) -> str: ...
    @property
    def WebsiteReadonly(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @Address.setter
    def Address(self, AutoPropertyValue: str) -> None: ...
    @Company.setter
    def Company(self, AutoPropertyValue: str) -> None: ...
    @Copyright.setter
    def Copyright(self, AutoPropertyValue: str) -> None: ...
    @EMail.setter
    def EMail(self, AutoPropertyValue: str) -> None: ...
    @Name.setter
    def Name(self, AutoPropertyValue: str) -> None: ...
    @Phone.setter
    def Phone(self, AutoPropertyValue: str) -> None: ...
    @Website.setter
    def Website(self, AutoPropertyValue: str) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_AutoSaveSettings:
    def __init__(self): ...
    def add_AutoSaveFileFormatChanged(obj: AutoSaveFileFormatChangedEventHandler) -> None: ...
    def add_EnableAutoSaveChanged(obj: EnableAutoSaveChangedEventHandler) -> None: ...
    def add_SaveOnDataFlatteningChanged(obj: SaveOnDataFlatteningChangedEventHandler) -> None: ...
    def add_SaveOnDocumentUnloadChanged(obj: SaveOnDocumentUnloadChangedEventHandler) -> None: ...
    def add_SaveOnObjectAddedChanged(obj: SaveOnObjectAddedChangedEventHandler) -> None: ...
    def add_SaveOnObjectChangeChanged(obj: SaveOnObjectChangeChangedEventHandler) -> None: ...
    def add_SaveOnObjectRemovedChanged(obj: SaveOnObjectRemovedChangedEventHandler) -> None: ...
    def add_SaveOnWireEventChanged(obj: SaveOnWireEventChangedEventHandler) -> None: ...
    def AutosaveFilter(trigger: GH_AutoSaveTrigger) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def EnableAutoSave() -> bool: ...
    @property
    def SaveOnDataFlattening() -> bool: ...
    @property
    def SaveOnDocumentUnload() -> bool: ...
    @property
    def SaveOnObjectAdded() -> bool: ...
    @property
    def SaveOnObjectChange() -> bool: ...
    @property
    def SaveOnObjectRemoved() -> bool: ...
    @property
    def SaveOnWireEvent() -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def remove_AutoSaveFileFormatChanged(obj: AutoSaveFileFormatChangedEventHandler) -> None: ...
    def remove_EnableAutoSaveChanged(obj: EnableAutoSaveChangedEventHandler) -> None: ...
    def remove_SaveOnDataFlatteningChanged(obj: SaveOnDataFlatteningChangedEventHandler) -> None: ...
    def remove_SaveOnDocumentUnloadChanged(obj: SaveOnDocumentUnloadChangedEventHandler) -> None: ...
    def remove_SaveOnObjectAddedChanged(obj: SaveOnObjectAddedChangedEventHandler) -> None: ...
    def remove_SaveOnObjectChangeChanged(obj: SaveOnObjectChangeChangedEventHandler) -> None: ...
    def remove_SaveOnObjectRemovedChanged(obj: SaveOnObjectRemovedChangedEventHandler) -> None: ...
    def remove_SaveOnWireEventChanged(obj: SaveOnWireEventChangedEventHandler) -> None: ...
    @EnableAutoSave.setter
    def EnableAutoSave(Value: bool) -> None: ...
    @SaveOnDataFlattening.setter
    def SaveOnDataFlattening(Value: bool) -> None: ...
    @SaveOnDocumentUnload.setter
    def SaveOnDocumentUnload(Value: bool) -> None: ...
    @SaveOnObjectAdded.setter
    def SaveOnObjectAdded(Value: bool) -> None: ...
    @SaveOnObjectChange.setter
    def SaveOnObjectChange(Value: bool) -> None: ...
    @SaveOnObjectRemoved.setter
    def SaveOnObjectRemoved(Value: bool) -> None: ...
    @SaveOnWireEvent.setter
    def SaveOnWireEvent(Value: bool) -> None: ...
    def ToString(self) -> str: ...


class GH_AutoSaveTrigger(Enum):
    undefined = 0
    doc_unload = 1
    object_added = 2
    object_removed = 3
    wire_event = 4
    data_matching_event = 5
    data_modification_event = 6
    object_generic = 7


class GH_BakeUtility:
    def __init__(self, document: GH_Document): ...
    def BakeObject(self, obj: Object, att: ObjectAttributes, doc: RhinoDoc) -> bool: ...
    def BakeObjects(self, objects: IEnumerable, att: ObjectAttributes, doc: RhinoDoc) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def BakedCount(self) -> int: ...
    @property
    def BakedIds(self) -> Iterable[Guid]: ...
    @property
    def InvalidCount(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_BitmapChannel(Enum):
    A = 1
    R = 2
    G = 4
    B = 8
    RGB = 14
    ARGB = 15


class GH_CaseInsensitiveStringComparer:
    def __init__(self): ...
    def Compare(self, x: str, y: str) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_ClipboardType(Enum):
    System = 0
    Local = 1
    Global = 2


from .Undo import IGH_UndoAction
from .Undo import GH_UndoRecord
class GH_Component(GH_ActiveObject):
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def add_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    def add_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    def add_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    def add_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    def add_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    def AddedToDocument(self, document: GH_Document) -> None: ...
    def AddRuntimeMessage(self, level: GH_RuntimeMessageLevel, text: str) -> None: ...
    def AppendAdditionalMenuItems(self, menu: ToolStripDropDown) -> None: ...
    def AppendMenuItems(self, menu: ToolStripDropDown) -> bool: ...
    @overload
    def BakeGeometry(self, doc: RhinoDoc, obj_ids: List) -> None: ...
    @overload
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_ids: List) -> None: ...
    def ClearData(self) -> None: ...
    def ClearRuntimeMessages(self) -> None: ...
    def CollectData(self) -> None: ...
    def ComputeData(self) -> None: ...
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    def CreateAttributes(self) -> None: ...
    def DependsOn(self, potentialSource: IGH_ActiveObject) -> bool: ...
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def ExpirePreview(self, redraw: bool) -> None: ...
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Category(self) -> str: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def ComponentGuid(self) -> Guid: ...
    @property
    def DataComparison(self) -> GH_DataComparison: ...
    @property
    def Description(self) -> str: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Bitmap: ...
    @property
    def IconCapableUI(self) -> bool: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def InConstructor(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsBakeCapable(self) -> bool: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    @property
    def IsValidPrincipalParameterIndex(self) -> bool: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def MutableNickName(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def Params(self) -> GH_ComponentParamServer: ...
    @property
    def Phase(self) -> GH_SolutionPhase: ...
    @property
    def PrincipalParameterIndex(self) -> int: ...
    @property
    def ProcessorTime(self) -> TimeSpan: ...
    @property
    def RunCount(self) -> int: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    @property
    def SubCategory(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsolateObject(self) -> None: ...
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    def OnAttributesChanged(self) -> None: ...
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: Object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: Object) -> None: ...
    def OnPingDocument(self) -> GH_Document: ...
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ReadFull(self, reader: GH_IReader) -> bool: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> Guid: ...
    @overload
    def RecordUndoEvent(self, record: GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: IGH_UndoAction) -> Guid: ...
    def RegisterRemoteIDs(self, table: GH_GuidTable) -> None: ...
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def remove_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    def remove_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    def remove_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    def remove_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    def remove_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Iterable[str]: ...
    def SDKCompliancy(self, exeVersion: int, exeServiceRelease: int) -> bool: ...
    @Attributes.setter
    def Attributes(self, Value: IGH_Attributes) -> None: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @DataComparison.setter
    def DataComparison(self, Value: GH_DataComparison) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Hidden.setter
    def Hidden(self, Value: bool) -> None: ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, Value: GH_IconDisplayMode) -> None: ...
    @Locked.setter
    def Locked(self, Value: bool) -> None: ...
    @Message.setter
    def Message(self, Value: str) -> None: ...
    @MutableNickName.setter
    def MutableNickName(self, Value: bool) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @Phase.setter
    def Phase(self, Value: GH_SolutionPhase) -> None: ...
    @PrincipalParameterIndex.setter
    def PrincipalParameterIndex(self, AutoPropertyValue: int) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    def SetIconOverride(self, customIcon: Bitmap) -> None: ...
    def ToString(self) -> str: ...
    @overload
    def TriggerAutoSave(self) -> None: ...
    @overload
    def TriggerAutoSave(self, id: Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...
    def WriteFull(self, writer: GH_IWriter) -> bool: ...


class GH_ComponentParamServer:
    def AccessCount(self, access: GH_ParamAccess) -> int: ...
    def add_ParameterChanged(self, obj: ParameterChangedEventHandler) -> None: ...
    def add_ParameterNickNameChanged(self, obj: ParameterNickNameChangedEventHandler) -> None: ...
    def add_ParameterSourcesChanged(self, obj: ParameterSourcesChangedEventHandler) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Clear(self, isolate: bool) -> None: ...
    def CreateDuplicate(original: IGH_Param) -> IGH_Param: ...
    def EmitSyncObject(self) -> IGH_SyncObject: ...
    def Equals(self, obj: Object) -> bool: ...
    def Find(self, id: Guid) -> IGH_Param: ...
    @property
    def Input(self) -> List: ...
    @property
    def InputWidth(self) -> Single: ...
    @property
    def OnlyTreeAndListParameters(self) -> bool: ...
    @property
    def OnlyTreeParameters(self) -> bool: ...
    @property
    def Output(self) -> List: ...
    @property
    def OutputWidth(self) -> Single: ...
    @property
    def Owner(self) -> IGH_Component: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetEnumerator1(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHashCode(self, fields: GH_ParamHashFields) -> Guid: ...
    def GetType(self) -> Type: ...
    @overload
    def IndexOfInputParam(self, name: str) -> int: ...
    @overload
    def IndexOfInputParam(self, id: Guid) -> int: ...
    @overload
    def IndexOfOutputParam(self, id: Guid) -> int: ...
    @overload
    def IndexOfOutputParam(self, name: str) -> int: ...
    @overload
    def InventUniqueNickname(allowedChars: str, existingNames: Iterable[str]) -> str: ...
    @overload
    def InventUniqueNickname(allowedChars: str, existingNames: Iterable[IGH_Param]) -> str: ...
    def IsInputParam(self, param: IGH_Param) -> bool: ...
    def IsOutputParam(self, param: IGH_Param) -> bool: ...
    def IsParam(self, param: IGH_Param) -> bool: ...
    def OnParametersChanged(self) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ReadAllParameterData(self, reader: GH_IReader) -> bool: ...
    @overload
    def RegisterInputParam(self, new_param: IGH_Param) -> bool: ...
    @overload
    def RegisterInputParam(self, new_param: IGH_Param, at_index: int) -> bool: ...
    @overload
    def RegisterOutputParam(self, new_param: IGH_Param) -> bool: ...
    @overload
    def RegisterOutputParam(self, new_param: IGH_Param, at_index: int) -> bool: ...
    def remove_ParameterChanged(self, obj: ParameterChangedEventHandler) -> None: ...
    def remove_ParameterNickNameChanged(self, obj: ParameterNickNameChangedEventHandler) -> None: ...
    def remove_ParameterSourcesChanged(self, obj: ParameterSourcesChangedEventHandler) -> None: ...
    def RepairParamAssociations(self) -> None: ...
    def RepairProxyParams(self, document: GH_Document) -> bool: ...
    @overload
    def SortInput(self, keys: Iterable[Single]) -> None: ...
    @overload
    def SortInput(self, keys: Iterable[int]) -> None: ...
    @overload
    def SortInput(self, keys: Iterable[float]) -> None: ...
    @overload
    def SortOutput(self, keys: Iterable[Single]) -> None: ...
    @overload
    def SortOutput(self, keys: Iterable[float]) -> None: ...
    @overload
    def SortOutput(self, keys: Iterable[int]) -> None: ...
    @overload
    def Sync(self, sync_data: Object) -> None: ...
    @overload
    def Sync(self, sync_data: IGH_SyncObject) -> None: ...
    @overload
    def Sync(self, sync_data: IGH_SyncObject) -> Tuple[int]: ...
    def ToString(self) -> str: ...
    @overload
    def UnregisterInputParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterInputParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    @overload
    def UnregisterOutputParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterOutputParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    @overload
    def UnregisterParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    def Write(self, writer: GH_IWriter) -> bool: ...
    def WriteAllParameterData(self, writer: GH_IWriter) -> bool: ...
    def WriteParamHashData(writer: BinaryWriter, param: IGH_Param, fields: GH_ParamHashFields) -> None: ...


class GH_ComponentServer:
    def __init__(self): ...
    def add_GHAFileLoaded(self, obj: GHAFileLoadedEventHandler) -> None: ...
    def AddAlias(self, alias: str, target: Guid) -> None: ...
    def AddCategoryIcon(self, fullCategoryName: str, icon: Bitmap) -> None: ...
    def AddCategoryShortName(self, fullCategoryName: str, categoryAbbreviation: str) -> None: ...
    def AddCategorySymbolName(self, fullCategoryName: str, symbol: Char) -> None: ...
    def AddProxy(self, proxy: IGH_ObjectProxy) -> bool: ...
    def AddProxyLibraryInfo(self, assemblyInfo: GH_AssemblyInfo) -> bool: ...
    def AliasTargets(self, alias: str) -> List: ...
    def Clear(self) -> None: ...
    def ClearStaleUserObjects(self) -> None: ...
    def CompareProxies(A: IGH_ObjectProxy, B: IGH_ObjectProxy) -> int: ...
    def CopyFileToAppropriateFolder(filepath: str, moveOriginalToBin: bool) -> str: ...
    def DestroyLoadingUI(self) -> None: ...
    def EmitGraph(self, id: Guid) -> IGH_Graph: ...
    def EmitObject(self, id: Guid) -> IGH_DocumentObject: ...
    def EmitObjectIcon(self, id: Guid) -> Bitmap: ...
    def EmitObjectProxy(self, id: Guid) -> IGH_ObjectProxy: ...
    def Equals(self, obj: Object) -> bool: ...
    def ExternalFiles(testGrasshopperCollisions: bool, testExternalCollisions: bool) -> List: ...
    def FindAssembly(self, libraryId: Guid) -> GH_AssemblyInfo: ...
    @overload
    def FindAssemblyByObject(self, object: IGH_DocumentObject) -> GH_AssemblyInfo: ...
    @overload
    def FindAssemblyByObject(self, objectId: Guid) -> GH_AssemblyInfo: ...
    def FindObjectByName(self, name: str, ignoreWhiteSpace: bool, ignoreCapitalisation: bool) -> IGH_ObjectProxy: ...
    @overload
    def FindObjects(self, libraryID: Guid) -> List: ...
    @overload
    def FindObjects(self, terms: Iterable[str], maximumResults: int, results: Iterable[IGH_ObjectProxy], resultWeights: Iterable[float]) -> Tuple[int, Iterable[IGH_ObjectProxy], Iterable[float]]: ...
    def FindUpgrader(self, target: Guid) -> IGH_UpgradeObject: ...
    @property
    def Aliases(self) -> List: ...
    @property
    def AllAddOns() -> List: ...
    @property
    def CompleteRibbonLayout(self) -> GH_Layout: ...
    @property
    def DiscardedProxies(self) -> int: ...
    @property
    def GHA_AppDataDirectory() -> str: ...
    @property
    def GHA_Directories() -> List: ...
    @property
    def GHUser_AppDataDirectory() -> str: ...
    @property
    def GraphProxies(self) -> Iterable[GH_GraphProxy]: ...
    @property
    def Libraries(self) -> ReadOnlyCollection: ...
    @property
    def LoadingExceptions(self) -> List: ...
    @property
    def ObjectProxies(self) -> Iterable[IGH_ObjectProxy]: ...
    @property
    def ObjectProxyNames(self) -> AutoCompleteStringCollection: ...
    @property
    def TypeHints(self) -> Iterable[Type]: ...
    @property
    def Upgraders(self) -> Iterable[IGH_UpgradeObject]: ...
    def GetAlias(self, target: Guid) -> str: ...
    def GetCategoryIcon(self, fullName: str) -> Bitmap: ...
    def GetCategoryShortName(self, fullName: str) -> str: ...
    def GetCategorySymbolName(self, fullName: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsGraphCached(self, id: Guid) -> bool: ...
    def IsObjectCached(self, id: Guid) -> bool: ...
    def IsUpgrader(self, objs: Iterable[IGH_DocumentObject]) -> bool: ...
    def LoadAliases(self) -> None: ...
    def LoadExternalFiles(self, loadOneByOne: bool) -> bool: ...
    def NewUserObject(obj: IGH_DocumentObject) -> bool: ...
    def remove_GHAFileLoaded(self, obj: GHAFileLoadedEventHandler) -> None: ...
    def RemoveCachedGraph(self, id: Guid) -> bool: ...
    @overload
    def RemoveCachedObject(self, id: Guid) -> bool: ...
    @overload
    def RemoveCachedObject(self, userObjectFilePath: str) -> bool: ...
    def SaveAliases(self) -> None: ...
    def SetAlias(self, alias: str, target: Guid) -> None: ...
    def ToString(self) -> str: ...
    def UpdateRibbonUI() -> None: ...


class GH_ConnectivityDiagram:
    @overload
    def __init__(self, doc: GH_Document): ...
    @overload
    def __init__(self, other: GH_ConnectivityDiagram): ...
    def ContainsID(self, id: Guid) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Node(self, id: Guid) -> GH_ConnectivityNode: ...
    @property
    def NodeCount(self) -> int: ...
    @property
    def Nodes(self) -> ReadOnlyCollection: ...
    def GetAllInputs(self, id: Guid) -> List: ...
    def GetAllOutputs(self, id: Guid) -> List: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_ConnectivityDisparity:
    def __init__(self, topset: GH_ConnectivityDiagram, subset: GH_ConnectivityDiagram): ...
    def Equals(self, obj: Object) -> bool: ...
    def ExternalInputs(self, id: Guid) -> List: ...
    def ExternalOutputs(self, id: Guid) -> List: ...
    @property
    def SubNodes(self) -> ReadOnlyCollection: ...
    @property
    def SubSet(self) -> GH_ConnectivityDiagram: ...
    @property
    def TopNodes(self) -> ReadOnlyCollection: ...
    @property
    def TopSet(self) -> GH_ConnectivityDiagram: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def InternalInputs(self, id: Guid) -> List: ...
    def InternalOutputs(self, id: Guid) -> List: ...
    def ToString(self) -> str: ...


class GH_ConnectivityNode:
    def __init__(self, other: GH_ConnectivityNode): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def NodeID(self) -> Guid: ...
    @property
    def NodeIn(self) -> ReadOnlyCollection: ...
    @property
    def NodeOut(self) -> ReadOnlyCollection: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Conversion(Enum):
    Primary = 0
    Secondary = 1
    Both = 2


from .Types import UVInterval
from .Types import Complex
from .Types import IGH_GeometricGoo
from .Types import GH_Boolean
from .Types import GH_Integer
from .Types import GH_Number
from .Types import GH_ComplexNumber
from .Types import GH_Time
from .Types import GH_String
from .Types import GH_Colour
from .Types import GH_Guid
from .Types import GH_Interval
from .Types import GH_Interval2D
from .Types import GH_Matrix
from .Types import GH_Vector
from .Types import GH_Point
from .Types import GH_Plane
from .Types import GH_Box
from .Types import GH_Rectangle
from .Types import GH_Circle
from .Types import GH_Arc
from .Types import GH_Line
from .Types import GH_Curve
from .Types import GH_Surface
from .Types import GH_Brep
from .Types import GH_SubD
from .Types import GH_Mesh
from .Types import GH_MeshFace
class GH_Convert:
    def BackSolveExpression(exp: str, variable: str, target: float, minimum: float, maximum: float, steps: int) -> Tuple[bool, float, float]: ...
    def ByteArrayToCommonObject(data: Iterable[Byte]) -> T: ...
    def CombineDateAndTime(date: DateTime, time: DateTime) -> DateTime: ...
    def CommonObjectToByteArray(data: CommonObject) -> Iterable[Byte]: ...
    def CreatePureDate(date: DateTime) -> DateTime: ...
    @overload
    def CreatePureTime(date: DateTime) -> DateTime: ...
    @overload
    def CreatePureTime(hours: int, minutes: int, seconds: int) -> DateTime: ...
    def Equals(self, obj: Object) -> bool: ...
    def FileToHash(path: str) -> Guid: ...
    def FindRhinoObjectByNameAndType(name: str, type: ObjectType) -> RhinoObject: ...
    def GeometryToObjRef(in_: IGH_GeometricGoo) -> ObjRef: ...
    @property
    def CultureTable() -> SortedDictionary: ...
    def GetBrepFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Brep]: ...
    def GetClippingPlaneFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Plane]: ...
    def GetCurveFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Curve]: ...
    def GetHashCode(self) -> int: ...
    def GetMeshFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Mesh]: ...
    def GetPointFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Point3d]: ...
    def GetSubDFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, SubD]: ...
    def GetSurfaceFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Surface]: ...
    @overload
    def GetTimeKind(time: DateTime) -> GH_TimeKind: ...
    @overload
    def GetTimeKind(A: DateTime, B: DateTime) -> GH_TimeKind: ...
    def GetType(self) -> Type: ...
    def IsPureDate(potentialDate: DateTime) -> bool: ...
    def IsPureTime(potentialTime: DateTime) -> bool: ...
    def ObjRefToGeometry(in_: ObjRef) -> IGH_GeometricGoo: ...
    def ParseExpression(exp: str, recursive: bool) -> GH_Variant: ...
    def StringToDate(text: str, date: DateTime) -> Tuple[bool, DateTime]: ...
    def StringToGuid(text: str) -> Guid: ...
    def StringToTime(text: str, time: DateTime) -> Tuple[bool, DateTime]: ...
    def To_GH_ClassPrefixTypeName(old_name: str) -> str: ...
    def ToArc_Primary(data: Object, rc: Arc) -> Tuple[bool, Arc]: ...
    def ToArc(data: Object, rc: Arc, conversion_level: GH_Conversion) -> Tuple[bool, Arc]: ...
    def ToArc_Secondary(data: Object, rc: Arc) -> Tuple[bool, Arc]: ...
    def ToBoolean_Primary(data: Object, destination: bool) -> Tuple[bool, bool]: ...
    def ToBoolean(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, bool]: ...
    def ToBoolean_Secondary(data: Object, destination: bool) -> Tuple[bool, bool]: ...
    def ToBoundingBox_Primary(data: Object, rc: BoundingBox) -> Tuple[bool, BoundingBox]: ...
    def ToBox_Primary(data: Object, rc: Box) -> Tuple[bool, Box]: ...
    def ToBrep_Primary(data: Object, rc: Brep) -> Tuple[bool, Brep]: ...
    def ToBrep(data: Object, rc: Brep, conversion_level: GH_Conversion) -> Tuple[bool, Brep]: ...
    def ToBrep_Secondary(data: Object, rc: Brep) -> Tuple[bool, Brep]: ...
    def ToCircle_Primary(data: Object, rc: Circle) -> Tuple[bool, Circle]: ...
    def ToCircle(data: Object, rc: Circle, conversion_level: GH_Conversion) -> Tuple[bool, Circle]: ...
    def ToCircle_Secondary(data: Object, rc: Circle) -> Tuple[bool, Circle]: ...
    def ToColor_Primary(data: Object, destination: Color) -> Tuple[bool, Color]: ...
    def ToColor(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, Color]: ...
    def ToColor_Secondary(data: Object, destination: Color) -> Tuple[bool, Color]: ...
    def ToComplex_Primary(data: Object, destination: Complex) -> Tuple[bool, Complex]: ...
    def ToComplex(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, Complex]: ...
    def ToComplex_Secondary(data: Object, destination: Complex) -> Tuple[bool, Complex]: ...
    def ToCoordinates(data: Object, x: float, y: float, z: float, w: float) -> Tuple[bool, float, float, float, float]: ...
    def ToCulture_Primary(data: Object, destination: CultureInfo) -> Tuple[bool, CultureInfo]: ...
    def ToCulture(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, CultureInfo]: ...
    def ToCulture_Secondary(data: Object, destination: CultureInfo) -> Tuple[bool, CultureInfo]: ...
    def ToCurve_Primary(data: Object, rc: Curve) -> Tuple[bool, Curve]: ...
    def ToCurve(data: Object, rc: Curve, conversion_level: GH_Conversion) -> Tuple[bool, Curve]: ...
    def ToCurve_Secondary(data: Object, rc: Curve) -> Tuple[bool, Curve]: ...
    def ToDate_Primary(data: Object, destination: DateTime) -> Tuple[bool, DateTime]: ...
    def ToDate(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, DateTime]: ...
    def ToDate_Secondary(data: Object, destination: DateTime) -> Tuple[bool, DateTime]: ...
    def ToDouble_Primary(data: Object, destination: float) -> Tuple[bool, float]: ...
    def ToDouble(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, float]: ...
    def ToDouble_Secondary(data: Object, destination: float) -> Tuple[bool, float]: ...
    def ToGeometricGoo(data: Object) -> IGH_GeometricGoo: ...
    def ToGeometryBase(data: Object) -> GeometryBase: ...
    def ToGHArc_Primary(data: Object, target: GH_Arc) -> Tuple[bool, GH_Arc]: ...
    def ToGHArc(data: Object, conversion_level: GH_Conversion, target: GH_Arc) -> Tuple[bool, GH_Arc]: ...
    def ToGHArc_Secondary(data: Object, target: GH_Arc) -> Tuple[bool, GH_Arc]: ...
    def ToGHBoolean_Primary(data: Object, target: GH_Boolean) -> Tuple[bool, GH_Boolean]: ...
    def ToGHBoolean(data: Object, conversion_level: GH_Conversion, target: GH_Boolean) -> Tuple[bool, GH_Boolean]: ...
    def ToGHBoolean_Secondary(data: Object, target: GH_Boolean) -> Tuple[bool, GH_Boolean]: ...
    def ToGHBox_Primary(data: Object, target: GH_Box) -> Tuple[bool, GH_Box]: ...
    def ToGHBox(data: Object, conversion_level: GH_Conversion, target: GH_Box) -> Tuple[bool, GH_Box]: ...
    def ToGHBox_Secondary(data: Object, target: GH_Box) -> Tuple[bool, GH_Box]: ...
    def ToGHBrep_Primary(data: Object, target: GH_Brep) -> Tuple[bool, GH_Brep]: ...
    def ToGHBrep(data: Object, conversion_level: GH_Conversion, target: GH_Brep) -> Tuple[bool, GH_Brep]: ...
    def ToGHBrep_Secondary(data: Object, target: GH_Brep) -> Tuple[bool, GH_Brep]: ...
    def ToGHCircle_Primary(data: Object, target: GH_Circle) -> Tuple[bool, GH_Circle]: ...
    def ToGHCircle(data: Object, conversion_level: GH_Conversion, target: GH_Circle) -> Tuple[bool, GH_Circle]: ...
    def ToGHCircle_Secondary(data: Object, target: GH_Circle) -> Tuple[bool, GH_Circle]: ...
    def ToGHColour_Primary(data: Object, target: GH_Colour) -> Tuple[bool, GH_Colour]: ...
    def ToGHColour(data: Object, conversion_level: GH_Conversion, target: GH_Colour) -> Tuple[bool, GH_Colour]: ...
    def ToGHColour_Secondary(data: Object, target: GH_Colour) -> Tuple[bool, GH_Colour]: ...
    def ToGHComplexNumber_Primary(data: Object, target: GH_ComplexNumber) -> Tuple[bool, GH_ComplexNumber]: ...
    def ToGHComplexNumber(data: Object, conversion_level: GH_Conversion, target: GH_ComplexNumber) -> Tuple[bool, GH_ComplexNumber]: ...
    def ToGHComplexNumber_Secondary(data: Object, target: GH_ComplexNumber) -> Tuple[bool, GH_ComplexNumber]: ...
    def ToGHCurve_Primary(data: Object, target: GH_Curve) -> Tuple[bool, GH_Curve]: ...
    def ToGHCurve(data: Object, conversion_level: GH_Conversion, target: GH_Curve) -> Tuple[bool, GH_Curve]: ...
    def ToGHCurve_Secondary(data: Object, target: GH_Curve) -> Tuple[bool, GH_Curve]: ...
    def ToGHGuid_Primary(data: Object, target: GH_Guid) -> Tuple[bool, GH_Guid]: ...
    def ToGHGuid(data: Object, conversion_level: GH_Conversion, target: GH_Guid) -> Tuple[bool, GH_Guid]: ...
    def ToGHGuid_Secondary(data: Object, target: GH_Guid) -> Tuple[bool, GH_Guid]: ...
    def ToGHInteger_Primary(data: Object, target: GH_Integer) -> Tuple[bool, GH_Integer]: ...
    def ToGHInteger(data: Object, conversion_level: GH_Conversion, target: GH_Integer) -> Tuple[bool, GH_Integer]: ...
    def ToGHInteger_Secondary(data: Object, target: GH_Integer) -> Tuple[bool, GH_Integer]: ...
    def ToGHInterval_Primary(data: Object, target: GH_Interval) -> Tuple[bool, GH_Interval]: ...
    def ToGHInterval(data: Object, conversion_level: GH_Conversion, target: GH_Interval) -> Tuple[bool, GH_Interval]: ...
    def ToGHInterval_Secondary(data: Object, target: GH_Interval) -> Tuple[bool, GH_Interval]: ...
    def ToGHInterval2D_Primary(data: Object, target: GH_Interval2D) -> Tuple[bool, GH_Interval2D]: ...
    def ToGHInterval2D(data: Object, conversion_level: GH_Conversion, target: GH_Interval2D) -> Tuple[bool, GH_Interval2D]: ...
    def ToGHInterval2D_Secondary(data: Object, target: GH_Interval2D) -> Tuple[bool, GH_Interval2D]: ...
    def ToGHLine_Primary(data: Object, target: GH_Line) -> Tuple[bool, GH_Line]: ...
    def ToGHLine(data: Object, conversion_level: GH_Conversion, target: GH_Line) -> Tuple[bool, GH_Line]: ...
    def ToGHLine_Secondary(data: Object, target: GH_Line) -> Tuple[bool, GH_Line]: ...
    def ToGHMatrix_Primary(data: Object, target: GH_Matrix) -> Tuple[bool, GH_Matrix]: ...
    def ToGHMatrix(data: Object, conversion_level: GH_Conversion, target: GH_Matrix) -> Tuple[bool, GH_Matrix]: ...
    def ToGHMatrix_Secondary(data: Object, target: GH_Matrix) -> Tuple[bool, GH_Matrix]: ...
    def ToGHMesh_Primary(data: Object, target: GH_Mesh) -> Tuple[bool, GH_Mesh]: ...
    def ToGHMesh(data: Object, conversion_level: GH_Conversion, target: GH_Mesh) -> Tuple[bool, GH_Mesh]: ...
    def ToGHMesh_Secondary(data: Object, target: GH_Mesh) -> Tuple[bool, GH_Mesh]: ...
    def ToGHMeshFace_Primary(data: Object, target: GH_MeshFace) -> Tuple[bool, GH_MeshFace]: ...
    def ToGHMeshFace(data: Object, conversion_level: GH_Conversion, target: GH_MeshFace) -> Tuple[bool, GH_MeshFace]: ...
    def ToGHMeshFace_Secondary(data: Object, target: GH_MeshFace) -> Tuple[bool, GH_MeshFace]: ...
    def ToGHNumber_Primary(data: Object, target: GH_Number) -> Tuple[bool, GH_Number]: ...
    def ToGHNumber(data: Object, conversion_level: GH_Conversion, target: GH_Number) -> Tuple[bool, GH_Number]: ...
    def ToGHNumber_Secondary(data: Object, target: GH_Number) -> Tuple[bool, GH_Number]: ...
    def ToGHPlane_Primary(data: Object, target: GH_Plane) -> Tuple[bool, GH_Plane]: ...
    def ToGHPlane(data: Object, conversion_level: GH_Conversion, target: GH_Plane) -> Tuple[bool, GH_Plane]: ...
    def ToGHPlane_Secondary(data: Object, target: GH_Plane) -> Tuple[bool, GH_Plane]: ...
    def ToGHPoint_Primary(data: Object, target: GH_Point) -> Tuple[bool, GH_Point]: ...
    def ToGHPoint(data: Object, conversion_level: GH_Conversion, target: GH_Point) -> Tuple[bool, GH_Point]: ...
    def ToGHPoint_Secondary(data: Object, target: GH_Point) -> Tuple[bool, GH_Point]: ...
    def ToGHRectangle_Primary(data: Object, target: GH_Rectangle) -> Tuple[bool, GH_Rectangle]: ...
    def ToGHRectangle(data: Object, conversion_level: GH_Conversion, target: GH_Rectangle) -> Tuple[bool, GH_Rectangle]: ...
    def ToGHRectangle_Secondary(data: Object, target: GH_Rectangle) -> Tuple[bool, GH_Rectangle]: ...
    def ToGHString_Primary(data: Object, target: GH_String) -> Tuple[bool, GH_String]: ...
    def ToGHString(data: Object, conversion_level: GH_Conversion, target: GH_String) -> Tuple[bool, GH_String]: ...
    def ToGHString_Secondary(data: Object, target: GH_String) -> Tuple[bool, GH_String]: ...
    def ToGHSubD_Primary(data: Object, target: GH_SubD) -> Tuple[bool, GH_SubD]: ...
    def ToGHSubD(data: Object, conversion_level: GH_Conversion, target: GH_SubD) -> Tuple[bool, GH_SubD]: ...
    def ToGHSubD_Secondary(data: Object, target: GH_SubD) -> Tuple[bool, GH_SubD]: ...
    def ToGHSurface_Primary(data: Object, target: GH_Surface) -> Tuple[bool, GH_Surface]: ...
    def ToGHSurface(data: Object, conversion_level: GH_Conversion, target: GH_Surface) -> Tuple[bool, GH_Surface]: ...
    def ToGHSurface_Secondary(data: Object, target: GH_Surface) -> Tuple[bool, GH_Surface]: ...
    def ToGHTime_Primary(data: Object, target: GH_Time) -> Tuple[bool, GH_Time]: ...
    def ToGHTime(data: Object, conversion_level: GH_Conversion, target: GH_Time) -> Tuple[bool, GH_Time]: ...
    def ToGHTime_Secondary(data: Object, target: GH_Time) -> Tuple[bool, GH_Time]: ...
    def ToGHVector_Primary(data: Object, target: GH_Vector) -> Tuple[bool, GH_Vector]: ...
    def ToGHVector(data: Object, conversion_level: GH_Conversion, target: GH_Vector) -> Tuple[bool, GH_Vector]: ...
    def ToGHVector_Secondary(data: Object, target: GH_Vector) -> Tuple[bool, GH_Vector]: ...
    def ToGoo(data: Object) -> IGH_Goo: ...
    def ToGUID_Primary(data: Object, destination: Guid) -> Tuple[bool, Guid]: ...
    def ToGUID(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, Guid]: ...
    def ToGUID_Secondary(data: Object, destination: Guid) -> Tuple[bool, Guid]: ...
    def ToInt32_Primary(data: Object, destination: int) -> Tuple[bool, int]: ...
    def ToInt32(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, int]: ...
    def ToInt32_Secondary(data: Object, destination: int) -> Tuple[bool, int]: ...
    def ToInterval_Primary(data: Object, rc: Interval) -> Tuple[bool, Interval]: ...
    def ToInterval(data: Object, rc: Interval, conversion_level: GH_Conversion) -> Tuple[bool, Interval]: ...
    def ToInterval_Secondary(data: Object, rc: Interval) -> Tuple[bool, Interval]: ...
    def ToLine_Primary(data: Object, rc: Line) -> Tuple[bool, Line]: ...
    def ToLine(data: Object, rc: Line, conversion_level: GH_Conversion) -> Tuple[bool, Line]: ...
    def ToLine_Secondary(data: Object, rc: Line) -> Tuple[bool, Line]: ...
    def ToMatrix_Primary(data: Object, rc: Matrix) -> Tuple[bool, Matrix]: ...
    def ToMatrix(data: Object, rc: Matrix, conversion_level: GH_Conversion) -> Tuple[bool, Matrix]: ...
    def ToMatrix_Secondary(data: Object, rc: Matrix) -> Tuple[bool, Matrix]: ...
    def ToMesh_Primary(data: Object, rc: Mesh) -> Tuple[bool, Mesh]: ...
    def ToMesh(data: Object, rc: Mesh, conversion_level: GH_Conversion) -> Tuple[bool, Mesh]: ...
    def ToMesh_Secondary(data: Object, rc: Mesh) -> Tuple[bool, Mesh]: ...
    def ToNextPowerOfTen(num: float) -> float: ...
    def ToPlane_Primary(data: Object, rc: Plane) -> Tuple[bool, Plane]: ...
    def ToPlane(data: Object, rc: Plane, conversion_level: GH_Conversion) -> Tuple[bool, Plane]: ...
    def ToPlane_Secondary(data: Object, rc: Plane) -> Tuple[bool, Plane]: ...
    def ToPlural(singular: str) -> str: ...
    def ToPoint(in_: PointF) -> Point: ...
    def ToPoint3d_Primary(data: Object, rc: Point3d) -> Tuple[bool, Point3d]: ...
    def ToPoint3d(data: Object, rc: Point3d, conversion_level: GH_Conversion) -> Tuple[bool, Point3d]: ...
    def ToPoint3d_Secondary(data: Object, rc: Point3d) -> Tuple[bool, Point3d]: ...
    def ToPointF(in_: Point3d) -> PointF: ...
    def ToPrevPowerOfTen(num: float) -> float: ...
    def ToRectangle(in_: RectangleF) -> Rectangle: ...
    def ToRectangle3d_Primary(data: Object, rc: Rectangle3d) -> Tuple[bool, Rectangle3d]: ...
    def ToRectangle3d(data: Object, rc: Rectangle3d, conversion_level: GH_Conversion) -> Tuple[bool, Rectangle3d]: ...
    def ToRectangle3d_Secondary(data: Object, rc: Rectangle3d) -> Tuple[bool, Rectangle3d]: ...
    def ToSafeRhinoCommonObject(data: Object) -> Object: ...
    @overload
    def ToSHA_Hash(data: Stream) -> Guid: ...
    @overload
    def ToSHA_Hash(data: Iterable[Byte]) -> Guid: ...
    def ToSize(in_: SizeF) -> Size: ...
    @overload
    def ToString(self) -> str: ...
    def ToString_Primary(data: Object, destination: str) -> Tuple[bool, str]: ...
    @overload
    def ToString(data: Object, conversion_level: GH_Conversion) -> Tuple[bool, str]: ...
    def ToString_Secondary(data: Object, destination: str) -> Tuple[bool, str]: ...
    def ToSubD_Secondary(data: Object, rc: SubD) -> Tuple[bool, SubD]: ...
    def ToSurface_Primary(data: Object, rc: Surface) -> Tuple[bool, Surface]: ...
    def ToSurface(data: Object, rc: Surface, conversion_level: GH_Conversion) -> Tuple[bool, Surface]: ...
    def ToSurface_Secondary(data: Object, rc: Surface) -> Tuple[bool, Surface]: ...
    def ToUVInterval_Primary(data: Object, rc: UVInterval) -> Tuple[bool, UVInterval]: ...
    def ToUVInterval(data: Object, rc: UVInterval, conversion_level: GH_Conversion) -> Tuple[bool, UVInterval]: ...
    def ToUVInterval_Secondary(data: Object, rc: UVInterval) -> Tuple[bool, UVInterval]: ...
    def ToVariableName(compound: str) -> str: ...
    def ToVariant(value: Object) -> GH_Variant: ...
    def ToVector3d_Primary(data: Object, rc: Vector3d) -> Tuple[bool, Vector3d]: ...
    def ToVector3d(data: Object, rc: Vector3d, conversion_level: GH_Conversion) -> Tuple[bool, Vector3d]: ...
    def ToVector3d_Secondary(data: Object, rc: Vector3d) -> Tuple[bool, Vector3d]: ...


class GH_CustomEventServer:
    def __init__(self, consumer: IGH_EventConsumer): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def GuidTable(self) -> SortedDictionary: ...
    @property
    def GuidTableCount(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    def ToString(self) -> str: ...


class GH_DataComparison(Enum):
    ShortestList = 0
    LongestList = 1
    CrossReference = 2


class GH_DataMapping(Enum):
    None_ = 0
    Flatten = 1
    Graft = 2


class GH_DebugDescriptionWriter:
    def __init__(self): ...
    def CloseBlock(self) -> None: ...
    def CreateBlock(self, name: str) -> None: ...
    def CreateLog(self) -> str: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Depth(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...
    @overload
    def WriteLine(self) -> None: ...
    @overload
    def WriteLine(self, line: str) -> None: ...
    @overload
    def WriteLine(self, line: str, args: Iterable[Object]) -> None: ...
    def WriteLogToFile(self, path: str) -> bool: ...


class GH_DisplayExpiredEventArgs:
    def __init__(self, eForceRedraw: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ForceRedraw(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocContextEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Context(self) -> GH_DocumentContext: ...
    @property
    def Document(self) -> GH_Document: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocEnabledEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Enabled(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocFilePathEventArgs:
    def __init__(self, document: GH_Document, oldPath: str, newPath: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def NewFilePath(self) -> str: ...
    @property
    def OldFilePath(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocModifiedEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Modified(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocObjectEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Attributes(self) -> List: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Object(self, index: int) -> IGH_DocumentObject: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> ReadOnlyCollection: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocSettingsEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Kind(self) -> GH_DocumentSettings: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


from ..GUI.Alignment import GH_Align
from ..GUI.Alignment import GH_Distribute
from .Expressions import GH_Variant
from .Undo import GH_UndoRecord
class GH_Document:
    def __init__(self): ...
    def ActiveObjects(self) -> List: ...
    def add_ContextChanged(self, obj: ContextChangedEventHandler) -> None: ...
    def add_DefaultPreviewColourChanged(obj: DefaultPreviewColourChangedEventHandler) -> None: ...
    def add_DefaultSelectedPreviewColourChanged(obj: DefaultSelectedPreviewColourChangedEventHandler) -> None: ...
    def add_EnabledChanged(self, obj: EnabledChangedEventHandler) -> None: ...
    def add_EnableSolutionsChanged(obj: EnableSolutionsChangedEventHandler) -> None: ...
    def add_FilePathChanged(self, obj: FilePathChangedEventHandler) -> None: ...
    def add_ModifiedChanged(self, obj: ModifiedChangedEventHandler) -> None: ...
    def add_ObjectsAdded(self, obj: ObjectsAddedEventHandler) -> None: ...
    def add_ObjectsDeleted(self, obj: ObjectsDeletedEventHandler) -> None: ...
    def add_SettingsChanged(self, obj: SettingsChangedEventHandler) -> None: ...
    def add_SolutionEnd(self, obj: SolutionEndEventHandler) -> None: ...
    def add_SolutionStart(self, obj: SolutionStartEventHandler) -> None: ...
    def add_UndoStateChanged(self, obj: UndoStateChangedEventHandler) -> None: ...
    def AddObject(self, docObject: IGH_DocumentObject, update: bool, index: int) -> bool: ...
    @overload
    def AlignObjects(self, align: GH_Align, distribute: GH_Distribute) -> None: ...
    @overload
    def AlignObjects(self, align: GH_Align, distribute: GH_Distribute, objs: List) -> None: ...
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    def ArrangeObject(self, obj: IGH_DocumentObject, motion: GH_Arrange) -> bool: ...
    def ArrangeObjects(self, objs: Iterable[IGH_DocumentObject], motion: GH_Arrange) -> bool: ...
    def AssociateWithRhinoDocument(self) -> None: ...
    def AutoLayoutComponents(self, limitToSelection: bool) -> None: ...
    @overload
    def AutoSave(self, trigger: GH_AutoSaveTrigger) -> bool: ...
    @overload
    def AutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> bool: ...
    def AutoSaveFileName(filename: str) -> str: ...
    def BoundingBox(self, limitToSelection: bool) -> RectangleF: ...
    def BringSelectionToTop(self) -> None: ...
    def ClearIgnoreList(self) -> None: ...
    def ClearReferenceTable(self) -> None: ...
    def CloseAllSubsidiaries(self) -> int: ...
    def ClusterInputHooks(self) -> Iterable[GH_ClusterInputHook]: ...
    def ClusterInstanceCount(self, id: Guid) -> int: ...
    def ClusterOutputHooks(self) -> Iterable[GH_ClusterOutputHook]: ...
    def CompareTo(self, other: GH_Document) -> int: ...
    def ConstructDocumentTree(self) -> GH_DocumentTree: ...
    def ContainsClusterHooks(self) -> bool: ...
    def ConvertFullNamesToNickNames(self) -> None: ...
    def ConvertNickNamesToFullNames(self) -> None: ...
    def CreateAutomaticClusterHooks(self) -> None: ...
    def CreateConnectivityDiagram(self) -> GH_ConnectivityDiagram: ...
    def CreateExpressionParser(self) -> GH_ExpressionParser: ...
    def DefineConstant(self, name: str, value: GH_Variant) -> None: ...
    def DeselectAll(self) -> None: ...
    def DestroyAttributeCache(self) -> None: ...
    def DestroyAutoSaveFiles(self) -> None: ...
    def DestroyObjectTable(self) -> None: ...
    def DestroyPreviewCaches(self) -> None: ...
    def DestroyPreviewMeshes(self) -> None: ...
    def DestroyProxySources(self) -> None: ...
    def DisabledObjects(self) -> List: ...
    def Dispose(self) -> None: ...
    def DuplicateDocument(doc: GH_Document) -> GH_Document: ...
    def EnabledObjects(self) -> List: ...
    def Equals(self, obj: Object) -> bool: ...
    def ExpandSelection(self, Upstream: bool, Downstream: bool, GrowSelection: bool) -> None: ...
    def ExpirePreview(self, redraw: bool) -> None: ...
    def ExpireSolution(self) -> None: ...
    def FilterActive(in_: List) -> List: ...
    def FilterDisabled(in_: List) -> List: ...
    def FilterEnabled(in_: List) -> List: ...
    def FilterInactive(in_: List) -> List: ...
    @overload
    def FilterObjects(self, selectedObjects: GH_Filter, enabledObjects: GH_Filter, activeObjects: GH_Filter) -> List: ...
    @overload
    def FilterObjects(in_: List, bSelectedObjects: GH_Filter, bEnabledObjects: GH_Filter, bActiveObjects: GH_Filter) -> List: ...
    def FilterSelected(in_: List) -> List: ...
    def FilterUnselected(in_: List) -> List: ...
    @overload
    def FindAllDownstreamObjects(self, from_: List) -> List: ...
    @overload
    def FindAllDownstreamObjects(self, from_: IGH_ActiveObject) -> List: ...
    @overload
    def FindAllDownstreamObjects(self, from_: List, filter: GH_ActiveObjectFilter) -> List: ...
    @overload
    def FindAllDownstreamObjects(self, from_: IGH_ActiveObject, filter: GH_ActiveObjectFilter) -> List: ...
    @overload
    def FindAttribute(self, id: Guid) -> IGH_Attributes: ...
    @overload
    def FindAttribute(self, pt: PointF, topLevelOnly: bool) -> IGH_Attributes: ...
    @overload
    def FindAttributeByGrip(self, pt: PointF, bLimitToOutside: bool, SearchRadius: int) -> IGH_Attributes: ...
    @overload
    def FindAttributeByGrip(self, pt: PointF, bLimitToOutside: bool, bIncludeInputs: bool, bIncludeOutputs: bool, SearchRadius: int) -> IGH_Attributes: ...
    @overload
    def FindClusters(self, filepath: str) -> List: ...
    @overload
    def FindClusters(self, id: Guid) -> List: ...
    @overload
    def FindComponent(self, pt: Point) -> IGH_Component: ...
    @overload
    def FindComponent(self, id: Guid) -> IGH_Component: ...
    def FindFloatingParameter(self, pt: Point) -> IGH_Param: ...
    def FindInputParameter(self, pt: Point) -> IGH_Param: ...
    @overload
    def FindObject(self, id: Guid, topLevelOnly: bool) -> IGH_DocumentObject: ...
    @overload
    def FindObject(self, id: Guid, topLevelOnly: bool) -> T: ...
    @overload
    def FindObject(self, pt: PointF, radius: Single) -> IGH_DocumentObject: ...
    def FindObjects(self, keys: List, maxCount: int) -> List: ...
    def FindOutputParameter(self, pt: Point) -> IGH_Param: ...
    def FindParameter(self, id: Guid) -> IGH_Param: ...
    def FindWireAt(self, point: PointF, radius: Single, source: IGH_Param, target: IGH_Param) -> Tuple[bool, IGH_Param, IGH_Param]: ...
    def ForcePreview(self, previewOn: bool) -> None: ...
    @property
    def AbortRequested(self) -> bool: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def Attributes(self) -> Iterable[IGH_Attributes]: ...
    @property
    def Author(self) -> IGH_Author: ...
    @property
    def ConstantServer(self) -> SortedDictionary: ...
    @property
    def ContainsCustomPreviewObjects(self) -> bool: ...
    @property
    def ContainsCustomRenderObjects(self) -> bool: ...
    @property
    def Context(self) -> GH_DocumentContext: ...
    @property
    def CustomRenderObjects(self) -> Iterable[GH_CustomPreviewComponent]: ...
    @property
    def DefaultPreviewColour() -> Color: ...
    @property
    def DefaultSelectedPreviewColour() -> Color: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def DocumentID(self) -> Guid: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def EnableSolutions() -> bool: ...
    @property
    def EventServer(self) -> GH_DocumentEventServer: ...
    @property
    def FileNameProxy(self) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def IgnoredCount(self) -> int: ...
    @property
    def IsFilePathDefined(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def ModifiedSubsidiaries(self) -> int: ...
    @property
    def Nested(self) -> bool: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> Iterable[IGH_DocumentObject]: ...
    @property
    def ObjectSpan(self) -> TimeSpan: ...
    @property
    def Owner(self) -> IGH_DocumentOwner: ...
    @property
    def PreviewBoundary(self) -> GH_PreviewBoundary: ...
    @property
    def PreviewBoundingBox(self) -> BoundingBox: ...
    @property
    def PreviewColour(self) -> Color: ...
    @property
    def PreviewColourSelected(self) -> Color: ...
    @property
    def PreviewCustomMeshParameters(self) -> MeshingParameters: ...
    @property
    def PreviewFilter(self) -> GH_PreviewFilter: ...
    @property
    def PreviewMeshType(self) -> GH_PreviewMesh: ...
    @property
    def PreviewMode(self) -> GH_PreviewMode: ...
    @property
    def Profiler(self) -> GH_ProfilerMode: ...
    @property
    def Properties(self) -> GH_DocumentProperties: ...
    @property
    def RaiseEvents(self) -> bool: ...
    @property
    def RemotePanelLayout(self) -> RcpLayout: ...
    @property
    def RuntimeID(self) -> UInt64: ...
    @property
    def ScheduleDelay(self) -> int: ...
    @property
    def SelectedCount(self) -> int: ...
    @property
    def SelectionTopology(self) -> GH_SelectionTopology: ...
    @property
    def SolutionDepth(self) -> int: ...
    @property
    def SolutionHistory(self) -> List: ...
    @property
    def SolutionSpan(self) -> TimeSpan: ...
    @property
    def SolutionState(self) -> GH_ProcessStep: ...
    @property
    def StateServer(self) -> GH_StateServer: ...
    @property
    def Thumbnail(self) -> Bitmap: ...
    @property
    def UndoServer(self) -> GH_UndoServer: ...
    @property
    def UndoUtil(self) -> GH_UndoUtil: ...
    @property
    def ValueTable(self) -> GH_SettingsServer: ...
    def GetAllInstanceIDs(self, topLevelOnly: bool) -> SortedList: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def InactiveObjects(self) -> List: ...
    def InvertSelection(self) -> None: ...
    def IsEscapeKeyDown() -> bool: ...
    def IsRenderMeshPipelineViewport(self, pipeline: DisplayPipeline) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document, resolveProxies: bool) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document, resolveProxies: bool, removeProxies: bool) -> bool: ...
    def Modified(self) -> None: ...
    def MutateAllIds(self) -> None: ...
    @overload
    def NewSolution(self, expireAllObjects: bool) -> None: ...
    @overload
    def NewSolution(self, expireAllObjects: bool, mode: GH_SolutionMode) -> None: ...
    def NonBlankFilter(iObj: IGH_ActiveObject) -> bool: ...
    def NullFilter(iObj: IGH_ActiveObject) -> bool: ...
    def OnContextChanged(self) -> None: ...
    def OnEnabledChanged(self) -> None: ...
    def OnFilePathChanged(self, old: str, new: str) -> None: ...
    def OnModifiedChanged(self) -> None: ...
    def OnObjectAdded(self, doc_object: IGH_DocumentObject) -> None: ...
    def OnObjectDeleted(self, doc_object: IGH_DocumentObject) -> None: ...
    def OnObjectsAdded(self, doc_objects: Iterable[IGH_DocumentObject]) -> None: ...
    def OnObjectsDeleted(self, doc_objects: Iterable[IGH_DocumentObject]) -> None: ...
    def OnSettingsChanged(self, kind: GH_DocumentSettings) -> None: ...
    def OnUndoStateChanged(self, op: GH_UndoOperation, rec: GH_UndoRecord) -> None: ...
    def PreviewCurrentMeshParameters(self) -> MeshingParameters: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Redo(self) -> bool: ...
    @overload
    def RelevantObjectAtPoint(self, pt: PointF) -> GH_RelevantObjectData: ...
    @overload
    def RelevantObjectAtPoint(self, pt: PointF, searchFilter: GH_RelevantObjectFilter) -> GH_RelevantObjectData: ...
    def remove_ContextChanged(self, obj: ContextChangedEventHandler) -> None: ...
    def remove_DefaultPreviewColourChanged(obj: DefaultPreviewColourChangedEventHandler) -> None: ...
    def remove_DefaultSelectedPreviewColourChanged(obj: DefaultSelectedPreviewColourChangedEventHandler) -> None: ...
    def remove_EnabledChanged(self, obj: EnabledChangedEventHandler) -> None: ...
    def remove_EnableSolutionsChanged(obj: EnableSolutionsChangedEventHandler) -> None: ...
    def remove_FilePathChanged(self, obj: FilePathChangedEventHandler) -> None: ...
    def remove_ModifiedChanged(self, obj: ModifiedChangedEventHandler) -> None: ...
    def remove_ObjectsAdded(self, obj: ObjectsAddedEventHandler) -> None: ...
    def remove_ObjectsDeleted(self, obj: ObjectsDeletedEventHandler) -> None: ...
    def remove_SettingsChanged(self, obj: SettingsChangedEventHandler) -> None: ...
    def remove_SolutionEnd(self, obj: SolutionEndEventHandler) -> None: ...
    def remove_SolutionStart(self, obj: SolutionStartEventHandler) -> None: ...
    def remove_UndoStateChanged(self, obj: UndoStateChangedEventHandler) -> None: ...
    @overload
    def RemoveObject(self, attribute: IGH_Attributes, update: bool) -> bool: ...
    @overload
    def RemoveObject(self, docObject: IGH_DocumentObject, update: bool) -> bool: ...
    def RemoveObjects(self, objectList: Iterable[IGH_DocumentObject], update: bool) -> int: ...
    def RemoveSelection(self, update: bool) -> None: ...
    def RepairProxySources(self) -> bool: ...
    def ReplaceProxySources(self) -> None: ...
    def RequestAbortSolution(self) -> None: ...
    def RunningAsCommand(self) -> Command: ...
    @overload
    def ScheduleSolution(self, delay: int) -> None: ...
    @overload
    def ScheduleSolution(self, delay: int, callback: GH_ScheduleDelegate) -> None: ...
    @overload
    def Select(self, obj_dat: GH_RelevantObjectData) -> GH_SelectionState: ...
    @overload
    def Select(self, obj_dat: GH_RelevantObjectData, bAdd: bool, bRemove: bool) -> GH_SelectionState: ...
    def SelectAll(self) -> None: ...
    def SelectedObjects(self) -> List: ...
    @Context.setter
    def Context(self, Value: GH_DocumentContext) -> None: ...
    @DefaultPreviewColour.setter
    def DefaultPreviewColour(Value: Color) -> None: ...
    @DefaultSelectedPreviewColour.setter
    def DefaultSelectedPreviewColour(Value: Color) -> None: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    @EnableSolutions.setter
    def EnableSolutions(Value: bool) -> None: ...
    @FilePath.setter
    def FilePath(self, Value: str) -> None: ...
    @IsModified.setter
    def IsModified(self, Value: bool) -> None: ...
    @Nested.setter
    def Nested(self, Value: bool) -> None: ...
    @Owner.setter
    def Owner(self, Value: IGH_DocumentOwner) -> None: ...
    @PreviewBoundary.setter
    def PreviewBoundary(self, value: GH_PreviewBoundary) -> None: ...
    @PreviewColour.setter
    def PreviewColour(self, Value: Color) -> None: ...
    @PreviewColourSelected.setter
    def PreviewColourSelected(self, Value: Color) -> None: ...
    @PreviewCustomMeshParameters.setter
    def PreviewCustomMeshParameters(self, Value: MeshingParameters) -> None: ...
    @PreviewFilter.setter
    def PreviewFilter(self, Value: GH_PreviewFilter) -> None: ...
    @PreviewMeshType.setter
    def PreviewMeshType(self, Value: GH_PreviewMesh) -> None: ...
    @PreviewMode.setter
    def PreviewMode(self, Value: GH_PreviewMode) -> None: ...
    @Profiler.setter
    def Profiler(self, Value: GH_ProfilerMode) -> None: ...
    @RaiseEvents.setter
    def RaiseEvents(self, Value: bool) -> None: ...
    @Thumbnail.setter
    def Thumbnail(self, Value: Bitmap) -> None: ...
    @overload
    def SetEnabledFlags(self, bEnable: bool) -> None: ...
    @overload
    def SetEnabledFlags(self, objects: List, bEnable: bool) -> None: ...
    @overload
    def SetPreviewFlags(self, bPreview: bool) -> None: ...
    @overload
    def SetPreviewFlags(self, objects: List, bPreview: bool) -> None: ...
    def SetStatusBarEventHelper(self, message: GH_RuntimeMessage) -> None: ...
    def ShowPreviewSettings(self) -> None: ...
    def SolutionProgress(self) -> Tuple[int, int, int]: ...
    @overload
    def ToggleEnabledFlags(self) -> None: ...
    @overload
    def ToggleEnabledFlags(self, objects: List) -> None: ...
    @overload
    def TogglePreviewFlags(self) -> None: ...
    @overload
    def TogglePreviewFlags(self, objects: List) -> None: ...
    def ToString(self) -> str: ...
    def TranslateObjects(self, trXForm: Size, bLimitToSelection: bool) -> None: ...
    def Undo(self) -> bool: ...
    def UnselectedObjects(self) -> List: ...
    def UpdateAllSubsidiaries(self) -> int: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    def Write(self, writer: GH_IWriter, objList: Iterable[IGH_DocumentObject]) -> bool: ...


class GH_DocumentAssociations:
    def __init__(self): ...
    def Associate(self, rhinoFile: str, grasshopperFile: str) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetGrasshopperAssociations(self, rhinoFile: str) -> List: ...
    def GetHashCode(self) -> int: ...
    def GetRhinoAssociations(self, grasshopperFile: str) -> List: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocumentContext(Enum):
    Unknown = 0
    None_ = 1
    Open = 2
    Close = 3
    Loaded = 4
    Unloaded = 5
    Lock = 6
    Unlock = 7


class GH_DocumentEventServer:
    def __init__(self, document: GH_Document): ...
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    def ClearGuidTable(self) -> None: ...
    def CreateGuidTable(self) -> None: ...
    def EnsureGuidTable(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def GuidTableRefCount(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    def ToString(self) -> str: ...


class GH_DocumentIO:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, internal_doc: GH_Document): ...
    def ClearClipboard(self, clipboard: GH_ClipboardType) -> None: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType) -> bool: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType, limitToSelection: bool) -> bool: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType, guids: Iterable[Guid]) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DisableOverwriteProtection() -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def IsDocument(self) -> bool: ...
    def GetDocumentIcon(filePath: str, size: Size) -> Bitmap: ...
    def GetDocumentThumbnail(filePath: str) -> Bitmap: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def Open(self) -> bool: ...
    @overload
    def Open(self, filePath: str) -> bool: ...
    def OpenDocumentDialog(self, path: str, title: str) -> str: ...
    def Paste(self, clipboard: GH_ClipboardType) -> bool: ...
    def Save(self) -> bool: ...
    def SaveAs(self) -> bool: ...
    def SaveAsCopyDocumentDialog(self, path: str) -> str: ...
    def SaveAsDocumentDialog(self, path: str) -> str: ...
    def SaveBackup(self) -> bool: ...
    def SaveDocumentDialog(self, path: str, title: str) -> str: ...
    def SaveQuiet(self, path: str) -> bool: ...
    @DisableOverwriteProtection.setter
    def DisableOverwriteProtection(AutoPropertyValue: bool) -> None: ...
    @Document.setter
    def Document(self, AutoPropertyValue: GH_Document) -> None: ...
    @overload
    def ShowOverwriteDialog(filename: str) -> int: ...
    @overload
    def ShowOverwriteDialog(filename: str, lastSave: DateTime, fileOnDisk: DateTime) -> int: ...
    @overload
    def SubsidiaryDocumentSavePrompt(document: GH_Document) -> DialogResult: ...
    @overload
    def SubsidiaryDocumentSavePrompt(documentName: str, modified: bool, modifiedSubsidiaries: int) -> DialogResult: ...
    def ToString(self) -> str: ...


from .Undo import IGH_UndoAction
from .Undo import GH_UndoRecord
from ..GUI import KeyDownEventHandler
from ..GUI import TextChangedEventHandler
class GH_DocumentObject(GH_InstanceDescription):
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def add_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    def add_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    def add_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    def add_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    def add_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    def AddedToDocument(self, document: GH_Document) -> None: ...
    def AppendMenuItems(self, menu: ToolStripDropDown) -> bool: ...
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    def CreateAttributes(self) -> None: ...
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def ExpirePreview(self, redraw: bool) -> None: ...
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Category(self) -> str: ...
    @property
    def ComponentGuid(self) -> Guid: ...
    @property
    def Description(self) -> str: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Bitmap: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def SubCategory(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsolateObject(self) -> None: ...
    def Menu_AppendColourPicker(menu: ToolStripDropDown, colour: Color, colourChanged: ColourEventHandler) -> GH_ColourPicker: ...
    @overload
    def Menu_AppendCustomItem(menu: ToolStripDropDown, control: Control) -> bool: ...
    @overload
    def Menu_AppendCustomItem(menu: ToolStripDropDown, control: Control, keydown: KeyDownEventHandler) -> bool: ...
    @overload
    def Menu_AppendCustomItem(menu: ToolStripDropDown, control: Control, keydown: KeyDownEventHandler, enabled: bool, width: int, lockOnFocus: bool) -> bool: ...
    def Menu_AppendDigitScrollerItem(menu: ToolStripDropDown, min: Decimal, max: Decimal, value: Decimal, decimals: int) -> GH_DigitScrollerBase: ...
    @overload
    def Menu_AppendItem(menu: ToolStrip, text: str) -> ToolStripMenuItem: ...
    @overload
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler) -> ToolStripMenuItem: ...
    @overload
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, enabled: bool) -> ToolStripMenuItem: ...
    @overload
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, icon: Image) -> ToolStripMenuItem: ...
    @overload
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, enabled: bool, checked: bool) -> ToolStripMenuItem: ...
    @overload
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, icon: Image, tag: Object) -> ToolStripMenuItem: ...
    @overload
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, icon: Image, enabled: bool, checked: bool) -> ToolStripMenuItem: ...
    def Menu_AppendSeparator(menu: ToolStrip) -> ToolStripSeparator: ...
    @overload
    def Menu_AppendTextItem(menu: ToolStripDropDown, text: str, keydown: KeyDownEventHandler, textchanged: TextChangedEventHandler, lockOnFocus: bool) -> ToolStripTextBox: ...
    @overload
    def Menu_AppendTextItem(menu: ToolStripDropDown, text: str, keydown: KeyDownEventHandler, textchanged: TextChangedEventHandler, enabled: bool, width: int, lockOnFocus: bool) -> ToolStripTextBox: ...
    @overload
    def Menu_MoveItem(item: ToolStripItem, precedingItems: Iterable[str]) -> bool: ...
    @overload
    def Menu_MoveItem(item: ToolStripItem, insertBelow: bool, targets: Iterable[str]) -> bool: ...
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    def OnAttributesChanged(self) -> None: ...
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: Object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: Object) -> None: ...
    def OnPingDocument(self) -> GH_Document: ...
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ReadFull(self, reader: GH_IReader) -> bool: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> Guid: ...
    @overload
    def RecordUndoEvent(self, record: GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: IGH_UndoAction) -> Guid: ...
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def remove_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    def remove_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    def remove_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    def remove_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    def remove_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @Attributes.setter
    def Attributes(self, Value: IGH_Attributes) -> None: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, Value: GH_IconDisplayMode) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    def SetIconOverride(self, customIcon: Bitmap) -> None: ...
    def ToString(self) -> str: ...
    @overload
    def TriggerAutoSave(self) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, id: Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> None: ...
    def Write(self, writer: GH_IWriter) -> bool: ...
    def WriteFull(self, writer: GH_IWriter) -> bool: ...


class GH_DocumentProperties:
    def __init__(self): ...
    def DisplayProperties(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CopyRight(self) -> str: ...
    @property
    def Date(self) -> DateTime: ...
    @property
    def DateTag(self) -> DateTime: ...
    @property
    def Description(self) -> str: ...
    @property
    def IconImageData(self) -> str: ...
    @property
    def ProjectFileName(self) -> str: ...
    @property
    def Revisions(self) -> List: ...
    @property
    def ViewList(self) -> List: ...
    @property
    def ViewTarget(self) -> Point: ...
    @property
    def ZoomFactor(self) -> Single: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IconBitmap(self, size: Size) -> Bitmap: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @CopyRight.setter
    def CopyRight(self, Value: str) -> None: ...
    @DateTag.setter
    def DateTag(self, Value: DateTime) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @IconImageData.setter
    def IconImageData(self, Value: str) -> None: ...
    @ProjectFileName.setter
    def ProjectFileName(self, Value: str) -> None: ...
    @ViewTarget.setter
    def ViewTarget(self, Value: Point) -> None: ...
    @ZoomFactor.setter
    def ZoomFactor(self, Value: Single) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_DocumentRank(Enum):
    Unset = 0
    TopLevel = 1
    Subsidiary = 2


class GH_DocumentRenderMeshProvider:
    def __init__(self): ...
    @overload
    def BoundingBox(self, vp: ViewportInfo, obj: RhinoObject, requestingPlugIn: Guid, preview: bool) -> BoundingBox: ...
    @overload
    def BoundingBox(self, vp: ViewportInfo, obj: RhinoObject, doc: RhinoDoc, requestingPlugIn: Guid, attrs: DisplayPipelineAttributes) -> BoundingBox: ...
    @overload
    def BoundingBox(self, vp: ViewportInfo, obj: RhinoObject, doc: RhinoDoc, requestingPlugIn: Guid, attrs: DisplayPipelineAttributes) -> BoundingBox: ...
    @overload
    def BuildCustomMeshes(self, vp: ViewportInfo, objMeshes: RenderPrimitiveList, requestingPlugIn: Guid, preview: bool) -> bool: ...
    @overload
    def BuildCustomMeshes(self, vp: ViewportInfo, doc: RhinoDoc, objMeshes: RenderPrimitiveList, requestingPlugIn: Guid, attrs: DisplayPipelineAttributes) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...
    @overload
    def WillBuildCustomMeshes(self, vp: ViewportInfo, obj: RhinoObject, requestingPlugIn: Guid, preview: bool) -> bool: ...
    @overload
    def WillBuildCustomMeshes(self, vp: ViewportInfo, obj: RhinoObject, doc: RhinoDoc, requestingPlugIn: Guid, attrs: DisplayPipelineAttributes) -> bool: ...


class GH_DocumentServer:
    def __init__(self): ...
    def add_DocumentAdded(self, obj: DocumentAddedEventHandler) -> None: ...
    def add_DocumentRemoved(self, obj: DocumentRemovedEventHandler) -> None: ...
    @overload
    def AddDocument(self, document: GH_Document) -> None: ...
    @overload
    def AddDocument(self, filepath: str, makeActive: bool) -> GH_Document: ...
    def AddNewDocument(self) -> GH_Document: ...
    def Contains(self, doc: GH_Document) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self, index: int) -> GH_Document: ...
    @property
    def DocumentCount(self) -> int: ...
    @property
    def DocumentNames(self) -> List: ...
    @property
    def ModifiedDocumentCount(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetEnumerator_Generic(self) -> IEnumerator: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, doc: GH_Document) -> int: ...
    @overload
    def IndexOf(self, filepath: str) -> int: ...
    def IndexOfAutoSave(self, autoSavePath: str) -> int: ...
    def NextAvailableDocument(self) -> GH_Document: ...
    def PromoteDocument(self, document: GH_Document) -> None: ...
    def remove_DocumentAdded(self, obj: DocumentAddedEventHandler) -> None: ...
    def remove_DocumentRemoved(self, obj: DocumentRemovedEventHandler) -> None: ...
    def RemoveAllDocuments(self) -> None: ...
    def RemoveDocument(self, document: GH_Document) -> None: ...
    def SafeRemoveDocument(self, document: GH_Document) -> bool: ...
    def ToString(self) -> str: ...


class GH_DocumentSettings(Enum):
    Preview = 0
    Properties = 1


class GH_DocumentTree:
    def __init__(self, root: GH_Document): ...
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def FlatCollection(self) -> Iterable[GH_Document]: ...
    @property
    def Root(self) -> GH_DocumentTreeNode: ...
    @property
    def RootDocument(self) -> GH_Document: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocumentTreeNode:
    def __init__(self, node: GH_Document): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def SubNodes(self) -> List: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_DocUndoEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Operation(self) -> GH_UndoOperation: ...
    @property
    def Record(self) -> GH_UndoRecord: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Exposure(Enum):
    primary = 2
    secondary = 4
    tertiary = 8
    quarternary = 16
    quinary = 32
    senary = 64
    septenary = 128
    octonary = 256
    last = 256
    dropdown = 65536
    obscure = 65536
    hidden = -1


class GH_ExternalFile:
    def __init__(self, path: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def FileHash(self) -> Guid: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def FileSize(self) -> Int64: ...
    @property
    def FileType(self) -> GH_ExternalFileType: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsIdenticalTo(self, other: GH_ExternalFile) -> bool: ...
    def ToString(self) -> str: ...


class GH_ExternalFileType(Enum):
    Unknown = 0
    Assembly = 1
    UserObject = 2
    Cluster = 3


class GH_FileSystemEventServer:
    def AddWatcher(owner: Object, path: str, callback: FileEvent) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def AllPaths() -> Iterable[str]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def RemoveWatcher(owner: Object) -> None: ...
    @overload
    def RemoveWatcher(owner: Object, path: str) -> None: ...
    def ToString(self) -> str: ...


class GH_FileWatcher:
    @overload
    def CreateDirectoryWatcher(folderPath: str, filter: str, events: GH_FileWatcherEvents, delegate: FileChangedSimple) -> GH_FileWatcher: ...
    @overload
    def CreateDirectoryWatcher(folderPath: str, filter: str, events: GH_FileWatcherEvents, delegate: FileChanged) -> GH_FileWatcher: ...
    @overload
    def CreateFileWatcher(filePath: str, events: GH_FileWatcherEvents, delegate: FileChangedSimple) -> GH_FileWatcher: ...
    @overload
    def CreateFileWatcher(filePath: str, events: GH_FileWatcherEvents, delegate: FileChanged) -> GH_FileWatcher: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Active(self) -> bool: ...
    @property
    def Buffer(self) -> TimeSpan: ...
    @property
    def InvokeOnDefaultThread(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Active.setter
    def Active(self, Value: bool) -> None: ...
    @Buffer.setter
    def Buffer(self, Value: TimeSpan) -> None: ...
    @InvokeOnDefaultThread.setter
    def InvokeOnDefaultThread(self, Value: bool) -> None: ...
    @overload
    def SetCustomUIThread(self, target: Control) -> None: ...
    @overload
    def SetCustomUIThread(self, target: Form) -> None: ...
    def ToString(self) -> str: ...


class GH_FileWatcherEvents(Enum):
    None_ = 0
    Changed = 1
    Renamed = 2
    Created = 4
    Deleted = 8
    All = 15


class GH_Filter(Enum):
    DontCare = 0
    Include = 1
    Exclude = 2


class GH_FontServer:
    def add_ConsoleFamilyChanged(obj: ConsoleFamilyChangedEventHandler) -> None: ...
    def add_ScriptFamilyChanged(obj: ScriptFamilyChangedEventHandler) -> None: ...
    def add_StandardFamilyChanged(obj: StandardFamilyChangedEventHandler) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def FontToString(font: Font) -> str: ...
    @property
    def Console() -> Font: ...
    @property
    def ConsoleAdjusted() -> Font: ...
    @property
    def ConsoleSmall() -> Font: ...
    @property
    def ConsoleSmallAdjusted() -> Font: ...
    @property
    def FamilyConsole() -> FontFamily: ...
    @property
    def FamilyScript() -> FontFamily: ...
    @property
    def FamilyStandard() -> FontFamily: ...
    @property
    def Large() -> Font: ...
    @property
    def LargeAdjusted() -> Font: ...
    @property
    def Script() -> Font: ...
    @property
    def ScriptSmall() -> Font: ...
    @property
    def Small() -> Font: ...
    @property
    def Standard() -> Font: ...
    @property
    def StandardAdjusted() -> Font: ...
    @property
    def StandardBold() -> Font: ...
    @property
    def StandardItalic() -> Font: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def MeasureString(text: str, font: Font) -> Size: ...
    @overload
    def MeasureString(text: str, font: Font, maxwidth: Single) -> Size: ...
    @overload
    def MeasureString(text: str, font: Font, iLayout: SizeF) -> Size: ...
    @overload
    def NewFont(family: FontFamily, size: Single) -> Font: ...
    @overload
    def NewFont(font: Font, style: FontStyle) -> Font: ...
    @overload
    def NewFont(font: Font, size: Single) -> Font: ...
    @overload
    def NewFont(family: str, size: Single, style: FontStyle) -> Font: ...
    @overload
    def NewFont(family: FontFamily, size: Single, style: FontStyle) -> Font: ...
    @overload
    def NewFont(font: Font, size: Single, style: FontStyle) -> Font: ...
    def remove_ConsoleFamilyChanged(obj: ConsoleFamilyChangedEventHandler) -> None: ...
    def remove_ScriptFamilyChanged(obj: ScriptFamilyChangedEventHandler) -> None: ...
    def remove_StandardFamilyChanged(obj: StandardFamilyChangedEventHandler) -> None: ...
    @FamilyConsole.setter
    def FamilyConsole(Value: FontFamily) -> None: ...
    @FamilyScript.setter
    def FamilyScript(Value: FontFamily) -> None: ...
    @FamilyStandard.setter
    def FamilyStandard(Value: FontFamily) -> None: ...
    def StringToFont(text: str) -> Font: ...
    @overload
    def StringWidth(text: str, font: Font) -> int: ...
    @overload
    def StringWidth(text: Iterable[str], font: Font) -> int: ...
    def ToString(self) -> str: ...


from .Types import Complex
from .Types import GH_Boolean
from .Types import GH_Integer
from .Types import GH_Matrix
from .Types import GH_Number
from .Types import GH_ComplexNumber
from .Types import GH_Colour
from .Types import GH_Time
from .Types import GH_Interval
from .Types import GH_Interval2D
from .Types import GH_Point
from .Types import GH_Vector
from .Types import GH_Plane
from .Types import GH_Line
from .Types import GH_Circle
from .Types import GH_Arc
from .Types import GH_Curve
from .Types import GH_Surface
from .Types import GH_Brep
from .Types import GH_SubD
from .Types import GH_Box
from .Types import GH_Mesh
from .Types import GH_MeshFace
from .Types import IGH_GeometricGoo
class GH_Format:
    def DefaultCulture() -> IFormatProvider: ...
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FormatArc(data: GH_Arc) -> str: ...
    @overload
    def FormatArc(data: Arc) -> str: ...
    def FormatArcValidity(val: Arc, identifier: str) -> str: ...
    @overload
    def FormatBoolean(data: GH_Boolean) -> str: ...
    @overload
    def FormatBoolean(data: bool) -> str: ...
    def FormatBoundingBoxValidity(val: BoundingBox, identifier: str) -> str: ...
    @overload
    def FormatBox(data: Box) -> str: ...
    @overload
    def FormatBox(data: GH_Box) -> str: ...
    def FormatBoxValidity(val: Box, identifier: str) -> str: ...
    @overload
    def FormatBrep(data: GH_Brep) -> str: ...
    @overload
    def FormatBrep(data: Brep) -> str: ...
    def FormatBrepValidity(val: Brep, identifier: str) -> str: ...
    @overload
    def FormatCircle(data: GH_Circle) -> str: ...
    @overload
    def FormatCircle(data: Circle) -> str: ...
    def FormatCircleValidity(val: Circle, identifier: str) -> str: ...
    @overload
    def FormatColour(data: Color) -> str: ...
    @overload
    def FormatColour(data: GH_Colour) -> str: ...
    @overload
    def FormatComplexNumber(num: Complex) -> str: ...
    @overload
    def FormatComplexNumber(data: GH_ComplexNumber) -> str: ...
    def FormatComplexValidity(val: Complex, identifier: str) -> str: ...
    @overload
    def FormatCurve(data: GH_Curve) -> str: ...
    @overload
    def FormatCurve(data: Curve, prefix: str, name: str) -> str: ...
    def FormatCurveValidity(val: Curve, identifier: str) -> str: ...
    @overload
    def FormatDate(data: DateTime) -> str: ...
    @overload
    def FormatDate(data: GH_Time) -> str: ...
    @overload
    def FormatDouble(data: GH_Number) -> str: ...
    @overload
    def FormatDouble(data: float) -> str: ...
    def FormatDoubleValidity(val: float, identifier: str) -> str: ...
    @overload
    def FormatFilePath(path: str, maxLength: int) -> str: ...
    @overload
    def FormatFilePath(path: str, maxWidth: int, font: Font) -> str: ...
    def FormatGeometry(data: IGH_GeometricGoo) -> str: ...
    @overload
    def FormatInteger(data: GH_Integer) -> str: ...
    @overload
    def FormatInteger(data: int) -> str: ...
    @overload
    def FormatInterval(data: GH_Interval) -> str: ...
    @overload
    def FormatInterval(data: Interval) -> str: ...
    @overload
    def FormatInterval(data: GH_Interval2D) -> str: ...
    @overload
    def FormatInterval(t0: float, t1: float) -> str: ...
    def FormatIntervalValidity(val: Interval, identifier: str, testSingleton: bool, testDecreasing: bool) -> str: ...
    def FormatKeys(keys: Keys) -> str: ...
    @overload
    def FormatLine(data: Line) -> str: ...
    @overload
    def FormatLine(data: GH_Line) -> str: ...
    def FormatLineValidity(val: Line, identifier: str) -> str: ...
    @overload
    def FormatMatrix(data: GH_Matrix) -> str: ...
    @overload
    def FormatMatrix(data: Matrix) -> str: ...
    @overload
    def FormatMesh(data: GH_Mesh) -> str: ...
    @overload
    def FormatMesh(data: Mesh, sPrefix: str) -> str: ...
    def FormatMeshFace(data: GH_MeshFace) -> str: ...
    def FormatMeshFaceValidity(val: MeshFace, identifier: str) -> str: ...
    def FormatMeshValidity(val: Mesh, identifier: str) -> str: ...
    @overload
    def FormatPlane(data: GH_Plane) -> str: ...
    @overload
    def FormatPlane(data: Plane) -> str: ...
    def FormatPlaneValidity(val: Plane, identifier: str, testUnitAxes: bool) -> str: ...
    @overload
    def FormatPoint(data: GH_Point) -> str: ...
    @overload
    def FormatPoint(data: Point3d) -> str: ...
    def FormatPointCloud(data: PointCloud) -> str: ...
    def FormatPointValidity(val: Point3d, identifier: str) -> str: ...
    def FormatRectangleValidity(val: Rectangle3d, identifier: str) -> str: ...
    def FormatSingle(data: Single) -> str: ...
    @overload
    def FormatSubD(data: GH_SubD) -> str: ...
    @overload
    def FormatSubD(data: SubD) -> str: ...
    def FormatSubDValidity(val: SubD, identifier: str) -> str: ...
    @overload
    def FormatSurface(data: Brep) -> str: ...
    @overload
    def FormatSurface(data: GH_Surface) -> str: ...
    def FormatSurfaceValidity(val: Surface, identifier: str) -> str: ...
    def FormatTransformValidity(val: Transform, identifier: str) -> str: ...
    @overload
    def FormatVector(data: Vector3d) -> str: ...
    @overload
    def FormatVector(data: GH_Vector) -> str: ...
    def FormatVectorValidity(val: Vector3d, identifier: str, testZero: bool, testUnit: bool) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def RhinoUnitName() -> str: ...
    def RhinoUnitSymbol() -> str: ...
    def ToString(self) -> str: ...
    def TreatAsCollection(obj: Object) -> bool: ...


class GH_GetterResult(Enum):
    accept = 0
    success = 1
    cancel = 2


class GH_GHALoadingEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LoadingMechanism(self) -> GH_LoadingMechanism: ...
    @property
    def Name(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_GHXHarvester:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def HarvestBoundingBoxes(file: str) -> List: ...
    @overload
    def HarvestBoundingBoxes(archive: GH_Archive) -> List: ...
    @overload
    def HarvestBoundingBoxes(node: GH_IReader) -> List: ...
    @overload
    def HarvestPivots(file: str) -> List: ...
    @overload
    def HarvestPivots(archive: GH_Archive) -> List: ...
    @overload
    def HarvestPivots(node: GH_IReader) -> List: ...
    def ToString(self) -> str: ...


from .Graphs import IGH_Graph
class GH_GraphProxy:
    def __init__(self, nGraph: IGH_Graph, T: Type): ...
    def CompareTo(self, other: GH_GraphProxy) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def GUID(self) -> Guid: ...
    @property
    def Icon(self) -> Image: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> Type: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_GuidConflictSolution(Enum):
    Unset = 0
    Replace = 1
    ReplaceAll = 2
    Skip = 3
    SkipAll = 4


class GH_GuidTable:
    def __init__(self): ...
    def Add(self, id: Guid, obj: IGH_ActiveObject) -> None: ...
    def AllObjects(self) -> List: ...
    def Clear(self) -> None: ...
    def Contains(self, id: Guid) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Objects(self, id: Guid) -> List: ...
    def ToString(self) -> str: ...


class GH_IconDisplayMode(Enum):
    application = 0
    icon = 1
    name = 2


class GH_IncrementalParamNameConstructor:
    def __init__(self, format_mask: str, start_index: int): ...
    def Current(self) -> str: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def FormatMask(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Next(self) -> str: ...
    def Reset(self) -> None: ...
    @FormatMask.setter
    def FormatMask(self, Value: str) -> None: ...
    def ToString(self) -> str: ...


class GH_InstanceDescription:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: IGH_InstanceDescription): ...
    @overload
    def __init__(self, name: str, nickName: str, description: str, category: str): ...
    @overload
    def __init__(self, name: str, nickName: str, description: str, category: str, subCategory: str): ...
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def SubCategory(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ReadFull(self, reader: GH_IReader) -> bool: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...
    def WriteFull(self, writer: GH_IWriter) -> bool: ...


class GH_LibraryLicense(Enum):
    unset = 0
    expired = 1
    alpha = 2
    beta = 3
    free = 4
    opensource = 5
    trial = 6
    commercial = 7
    educational = 8
    developer = 9
    reseller = 10
    other = 11


class GH_LineParser:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ParseLine(self, line: str, action: GH_LineParserAction) -> Tuple[Object, GH_LineParserAction]: ...
    def ToString(self) -> str: ...


class GH_LineParserAction(Enum):
    Include = 0
    Ignore = 1
    Abort = 2


class GH_ListUtil:
    def CountNonNullRefs(L: List) -> int: ...
    def CountNullRefs(L: List) -> int: ...
    def EnsureNonNullCount(L: List, N: int) -> bool: ...
    def Equals(self, obj: Object) -> bool: ...
    def FirstNonNullItem(L: List) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def RemoveNullRefs(L: List) -> List: ...
    def ToString(self) -> str: ...


class GH_LoadingAttribute:
    def __init__(self, demand: GH_LoadingDemand): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def TypeId(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsDefaultAttribute(self) -> bool: ...
    def Match(self, obj: Object) -> bool: ...
    def ToString(self) -> str: ...


class GH_LoadingDemand(Enum):
    Default = 0
    ForceCOFF = 1
    ForceDirect = 2
    None_ = -1


class GH_LoadingException:
    @overload
    def __init__(self, name: str, message: str): ...
    @overload
    def __init__(self, name: str, ex: Exception): ...
    @overload
    def __init__(self, name: str, message: str, type: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_LoadingInstruction(Enum):
    Proceed = 0
    Abort = 1


class GH_LoadingMechanism(Enum):
    COFF = 1
    Direct = 2
    Unknown = -1


class GH_MarkovChain:
    def __init__(self): ...
    def AppendPattern(self, pattern: GH_MarkovPattern) -> None: ...
    def Clear(self) -> None: ...
    def Description(self) -> str: ...
    def Equals(self, obj: Object) -> bool: ...
    def ExtendHistory(self, new_id: Guid) -> None: ...
    @overload
    def FindPattern(self, id: Guid) -> GH_MarkovPattern: ...
    @overload
    def FindPattern(self, id1: Guid, id2: Guid) -> GH_MarkovPattern: ...
    @overload
    def FindPattern(self, id1: Guid, id2: Guid, id3: Guid) -> GH_MarkovPattern: ...
    @property
    def Level1(self) -> List: ...
    @property
    def Level2(self) -> List: ...
    @property
    def Level3(self) -> List: ...
    @property
    def PatternCount(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ReadFromDisc(self) -> None: ...
    def ReduceDataset(self) -> None: ...
    def SuggestEvents(self) -> Iterable[Guid]: ...
    def ToString(self) -> str: ...
    def WriteToDisc(self) -> None: ...


class GH_MarkovOutcome:
    @overload
    def __init__(self, newId: Guid): ...
    @overload
    def __init__(self, other: GH_MarkovOutcome): ...
    @overload
    def __init__(self, newId: Guid, newValence: Int64): ...
    def DecreaseValence(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsInsignificant(self) -> bool: ...
    @property
    def Valence(self) -> Int64: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IncreaseValence(self) -> None: ...
    @Valence.setter
    def Valence(self, AutoPropertyValue: Int64) -> None: ...
    def ToString(self) -> str: ...


class GH_MarkovPattern:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pat: Iterable[Guid]): ...
    @overload
    def __init__(self, other: GH_MarkovPattern): ...
    @overload
    def AppendOutcome(self, id: Guid) -> None: ...
    @overload
    def AppendOutcome(self, outcome: GH_MarkovOutcome) -> None: ...
    def CompareTo(self, other: GH_MarkovPattern) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @property
    def IsInsignificant(self) -> bool: ...
    @property
    def MaximumValence(self) -> Int64: ...
    @property
    def Outcomes(self) -> List: ...
    @property
    def Pattern(self) -> Iterable[Guid]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def RemoveInsignificantOutcomes(self) -> None: ...
    def Simplify(self) -> None: ...
    def ToString(self) -> str: ...


class GH_MatchLevel(Enum):
    None_ = 0
    Exact = 1
    Start = 2
    WordExact = 4
    WordStart = 8
    Contains = 16
    AllClean = 31
    Fuzzy = 32
    All = 63


class GH_MatchWeight(Enum):
    Fuzzy = 10
    Contains = 10
    WordExact = 100
    Start = 100
    WordStart = 100
    Exact = 100


class GH_MathUtil:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...
    @overload
    def WrapInteger(X: int, upper: int) -> int: ...
    @overload
    def WrapInteger(number: int, lower: int, upper: int) -> int: ...


class GH_MemoryBitmap:
    @overload
    def __init__(self, bitmap: Bitmap): ...
    @overload
    def __init__(self, bitmap: Bitmap, wrap: WrapMode): ...
    def A(self, x: int, y: int) -> Byte: ...
    def B(self, x: int, y: int) -> Byte: ...
    @overload
    def Colour(self, x: int, y: int) -> Color: ...
    @overload
    def Colour(self, x: int, y: int, col: Color) -> None: ...
    def CopyChannel(self, source: GH_BitmapChannel, target: GH_BitmapChannel) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Filter_AlphaEdges(self, padding: Padding, alpha_override: Byte) -> None: ...
    @overload
    def Filter_Blur(self) -> None: ...
    @overload
    def Filter_Blur(self, N: int) -> None: ...
    @overload
    def Filter_Blur(self, interior_weight: int, exterior_weight: int) -> None: ...
    @overload
    def Filter_Blur(self, N: int, interior_weight: int, exterior_weight: int) -> None: ...
    def Filter_BlurAlpha(self, N: int, interior_weight: int, exterior_weight: int) -> None: ...
    def Filter_Contrast(self, channel: GH_BitmapChannel, factor: float) -> None: ...
    def Filter_DitherPattern(self, colour: Color) -> None: ...
    def Filter_DropShadow(self, offset: Size, blur: int, darkness: float) -> None: ...
    def Filter_Dullify(self) -> None: ...
    def Filter_Equalize(self, channel: GH_BitmapChannel, value: Byte) -> None: ...
    @overload
    def Filter_GreyScale(self) -> None: ...
    @overload
    def Filter_GreyScale(self, amount: float) -> None: ...
    def Filter_HueScale(self) -> None: ...
    def Filter_Invert(self, channel: GH_BitmapChannel) -> None: ...
    def Filter_LumScale(self) -> None: ...
    @overload
    def Filter_Multiply(self, channel: GH_BitmapChannel, factor: float) -> None: ...
    @overload
    def Filter_Multiply(self, channel: GH_BitmapChannel, factor: float, anchor: Byte) -> None: ...
    def Filter_SatScale(self) -> None: ...
    def Filter_Shift(self, channel: GH_BitmapChannel, amount: Byte) -> None: ...
    def Filter_SpectrumScale(self) -> None: ...
    def Filter_Tint(self, tint: Color, lum_factor: float, sat_factor: float) -> None: ...
    def G(self, x: int, y: int) -> Byte: ...
    @property
    def HasAlphaChannel(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def SizeOf(self) -> int: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def OpaqueArea(self) -> Rectangle: ...
    def PadBitmap(bmp: Image, padding: Padding, padding_color: Color) -> Bitmap: ...
    def R(self, x: int, y: int) -> Byte: ...
    def Release(self, includeChanges: bool) -> None: ...
    @overload
    def Sample(self, x: float, y: float, col: Color) -> Tuple[bool, Color]: ...
    @overload
    def Sample(self, x: int, y: int, col: Color) -> Tuple[bool, Color]: ...
    def ShrinkBitmap(image: Bitmap) -> Bitmap: ...
    def ToString(self) -> str: ...


class GH_NoiseTable:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Permutation(N: int) -> int: ...
    def Sample(N: int) -> float: ...
    def ToString(self) -> str: ...


class GH_ObjectChangedEventArgs:
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eType: GH_ObjectEventType): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eCustomDescription: str): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eType: GH_ObjectEventType, eTag: Object): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eCustomDescription: str, eTag: Object): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def CustomType(self) -> str: ...
    @property
    def Sender(self) -> IGH_DocumentObject: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Type(self) -> GH_ObjectEventType: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_ObjectEventType(Enum):
    Unset = 0
    NickName = 1
    NickNameAccepted = 2
    Icon = 3
    IconDisplayMode = 4
    Layout = 5
    Sources = 6
    Selected = 7
    Enabled = 8
    Preview = 9
    PersistentData = 10
    DataMatching = 11
    DataMapping = 12
    Options = 13
    Custom = 2147483647


class GH_ObjectSpecies(Enum):
    none = 0
    doc_object = 1
    parameter = 16
    component = 32
    group = 64
    wire = 128
    grip_in = 256
    grip_out = 512
    grip = 768
    balloon = 1024
    any = 4294967295


class GH_ObjectType(Enum):
    None_ = 0
    CompiledObject = 1
    UserObject = 2




class GH_ParamAccess(Enum):
    item = 0
    list = 1
    tree = 2


class GH_ParamData(Enum):
    unknown = 0
    void = 1
    local = 2
    remote = 3


class GH_ParameterContext:
    def __init__(self, name: str, rhDoc: RhinoDoc, runmode: RunMode): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def IsScripted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @property
    def SolveIndex(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @SolveIndex.setter
    def SolveIndex(self, AutoPropertyValue: int) -> None: ...
    def ToString(self) -> str: ...


class GH_ParameterSide(Enum):
    Input = 0
    Output = 1


class GH_ParamHashFields(Enum):
    None_ = 0
    Input = 1
    Output = 2
    InputAndOutput = 3
    InstanceId = 4
    NickName = 8
    Access = 16
    TypeId = 32
    PersistentData = 64
    Expression = 128
    TypeHint = 256
    Sources = 65536
    Recipients = 131072
    SourcesAndRecipients = 196608
    SerialData = 16777216
    All = 16974335


class GH_ParamKind(Enum):
    unknown = 0
    floating = 1
    input = 2
    output = 3


class GH_ParamServerEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def OriginalArguments(self) -> GH_ObjectChangedEventArgs: ...
    @property
    def Parameter(self) -> IGH_Param: ...
    @property
    def ParameterIndex(self) -> int: ...
    @property
    def ParameterSide(self) -> GH_ParameterSide: ...
    @property
    def Server(self) -> GH_ComponentParamServer: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_ParamWireDisplay(Enum):
    default = 0
    faint = 1
    hidden = 2






class GH_PickBox(Enum):
    Window = 0
    Crossing = 1


class GH_PingDocumentEventArgs:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...
    def ToString(self) -> str: ...


class GH_PluginFolderType(Enum):
    Core = 0
    Default = 1
    RhiFolder = 2
    UserFolder = 3


class GH_PreviewArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def DefaultCurveThickness(self) -> int: ...
    @property
    def Display(self) -> DisplayPipeline: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @property
    def ShadeMaterial(self) -> DisplayMaterial: ...
    @property
    def ShadeMaterial_Selected(self) -> DisplayMaterial: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def WireColour(self) -> Color: ...
    @property
    def WireColour_Selected(self) -> Color: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_PreviewBoundary:
    def __init__(self, points: Iterable[PointF]): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Boundary(self) -> Region: ...
    @property
    def Limits(self) -> RectangleF: ...
    @property
    def Points(self) -> Iterable[PointF]: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsVisible(self, obj: IGH_DocumentObject) -> bool: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PreviewExpiredEventArgs:
    def __init__(self, eForceRedraw: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ForceRedraw(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_PreviewFilter(Enum):
    None_ = 0
    Selected = 1


class GH_PreviewMesh(Enum):
    None_ = 0
    LowQuality = 1
    HighQuality = 2
    Document = 3
    Custom = 4


class GH_PreviewMeshArgs:
    def __init__(self, vp: RhinoViewport, pl: DisplayPipeline, mat: DisplayMaterial, meshParams: MeshingParameters): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Material(self) -> DisplayMaterial: ...
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @property
    def Pipeline(self) -> DisplayPipeline: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_PreviewMode(Enum):
    Disabled = 0
    Wireframe = 1
    Shaded = 2


class GH_PreviewUtil:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enable: bool): ...
    def AddBox(self, box: Box) -> None: ...
    def AddBrep(self, brep: Brep) -> None: ...
    def AddCurve(self, curve: Curve) -> None: ...
    def AddLine(self, line: Line) -> None: ...
    def AddMesh(self, mesh: Mesh) -> None: ...
    def AddPlane(self, plane: Plane) -> None: ...
    def AddPoint(self, point: Point3d) -> None: ...
    def AddVector(self, vector: Line) -> None: ...
    def Clear(self) -> None: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def WireColour(self) -> Color: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Redraw(self) -> None: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    @WireColour.setter
    def WireColour(self, Value: Color) -> None: ...
    def ToString(self) -> str: ...


class GH_PreviewWireArgs:
    def __init__(self, vp: RhinoViewport, pl: DisplayPipeline, col: Color, thickness: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Pipeline(self) -> DisplayPipeline: ...
    @property
    def Thickness(self) -> int: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_PrincipalState(Enum):
    CannotBePrincipal = 0
    IsPrincipal = 1
    IsNotPrincipal = 2


class GH_Process:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Handle() -> IntPtr: ...
    @property
    def HandleCount() -> int: ...
    @property
    def HasExited() -> bool: ...
    @property
    def MaxWorkingSet() -> Int64: ...
    @property
    def Name() -> str: ...
    @property
    def PeakPrivateBytes() -> Int64: ...
    @property
    def PrivateBytes() -> Int64: ...
    @property
    def WorkingSet() -> Int64: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_ProcessForm:
    def __init__(self): ...
    def Activate(self) -> None: ...
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    def add_Click(self, value: EventHandler) -> None: ...
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    def add_Closed(self, value: EventHandler) -> None: ...
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    def add_Deactivate(self, value: EventHandler) -> None: ...
    def add_Disposed(self, value: EventHandler) -> None: ...
    def add_DockChanged(self, value: EventHandler) -> None: ...
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    def add_DragLeave(self, value: EventHandler) -> None: ...
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    def add_Enter(self, value: EventHandler) -> None: ...
    def add_FontChanged(self, value: EventHandler) -> None: ...
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    def add_GotFocus(self, value: EventHandler) -> None: ...
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    def add_Leave(self, value: EventHandler) -> None: ...
    def add_Load(self, value: EventHandler) -> None: ...
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    def add_MenuStart(self, value: EventHandler) -> None: ...
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    def add_MouseHover(self, value: EventHandler) -> None: ...
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    def add_Move(self, value: EventHandler) -> None: ...
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    def add_Resize(self, value: EventHandler) -> None: ...
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    def add_Shown(self, value: EventHandler) -> None: ...
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    def add_TextChanged(self, value: EventHandler) -> None: ...
    def add_Validated(self, value: EventHandler) -> None: ...
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[Object]) -> IAsyncResult: ...
    def BringToFront(self) -> None: ...
    def Close(self) -> None: ...
    def Contains(self, ctl: Control) -> bool: ...
    def CreateControl(self) -> None: ...
    def CreateGraphics(self) -> Graphics: ...
    def CreateObjRef(self, requestedType: Type) -> ObjRef: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: Object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    def EndInvoke(self, asyncResult: IAsyncResult) -> Object: ...
    def Equals(self, obj: Object) -> bool: ...
    def FindForm(self) -> Form: ...
    def Focus(self) -> bool: ...
    def FormatBytes(B: Int64) -> str: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def ActiveControl(self) -> Control: ...
    @property
    def ActiveMdiChild(self) -> Form: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @property
    def DesktopLocation(self) -> Point: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMdiChild(self) -> bool: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @property
    def MdiParent(self) -> Form: ...
    @property
    def Menu(self) -> MainMenu: ...
    @property
    def MergedMenu(self) -> MainMenu: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Modal(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @property
    def Owner(self) -> Form: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def ParentForm(self) -> Form: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Region: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowIcon(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Color: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    def GetContainerControl(self) -> IContainerControl: ...
    def GetHashCode(self) -> int: ...
    def GetLifetimeService(self) -> Object: ...
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    def GetType(self) -> Type: ...
    def Hide(self) -> None: ...
    def InitializeLifetimeService(self) -> Object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> Object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[Object]) -> Object: ...
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    def PointToClient(self, p: Point) -> Point: ...
    def PointToScreen(self, p: Point) -> Point: ...
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    def Refresh(self) -> None: ...
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    def remove_Click(self, value: EventHandler) -> None: ...
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    def remove_Closed(self, value: EventHandler) -> None: ...
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    def remove_Disposed(self, value: EventHandler) -> None: ...
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    def remove_Enter(self, value: EventHandler) -> None: ...
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    def remove_Leave(self, value: EventHandler) -> None: ...
    def remove_Load(self, value: EventHandler) -> None: ...
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    def remove_Move(self, value: EventHandler) -> None: ...
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    def remove_Resize(self, value: EventHandler) -> None: ...
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    def remove_Shown(self, value: EventHandler) -> None: ...
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    def remove_Validated(self, value: EventHandler) -> None: ...
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    def ResetBackColor(self) -> None: ...
    def ResetBindings(self) -> None: ...
    def ResetCursor(self) -> None: ...
    def ResetFont(self) -> None: ...
    def ResetForeColor(self) -> None: ...
    def ResetImeMode(self) -> None: ...
    def ResetRightToLeft(self) -> None: ...
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    def Scale(self, factor: SizeF) -> None: ...
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    def Select(self) -> None: ...
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    def SendToBack(self) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class GH_ProcessStep(Enum):
    PreProcess = 0
    Process = 1
    PostProcess = 2
    Aborted = 3


class GH_ProfilerMode(Enum):
    None_ = 0
    Processor = 1
    Memory = 2


from .Special import GH_Group
class GH_RelevantObjectData:
    def __init__(self, pt: PointF): ...
    def CreateBalloonData(self, obj: IGH_DocumentObject) -> None: ...
    def CreateGripData(self, obj: IGH_DocumentObject, is_input: bool) -> None: ...
    def CreateGroupData(self, group: GH_Group) -> None: ...
    def CreateObjectData(self, obj: IGH_DocumentObject) -> None: ...
    def CreateWireData(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Group(self) -> GH_Group: ...
    @property
    def IsTopLevelObject(self) -> bool: ...
    @property
    def Object(self) -> IGH_DocumentObject: ...
    @property
    def ObjectType(self) -> GH_ObjectSpecies: ...
    @property
    def Parameter(self) -> IGH_Param: ...
    @property
    def Point(self) -> PointF: ...
    @property
    def TopLevelObject(self) -> IGH_DocumentObject: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_RelevantObjectFilter(Enum):
    None_ = 0
    Groups = 1
    InputGrips = 2
    OutputGrips = 4
    Grips = 6
    Attributes = 8
    Wires = 1024
    All = 2147483647


class GH_RenderArgs:
    @overload
    def __init__(self, doc: RhinoDoc, vp: ViewportInfo, geometry: RenderPrimitiveList, id: Guid, materialCache: Dictionary): ...
    @overload
    def __init__(self, doc: RhinoDoc, vp: ViewportInfo, geometry: RenderPrimitiveList, id: Guid, matNormal: RenderMaterial, matSelected: RenderMaterial): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geomety(self) -> RenderPrimitiveList: ...
    @property
    def MaterialCache(self) -> Dictionary: ...
    @property
    def MaterialNormal(self) -> RenderMaterial: ...
    @property
    def MaterialSelected(self) -> RenderMaterial: ...
    @property
    def PluginId(self) -> Guid: ...
    @property
    def Viewport(self) -> ViewportInfo: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Revision:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Date(self) -> DateTime: ...
    @property
    def DateTag(self) -> DateTime: ...
    @property
    def Description(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @DateTag.setter
    def DateTag(self, Value: DateTime) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_RuntimeMessage:
    def __init__(self, nMessage: str, nType: GH_RuntimeMessageLevel, nSource: str): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Event(self) -> DateTime: ...
    @property
    def HasSource(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def Type(self) -> GH_RuntimeMessageLevel: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_RuntimeMessageLevel(Enum):
    Blank = 0
    Warning = 10
    Error = 20
    Remark = 255


class GH_ScheduleDelegate:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, doc: GH_Document, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, doc: GH_Document) -> None: ...
    def ToString(self) -> str: ...


class GH_ScriptComponentUtilities:
    def Equals(self, obj: Object) -> bool: ...
    def FindAllNameSpaces(asm: Assembly) -> List: ...
    def FindTopLevelNameSpaces(asm: Assembly) -> List: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def ReflectType_CS(obj: Object) -> str: ...
    @overload
    def ReflectType_CS(obj: Object, method_name: str) -> str: ...
    @overload
    def ReflectType_VB(obj: Object) -> str: ...
    @overload
    def ReflectType_VB(obj: Object, method_name: str) -> str: ...
    def ToString(self) -> str: ...


class GH_ScriptInstance:
    def AfterRunScript(self) -> None: ...
    def BeforeRunScript(self) -> None: ...
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def InvokeRunScript(self, owner: IGH_Component, rhinoDocument: Object, iteration: int, inputs: List, DA: IGH_DataAccess) -> None: ...
    @Hidden.setter
    def Hidden(self, Value: bool) -> None: ...
    def ToString(self) -> str: ...


class GH_SearchHit:
    def __init__(self, obj: IGH_DocumentObject, weight: int): ...
    def CompareTo(self, other: GH_SearchHit) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Object(self) -> IGH_DocumentObject: ...
    @property
    def Weight(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_SelectionState(Enum):
    Changed = 0
    Unchanged = 1


class GH_SelectionTopology(Enum):
    None_ = 0
    Convex = 1
    Concave = 2


class GH_SettingsServer:
    @overload
    def __init__(self, databaseName: str): ...
    @overload
    def __init__(self, databaseName: str, loadSettings: bool): ...
    def Clear(self) -> None: ...
    def ConstainsEntry(self, name: str) -> bool: ...
    def DeleteValue(self, key: str) -> None: ...
    def EntryNames(self) -> List: ...
    def EntryType(self, name: str) -> GH_SettingsType: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def DatabaseName(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def GetValue(self, key: str, default: Byte) -> Byte: ...
    @overload
    def GetValue(self, key: str, default: int) -> int: ...
    @overload
    def GetValue(self, key: str, default: float) -> float: ...
    @overload
    def GetValue(self, key: str, default: DateTime) -> DateTime: ...
    @overload
    def GetValue(self, key: str, default: str) -> str: ...
    @overload
    def GetValue(self, key: str, default: Size) -> Size: ...
    @overload
    def GetValue(self, key: str, default: Point) -> Point: ...
    @overload
    def GetValue(self, key: str, default: Rectangle) -> Rectangle: ...
    @overload
    def GetValue(self, key: str, default: bool) -> bool: ...
    @overload
    def GetValue(self, key: str, default: Color) -> Color: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def SetValue(self, key: str) -> None: ...
    @overload
    def SetValue(self, key: str, value: Color) -> None: ...
    @overload
    def SetValue(self, key: str, value: Size) -> None: ...
    @overload
    def SetValue(self, key: str, value: Point) -> None: ...
    @overload
    def SetValue(self, key: str, value: DateTime) -> None: ...
    @overload
    def SetValue(self, key: str, value: str) -> None: ...
    @overload
    def SetValue(self, key: str, value: float) -> None: ...
    @overload
    def SetValue(self, key: str, value: int) -> None: ...
    @overload
    def SetValue(self, key: str, value: Byte) -> None: ...
    @overload
    def SetValue(self, key: str, value: bool) -> None: ...
    @overload
    def SetValue(self, key: str, value: Rectangle) -> None: ...
    def ShowSettingsBrowser(self, parent: IWin32Window) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...
    def WritePersistentSettings(self) -> None: ...


class GH_SettingsType(Enum):
    _null = 0
    _boolean = 1
    _byte = 2
    _integer = 3
    _double = 4
    _string = 6
    _date = 7
    _color = 8
    _point = 9
    _size = 10
    _rectangle = 11
    _unknown = -1


class GH_SolutionEventArgs:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Duration(self) -> TimeSpan: ...
    @property
    def EndTime(self) -> DateTime: ...
    @property
    def StartTime(self) -> DateTime: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_SolutionExpiredEventArgs:
    def __init__(self, eRecompute: bool): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Recompute(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_SolutionMode(Enum):
    Default = 0
    CommandLine = 1
    Silent = 2


class GH_SolutionPhase(Enum):
    Blank = 0
    Collecting = 1
    Collected = 2
    Computing = 3
    Computed = 4
    Failed = 10


class GH_SolutionSpan:
    def __init__(self, t0: DateTime, t1: DateTime): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def EndTime(self) -> DateTime: ...
    @property
    def StartTime(self) -> DateTime: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_State:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_State): ...
    def AddStateObject(self, obj: IGH_StateAwareObject, obj_id: Guid) -> None: ...
    def ClearStates(self) -> None: ...
    def CreateStateFromDocument(self, doc: GH_Document) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Data(self, id: Guid) -> str: ...
    @property
    def Data(self, index: int) -> str: ...
    @property
    def LastModified(self) -> DateTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def StateCount(self) -> int: ...
    @property
    def StateData(self) -> SortedList: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def RemoveStateObject(self, obj_id: Guid) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_StateServer:
    def __init__(self, owner: GH_Document): ...
    def Add(self, item: GH_State) -> None: ...
    def AddRange(self, collection: Iterable[GH_State]) -> None: ...
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: GH_State) -> int: ...
    @overload
    def BinarySearch(self, item: GH_State, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: GH_State, comparer: IComparer) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, item: GH_State) -> bool: ...
    def ConvertAll(self, converter: Converter) -> List: ...
    @overload
    def CopyTo(self, array: Iterable[GH_State]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[GH_State], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[GH_State], arrayIndex: int, count: int) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Exists(self, match: Predicate) -> bool: ...
    def Find(self, match: Predicate) -> GH_State: ...
    def FindAll(self, match: Predicate) -> List: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def FindLast(self, match: Predicate) -> GH_State: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> GH_State: ...
    @property
    def Names(self) -> List: ...
    @property
    def Owner(self) -> GH_Document: ...
    def GetEnumerator(self) -> Enumerator: ...
    def GetHashCode(self) -> int: ...
    def GetRange(self, index: int, count: int) -> List: ...
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: GH_State) -> int: ...
    @overload
    def IndexOf(self, item: GH_State, index: int) -> int: ...
    @overload
    def IndexOf(self, item: GH_State, index: int, count: int) -> int: ...
    def Insert(self, index: int, item: GH_State) -> None: ...
    def InsertRange(self, index: int, collection: Iterable[GH_State]) -> None: ...
    @overload
    def LastIndexOf(self, item: GH_State) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_State, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_State, index: int, count: int) -> int: ...
    def NewStateFromDocument(self) -> GH_State: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Remove(self, item: GH_State) -> bool: ...
    def RemoveAll(self, match: Predicate) -> int: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveRange(self, index: int, count: int) -> None: ...
    def RemoveState(self, index: int) -> bool: ...
    @overload
    def RestoreState(self, name: str) -> Tuple[bool, int, int]: ...
    @overload
    def RestoreState(self, index: int) -> Tuple[bool, int, int]: ...
    @overload
    def RestoreState(self, index: int, recompute: bool) -> Tuple[bool, int, int]: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: GH_State) -> None: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    def ToArray(self) -> Iterable[GH_State]: ...
    def ToString(self) -> str: ...
    def TrimExcess(self) -> None: ...
    def TrueForAll(self, match: Predicate) -> bool: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_StateTag:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Stage(self) -> Rectangle: ...
    @property
    def StateDescription(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Render(self, graphics: Graphics) -> None: ...
    @Stage.setter
    def Stage(self, Value: Rectangle) -> None: ...
    @StateDescription.setter
    def StateDescription(self, Value: str) -> None: ...
    def ToString(self) -> str: ...


class GH_StateTagLayoutDirection(Enum):
    Left = 0
    Right = 1


from ..GUI import GH_TooltipDisplayEventArgs
class GH_StateTagList:
    def __init__(self): ...
    def Add(self, item: IGH_StateTag) -> None: ...
    def AddRange(self, collection: Iterable[IGH_StateTag]) -> None: ...
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: IGH_StateTag) -> int: ...
    @overload
    def BinarySearch(self, item: IGH_StateTag, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: IGH_StateTag, comparer: IComparer) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, item: IGH_StateTag) -> bool: ...
    def ConvertAll(self, converter: Converter) -> List: ...
    @overload
    def CopyTo(self, array: Iterable[IGH_StateTag]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[IGH_StateTag], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[IGH_StateTag], arrayIndex: int, count: int) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Exists(self, match: Predicate) -> bool: ...
    def Find(self, match: Predicate) -> IGH_StateTag: ...
    def FindAll(self, match: Predicate) -> List: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def FindLast(self, match: Predicate) -> IGH_StateTag: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def ForEach(self, action: Action) -> None: ...
    @property
    def BoundingBox(self) -> Rectangle: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> IGH_StateTag: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    def GetEnumerator(self) -> Enumerator: ...
    def GetHashCode(self) -> int: ...
    def GetRange(self, index: int, count: int) -> List: ...
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: IGH_StateTag) -> int: ...
    @overload
    def IndexOf(self, item: IGH_StateTag, index: int) -> int: ...
    @overload
    def IndexOf(self, item: IGH_StateTag, index: int, count: int) -> int: ...
    def Insert(self, index: int, item: IGH_StateTag) -> None: ...
    def InsertRange(self, index: int, collection: Iterable[IGH_StateTag]) -> None: ...
    def IsTtipPoint(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    def LastIndexOf(self, item: IGH_StateTag) -> int: ...
    @overload
    def LastIndexOf(self, item: IGH_StateTag, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: IGH_StateTag, index: int, count: int) -> int: ...
    def Layout(self, box: Rectangle, direction: GH_StateTagLayoutDirection) -> None: ...
    def Remove(self, item: IGH_StateTag) -> bool: ...
    def RemoveAll(self, match: Predicate) -> int: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveRange(self, index: int, count: int) -> None: ...
    def RenderStateTags(self, G: Graphics) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: IGH_StateTag) -> None: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    def ToArray(self) -> Iterable[IGH_StateTag]: ...
    def TooltipSetup(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    def ToString(self) -> str: ...
    def TrimExcess(self) -> None: ...
    def TrueForAll(self, match: Predicate) -> bool: ...


class GH_StringMatcher:
    def __init__(self): ...
    @overload
    def ComputeWeight(value: str, key: str, comp: StringComparison) -> int: ...
    @overload
    def ComputeWeight(value: str, key: str, level: GH_MatchLevel, comp: StringComparison) -> int: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def LevenshteinDistance(A: str, B: str) -> int: ...
    def ToString(self) -> str: ...


class GH_StringPattern:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, char_pool: str): ...
    @overload
    def __init__(self, char_pool: str, depth: int): ...
    def Current(self) -> str: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def FormatMask(self) -> str: ...
    @property
    def StackDepth(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Next(self) -> str: ...
    def Reset(self) -> None: ...
    @FormatMask.setter
    def FormatMask(self, Value: str) -> None: ...
    @StackDepth.setter
    def StackDepth(self, Value: int) -> None: ...
    @overload
    def SetCharPool(self, char_pool: str) -> None: ...
    @overload
    def SetCharPool(self, char_pool: Iterable[str]) -> None: ...
    def ToString(self) -> str: ...




class GH_TimeKind(Enum):
    Unset = 0
    Mixed = 1
    PureTime = 2
    PureDate = 3
    DateAndTime = 4


class GH_TypeLib:
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_UndoOperation(Enum):
    ClearUndoStack = 0
    ClearRedoStack = 1
    RecordAdded = 2
    RecordRemoved = 3
    Undo = 4
    Redo = 5


from .Undo import GH_UndoRecord
from .Undo import IGH_UndoAction
class GH_UndoUtil:
    @overload
    def CreateAddObjectEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> GH_UndoRecord: ...
    @overload
    def CreateAddObjectEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    def CreateAddStateEvent(self, name: str, stateIndex: int, state: GH_State) -> GH_UndoRecord: ...
    def CreateEnabledEvent(self, name: str, obj: IGH_ActiveObject) -> GH_UndoRecord: ...
    def CreateGenericObjectEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreateLayoutEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreateLayoutEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> GH_UndoRecord: ...
    def CreateNickNameEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    def CreatePersistentDataEvent(self, name: str, obj: GH_PersistentParam) -> GH_UndoRecord: ...
    @overload
    def CreatePivotEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreatePivotEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> GH_UndoRecord: ...
    def CreatePreviewEvent(self, name: str, obj: IGH_ActiveObject) -> GH_UndoRecord: ...
    @overload
    def CreateRemoveObjectEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> GH_UndoRecord: ...
    @overload
    def CreateRemoveObjectEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    def CreateRemoveStateEvent(self, name: str, stateIndex: int, state: GH_State) -> GH_UndoRecord: ...
    def CreateReplaceStateEvent(self, name: str, stateIndex: int, oldState: GH_State, newState: GH_State) -> GH_UndoRecord: ...
    @overload
    def CreateWireEvent(self, name: str, param: IGH_Param) -> GH_UndoRecord: ...
    @overload
    def CreateWireEvent(self, name: str, params: Iterable[IGH_Param]) -> GH_UndoRecord: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def MergeRecords(self, count: int) -> bool: ...
    @overload
    def RecordAddObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    @overload
    def RecordAddObjectEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> Guid: ...
    def RecordAddStateEvent(self, name: str, stateIndex: int, state: GH_State) -> Guid: ...
    def RecordEnabledEvent(self, name: str, obj: IGH_ActiveObject) -> Guid: ...
    @overload
    def RecordEvent(self, record: GH_UndoRecord) -> Guid: ...
    @overload
    def RecordEvent(self, name: str, actions: Iterable[IGH_UndoAction]) -> Guid: ...
    @overload
    def RecordEvent(self, name: str, action: IGH_UndoAction) -> Guid: ...
    @overload
    def RecordEvent(self, name: str, actions: Iterable[IGH_UndoAction]) -> Guid: ...
    def RecordGenericObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    @overload
    def RecordLayoutEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> Guid: ...
    @overload
    def RecordLayoutEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    def RecordNickNameEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    def RecordPersistentDataEvent(self, name: str, obj: GH_PersistentParam) -> Guid: ...
    @overload
    def RecordPivotEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> Guid: ...
    @overload
    def RecordPivotEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    def RecordPreviewEvent(self, name: str, obj: IGH_ActiveObject) -> Guid: ...
    @overload
    def RecordRemoveObjectEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> Guid: ...
    @overload
    def RecordRemoveObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    def RecordRemoveStateEvent(self, name: str, stateIndex: int, state: GH_State) -> Guid: ...
    def RecordReplaceStateEvent(self, name: str, stateIndex: int, oldState: GH_State, newState: GH_State) -> Guid: ...
    @overload
    def RecordWireEvent(self, name: str, params: Iterable[IGH_Param]) -> Guid: ...
    @overload
    def RecordWireEvent(self, name: str, param: IGH_Param) -> Guid: ...
    def ToString(self) -> str: ...


class GH_UpgradeUtil:
    def __init__(self): ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @overload
    def MigrateInputParameters(source: IGH_Component, target: IGH_Component) -> bool: ...
    @overload
    def MigrateInputParameters(source: IGH_Component, target: IGH_Component, index0: Iterable[int], index1: Iterable[int]) -> bool: ...
    @overload
    def MigrateOutputParameters(source: IGH_Component, target: IGH_Component) -> bool: ...
    @overload
    def MigrateOutputParameters(source: IGH_Component, target: IGH_Component, index0: Iterable[int], index1: Iterable[int]) -> bool: ...
    @overload
    def MigrateRecipients(from_: IGH_Param, to: IGH_Param) -> int: ...
    @overload
    def MigrateRecipients(recipients: Iterable[IGH_Param], target: IGH_Param) -> int: ...
    @overload
    def MigrateSources(from_: IGH_Param, to: IGH_Param) -> int: ...
    @overload
    def MigrateSources(sources: Iterable[IGH_Param], target: IGH_Param) -> int: ...
    def ReplaceInputParameters(source: IGH_Component, target: IGH_Component) -> None: ...
    def ReplaceOutputParameters(source: IGH_Component, target: IGH_Component) -> None: ...
    @overload
    def SwapComponents(oldComponent: IGH_Component, newComponent: IGH_Component) -> bool: ...
    @overload
    def SwapComponents(oldComponent: IGH_Component, newComponentGuid: Guid) -> IGH_Component: ...
    @overload
    def SwapComponents(oldComponent: IGH_Component, newComponent: IGH_Component, migrateParameters: bool) -> bool: ...
    @overload
    def SwapComponents(oldComponent: IGH_Component, newComponentGuid: Guid, migrateParameters: bool) -> IGH_Component: ...
    def ToString(self) -> str: ...


class GH_UserObject:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source_file: str): ...
    def Clear(self) -> None: ...
    def CreateDefaultPath(self, avoid_conflict: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def BaseGuid(self) -> Guid: ...
    @property
    def Data(self) -> Iterable[Byte]: ...
    @property
    def Description(self) -> GH_InstanceDescription: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Guid(self) -> Guid: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Path(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def InstantiateObject(self) -> IGH_DocumentObject: ...
    def ReadFromFile(self) -> None: ...
    def SaveToFile(self) -> bool: ...
    @BaseGuid.setter
    def BaseGuid(self, Value: Guid) -> None: ...
    @Data.setter
    def Data(self, Value: Iterable[Byte]) -> None: ...
    @Description.setter
    def Description(self, Value: GH_InstanceDescription) -> None: ...
    @Exposure.setter
    def Exposure(self, Value: GH_Exposure) -> None: ...
    @Guid.setter
    def Guid(self, Value: Guid) -> None: ...
    @Icon.setter
    def Icon(self, Value: Bitmap) -> None: ...
    @Path.setter
    def Path(self, Value: str) -> None: ...
    def SetDataFromObject(self, obj: IGH_DocumentObject) -> None: ...
    def ToString(self) -> str: ...




class GH_VarParamEventArgs:
    @overload
    def __init__(self, n_param: IGH_Param, n_side: GH_VarParamSide): ...
    @overload
    def __init__(self, n_param: IGH_Param, n_side: GH_VarParamSide, n_index: int): ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def Param(self) -> IGH_Param: ...
    @property
    def Side(self) -> GH_VarParamSide: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_VarParamSide(Enum):
    Input = 0
    Output = 1


class GH_WireTopology:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source_id: Guid, target_id: Guid): ...
    @overload
    def __init__(self, source: IGH_Param, target: IGH_Param): ...
    @overload
    def __init__(self, target: IGH_Param, index: int): ...
    @overload
    def __init__(self, source_id: Guid, target_id: Guid, source_index: int): ...
    def DestroyConnection(self, doc: GH_Document) -> None: ...
    def EnsureConnection(self, doc: GH_Document) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def SourceIndex(self) -> int: ...
    @property
    def SourceParameterID(self) -> Guid: ...
    @property
    def TargetParameterID(self) -> Guid: ...
    @property
    def ValidIndex(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_WireTopologyDiagram:
    def __init__(self): ...
    @overload
    def Add(self, item: GH_WireTopology) -> None: ...
    @overload
    def Add(self, wire: GH_WireTopology, filter_duplicates: bool) -> None: ...
    def AddRange(self, collection: Iterable[GH_WireTopology]) -> None: ...
    @overload
    def AppendDiagram(self, doc: GH_Document) -> None: ...
    @overload
    def AppendDiagram(self, objs: Iterable[IGH_DocumentObject]) -> None: ...
    @overload
    def AppendDiagram(self, obj: IGH_DocumentObject) -> None: ...
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: GH_WireTopology) -> int: ...
    @overload
    def BinarySearch(self, item: GH_WireTopology, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: GH_WireTopology, comparer: IComparer) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, item: GH_WireTopology) -> bool: ...
    def ConvertAll(self, converter: Converter) -> List: ...
    @overload
    def CopyTo(self, array: Iterable[GH_WireTopology]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[GH_WireTopology], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[GH_WireTopology], arrayIndex: int, count: int) -> None: ...
    def DestroyConnections(self, doc: GH_Document, throw_exceptions: bool) -> None: ...
    def EnsureConnections(self, doc: GH_Document, throw_exceptions: bool) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Exists(self, match: Predicate) -> bool: ...
    def Find(self, match: Predicate) -> GH_WireTopology: ...
    def FindAll(self, match: Predicate) -> List: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def FindLast(self, match: Predicate) -> GH_WireTopology: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, index: int) -> GH_WireTopology: ...
    def GetEnumerator(self) -> Enumerator: ...
    def GetHashCode(self) -> int: ...
    def GetRange(self, index: int, count: int) -> List: ...
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: GH_WireTopology) -> int: ...
    @overload
    def IndexOf(self, item: GH_WireTopology, index: int) -> int: ...
    @overload
    def IndexOf(self, item: GH_WireTopology, index: int, count: int) -> int: ...
    def Insert(self, index: int, item: GH_WireTopology) -> None: ...
    def InsertRange(self, index: int, collection: Iterable[GH_WireTopology]) -> None: ...
    @overload
    def LastIndexOf(self, item: GH_WireTopology) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_WireTopology, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_WireTopology, index: int, count: int) -> int: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def Remove(self, item: GH_WireTopology) -> bool: ...
    def RemoveAll(self, match: Predicate) -> int: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: GH_WireTopology) -> None: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    def ToArray(self) -> Iterable[GH_WireTopology]: ...
    def ToString(self) -> str: ...
    def TrimExcess(self) -> None: ...
    def TrueForAll(self, match: Predicate) -> bool: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


from ..GUI import GH_TooltipDisplayEventArgs
class GH_ZuiAction:
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def IsTooltipRegion(self, canvasPoint: PointF) -> bool: ...
    def Perform(self) -> None: ...
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    def ToString(self) -> str: ...


class GHAFileLoadedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_GHALoadingEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_GHALoadingEventArgs) -> None: ...
    def ToString(self) -> str: ...


class IGH_ActiveObject:
    def AddRuntimeMessage(self, Type: GH_RuntimeMessageLevel, Message: str) -> None: ...
    def ClearData(self) -> None: ...
    def ClearRuntimeMessages(self) -> None: ...
    def CollectData(self) -> None: ...
    def ComputeData(self) -> None: ...
    def DependsOn(self, PotentialSource: IGH_ActiveObject) -> bool: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def MutableNickName(self) -> bool: ...
    @property
    def Phase(self) -> GH_SolutionPhase: ...
    @property
    def ProcessorTime(self) -> TimeSpan: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    def RegisterRemoteIDs(self, id_list: GH_GuidTable) -> None: ...
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Iterable[str]: ...
    def SDKCompliancy(self, exeVersion: int, exeServiceRelease: int) -> bool: ...
    @Locked.setter
    def Locked(self, Value: bool) -> None: ...
    @MutableNickName.setter
    def MutableNickName(self, Value: bool) -> None: ...
    @Phase.setter
    def Phase(self, Value: GH_SolutionPhase) -> None: ...


from ..GUI.Canvas import GH_Canvas
from ..GUI.Canvas import GH_CanvasChannel
from ..GUI import GH_CanvasMouseEvent
class IGH_Attributes:
    def AppendToAttributeTree(self, attributes: List) -> None: ...
    def ExpireLayout(self) -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> PointF: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> PointF: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Selected(self) -> bool: ...
    def InvalidateCanvas(self, canvas: GH_Canvas, e: GH_CanvasMouseEvent) -> bool: ...
    def IsMenuRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: RectangleF, method: GH_PickBox) -> bool: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, newID: Guid) -> None: ...
    def PerformLayout(self) -> None: ...
    def RenderToCanvas(self, canvas: GH_Canvas, channel: GH_CanvasChannel) -> None: ...
    @Bounds.setter
    def Bounds(self, Value: RectangleF) -> None: ...
    @Parent.setter
    def Parent(self, Value: IGH_Attributes) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...


class IGH_Author:
    @property
    def Address(self) -> str: ...
    @property
    def Company(self) -> str: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Email(self) -> str: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def Website(self) -> str: ...


class IGH_BakeAwareData:
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes) -> Tuple[bool, Guid]: ...


class IGH_BakeAwareObject:
    @overload
    def BakeGeometry(self, doc: RhinoDoc, obj_ids: List) -> None: ...
    @overload
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_ids: List) -> None: ...
    @property
    def IsBakeCapable(self) -> bool: ...


class IGH_Component:
    @property
    def DataComparison(self) -> GH_DataComparison: ...
    @property
    def InConstructor(self) -> bool: ...
    @property
    def IsValidMasterParameterIndex(self) -> bool: ...
    @property
    def MasterParameterIndex(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def Params(self) -> GH_ComponentParamServer: ...
    @property
    def RunCount(self) -> int: ...
    @DataComparison.setter
    def DataComparison(self, Value: GH_DataComparison) -> None: ...
    @MasterParameterIndex.setter
    def MasterParameterIndex(self, Value: int) -> None: ...
    @Message.setter
    def Message(self, Value: str) -> None: ...


class IGH_ContextualParameter:
    def AssignContextualData(self, data: IEnumerable) -> None: ...
    def AutoAssignContextualData(self, context: GH_ParameterContext) -> bool: ...
    @property
    def AtLeast(self) -> int: ...
    @property
    def AtMost(self) -> int: ...
    @property
    def ContextualData(self) -> Iterable[Object]: ...
    @property
    def Immediate(self) -> bool: ...
    @property
    def Prompt(self) -> str: ...


from .Data import IGH_DataTree
from .Data import IGH_Structure
from .Data import GH_Structure
class IGH_DataAccess:
    def AbortComponentSolution(self) -> None: ...
    def BlitData(self, paramIndex: int, tree: GH_Structure, overwrite: bool) -> bool: ...
    @overload
    def DisableGapLogic(self) -> None: ...
    @overload
    def DisableGapLogic(self, paramIndex: int) -> None: ...
    @property
    def Iteration(self) -> int: ...
    @overload
    def GetData(self, name: str, destination: T) -> Tuple[bool, T]: ...
    @overload
    def GetData(self, index: int, destination: T) -> Tuple[bool, T]: ...
    @overload
    def GetDataList(self, name: str, list: List) -> bool: ...
    @overload
    def GetDataList(self, index: int, list: List) -> bool: ...
    @overload
    def GetDataTree(self, index: int) -> Tuple[bool, GH_Structure]: ...
    @overload
    def GetDataTree(self, name: str) -> Tuple[bool, GH_Structure]: ...
    def IncrementIteration(self) -> None: ...
    def ParameterTargetIndex(self, paramIndex: int) -> int: ...
    def ParameterTargetPath(self, paramIndex: int) -> GH_Path: ...
    @overload
    def SetData(self, paramIndex: int, data: Object) -> bool: ...
    @overload
    def SetData(self, paramName: str, data: Object) -> bool: ...
    @overload
    def SetData(self, paramIndex: int, data: Object, itemIndexOverride: int) -> bool: ...
    @overload
    def SetDataList(self, paramIndex: int, data: IEnumerable) -> bool: ...
    @overload
    def SetDataList(self, paramName: str, data: IEnumerable) -> bool: ...
    @overload
    def SetDataList(self, paramIndex: int, data: IEnumerable, listIndexOverride: int) -> bool: ...
    @overload
    def SetDataTree(self, paramIndex: int, tree: IGH_DataTree) -> bool: ...
    @overload
    def SetDataTree(self, paramIndex: int, tree: IGH_Structure) -> bool: ...
    def Util_CountNonNullRefs(self, L: List) -> int: ...
    def Util_CountNullRefs(self, L: List) -> int: ...
    def Util_EnsureNonNullCount(self, L: List, N: int) -> bool: ...
    def Util_FirstNonNullItem(self, L: List) -> int: ...
    def Util_RemoveNullRefs(self, L: List) -> List: ...


class IGH_DebugDescription:
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...


from .Undo import IGH_UndoAction
from .Undo import GH_UndoRecord
class IGH_DocumentObject:
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def add_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    def add_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    def add_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    def add_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    def add_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    def AddedToDocument(self, document: GH_Document) -> None: ...
    def AppendMenuItems(self, menu: ToolStripDropDown) -> bool: ...
    def CreateAttributes(self) -> None: ...
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    def ExpirePreview(self, redraw: bool) -> None: ...
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def ComponentGuid(self) -> Guid: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Bitmap: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def Obsolete(self) -> bool: ...
    def IsolateObject(self) -> None: ...
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    def OnAttributesChanged(self) -> None: ...
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: Object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: Object) -> None: ...
    def OnPingDocument(self) -> GH_Document: ...
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    @overload
    def RecordUndoEvent(self, record: GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> Guid: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: IGH_UndoAction) -> Guid: ...
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    def remove_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    def remove_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    def remove_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    def remove_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    def remove_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @Attributes.setter
    def Attributes(self, Value: IGH_Attributes) -> None: ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, Value: GH_IconDisplayMode) -> None: ...
    @overload
    def TriggerAutoSave(self) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, id: Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> None: ...


class IGH_DocumentOwner:
    def DocumentClosed(self, document: GH_Document) -> None: ...
    def DocumentModified(self, document: GH_Document) -> None: ...
    def OwnerDocument(self) -> GH_Document: ...


class IGH_EventConsumer:
    def IsRelevantEvent(self, obj: RhinoObject) -> bool: ...
    def PartialExpiration(self, server: GH_CustomEventServer) -> None: ...
    def TotalExpiration(self, server: GH_CustomEventServer) -> None: ...


class IGH_InitCodeAware:
    def SetInitCode(self, code: str) -> None: ...


class IGH_InstanceDescription:
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...


class IGH_InstanceGuidDependent:
    def InstanceGuidsChanged(self, map: SortedDictionary) -> None: ...


class IGH_ObjectProxy:
    def CreateInstance(self) -> IGH_DocumentObject: ...
    def DuplicateProxy(self) -> IGH_ObjectProxy: ...
    @property
    def Desc(self) -> IGH_InstanceDescription: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Guid(self) -> Guid: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Kind(self) -> GH_ObjectType: ...
    @property
    def LibraryGuid(self) -> Guid: ...
    @property
    def Location(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def SDKCompliant(self) -> bool: ...
    @property
    def Type(self) -> Type: ...
    @Exposure.setter
    def Exposure(self, Value: GH_Exposure) -> None: ...


from .Data import GH_Path
from .Data import IGH_Structure
class IGH_Param:
    @overload
    def AddSource(self, source: IGH_Param) -> None: ...
    @overload
    def AddSource(self, source: IGH_Param, index: int) -> None: ...
    def AddVolatileData(self, path: GH_Path, index: int, data: Object) -> bool: ...
    def AddVolatileDataList(self, path: GH_Path, list: IEnumerable) -> bool: ...
    def AddVolatileDataTree(self, tree: IGH_Structure) -> bool: ...
    def ClearProxySources(self) -> None: ...
    def CreateProxySources(self) -> None: ...
    @property
    def Access(self) -> GH_ParamAccess: ...
    @property
    def DataMapping(self) -> GH_DataMapping: ...
    @property
    def DataType(self) -> GH_ParamData: ...
    @property
    def HasProxySources(self) -> bool: ...
    @property
    def Kind(self) -> GH_ParamKind: ...
    @property
    def Optional(self) -> bool: ...
    @property
    def ProxySourceCount(self) -> int: ...
    @property
    def Recipients(self) -> Iterable[IGH_Param]: ...
    @property
    def Reverse(self) -> bool: ...
    @property
    def Simplify(self) -> bool: ...
    @property
    def SourceCount(self) -> int: ...
    @property
    def Sources(self) -> Iterable[IGH_Param]: ...
    @property
    def StateTags(self) -> GH_StateTagList: ...
    @property
    def Type(self) -> Type: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def VolatileData(self) -> IGH_Structure: ...
    @property
    def VolatileDataCount(self) -> int: ...
    @property
    def WireDisplay(self) -> GH_ParamWireDisplay: ...
    def RelinkProxySources(self, document: GH_Document) -> bool: ...
    def RemoveAllSources(self) -> None: ...
    def RemoveEffects(self) -> None: ...
    @overload
    def RemoveSource(self, source: IGH_Param) -> None: ...
    @overload
    def RemoveSource(self, source_id: Guid) -> None: ...
    @overload
    def ReplaceSource(self, old_source: IGH_Param, new_source: IGH_Param) -> None: ...
    @overload
    def ReplaceSource(self, old_source_id: Guid, new_source: IGH_Param) -> None: ...
    @Access.setter
    def Access(self, Value: GH_ParamAccess) -> None: ...
    @DataMapping.setter
    def DataMapping(self, Value: GH_DataMapping) -> None: ...
    @Optional.setter
    def Optional(self, Value: bool) -> None: ...
    @Reverse.setter
    def Reverse(self, Value: bool) -> None: ...
    @Simplify.setter
    def Simplify(self, Value: bool) -> None: ...
    @WireDisplay.setter
    def WireDisplay(self, Value: GH_ParamWireDisplay) -> None: ...


class IGH_ParamNameConstructor:
    def Current(self) -> str: ...
    def Next(self) -> str: ...
    def Reset(self) -> None: ...


class IGH_ParamWithPostProcess:
    def PostProcessData(self) -> None: ...


class IGH_PreviewArgs:
    @property
    def DefaultCurveThickness(self) -> int: ...
    @property
    def Display(self) -> DisplayPipeline: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @property
    def ShadeMaterial(self) -> DisplayMaterial: ...
    @property
    def ShadeMaterial_Selected(self) -> DisplayMaterial: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def WireColour(self) -> Color: ...
    @property
    def WireColour_Selected(self) -> Color: ...


class IGH_PreviewData:
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...


class IGH_PreviewMeshData:
    def DestroyPreviewMeshes(self) -> None: ...
    def GetPreviewMeshes(self) -> Iterable[Mesh]: ...


class IGH_PreviewObject:
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    @Hidden.setter
    def Hidden(self, Value: bool) -> None: ...


class IGH_ProxyParameter:
    @property
    def ProxyGuid(self) -> Guid: ...


class IGH_RenderAwareData:
    def AppendRenderGeometry(self, args: GH_RenderArgs, material: RenderMaterial) -> None: ...


class IGH_ScriptInstance:
    def AfterRunScript(self) -> None: ...
    def BeforeRunScript(self) -> None: ...
    def InvokeRunScript(self, owner: IGH_Component, rhinoDocument: Object, iteration: int, inputs: List, DA: IGH_DataAccess) -> None: ...


class IGH_StateAwareObject:
    def LoadState(self, state: str) -> None: ...
    def SaveState(self) -> str: ...


class IGH_StateTag:
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Stage(self) -> Rectangle: ...
    @property
    def StateDescription(self) -> str: ...
    def Render(self, graphics: Graphics) -> None: ...
    @Stage.setter
    def Stage(self, Value: Rectangle) -> None: ...
    @StateDescription.setter
    def StateDescription(self, Value: str) -> None: ...


class IGH_SyncObject:
    pass


class IGH_TaskCapableComponent:
    @property
    def InPreSolve(self) -> bool: ...
    @property
    def UseTasks(self) -> bool: ...
    def RequestTaskCancellation(self) -> None: ...
    @InPreSolve.setter
    def InPreSolve(self, Value: bool) -> None: ...
    @UseTasks.setter
    def UseTasks(self, Value: bool) -> None: ...


class IGH_UpgradeObject:
    @property
    def UpgradeFrom(self) -> Guid: ...
    @property
    def UpgradeTo(self) -> Guid: ...
    @property
    def Version(self) -> DateTime: ...
    def Upgrade(self, target: IGH_DocumentObject, document: GH_Document) -> IGH_DocumentObject: ...


class IGH_UserPromptAware:
    def PromptMenuMultipleItems(self) -> ToolStripMenuItem: ...
    def PromptMenuSingleItem(self) -> ToolStripMenuItem: ...
    def PromptMultipleItems(self) -> IGH_Structure: ...
    def PromptSingleItem(self) -> IGH_Goo: ...


class IGH_ValueProxy:
    def Duplicate(self) -> IGH_ValueProxy: ...
    def FromString(self, in_: str) -> bool: ...
    @property
    def IsParsable(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ProxyName(self) -> str: ...
    @property
    def ProxyType(self) -> Type: ...
    @property
    def ProxyValue(self) -> Object: ...
    @property
    def UserString(self) -> str: ...
    def MutateString(self, in_: str) -> str: ...
    @UserString.setter
    def UserString(self, Value: str) -> None: ...
    def ToString(self) -> str: ...


class IGH_VariableParameterComponent:
    def CanInsertParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    def CanRemoveParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    def CreateParameter(self, side: GH_ParameterSide, index: int) -> IGH_Param: ...
    def DestroyParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    def VariableParameterMaintenance(self) -> None: ...


from ..GUI import GH_VariableParameterManager
class IGH_VarParamComponent:
    def ConstructVariable(self, e: GH_VarParamEventArgs) -> IGH_Param: ...
    @property
    def IsInputVariable(self) -> bool: ...
    @property
    def IsOutputVariable(self) -> bool: ...
    def IsVariableParam(self, e: GH_VarParamEventArgs) -> bool: ...
    def ManagerConstructed(self, side: GH_VarParamSide, manager: GH_VariableParameterManager) -> None: ...
    def ParametersModified(self, side: GH_VarParamSide) -> None: ...


class IGH_ZuiAction:
    @property
    def Name(self) -> str: ...
    def Perform(self) -> None: ...


class IRcpAwareObject:
    def PublishRcpItem(self) -> IRcpItem: ...


class ModifiedChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DocModifiedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_DocModifiedEventArgs) -> None: ...
    def ToString(self) -> str: ...


from ..GUI import GH_TooltipDisplayEventArgs
from ..GUI.Canvas import GH_Canvas
from ..GUI.Canvas import GH_CanvasChannel
from ..GUI import GH_CanvasMouseEvent
class NullParamAttributes:
    def __init__(self, param: IGH_Param): ...
    def AppendToAttributeTree(self, attributes: List) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def ExpireLayout(self) -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> PointF: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> PointF: ...
    @property
    def Owner(self) -> IGH_Param: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def InvalidateCanvas(self, canvas: GH_Canvas, e: GH_CanvasMouseEvent) -> bool: ...
    def IsMenuRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: RectangleF, method: GH_PickBox) -> bool: ...
    def IsTooltipRegion(self, point: PointF) -> bool: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, newId: Guid) -> None: ...
    def PerformLayout(self) -> None: ...
    def Read(self, reader: GH_IReader) -> bool: ...
    def RenderToCanvas(self, canvas: GH_Canvas, channel: GH_CanvasChannel) -> None: ...
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Bounds.setter
    def Bounds(self, Value: RectangleF) -> None: ...
    @Parent.setter
    def Parent(self, Value: IGH_Attributes) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    def SetupTooltip(self, point: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    def ToString(self) -> str: ...
    def Write(self, writer: GH_IWriter) -> bool: ...


class ObjectChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_ObjectChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: IGH_DocumentObject, e: GH_ObjectChangedEventArgs) -> None: ...
    def ToString(self) -> str: ...


class ObjectsAddedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_DocObjectEventArgs) -> None: ...
    def ToString(self) -> str: ...


class ObjectsDeletedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_DocObjectEventArgs) -> None: ...
    def ToString(self) -> str: ...


class ParameterChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_ParamServerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_ParamServerEventArgs) -> None: ...
    def ToString(self) -> str: ...


class ParameterNickNameChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_ParamServerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_ParamServerEventArgs) -> None: ...
    def ToString(self) -> str: ...


class ParameterSourcesChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_ParamServerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_ParamServerEventArgs) -> None: ...
    def ToString(self) -> str: ...


class PingDocumentEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_PingDocumentEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: IGH_DocumentObject, e: GH_PingDocumentEventArgs) -> None: ...
    def ToString(self) -> str: ...


class PreviewExpiredEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_PreviewExpiredEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: IGH_DocumentObject, e: GH_PreviewExpiredEventArgs) -> None: ...
    def ToString(self) -> str: ...


class SaveOnDataFlatteningChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class SaveOnDocumentUnloadChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class SaveOnObjectAddedChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class SaveOnObjectChangeChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class SaveOnObjectRemovedChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class SaveOnWireEventChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class ScriptFamilyChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class SettingsChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DocSettingsEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_DocSettingsEventArgs) -> None: ...
    def ToString(self) -> str: ...


class SolutionEndEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_SolutionEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_SolutionEventArgs) -> None: ...
    def ToString(self) -> str: ...


class SolutionExpiredEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_SolutionExpiredEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: IGH_DocumentObject, e: GH_SolutionExpiredEventArgs) -> None: ...
    def ToString(self) -> str: ...


class SolutionStartEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_SolutionEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_SolutionEventArgs) -> None: ...
    def ToString(self) -> str: ...


class StandardFamilyChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self) -> None: ...
    def ToString(self) -> str: ...


class UndoStateChangedEventHandler:
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    def BeginInvoke(self, sender: Object, e: GH_DocUndoEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, sender: Object, e: GH_DocUndoEventArgs) -> None: ...
    def ToString(self) -> str: ...
