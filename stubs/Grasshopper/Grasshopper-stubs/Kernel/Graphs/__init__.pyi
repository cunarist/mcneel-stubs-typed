from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class GH_AbstractGraph:
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_BezierGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_ConicGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_DoubleSineGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GaussianGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from ...GUI.Canvas import GH_Canvas
from ...GUI import GH_CanvasMouseEvent
from ...GUI.Canvas import GH_ObjectResponse
class GH_GraphContainer:
    @overload
    def __init__(self, n_graph: IGH_Graph): ...
    @overload
    def __init__(self, n_graph: IGH_Graph, n_x0: float, n_x1: float, n_y0: float, n_y1: float): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Duplicate(self) -> GH_GraphContainer: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FromX(self, t: float) -> float: ...
    @overload
    def FromY(self, t: float) -> float: ...
    @overload
    @property
    def DisplayScale(self) -> Single: ...
    @overload
    @property
    def Graph(self) -> IGH_Graph: ...
    @overload
    @property
    def LockGrips(self) -> bool: ...
    @overload
    @property
    def Region(self) -> RectangleF: ...
    @overload
    @property
    def X0(self) -> float: ...
    @overload
    @property
    def X1(self) -> float: ...
    @overload
    @property
    def Y0(self) -> float: ...
    @overload
    @property
    def Y1(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def RemapPointsToGraphRegion(self, pts: Iterable[PointF]) -> None: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def Render_GraphBackground(G: Graphics, region: RectangleF, bActive: bool) -> None: ...
    @overload
    @staticmethod
    def Render_GraphGrid(G: Graphics, region: RectangleF) -> None: ...
    @overload
    def Render_GraphPen(self) -> Pen: ...
    @overload
    @staticmethod
    def Render_GuidePen() -> Pen: ...
    @overload
    @staticmethod
    def Render_HorizontalConstraint(g: Graphics, rec: RectangleF, t: float) -> None: ...
    @overload
    def Render(self, G: Graphics, bIncludeDomainTags: bool, samples: List) -> None: ...
    @overload
    @staticmethod
    def Render_VerticalConstraint(g: Graphics, rec: RectangleF, t: float) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    @DisplayScale.setter
    def DisplayScale(self, AutoPropertyValue: Single) -> None: ...
    @overload
    @Graph.setter
    def Graph(self, Value: IGH_Graph) -> None: ...
    @overload
    @LockGrips.setter
    def LockGrips(self, Value: bool) -> None: ...
    @overload
    @Region.setter
    def Region(self, Value: RectangleF) -> None: ...
    @overload
    @X0.setter
    def X0(self, Value: float) -> None: ...
    @overload
    @X1.setter
    def X1(self, Value: float) -> None: ...
    @overload
    @Y0.setter
    def Y0(self, Value: float) -> None: ...
    @overload
    @Y1.setter
    def Y1(self, Value: float) -> None: ...
    @overload
    def ToRegionBox(self, pt: PointF) -> PointF: ...
    @overload
    def ToRegionBox_x(self, x: float) -> Single: ...
    @overload
    def ToRegionBox_y(self, y: float) -> Single: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToUnitBox(self, pt: PointF) -> PointF: ...
    @overload
    def ToX(self, t_unit: float) -> float: ...
    @overload
    def ToY(self, t_unit: float) -> float: ...
    @overload
    def TryValueAt(self, t: float) -> float: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GraphDrawInstruction(Enum):
    none = 0
    skip = 1


class GH_GraphGrip:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nOther: GH_GraphGrip): ...
    @overload
    def __init__(self, nX: float, nY: float): ...
    @overload
    def __init__(self, nX: float, nY: float, nConstraint: GH_GripConstraint): ...
    @overload
    def add_GripChanged(self, obj: GripChangedEventHandler) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Constraint(self) -> GH_GripConstraint: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def Point(self) -> PointF: ...
    @overload
    @property
    def X(self) -> float: ...
    @overload
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def LimitToUnitDomain(self, bLimitX: bool, bLimitY: bool) -> None: ...
    @overload
    def OnGripChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def __eq__(A: GH_GraphGrip, B: GH_GraphGrip) -> bool: ...
    @overload
    def __ne__(A: GH_GraphGrip, B: GH_GraphGrip) -> bool: ...
    @overload
    def remove_GripChanged(self, obj: GripChangedEventHandler) -> None: ...
    @overload
    @Constraint.setter
    def Constraint(self, Value: GH_GripConstraint) -> None: ...
    @overload
    @X.setter
    def X(self, Value: float) -> None: ...
    @overload
    @Y.setter
    def Y(self, Value: float) -> None: ...
    @overload
    def SetIndex(self, nIndex: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_GraphProxyObject:
    @overload
    def __init__(self, n_owner: IGH_Graph): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...




class GH_GripConstraint(Enum):
    none = 0
    horizontal = 1
    vertical = 2


class GH_LinearGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def SetFromParameters(self, nA: float, nB: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_LinearGraphProxy:
    @overload
    def __init__(self, n_owner: GH_LinearGraph): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def Intercept(self) -> float: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Slope(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Intercept.setter
    def Intercept(self, Value: float) -> None: ...
    @overload
    @Slope.setter
    def Slope(self, Value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ParabolaGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PerlinGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PowerGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SincGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SineEquation:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def SetEquationFromGrips(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SineGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SquareRootGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GraphChangedEventHandler:
    @overload
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_Graph, bIntermediate: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> Object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invoke(self, sender: IGH_Graph, bIntermediate: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GraphChangedEventHandler:
    @overload
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_GraphContainer, bIntermediate: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> Object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invoke(self, sender: GH_GraphContainer, bIntermediate: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GripChangedEventHandler:
    @overload
    def __init__(self, TargetObject: Object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_GraphGrip, bIntermediate: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: Object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> Object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Method(self) -> MethodInfo: ...
    @overload
    @property
    def Target(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invoke(self, sender: GH_GraphGrip, bIntermediate: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class IGH_Graph:
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @overload
    @property
    def Description(self) -> str: ...
    @overload
    @property
    def GraphTypeID(self) -> Guid: ...
    @overload
    @property
    def Grips(self) -> List: ...
    @overload
    @property
    def Icon_16x16(self) -> Image: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ValueAt(self, t: float) -> float: ...


class IGH_GraphProxyObject:
    pass
