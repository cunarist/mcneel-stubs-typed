from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from GH_IO.Serialization import GH_IReader
from GH_IO.Serialization import GH_IWriter
from Grasshopper.GUI import GH_CanvasMouseEvent
from Grasshopper.GUI.Canvas import GH_Canvas
from Grasshopper.GUI.Canvas import GH_ObjectResponse
from System import AsyncCallback
from System import Guid
from System import IAsyncResult
from System import IFormatProvider
from System import IntPtr
from System import TypeCode
from System.Drawing import Graphics
from System.Drawing import Image
from System.Drawing import Pen
from System.Drawing import PointF
from System.Drawing import RectangleF
from System.Reflection import MethodInfo
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Windows.Forms import KeyEventArgs




class GH_AbstractGraph:
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_BezierGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_ConicGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_DoubleSineGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GaussianGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GraphContainer:
    @overload
    def __init__(self, n_graph: IGH_Graph): ...
    @overload
    def __init__(self, n_graph: IGH_Graph, n_x0: float, n_x1: float, n_y0: float, n_y1: float): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Duplicate(self) -> GH_GraphContainer: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FromX(self, t: float) -> float: ...
    @overload
    def FromY(self, t: float) -> float: ...
    @property
    def DisplayScale(self) -> float: ...
    @property
    def Graph(self) -> IGH_Graph: ...
    @property
    def LockGrips(self) -> bool: ...
    @property
    def Region(self) -> RectangleF: ...
    @property
    def X0(self) -> float: ...
    @property
    def X1(self) -> float: ...
    @property
    def Y0(self) -> float: ...
    @property
    def Y1(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def RemapPointsToGraphRegion(self, pts: Iterable[PointF]) -> None: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def Render_GraphBackground(G: Graphics, region: RectangleF, bActive: bool) -> None: ...
    @overload
    @staticmethod
    def Render_GraphGrid(G: Graphics, region: RectangleF) -> None: ...
    @overload
    def Render_GraphPen(self) -> Pen: ...
    @overload
    @staticmethod
    def Render_GuidePen() -> Pen: ...
    @overload
    @staticmethod
    def Render_HorizontalConstraint(g: Graphics, rec: RectangleF, t: float) -> None: ...
    @overload
    def Render(self, G: Graphics, bIncludeDomainTags: bool, samples: MutableSequence[float]) -> None: ...
    @overload
    @staticmethod
    def Render_VerticalConstraint(g: Graphics, rec: RectangleF, t: float) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @DisplayScale.setter
    def DisplayScale(self, AutoPropertyValue: float) -> None: ...
    @Graph.setter
    def Graph(self, Value: IGH_Graph) -> None: ...
    @LockGrips.setter
    def LockGrips(self, Value: bool) -> None: ...
    @Region.setter
    def Region(self, Value: RectangleF) -> None: ...
    @X0.setter
    def X0(self, Value: float) -> None: ...
    @X1.setter
    def X1(self, Value: float) -> None: ...
    @Y0.setter
    def Y0(self, Value: float) -> None: ...
    @Y1.setter
    def Y1(self, Value: float) -> None: ...
    @overload
    def ToRegionBox(self, pt: PointF) -> PointF: ...
    @overload
    def ToRegionBox_x(self, x: float) -> float: ...
    @overload
    def ToRegionBox_y(self, y: float) -> float: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToUnitBox(self, pt: PointF) -> PointF: ...
    @overload
    def ToX(self, t_unit: float) -> float: ...
    @overload
    def ToY(self, t_unit: float) -> float: ...
    @overload
    def TryValueAt(self, t: float) -> float: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GraphDrawInstruction(Enum):
    none = 0
    skip = 1


class GH_GraphGrip:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nOther: GH_GraphGrip): ...
    @overload
    def __init__(self, nX: float, nY: float): ...
    @overload
    def __init__(self, nX: float, nY: float, nConstraint: GH_GripConstraint): ...
    @overload
    def add_GripChanged(self, obj: GripChangedEventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Constraint(self) -> GH_GripConstraint: ...
    @property
    def Index(self) -> int: ...
    @property
    def Point(self) -> PointF: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def LimitToUnitDomain(self, bLimitX: bool, bLimitY: bool) -> None: ...
    @overload
    def OnGripChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def __eq__(A: GH_GraphGrip, B: GH_GraphGrip) -> bool: ...
    @overload
    def __ne__(A: GH_GraphGrip, B: GH_GraphGrip) -> bool: ...
    @overload
    def remove_GripChanged(self, obj: GripChangedEventHandler) -> None: ...
    @Constraint.setter
    def Constraint(self, Value: GH_GripConstraint) -> None: ...
    @X.setter
    def X(self, Value: float) -> None: ...
    @Y.setter
    def Y(self, Value: float) -> None: ...
    @overload
    def SetIndex(self, nIndex: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_GraphProxyObject:
    @overload
    def __init__(self, n_owner: IGH_Graph): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...




class GH_GripConstraint(Enum):
    none = 0
    horizontal = 1
    vertical = 2


class GH_LinearGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def SetFromParameters(self, nA: float, nB: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_LinearGraphProxy:
    @overload
    def __init__(self, n_owner: GH_LinearGraph): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Intercept(self) -> float: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Slope(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Intercept.setter
    def Intercept(self, Value: float) -> None: ...
    @Slope.setter
    def Slope(self, Value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ParabolaGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PerlinGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PowerGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SincGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SineEquation:
    @overload
    def __init__(self): ...
    amplitude: float
    frequency: float
    offset: float
    shift: float
    X0: float
    Y0: float
    X1: float
    Y1: float
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def SetEquationFromGrips(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SineGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_SquareRootGraph(GH_AbstractGraph):
    @overload
    def __init__(self): ...
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ValueAt(self, t: float) -> float: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GraphChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_Graph, bIntermediate: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: IGH_Graph, bIntermediate: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GraphChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_GraphContainer, bIntermediate: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_GraphContainer, bIntermediate: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GripChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_GraphGrip, bIntermediate: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_GraphGrip, bIntermediate: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class IGH_Graph:
    @overload
    def add_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ClearCaches(self) -> None: ...
    @overload
    def Draw_PostRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PostRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> None: ...
    @overload
    def Draw_PostRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> None: ...
    @overload
    def Draw_PreRenderGraph(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrid(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderGrip(self, g: Graphics, cnt: GH_GraphContainer, index: int) -> GH_GraphDrawInstruction: ...
    @overload
    def Draw_PreRenderTags(self, g: Graphics, cnt: GH_GraphContainer) -> GH_GraphDrawInstruction: ...
    @overload
    def Duplicate(self) -> IGH_Graph: ...
    @overload
    def EmitProxyObject(self) -> IGH_GraphProxyObject: ...
    @overload
    def GDI_GraphPath(self, reg: RectangleF) -> Iterable[PointF]: ...
    @property
    def Description(self) -> str: ...
    @property
    def GraphTypeID(self) -> Guid: ...
    @property
    def Grips(self) -> MutableSequence[GH_GraphGrip]: ...
    @property
    def Icon_16x16(self) -> Image: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @overload
    def OnGraphChanged(self, bIntermediate: bool) -> None: ...
    @overload
    def PrepareForUse(self) -> None: ...
    @overload
    def remove_GraphChanged(self, obj: GraphChangedEventHandler) -> None: ...
    @overload
    def ValueAt(self, t: float) -> float: ...


class IGH_GraphProxyObject:
    pass
