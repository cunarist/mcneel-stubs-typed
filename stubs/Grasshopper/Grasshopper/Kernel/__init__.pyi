from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Attributes
import Components
import Data
import Expressions
import GDL
import Geometry
import Graphs
import Parameters
import Sorting
import Special
import Types
import Undo
import Utility

__all__ = ['Attributes', 'Components', 'Data', 'Expressions', 'GDL', 'Geometry', 'Graphs', 'Parameters', 'Sorting', 'Special', 'Types', 'Undo', 'Utility']


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class AttributesChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_AttributesChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_AttributesChangedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class AutoSaveFileFormatChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from .Base import GH_ColourPickerEventArgs
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ColourEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_ColourPicker, e: GH_ColourPickerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_ColourPicker, e: GH_ColourPickerEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ConsoleFamilyChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ContextChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocContextEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocContextEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class DefaultPreviewColourChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, colour: Color, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, colour: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class DefaultSelectedPreviewColourChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, colour: Color, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, colour: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class DisplayExpiredEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_DisplayExpiredEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_DisplayExpiredEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class DocumentAddedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_DocumentServer, doc: GH_Document, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_DocumentServer, doc: GH_Document) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class DocumentRemovedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_DocumentServer, doc: GH_Document, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_DocumentServer, doc: GH_Document) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class EnableAutoSaveChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class EnabledChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocEnabledEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocEnabledEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class EnableSolutionsChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, state: bool, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, state: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class FileChanged:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_FileWatcher, filename: str, change: WatcherChangeTypes, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_FileWatcher, filename: str, change: WatcherChangeTypes) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class FileChangedSimple:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, filename: str, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, filename: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class FileEvent:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, path: str, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, path: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class FilePathChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocFilePathEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocFilePathEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from .Generic import IList
from System import TimeSpan
from .Forms import ToolStripDropDown
from System import Guid
from .Undo import IGH_UndoAction
from .Undo import GH_UndoRecord
class GH_ActiveObject(GH_DocumentObject):
    @overload
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    @overload
    def add_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    @overload
    def add_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    @overload
    def add_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    @overload
    def add_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    @overload
    def add_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    @overload
    def AddedToDocument(self, document: GH_Document) -> None: ...
    @overload
    def AddRuntimeMessage(self, level: GH_RuntimeMessageLevel, text: str) -> None: ...
    @overload
    def AppendAdditionalMenuItems(self, menu: ToolStripDropDown) -> None: ...
    @overload
    def AppendMenuItems(self, menu: ToolStripDropDown) -> bool: ...
    @overload
    def ClearData(self) -> None: ...
    @overload
    def ClearRuntimeMessages(self) -> None: ...
    @overload
    def CollectData(self) -> None: ...
    @overload
    def ComputeData(self) -> None: ...
    @overload
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    @overload
    def CreateAttributes(self) -> None: ...
    @overload
    def DependsOn(self, PotentialSource: IGH_ActiveObject) -> bool: ...
    @overload
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExpirePreview(self, redraw: bool) -> None: ...
    @overload
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Category(self) -> str: ...
    @property
    def ComponentGuid(self) -> Guid: ...
    @property
    def Description(self) -> str: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Bitmap: ...
    @property
    def IconCapableUI(self) -> bool: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def MutableNickName(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def Phase(self) -> GH_SolutionPhase: ...
    @property
    def ProcessorTime(self) -> TimeSpan: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsolateObject(self) -> None: ...
    @overload
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    @overload
    def OnAttributesChanged(self) -> None: ...
    @overload
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: object) -> None: ...
    @overload
    def OnPingDocument(self) -> GH_Document: ...
    @overload
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    @overload
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ReadFull(self, reader: GH_IReader) -> bool: ...
    @overload
    def RecordUndoEvent(self, record: GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> Guid: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: IGH_UndoAction) -> Guid: ...
    @overload
    def RegisterRemoteIDs(self, id_list: GH_GuidTable) -> None: ...
    @overload
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    @overload
    def remove_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    @overload
    def remove_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    @overload
    def remove_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    @overload
    def remove_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    @overload
    def remove_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    @overload
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @overload
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Iterable[str]: ...
    @overload
    def SDKCompliancy(self, exeVersion: int, exeServiceRelease: int) -> bool: ...
    @Attributes.setter
    def Attributes(self, Value: IGH_Attributes) -> None: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, Value: GH_IconDisplayMode) -> None: ...
    @Locked.setter
    def Locked(self, Value: bool) -> None: ...
    @MutableNickName.setter
    def MutableNickName(self, Value: bool) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @Phase.setter
    def Phase(self, Value: GH_SolutionPhase) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    @overload
    def SetIconOverride(self, customIcon: Bitmap) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TriggerAutoSave(self) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, id: Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> None: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    def WriteFull(self, writer: GH_IWriter) -> bool: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class GH_ActiveObjectFilter:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, iObj: IGH_ActiveObject, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, iObj: IGH_ActiveObject) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class GH_Alias:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Alias): ...
    @overload
    def __init__(self, alias: str, target: Guid): ...
    @overload
    @staticmethod
    def AliasToString(aliases: Iterable[str]) -> str: ...
    @overload
    def CompareTo(self, other: GH_Alias) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Alias(self) -> str: ...
    @property
    def Target(self) -> Guid: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Alias.setter
    def Alias(self, AutoPropertyValue: str) -> None: ...
    @Target.setter
    def Target(self, AutoPropertyValue: Guid) -> None: ...
    @overload
    @staticmethod
    def StringToAlias(text: str) -> Iterable[str]: ...
    @overload
    def ToString(self) -> str: ...


class GH_Arrange(Enum):
    MoveToFront = 0
    MoveForwards = 1
    MoveToBack = 2
    MoveBackwards = 3


class GH_AssemblyFolderInfo:
    @overload
    def __init__(self, folder: str, type: GH_PluginFolderType): ...
    Folder: str
    Type: GH_PluginFolderType
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def SearchOption(self) -> SearchOption: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class GH_AssemblyInfo:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def AssemblyDescription(self) -> str: ...
    @property
    def AssemblyIcon(self) -> Bitmap: ...
    @property
    def AssemblyLicense(self) -> GH_LibraryLicense: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def AssemblyVersion(self) -> str: ...
    @property
    def AuthorContact(self) -> str: ...
    @property
    def AuthorName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsCoreLibrary(self) -> bool: ...
    @property
    def License(self) -> GH_LibraryLicense: ...
    @property
    def LoadingMechanism(self) -> GH_LoadingMechanism: ...
    @property
    def Location(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class GH_AssemblyInfoStub(GH_AssemblyInfo):
    @overload
    def __init__(self, assembly: Assembly): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def AssemblyDescription(self) -> str: ...
    @property
    def AssemblyIcon(self) -> Bitmap: ...
    @property
    def AssemblyLicense(self) -> GH_LibraryLicense: ...
    @property
    def AssemblyName(self) -> str: ...
    @property
    def AssemblyVersion(self) -> str: ...
    @property
    def AuthorContact(self) -> str: ...
    @property
    def AuthorName(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsCoreLibrary(self) -> bool: ...
    @property
    def License(self) -> GH_LibraryLicense: ...
    @property
    def LoadingMechanism(self) -> GH_LoadingMechanism: ...
    @property
    def Location(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_AssemblyPriority:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PriorityLoad(self) -> GH_LoadingInstruction: ...
    @overload
    def ToString(self) -> str: ...




class GH_AttributesChangedEventArgs:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Author:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: IGH_Author): ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Address(self) -> str: ...
    @property
    def AddressReadonly(self) -> str: ...
    @property
    def Company(self) -> str: ...
    @property
    def CompanyReadonly(self) -> str: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def CopyrightReadonly(self) -> str: ...
    @property
    def EMail(self) -> str: ...
    @property
    def EMailReadonly(self) -> str: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NameReadonly(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def PhoneReadonly(self) -> str: ...
    @property
    def Website(self) -> str: ...
    @property
    def WebsiteReadonly(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @Address.setter
    def Address(self, AutoPropertyValue: str) -> None: ...
    @Company.setter
    def Company(self, AutoPropertyValue: str) -> None: ...
    @Copyright.setter
    def Copyright(self, AutoPropertyValue: str) -> None: ...
    @EMail.setter
    def EMail(self, AutoPropertyValue: str) -> None: ...
    @Name.setter
    def Name(self, AutoPropertyValue: str) -> None: ...
    @Phone.setter
    def Phone(self, AutoPropertyValue: str) -> None: ...
    @Website.setter
    def Website(self, AutoPropertyValue: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_AutoSaveSettings:
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_AutoSaveFileFormatChanged(obj: AutoSaveFileFormatChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_EnableAutoSaveChanged(obj: EnableAutoSaveChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_SaveOnDataFlatteningChanged(obj: SaveOnDataFlatteningChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_SaveOnDocumentUnloadChanged(obj: SaveOnDocumentUnloadChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_SaveOnObjectAddedChanged(obj: SaveOnObjectAddedChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_SaveOnObjectChangeChanged(obj: SaveOnObjectChangeChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_SaveOnObjectRemovedChanged(obj: SaveOnObjectRemovedChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_SaveOnWireEventChanged(obj: SaveOnWireEventChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def AutosaveFilter(trigger: GH_AutoSaveTrigger) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def EnableAutoSave(cls) -> bool: ...
    @property
    @classmethod
    def SaveOnDataFlattening(cls) -> bool: ...
    @property
    @classmethod
    def SaveOnDocumentUnload(cls) -> bool: ...
    @property
    @classmethod
    def SaveOnObjectAdded(cls) -> bool: ...
    @property
    @classmethod
    def SaveOnObjectChange(cls) -> bool: ...
    @property
    @classmethod
    def SaveOnObjectRemoved(cls) -> bool: ...
    @property
    @classmethod
    def SaveOnWireEvent(cls) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_AutoSaveFileFormatChanged(obj: AutoSaveFileFormatChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_EnableAutoSaveChanged(obj: EnableAutoSaveChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_SaveOnDataFlatteningChanged(obj: SaveOnDataFlatteningChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_SaveOnDocumentUnloadChanged(obj: SaveOnDocumentUnloadChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_SaveOnObjectAddedChanged(obj: SaveOnObjectAddedChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_SaveOnObjectChangeChanged(obj: SaveOnObjectChangeChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_SaveOnObjectRemovedChanged(obj: SaveOnObjectRemovedChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_SaveOnWireEventChanged(obj: SaveOnWireEventChangedEventHandler) -> None: ...
    @EnableAutoSave.setter
    @classmethod
    def EnableAutoSave(clsValue: bool) -> None: ...
    @SaveOnDataFlattening.setter
    @classmethod
    def SaveOnDataFlattening(clsValue: bool) -> None: ...
    @SaveOnDocumentUnload.setter
    @classmethod
    def SaveOnDocumentUnload(clsValue: bool) -> None: ...
    @SaveOnObjectAdded.setter
    @classmethod
    def SaveOnObjectAdded(clsValue: bool) -> None: ...
    @SaveOnObjectChange.setter
    @classmethod
    def SaveOnObjectChange(clsValue: bool) -> None: ...
    @SaveOnObjectRemoved.setter
    @classmethod
    def SaveOnObjectRemoved(clsValue: bool) -> None: ...
    @SaveOnWireEvent.setter
    @classmethod
    def SaveOnWireEvent(clsValue: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_AutoSaveTrigger(Enum):
    undefined = 0
    doc_unload = 1
    object_added = 2
    object_removed = 3
    wire_event = 4
    data_matching_event = 5
    data_modification_event = 6
    object_generic = 7


from Rhino import RhinoDoc
class GH_BakeUtility:
    @overload
    def __init__(self, document: GH_Document): ...
    @overload
    def BakeObject(self, obj: object, att: ObjectAttributes, doc: RhinoDoc) -> bool: ...
    @overload
    def BakeObjects(self, objects: Iterable[Any], att: ObjectAttributes, doc: RhinoDoc) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BakedCount(self) -> int: ...
    @property
    def BakedIds(self) -> Iterable[Guid]: ...
    @property
    def InvalidCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_BitmapChannel(Enum):
    A = 1
    R = 2
    G = 4
    B = 8
    RGB = 14
    ARGB = 15


class GH_CaseInsensitiveStringComparer:
    @overload
    def __init__(self): ...
    @overload
    def Compare(self, x: str, y: str) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_ClipboardType(Enum):
    System = 0
    Local = 1
    Global = 2


from .Generic import IList
from .Forms import ToolStripDropDown
from System import TimeSpan
from Rhino import RhinoDoc
from System import Guid
from .Undo import IGH_UndoAction
from .Undo import GH_UndoRecord
class GH_Component(GH_ActiveObject):
    @overload
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    @overload
    def add_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    @overload
    def add_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    @overload
    def add_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    @overload
    def add_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    @overload
    def add_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    @overload
    def AddedToDocument(self, document: GH_Document) -> None: ...
    @overload
    def AddRuntimeMessage(self, level: GH_RuntimeMessageLevel, text: str) -> None: ...
    @overload
    def AppendAdditionalMenuItems(self, menu: ToolStripDropDown) -> None: ...
    @overload
    def AppendMenuItems(self, menu: ToolStripDropDown) -> bool: ...
    @overload
    def BakeGeometry(self, doc: RhinoDoc, obj_ids: MutableSequence[Guid]) -> None: ...
    @overload
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_ids: MutableSequence[Guid]) -> None: ...
    @overload
    def ClearData(self) -> None: ...
    @overload
    def ClearRuntimeMessages(self) -> None: ...
    @overload
    def CollectData(self) -> None: ...
    @overload
    def ComputeData(self) -> None: ...
    @overload
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    @overload
    def CreateAttributes(self) -> None: ...
    @overload
    def DependsOn(self, potentialSource: IGH_ActiveObject) -> bool: ...
    @overload
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    @overload
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExpirePreview(self, redraw: bool) -> None: ...
    @overload
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Category(self) -> str: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def ComponentGuid(self) -> Guid: ...
    @property
    def DataComparison(self) -> GH_DataComparison: ...
    @property
    def Description(self) -> str: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Bitmap: ...
    @property
    def IconCapableUI(self) -> bool: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def InConstructor(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsBakeCapable(self) -> bool: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    @property
    def IsValidPrincipalParameterIndex(self) -> bool: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def MutableNickName(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def Params(self) -> GH_ComponentParamServer: ...
    @property
    def Phase(self) -> GH_SolutionPhase: ...
    @property
    def PrincipalParameterIndex(self) -> int: ...
    @property
    def ProcessorTime(self) -> TimeSpan: ...
    @property
    def RunCount(self) -> int: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsolateObject(self) -> None: ...
    @overload
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    @overload
    def OnAttributesChanged(self) -> None: ...
    @overload
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: object) -> None: ...
    @overload
    def OnPingDocument(self) -> GH_Document: ...
    @overload
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    @overload
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ReadFull(self, reader: GH_IReader) -> bool: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> Guid: ...
    @overload
    def RecordUndoEvent(self, record: GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: IGH_UndoAction) -> Guid: ...
    @overload
    def RegisterRemoteIDs(self, table: GH_GuidTable) -> None: ...
    @overload
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    @overload
    def remove_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    @overload
    def remove_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    @overload
    def remove_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    @overload
    def remove_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    @overload
    def remove_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    @overload
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @overload
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Iterable[str]: ...
    @overload
    def SDKCompliancy(self, exeVersion: int, exeServiceRelease: int) -> bool: ...
    @Attributes.setter
    def Attributes(self, Value: IGH_Attributes) -> None: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @DataComparison.setter
    def DataComparison(self, Value: GH_DataComparison) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Hidden.setter
    def Hidden(self, Value: bool) -> None: ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, Value: GH_IconDisplayMode) -> None: ...
    @Locked.setter
    def Locked(self, Value: bool) -> None: ...
    @Message.setter
    def Message(self, Value: str) -> None: ...
    @MutableNickName.setter
    def MutableNickName(self, Value: bool) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @Phase.setter
    def Phase(self, Value: GH_SolutionPhase) -> None: ...
    @PrincipalParameterIndex.setter
    def PrincipalParameterIndex(self, AutoPropertyValue: int) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    @overload
    def SetIconOverride(self, customIcon: Bitmap) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TriggerAutoSave(self) -> None: ...
    @overload
    def TriggerAutoSave(self, id: Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> None: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    def WriteFull(self, writer: GH_IWriter) -> bool: ...


class GH_ComponentPaletteStyle(Enum):
    Alphabetical = 0
    TabPanel = 1
    Hue = 2


from System import Guid
class GH_ComponentParamServer:
    def __iter__(self) -> Iterator[IGH_Param]: ...
    @overload
    def AccessCount(self, access: GH_ParamAccess) -> int: ...
    @overload
    def add_ParameterChanged(self, obj: ParameterChangedEventHandler) -> None: ...
    @overload
    def add_ParameterNickNameChanged(self, obj: ParameterNickNameChangedEventHandler) -> None: ...
    @overload
    def add_ParameterSourcesChanged(self, obj: ParameterSourcesChangedEventHandler) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Clear(self, isolate: bool) -> None: ...
    @overload
    @staticmethod
    def CreateDuplicate(original: IGH_Param) -> IGH_Param: ...
    @overload
    def EmitSyncObject(self) -> IGH_SyncObject: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self, id: Guid) -> IGH_Param: ...
    @property
    def Input(self) -> MutableSequence[IGH_Param]: ...
    @property
    def InputWidth(self) -> float: ...
    @property
    def OnlyTreeAndListParameters(self) -> bool: ...
    @property
    def OnlyTreeParameters(self) -> bool: ...
    @property
    def Output(self) -> MutableSequence[IGH_Param]: ...
    @property
    def OutputWidth(self) -> float: ...
    @property
    def Owner(self) -> IGH_Component: ...
    @overload
    def GetEnumerator(self) -> Iterator[IGH_Param]: ...
    @overload
    def GetEnumerator1(self) -> Iterator[Any]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetHashCode(self, fields: GH_ParamHashFields) -> Guid: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOfInputParam(self, name: str) -> int: ...
    @overload
    def IndexOfInputParam(self, id: Guid) -> int: ...
    @overload
    def IndexOfOutputParam(self, id: Guid) -> int: ...
    @overload
    def IndexOfOutputParam(self, name: str) -> int: ...
    @overload
    @staticmethod
    def InventUniqueNickname(allowedChars: str, existingNames: Iterable[str]) -> str: ...
    @overload
    @staticmethod
    def InventUniqueNickname(allowedChars: str, existingNames: Iterable[IGH_Param]) -> str: ...
    @overload
    def IsInputParam(self, param: IGH_Param) -> bool: ...
    @overload
    def IsOutputParam(self, param: IGH_Param) -> bool: ...
    @overload
    def IsParam(self, param: IGH_Param) -> bool: ...
    @overload
    def OnParametersChanged(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ReadAllParameterData(self, reader: GH_IReader) -> bool: ...
    @overload
    def RegisterInputParam(self, new_param: IGH_Param) -> bool: ...
    @overload
    def RegisterInputParam(self, new_param: IGH_Param, at_index: int) -> bool: ...
    @overload
    def RegisterOutputParam(self, new_param: IGH_Param) -> bool: ...
    @overload
    def RegisterOutputParam(self, new_param: IGH_Param, at_index: int) -> bool: ...
    @overload
    def remove_ParameterChanged(self, obj: ParameterChangedEventHandler) -> None: ...
    @overload
    def remove_ParameterNickNameChanged(self, obj: ParameterNickNameChangedEventHandler) -> None: ...
    @overload
    def remove_ParameterSourcesChanged(self, obj: ParameterSourcesChangedEventHandler) -> None: ...
    @overload
    def RepairParamAssociations(self) -> None: ...
    @overload
    def RepairProxyParams(self, document: GH_Document) -> bool: ...
    @overload
    def SortInput(self, keys: Iterable[float]) -> None: ...
    @overload
    def SortInput(self, keys: Iterable[int]) -> None: ...
    @overload
    def SortInput(self, keys: Iterable[float]) -> None: ...
    @overload
    def SortOutput(self, keys: Iterable[float]) -> None: ...
    @overload
    def SortOutput(self, keys: Iterable[float]) -> None: ...
    @overload
    def SortOutput(self, keys: Iterable[int]) -> None: ...
    @overload
    def Sync(self, sync_data: object) -> None: ...
    @overload
    def Sync(self, sync_data: IGH_SyncObject) -> None: ...
    @overload
    def Sync(self, sync_data: IGH_SyncObject) -> Tuple[int]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UnregisterInputParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterInputParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    @overload
    def UnregisterOutputParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterOutputParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    @overload
    def UnregisterParameter(self, param: IGH_Param) -> bool: ...
    @overload
    def UnregisterParameter(self, param: IGH_Param, isolate: bool) -> bool: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    def WriteAllParameterData(self, writer: GH_IWriter) -> bool: ...
    @overload
    @staticmethod
    def WriteParamHashData(writer: BinaryWriter, param: IGH_Param, fields: GH_ParamHashFields) -> None: ...


from .ObjectModel import ReadOnlyCollection
from System import Guid
from .Forms import AutoCompleteStringCollection
from .Generic import IList
from .Graphs import IGH_Graph
from .Ribbon import GH_Layout
class GH_ComponentServer:
    @overload
    def __init__(self): ...
    @overload
    def add_GHAFileLoaded(self, obj: GHAFileLoadedEventHandler) -> None: ...
    @overload
    def AddAlias(self, alias: str, target: Guid) -> None: ...
    @overload
    def AddCategoryIcon(self, fullCategoryName: str, icon: Bitmap) -> None: ...
    @overload
    def AddCategoryShortName(self, fullCategoryName: str, categoryAbbreviation: str) -> None: ...
    @overload
    def AddCategorySymbolName(self, fullCategoryName: str, symbol: str) -> None: ...
    @overload
    def AddProxy(self, proxy: IGH_ObjectProxy) -> bool: ...
    @overload
    def AddProxyLibraryInfo(self, assemblyInfo: GH_AssemblyInfo) -> bool: ...
    @overload
    def AliasTargets(self, alias: str) -> MutableSequence[Guid]: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ClearStaleUserObjects(self) -> None: ...
    @overload
    @staticmethod
    def CompareProxies(A: IGH_ObjectProxy, B: IGH_ObjectProxy) -> int: ...
    @overload
    @staticmethod
    def CopyFileToAppropriateFolder(filepath: str, moveOriginalToBin: bool) -> str: ...
    @overload
    def CreateComponentPalette(self, style: GH_ComponentPaletteStyle) -> Bitmap: ...
    @overload
    def DestroyLoadingUI(self) -> None: ...
    @overload
    def EmitGraph(self, id: Guid) -> IGH_Graph: ...
    @overload
    def EmitObject(self, id: Guid) -> IGH_DocumentObject: ...
    @overload
    def EmitObjectIcon(self, id: Guid) -> Bitmap: ...
    @overload
    def EmitObjectProxy(self, id: Guid) -> IGH_ObjectProxy: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def ExternalFiles(testGrasshopperCollisions: bool, testExternalCollisions: bool) -> MutableSequence[GH_ExternalFile]: ...
    @overload
    def FindAssembly(self, libraryId: Guid) -> GH_AssemblyInfo: ...
    @overload
    def FindAssemblyByObject(self, objectId: Guid) -> GH_AssemblyInfo: ...
    @overload
    def FindAssemblyByObject(self, object: IGH_DocumentObject) -> GH_AssemblyInfo: ...
    @overload
    def FindObjectByName(self, name: str, ignoreWhiteSpace: bool, ignoreCapitalisation: bool) -> IGH_ObjectProxy: ...
    @overload
    def FindObjects(self, libraryID: Guid) -> MutableSequence[IGH_ObjectProxy]: ...
    @overload
    def FindObjects(self, terms: Iterable[str], maximumResults: int, results: Iterable[IGH_ObjectProxy], resultWeights: Iterable[float]) -> Tuple[int, Iterable[IGH_ObjectProxy], Iterable[float]]: ...
    @overload
    def FindUpgrader(self, target: Guid) -> IGH_UpgradeObject: ...
    @property
    def Aliases(self) -> MutableSequence[str]: ...
    @property
    @classmethod
    def AllAddOns(cls) -> MutableSequence[str]: ...
    @property
    def CompleteRibbonLayout(self) -> GH_Layout: ...
    @property
    def DiscardedProxies(self) -> int: ...
    @property
    @classmethod
    def GHA_AppDataDirectory(cls) -> str: ...
    @property
    @classmethod
    def GHA_Directories(cls) -> MutableSequence[str]: ...
    @property
    @classmethod
    def GHUser_AppDataDirectory(cls) -> str: ...
    @property
    def GraphProxies(self) -> Iterable[GH_GraphProxy]: ...
    @property
    def Libraries(self) -> ReadOnlyCollection: ...
    @property
    def LoadingExceptions(self) -> MutableSequence[GH_LoadingException]: ...
    @property
    @classmethod
    def NoLoadExtension(cls) -> str: ...
    @property
    def ObjectProxies(self) -> Iterable[IGH_ObjectProxy]: ...
    @property
    def ObjectProxyNames(self) -> AutoCompleteStringCollection: ...
    @property
    def TypeHints(self) -> Iterable[type]: ...
    @property
    def Upgraders(self) -> Iterable[IGH_UpgradeObject]: ...
    @overload
    def GetAlias(self, target: Guid) -> str: ...
    @overload
    def GetCategoryIcon(self, fullName: str) -> Bitmap: ...
    @overload
    def GetCategoryShortName(self, fullName: str) -> str: ...
    @overload
    def GetCategorySymbolName(self, fullName: str) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsGraphCached(self, id: Guid) -> bool: ...
    @overload
    def IsObjectCached(self, id: Guid) -> bool: ...
    @overload
    def IsUpgrader(self, objs: Iterable[IGH_DocumentObject]) -> bool: ...
    @overload
    def LoadAliases(self) -> None: ...
    @overload
    def LoadExternalFiles(self, loadOneByOne: bool) -> bool: ...
    @overload
    @staticmethod
    def NewUserObject(obj: IGH_DocumentObject) -> bool: ...
    @overload
    def remove_GHAFileLoaded(self, obj: GHAFileLoadedEventHandler) -> None: ...
    @overload
    def RemoveCachedGraph(self, id: Guid) -> bool: ...
    @overload
    def RemoveCachedObject(self, userObjectFilePath: str) -> bool: ...
    @overload
    def RemoveCachedObject(self, id: Guid) -> bool: ...
    @overload
    def SaveAliases(self) -> None: ...
    @overload
    def SetAlias(self, alias: str, target: Guid) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UpdateRibbonUI() -> None: ...


from .ObjectModel import ReadOnlyCollection
from System import Guid
class GH_ConnectivityDiagram:
    @overload
    def __init__(self, doc: GH_Document): ...
    @overload
    def __init__(self, other: GH_ConnectivityDiagram): ...
    @overload
    def ContainsID(self, id: Guid) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Node(self, id: Guid) -> GH_ConnectivityNode: ...
    @property
    def NodeCount(self) -> int: ...
    @property
    def Nodes(self) -> ReadOnlyCollection: ...
    @overload
    def GetAllInputs(self, id: Guid) -> MutableSequence[Guid]: ...
    @overload
    def GetAllOutputs(self, id: Guid) -> MutableSequence[Guid]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from .ObjectModel import ReadOnlyCollection
from System import Guid
class GH_ConnectivityDisparity:
    @overload
    def __init__(self, topset: GH_ConnectivityDiagram, subset: GH_ConnectivityDiagram): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExternalInputs(self, id: Guid) -> MutableSequence[Guid]: ...
    @overload
    def ExternalOutputs(self, id: Guid) -> MutableSequence[Guid]: ...
    @property
    def SubNodes(self) -> ReadOnlyCollection: ...
    @property
    def SubSet(self) -> GH_ConnectivityDiagram: ...
    @property
    def TopNodes(self) -> ReadOnlyCollection: ...
    @property
    def TopSet(self) -> GH_ConnectivityDiagram: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InternalInputs(self, id: Guid) -> MutableSequence[Guid]: ...
    @overload
    def InternalOutputs(self, id: Guid) -> MutableSequence[Guid]: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from .ObjectModel import ReadOnlyCollection
class GH_ConnectivityNode:
    @overload
    def __init__(self, other: GH_ConnectivityNode): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def NodeID(self) -> Guid: ...
    @property
    def NodeIn(self) -> ReadOnlyCollection: ...
    @property
    def NodeOut(self) -> ReadOnlyCollection: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Conversion(Enum):
    Primary = 0
    Secondary = 1
    Both = 2


from .Expressions import GH_Variant
from System import DateTime
from System import Guid
from .Types import GH_Time
from .Types import GH_String
from .Types import GH_Guid
from .Types import GH_Colour
from .Types import GH_Interval
from .Types import GH_Interval2D
from .Types import GH_Matrix
from .Types import GH_Point
from .Types import GH_Vector
from .Types import GH_Plane
from .Types import GH_Box
from .Types import GH_Line
from .Types import GH_Rectangle
from .Types import GH_Circle
from .Types import GH_Arc
from .Types import GH_Curve
from .Types import GH_Surface
from .Types import GH_Brep
from .Types import GH_Extrusion
from .Types import GH_SubD
from .Types import GH_Mesh
from .Types import GH_MeshFace
from .Types import GH_PointCloud
from .Types import GH_InstanceReference
from .Types import GH_Hatch
from .Types import GH_TextEntity
from .Types import GH_TextDot
from .Types import GH_Leader
from .Types import GH_LinearDimension
from .Types import GH_RadialDimension
from .Types import GH_AngularDimension
from .Types import GH_OrdinateDimension
from .Types import GH_Centermark
from .Types import GH_Dimension
from .Types import GH_AnnotationBase
from .Types import GH_Light
from .Types import Complex
from .Generic import SortedDictionary
from .Types import UVInterval
from Rhino import RhinoDoc
from .Types import IGH_Goo
from .Types import IGH_GeometricGoo
from .Types import GH_Boolean
from .Types import GH_Integer
from .Types import GH_Number
from .Types import GH_ComplexNumber
class GH_Convert:
    PureDateTicks: int
    PureTimeTicks: int
    @overload
    @staticmethod
    def BackSolveExpression(exp: str, variable: str, target: float, minimum: float, maximum: float, steps: int) -> Tuple[bool, float, float]: ...
    @overload
    @staticmethod
    def ByteArrayToCommonObject(data: Iterable[int]) -> T: ...
    @overload
    @staticmethod
    def CombineDateAndTime(date: DateTime, time: DateTime) -> DateTime: ...
    @overload
    @staticmethod
    def CommonObjectToByteArray(data: CommonObject) -> Iterable[int]: ...
    @overload
    @staticmethod
    def CreateDateAndTime(dateTime: DateTime) -> DateTime: ...
    @overload
    @staticmethod
    def CreatePureDate(date: DateTime) -> DateTime: ...
    @overload
    @staticmethod
    def CreatePureTime(date: DateTime) -> DateTime: ...
    @overload
    @staticmethod
    def CreatePureTime(hours: int, minutes: int, seconds: int) -> DateTime: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FileToHash(path: str) -> Guid: ...
    @overload
    @staticmethod
    def FindRhinoObjectByNameAndType(name: str, type: ObjectType) -> RhinoObject: ...
    @overload
    @staticmethod
    def GeometryToObjRef(in_: IGH_GeometricGoo) -> ObjRef: ...
    @property
    @classmethod
    def CultureTable(cls) -> SortedDictionary: ...
    @overload
    @staticmethod
    def GetBrepFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Brep]: ...
    @overload
    @staticmethod
    def GetClippingPlaneFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Plane]: ...
    @overload
    @staticmethod
    def GetCurveFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Curve]: ...
    @overload
    @staticmethod
    def GetExtrusionFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Extrusion]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetMeshFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Mesh]: ...
    @overload
    @staticmethod
    def GetPlaneFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Plane]: ...
    @overload
    @staticmethod
    def GetPointFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Point3d]: ...
    @overload
    @staticmethod
    def GetSubDFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, SubD]: ...
    @overload
    @staticmethod
    def GetSurfaceFromDocument(doc: RhinoDoc, id: Guid) -> Tuple[bool, Surface]: ...
    @overload
    @staticmethod
    def GetTimeKind(time: DateTime) -> GH_TimeKind: ...
    @overload
    @staticmethod
    def GetTimeKind(A: DateTime, B: DateTime) -> GH_TimeKind: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsPureDate(potentialDate: DateTime) -> bool: ...
    @overload
    @staticmethod
    def IsPureTime(potentialTime: DateTime) -> bool: ...
    @overload
    @staticmethod
    def ObjRefToGeometry(in_: ObjRef) -> IGH_GeometricGoo: ...
    @overload
    @staticmethod
    def ParseExpression(exp: str, recursive: bool) -> GH_Variant: ...
    @overload
    @staticmethod
    def StringToDate(text: str, date: DateTime) -> Tuple[bool, DateTime]: ...
    @overload
    @staticmethod
    def StringToGuid(text: str) -> Guid: ...
    @overload
    @staticmethod
    def StringToTime(text: str, time: DateTime) -> Tuple[bool, DateTime]: ...
    @overload
    @staticmethod
    def To_GH_ClassPrefixTypeName(old_name: str) -> str: ...
    @overload
    @staticmethod
    def ToAnnotationBase_Primary(data: object, rc: AnnotationBase) -> Tuple[bool, AnnotationBase]: ...
    @overload
    @staticmethod
    def ToAnnotationBase(data: object, rc: AnnotationBase, conversion_level: GH_Conversion) -> Tuple[bool, AnnotationBase]: ...
    @overload
    @staticmethod
    def ToAnnotationBase_Secondary(data: object, rc: AnnotationBase) -> Tuple[bool, AnnotationBase]: ...
    @overload
    @staticmethod
    def ToArc_Primary(data: object, rc: Arc) -> Tuple[bool, Arc]: ...
    @overload
    @staticmethod
    def ToArc(data: object, rc: Arc, conversion_level: GH_Conversion) -> Tuple[bool, Arc]: ...
    @overload
    @staticmethod
    def ToArc_Secondary(data: object, rc: Arc) -> Tuple[bool, Arc]: ...
    @overload
    @staticmethod
    def ToBoolean_Primary(data: object, destination: bool) -> Tuple[bool, bool]: ...
    @overload
    @staticmethod
    def ToBoolean(data: object, conversion_level: GH_Conversion) -> Tuple[bool, bool]: ...
    @overload
    @staticmethod
    def ToBoolean_Secondary(data: object, destination: bool) -> Tuple[bool, bool]: ...
    @overload
    @staticmethod
    def ToBoundingBox_Primary(data: object, rc: BoundingBox) -> Tuple[bool, BoundingBox]: ...
    @overload
    @staticmethod
    def ToBox_Primary(data: object, rc: Box) -> Tuple[bool, Box]: ...
    @overload
    @staticmethod
    def ToBrep_Primary(data: object, rc: Brep) -> Tuple[bool, Brep]: ...
    @overload
    @staticmethod
    def ToBrep(data: object, rc: Brep, conversion_level: GH_Conversion) -> Tuple[bool, Brep]: ...
    @overload
    @staticmethod
    def ToBrep_Secondary(data: object, rc: Brep) -> Tuple[bool, Brep]: ...
    @overload
    @staticmethod
    def ToCircle_Primary(data: object, rc: Circle) -> Tuple[bool, Circle]: ...
    @overload
    @staticmethod
    def ToCircle(data: object, rc: Circle, conversion_level: GH_Conversion) -> Tuple[bool, Circle]: ...
    @overload
    @staticmethod
    def ToCircle_Secondary(data: object, rc: Circle) -> Tuple[bool, Circle]: ...
    @overload
    @staticmethod
    def ToColor_Primary(data: object, destination: Color) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def ToColor(data: object, conversion_level: GH_Conversion) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def ToColor_Secondary(data: object, destination: Color) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def ToComplex_Primary(data: object, destination: Complex) -> Tuple[bool, Complex]: ...
    @overload
    @staticmethod
    def ToComplex(data: object, conversion_level: GH_Conversion) -> Tuple[bool, Complex]: ...
    @overload
    @staticmethod
    def ToComplex_Secondary(data: object, destination: Complex) -> Tuple[bool, Complex]: ...
    @overload
    @staticmethod
    def ToCoordinates(data: object, x: float, y: float, z: float, w: float) -> Tuple[bool, float, float, float, float]: ...
    @overload
    @staticmethod
    def ToCulture_Primary(data: object, destination: CultureInfo) -> Tuple[bool, CultureInfo]: ...
    @overload
    @staticmethod
    def ToCulture(data: object, conversion_level: GH_Conversion) -> Tuple[bool, CultureInfo]: ...
    @overload
    @staticmethod
    def ToCulture_Secondary(data: object, destination: CultureInfo) -> Tuple[bool, CultureInfo]: ...
    @overload
    @staticmethod
    def ToCurve_Primary(data: object, rc: Curve) -> Tuple[bool, Curve]: ...
    @overload
    @staticmethod
    def ToCurve(data: object, rc: Curve, conversion_level: GH_Conversion) -> Tuple[bool, Curve]: ...
    @overload
    @staticmethod
    def ToCurve_Secondary(data: object, rc: Curve) -> Tuple[bool, Curve]: ...
    @overload
    @staticmethod
    def ToDate_Primary(data: object, destination: DateTime) -> Tuple[bool, DateTime]: ...
    @overload
    @staticmethod
    def ToDate(data: object, conversion_level: GH_Conversion) -> Tuple[bool, DateTime]: ...
    @overload
    @staticmethod
    def ToDate_Secondary(data: object, destination: DateTime) -> Tuple[bool, DateTime]: ...
    @overload
    @staticmethod
    def ToDimension_Primary(data: object, rc: Dimension) -> Tuple[bool, Dimension]: ...
    @overload
    @staticmethod
    def ToDimension(data: object, rc: Dimension, conversion_level: GH_Conversion) -> Tuple[bool, Dimension]: ...
    @overload
    @staticmethod
    def ToDimension_Secondary(data: object, rc: Dimension) -> Tuple[bool, Dimension]: ...
    @overload
    @staticmethod
    def ToDouble_Primary(data: object, destination: float) -> Tuple[bool, float]: ...
    @overload
    @staticmethod
    def ToDouble(data: object, conversion_level: GH_Conversion) -> Tuple[bool, float]: ...
    @overload
    @staticmethod
    def ToDouble_Secondary(data: object, destination: float) -> Tuple[bool, float]: ...
    @overload
    @staticmethod
    def ToExtrusion_Primary(data: object, rc: Extrusion) -> Tuple[bool, Extrusion]: ...
    @overload
    @staticmethod
    def ToExtrusion(data: object, rc: Extrusion, conversion_level: GH_Conversion) -> Tuple[bool, Extrusion]: ...
    @overload
    @staticmethod
    def ToExtrusion_Secondary(data: object, rc: Extrusion) -> Tuple[bool, Extrusion]: ...
    @overload
    @staticmethod
    def ToGeometricGoo(data: object) -> IGH_GeometricGoo: ...
    @overload
    @staticmethod
    def ToGeometryBase(data: object) -> GeometryBase: ...
    @overload
    @staticmethod
    def ToGHAngularDimension_Primary(data: object, target: GH_AngularDimension) -> Tuple[bool, GH_AngularDimension]: ...
    @overload
    @staticmethod
    def ToGHAngularDimension(data: object, conversion_level: GH_Conversion, target: GH_AngularDimension) -> Tuple[bool, GH_AngularDimension]: ...
    @overload
    @staticmethod
    def ToGHAngularDimension_Secondary(data: object, target: GH_AngularDimension) -> Tuple[bool, GH_AngularDimension]: ...
    @overload
    @staticmethod
    def ToGHAnnotationBase(data: object, conversion_level: GH_Conversion, target: GH_AnnotationBase) -> Tuple[bool, GH_AnnotationBase]: ...
    @overload
    @staticmethod
    def ToGHArc_Primary(data: object, target: GH_Arc) -> Tuple[bool, GH_Arc]: ...
    @overload
    @staticmethod
    def ToGHArc(data: object, conversion_level: GH_Conversion, target: GH_Arc) -> Tuple[bool, GH_Arc]: ...
    @overload
    @staticmethod
    def ToGHArc_Secondary(data: object, target: GH_Arc) -> Tuple[bool, GH_Arc]: ...
    @overload
    @staticmethod
    def ToGHBoolean_Primary(data: object, target: GH_Boolean) -> Tuple[bool, GH_Boolean]: ...
    @overload
    @staticmethod
    def ToGHBoolean(data: object, conversion_level: GH_Conversion, target: GH_Boolean) -> Tuple[bool, GH_Boolean]: ...
    @overload
    @staticmethod
    def ToGHBoolean_Secondary(data: object, target: GH_Boolean) -> Tuple[bool, GH_Boolean]: ...
    @overload
    @staticmethod
    def ToGHBox_Primary(data: object, target: GH_Box) -> Tuple[bool, GH_Box]: ...
    @overload
    @staticmethod
    def ToGHBox(data: object, conversion_level: GH_Conversion, target: GH_Box) -> Tuple[bool, GH_Box]: ...
    @overload
    @staticmethod
    def ToGHBox_Secondary(data: object, target: GH_Box) -> Tuple[bool, GH_Box]: ...
    @overload
    @staticmethod
    def ToGHBrep_Primary(data: object, target: GH_Brep) -> Tuple[bool, GH_Brep]: ...
    @overload
    @staticmethod
    def ToGHBrep(data: object, conversion_level: GH_Conversion, target: GH_Brep) -> Tuple[bool, GH_Brep]: ...
    @overload
    @staticmethod
    def ToGHBrep_Secondary(data: object, target: GH_Brep) -> Tuple[bool, GH_Brep]: ...
    @overload
    @staticmethod
    def ToGHCentermark_Primary(data: object, target: GH_Centermark) -> Tuple[bool, GH_Centermark]: ...
    @overload
    @staticmethod
    def ToGHCentermark(data: object, conversion_level: GH_Conversion, target: GH_Centermark) -> Tuple[bool, GH_Centermark]: ...
    @overload
    @staticmethod
    def ToGHCentermark_Secondary(data: object, target: GH_Centermark) -> Tuple[bool, GH_Centermark]: ...
    @overload
    @staticmethod
    def ToGHCircle_Primary(data: object, target: GH_Circle) -> Tuple[bool, GH_Circle]: ...
    @overload
    @staticmethod
    def ToGHCircle(data: object, conversion_level: GH_Conversion, target: GH_Circle) -> Tuple[bool, GH_Circle]: ...
    @overload
    @staticmethod
    def ToGHCircle_Secondary(data: object, target: GH_Circle) -> Tuple[bool, GH_Circle]: ...
    @overload
    @staticmethod
    def ToGHColour_Primary(data: object, target: GH_Colour) -> Tuple[bool, GH_Colour]: ...
    @overload
    @staticmethod
    def ToGHColour(data: object, conversion_level: GH_Conversion, target: GH_Colour) -> Tuple[bool, GH_Colour]: ...
    @overload
    @staticmethod
    def ToGHColour_Secondary(data: object, target: GH_Colour) -> Tuple[bool, GH_Colour]: ...
    @overload
    @staticmethod
    def ToGHComplexNumber_Primary(data: object, target: GH_ComplexNumber) -> Tuple[bool, GH_ComplexNumber]: ...
    @overload
    @staticmethod
    def ToGHComplexNumber(data: object, conversion_level: GH_Conversion, target: GH_ComplexNumber) -> Tuple[bool, GH_ComplexNumber]: ...
    @overload
    @staticmethod
    def ToGHComplexNumber_Secondary(data: object, target: GH_ComplexNumber) -> Tuple[bool, GH_ComplexNumber]: ...
    @overload
    @staticmethod
    def ToGHCurve_Primary(data: object, target: GH_Curve) -> Tuple[bool, GH_Curve]: ...
    @overload
    @staticmethod
    def ToGHCurve(data: object, conversion_level: GH_Conversion, target: GH_Curve) -> Tuple[bool, GH_Curve]: ...
    @overload
    @staticmethod
    def ToGHCurve_Secondary(data: object, target: GH_Curve) -> Tuple[bool, GH_Curve]: ...
    @overload
    @staticmethod
    def ToGHDimension(data: object, conversion_level: GH_Conversion, target: GH_Dimension) -> Tuple[bool, GH_Dimension]: ...
    @overload
    @staticmethod
    def ToGHExtrusion_Primary(data: object, target: GH_Extrusion) -> Tuple[bool, GH_Extrusion]: ...
    @overload
    @staticmethod
    def ToGHExtrusion(data: object, conversion_level: GH_Conversion, target: GH_Extrusion) -> Tuple[bool, GH_Extrusion]: ...
    @overload
    @staticmethod
    def ToGHExtrusion_Secondary(data: object, target: GH_Extrusion) -> Tuple[bool, GH_Extrusion]: ...
    @overload
    @staticmethod
    def ToGHGuid_Primary(data: object, target: GH_Guid) -> Tuple[bool, GH_Guid]: ...
    @overload
    @staticmethod
    def ToGHGuid(data: object, conversion_level: GH_Conversion, target: GH_Guid) -> Tuple[bool, GH_Guid]: ...
    @overload
    @staticmethod
    def ToGHGuid_Secondary(data: object, target: GH_Guid) -> Tuple[bool, GH_Guid]: ...
    @overload
    @staticmethod
    def ToGHHatch_Primary(data: object, target: GH_Hatch) -> Tuple[bool, GH_Hatch]: ...
    @overload
    @staticmethod
    def ToGHHatch(data: object, conversion_level: GH_Conversion, target: GH_Hatch) -> Tuple[bool, GH_Hatch]: ...
    @overload
    @staticmethod
    def ToGHHatch_Secondary(data: object, target: GH_Hatch) -> Tuple[bool, GH_Hatch]: ...
    @overload
    @staticmethod
    def ToGHInstanceReference_Primary(data: object, target: GH_InstanceReference) -> Tuple[bool, GH_InstanceReference]: ...
    @overload
    @staticmethod
    def ToGHInstanceReference(data: object, conversion_level: GH_Conversion, target: GH_InstanceReference) -> Tuple[bool, GH_InstanceReference]: ...
    @overload
    @staticmethod
    def ToGHInstanceReference_Secondary(data: object, target: GH_InstanceReference) -> Tuple[bool, GH_InstanceReference]: ...
    @overload
    @staticmethod
    def ToGHInteger_Primary(data: object, target: GH_Integer) -> Tuple[bool, GH_Integer]: ...
    @overload
    @staticmethod
    def ToGHInteger(data: object, conversion_level: GH_Conversion, target: GH_Integer) -> Tuple[bool, GH_Integer]: ...
    @overload
    @staticmethod
    def ToGHInteger_Secondary(data: object, target: GH_Integer) -> Tuple[bool, GH_Integer]: ...
    @overload
    @staticmethod
    def ToGHInterval_Primary(data: object, target: GH_Interval) -> Tuple[bool, GH_Interval]: ...
    @overload
    @staticmethod
    def ToGHInterval(data: object, conversion_level: GH_Conversion, target: GH_Interval) -> Tuple[bool, GH_Interval]: ...
    @overload
    @staticmethod
    def ToGHInterval_Secondary(data: object, target: GH_Interval) -> Tuple[bool, GH_Interval]: ...
    @overload
    @staticmethod
    def ToGHInterval2D_Primary(data: object, target: GH_Interval2D) -> Tuple[bool, GH_Interval2D]: ...
    @overload
    @staticmethod
    def ToGHInterval2D(data: object, conversion_level: GH_Conversion, target: GH_Interval2D) -> Tuple[bool, GH_Interval2D]: ...
    @overload
    @staticmethod
    def ToGHInterval2D_Secondary(data: object, target: GH_Interval2D) -> Tuple[bool, GH_Interval2D]: ...
    @overload
    @staticmethod
    def ToGHLeader_Primary(data: object, target: GH_Leader) -> Tuple[bool, GH_Leader]: ...
    @overload
    @staticmethod
    def ToGHLeader(data: object, conversion_level: GH_Conversion, target: GH_Leader) -> Tuple[bool, GH_Leader]: ...
    @overload
    @staticmethod
    def ToGHLeader_Secondary(data: object, target: GH_Leader) -> Tuple[bool, GH_Leader]: ...
    @overload
    @staticmethod
    def ToGHLight_Primary(data: object, target: GH_Light) -> Tuple[bool, GH_Light]: ...
    @overload
    @staticmethod
    def ToGHLight(data: object, conversion_level: GH_Conversion, target: GH_Light) -> Tuple[bool, GH_Light]: ...
    @overload
    @staticmethod
    def ToGHLight_Secondary(data: object, target: GH_Light) -> Tuple[bool, GH_Light]: ...
    @overload
    @staticmethod
    def ToGHLine_Primary(data: object, target: GH_Line) -> Tuple[bool, GH_Line]: ...
    @overload
    @staticmethod
    def ToGHLine(data: object, conversion_level: GH_Conversion, target: GH_Line) -> Tuple[bool, GH_Line]: ...
    @overload
    @staticmethod
    def ToGHLine_Secondary(data: object, target: GH_Line) -> Tuple[bool, GH_Line]: ...
    @overload
    @staticmethod
    def ToGHLinearDimension_Primary(data: object, target: GH_LinearDimension) -> Tuple[bool, GH_LinearDimension]: ...
    @overload
    @staticmethod
    def ToGHLinearDimension(data: object, conversion_level: GH_Conversion, target: GH_LinearDimension) -> Tuple[bool, GH_LinearDimension]: ...
    @overload
    @staticmethod
    def ToGHLinearDimension_Secondary(data: object, target: GH_LinearDimension) -> Tuple[bool, GH_LinearDimension]: ...
    @overload
    @staticmethod
    def ToGHMatrix_Primary(data: object, target: GH_Matrix) -> Tuple[bool, GH_Matrix]: ...
    @overload
    @staticmethod
    def ToGHMatrix(data: object, conversion_level: GH_Conversion, target: GH_Matrix) -> Tuple[bool, GH_Matrix]: ...
    @overload
    @staticmethod
    def ToGHMatrix_Secondary(data: object, target: GH_Matrix) -> Tuple[bool, GH_Matrix]: ...
    @overload
    @staticmethod
    def ToGHMesh_Primary(data: object, target: GH_Mesh) -> Tuple[bool, GH_Mesh]: ...
    @overload
    @staticmethod
    def ToGHMesh(data: object, conversion_level: GH_Conversion, target: GH_Mesh) -> Tuple[bool, GH_Mesh]: ...
    @overload
    @staticmethod
    def ToGHMesh_Secondary(data: object, target: GH_Mesh) -> Tuple[bool, GH_Mesh]: ...
    @overload
    @staticmethod
    def ToGHMeshFace_Primary(data: object, target: GH_MeshFace) -> Tuple[bool, GH_MeshFace]: ...
    @overload
    @staticmethod
    def ToGHMeshFace(data: object, conversion_level: GH_Conversion, target: GH_MeshFace) -> Tuple[bool, GH_MeshFace]: ...
    @overload
    @staticmethod
    def ToGHMeshFace_Secondary(data: object, target: GH_MeshFace) -> Tuple[bool, GH_MeshFace]: ...
    @overload
    @staticmethod
    def ToGHNumber_Primary(data: object, target: GH_Number) -> Tuple[bool, GH_Number]: ...
    @overload
    @staticmethod
    def ToGHNumber(data: object, conversion_level: GH_Conversion, target: GH_Number) -> Tuple[bool, GH_Number]: ...
    @overload
    @staticmethod
    def ToGHNumber_Secondary(data: object, target: GH_Number) -> Tuple[bool, GH_Number]: ...
    @overload
    @staticmethod
    def ToGHOrdinateDimension_Primary(data: object, target: GH_OrdinateDimension) -> Tuple[bool, GH_OrdinateDimension]: ...
    @overload
    @staticmethod
    def ToGHOrdinateDimension(data: object, conversion_level: GH_Conversion, target: GH_OrdinateDimension) -> Tuple[bool, GH_OrdinateDimension]: ...
    @overload
    @staticmethod
    def ToGHOrdinateDimension_Secondary(data: object, target: GH_OrdinateDimension) -> Tuple[bool, GH_OrdinateDimension]: ...
    @overload
    @staticmethod
    def ToGHPlane_Primary(data: object, target: GH_Plane) -> Tuple[bool, GH_Plane]: ...
    @overload
    @staticmethod
    def ToGHPlane(data: object, conversion_level: GH_Conversion, target: GH_Plane) -> Tuple[bool, GH_Plane]: ...
    @overload
    @staticmethod
    def ToGHPlane_Secondary(data: object, target: GH_Plane) -> Tuple[bool, GH_Plane]: ...
    @overload
    @staticmethod
    def ToGHPoint_Primary(data: object, target: GH_Point) -> Tuple[bool, GH_Point]: ...
    @overload
    @staticmethod
    def ToGHPoint(data: object, conversion_level: GH_Conversion, target: GH_Point) -> Tuple[bool, GH_Point]: ...
    @overload
    @staticmethod
    def ToGHPoint_Secondary(data: object, target: GH_Point) -> Tuple[bool, GH_Point]: ...
    @overload
    @staticmethod
    def ToGHPointCloud_Primary(data: object, target: GH_PointCloud) -> Tuple[bool, GH_PointCloud]: ...
    @overload
    @staticmethod
    def ToGHPointCloud(data: object, conversion_level: GH_Conversion, target: GH_PointCloud) -> Tuple[bool, GH_PointCloud]: ...
    @overload
    @staticmethod
    def ToGHPointCloud_Secondary(data: object, target: GH_PointCloud) -> Tuple[bool, GH_PointCloud]: ...
    @overload
    @staticmethod
    def ToGHRadialDimension_Primary(data: object, target: GH_RadialDimension) -> Tuple[bool, GH_RadialDimension]: ...
    @overload
    @staticmethod
    def ToGHRadialDimension(data: object, conversion_level: GH_Conversion, target: GH_RadialDimension) -> Tuple[bool, GH_RadialDimension]: ...
    @overload
    @staticmethod
    def ToGHRadialDimension_Secondary(data: object, target: GH_RadialDimension) -> Tuple[bool, GH_RadialDimension]: ...
    @overload
    @staticmethod
    def ToGHRectangle_Primary(data: object, target: GH_Rectangle) -> Tuple[bool, GH_Rectangle]: ...
    @overload
    @staticmethod
    def ToGHRectangle(data: object, conversion_level: GH_Conversion, target: GH_Rectangle) -> Tuple[bool, GH_Rectangle]: ...
    @overload
    @staticmethod
    def ToGHRectangle_Secondary(data: object, target: GH_Rectangle) -> Tuple[bool, GH_Rectangle]: ...
    @overload
    @staticmethod
    def ToGHString_Primary(data: object, target: GH_String) -> Tuple[bool, GH_String]: ...
    @overload
    @staticmethod
    def ToGHString(data: object, conversion_level: GH_Conversion, target: GH_String) -> Tuple[bool, GH_String]: ...
    @overload
    @staticmethod
    def ToGHString_Secondary(data: object, target: GH_String) -> Tuple[bool, GH_String]: ...
    @overload
    @staticmethod
    def ToGHSubD_Primary(data: object, target: GH_SubD) -> Tuple[bool, GH_SubD]: ...
    @overload
    @staticmethod
    def ToGHSubD(data: object, conversion_level: GH_Conversion, target: GH_SubD) -> Tuple[bool, GH_SubD]: ...
    @overload
    @staticmethod
    def ToGHSubD_Secondary(data: object, target: GH_SubD) -> Tuple[bool, GH_SubD]: ...
    @overload
    @staticmethod
    def ToGHSurface_Primary(data: object, target: GH_Surface) -> Tuple[bool, GH_Surface]: ...
    @overload
    @staticmethod
    def ToGHSurface(data: object, conversion_level: GH_Conversion, target: GH_Surface) -> Tuple[bool, GH_Surface]: ...
    @overload
    @staticmethod
    def ToGHSurface_Secondary(data: object, target: GH_Surface) -> Tuple[bool, GH_Surface]: ...
    @overload
    @staticmethod
    def ToGHTextDot_Primary(data: object, target: GH_TextDot) -> Tuple[bool, GH_TextDot]: ...
    @overload
    @staticmethod
    def ToGHTextDot(data: object, conversion_level: GH_Conversion, target: GH_TextDot) -> Tuple[bool, GH_TextDot]: ...
    @overload
    @staticmethod
    def ToGHTextDot_Secondary(data: object, target: GH_TextDot) -> Tuple[bool, GH_TextDot]: ...
    @overload
    @staticmethod
    def ToGHTextEntity_Primary(data: object, target: GH_TextEntity) -> Tuple[bool, GH_TextEntity]: ...
    @overload
    @staticmethod
    def ToGHTextEntity(data: object, conversion_level: GH_Conversion, target: GH_TextEntity) -> Tuple[bool, GH_TextEntity]: ...
    @overload
    @staticmethod
    def ToGHTextEntity_Secondary(data: object, target: GH_TextEntity) -> Tuple[bool, GH_TextEntity]: ...
    @overload
    @staticmethod
    def ToGHTime_Primary(data: object, target: GH_Time) -> Tuple[bool, GH_Time]: ...
    @overload
    @staticmethod
    def ToGHTime(data: object, conversion_level: GH_Conversion, target: GH_Time) -> Tuple[bool, GH_Time]: ...
    @overload
    @staticmethod
    def ToGHTime_Secondary(data: object, target: GH_Time) -> Tuple[bool, GH_Time]: ...
    @overload
    @staticmethod
    def ToGHVector_Primary(data: object, target: GH_Vector) -> Tuple[bool, GH_Vector]: ...
    @overload
    @staticmethod
    def ToGHVector(data: object, conversion_level: GH_Conversion, target: GH_Vector) -> Tuple[bool, GH_Vector]: ...
    @overload
    @staticmethod
    def ToGHVector_Secondary(data: object, target: GH_Vector) -> Tuple[bool, GH_Vector]: ...
    @overload
    @staticmethod
    def ToGoo(data: object) -> IGH_Goo: ...
    @overload
    @staticmethod
    def ToGUID_Primary(data: object, destination: Guid) -> Tuple[bool, Guid]: ...
    @overload
    @staticmethod
    def ToGUID(data: object, conversion_level: GH_Conversion) -> Tuple[bool, Guid]: ...
    @overload
    @staticmethod
    def ToGUID_Secondary(data: object, destination: Guid) -> Tuple[bool, Guid]: ...
    @overload
    @staticmethod
    def ToHatch_Primary(data: object, rc: Hatch) -> Tuple[bool, Hatch]: ...
    @overload
    @staticmethod
    def ToHatch(data: object, rc: Hatch, conversion_level: GH_Conversion) -> Tuple[bool, Hatch]: ...
    @overload
    @staticmethod
    def ToHatch_Secondary(data: object, rc: Hatch) -> Tuple[bool, Hatch]: ...
    @overload
    @staticmethod
    def ToInt32_Primary(data: object, destination: int) -> Tuple[bool, int]: ...
    @overload
    @staticmethod
    def ToInt32(data: object, conversion_level: GH_Conversion) -> Tuple[bool, int]: ...
    @overload
    @staticmethod
    def ToInt32_Secondary(data: object, destination: int) -> Tuple[bool, int]: ...
    @overload
    @staticmethod
    def ToInterval_Primary(data: object, rc: Interval) -> Tuple[bool, Interval]: ...
    @overload
    @staticmethod
    def ToInterval(data: object, rc: Interval, conversion_level: GH_Conversion) -> Tuple[bool, Interval]: ...
    @overload
    @staticmethod
    def ToInterval_Secondary(data: object, rc: Interval) -> Tuple[bool, Interval]: ...
    @overload
    @staticmethod
    def ToLeader_Primary(data: object, rc: Leader) -> Tuple[bool, Leader]: ...
    @overload
    @staticmethod
    def ToLeader(data: object, rc: Leader, conversion_level: GH_Conversion) -> Tuple[bool, Leader]: ...
    @overload
    @staticmethod
    def ToLeader_Secondary(data: object, rc: Leader) -> Tuple[bool, Leader]: ...
    @overload
    @staticmethod
    def ToLight_Secondary(data: object, rc: Light) -> Tuple[bool, Light]: ...
    @overload
    @staticmethod
    def ToLine_Primary(data: object, rc: Line) -> Tuple[bool, Line]: ...
    @overload
    @staticmethod
    def ToLine(data: object, rc: Line, conversion_level: GH_Conversion) -> Tuple[bool, Line]: ...
    @overload
    @staticmethod
    def ToLine_Secondary(data: object, rc: Line) -> Tuple[bool, Line]: ...
    @overload
    @staticmethod
    def ToMatrix_Primary(data: object, rc: Matrix) -> Tuple[bool, Matrix]: ...
    @overload
    @staticmethod
    def ToMatrix(data: object, rc: Matrix, conversion_level: GH_Conversion) -> Tuple[bool, Matrix]: ...
    @overload
    @staticmethod
    def ToMatrix_Secondary(data: object, rc: Matrix) -> Tuple[bool, Matrix]: ...
    @overload
    @staticmethod
    def ToMesh_Primary(data: object, rc: Mesh) -> Tuple[bool, Mesh]: ...
    @overload
    @staticmethod
    def ToMesh(data: object, rc: Mesh, conversion_level: GH_Conversion) -> Tuple[bool, Mesh]: ...
    @overload
    @staticmethod
    def ToMesh_Secondary(data: object, rc: Mesh) -> Tuple[bool, Mesh]: ...
    @overload
    @staticmethod
    def ToNextPowerOfTen(num: float) -> float: ...
    @overload
    @staticmethod
    def ToPlane_Primary(data: object, rc: Plane) -> Tuple[bool, Plane]: ...
    @overload
    @staticmethod
    def ToPlane(data: object, rc: Plane, conversion_level: GH_Conversion) -> Tuple[bool, Plane]: ...
    @overload
    @staticmethod
    def ToPlane_Secondary(data: object, rc: Plane) -> Tuple[bool, Plane]: ...
    @overload
    @staticmethod
    def ToPlural(singular: str) -> str: ...
    @overload
    @staticmethod
    def ToPoint(in_: PointF) -> Point: ...
    @overload
    @staticmethod
    def ToPoint3d_Primary(data: object, rc: Point3d) -> Tuple[bool, Point3d]: ...
    @overload
    @staticmethod
    def ToPoint3d(data: object, rc: Point3d, conversion_level: GH_Conversion) -> Tuple[bool, Point3d]: ...
    @overload
    @staticmethod
    def ToPoint3d_Secondary(data: object, rc: Point3d) -> Tuple[bool, Point3d]: ...
    @overload
    @staticmethod
    def ToPointCloud_Primary(data: object, rc: PointCloud) -> Tuple[bool, PointCloud]: ...
    @overload
    @staticmethod
    def ToPointCloud(data: object, rc: PointCloud, conversion_level: GH_Conversion) -> Tuple[bool, PointCloud]: ...
    @overload
    @staticmethod
    def ToPointCloud_Secondary(data: object, rc: PointCloud) -> Tuple[bool, PointCloud]: ...
    @overload
    @staticmethod
    def ToPointF(in_: Point3d) -> PointF: ...
    @overload
    @staticmethod
    def ToPrevPowerOfTen(num: float) -> float: ...
    @overload
    @staticmethod
    def ToRectangle(in_: RectangleF) -> Rectangle: ...
    @overload
    @staticmethod
    def ToRectangle3d_Primary(data: object, rc: Rectangle3d) -> Tuple[bool, Rectangle3d]: ...
    @overload
    @staticmethod
    def ToRectangle3d(data: object, rc: Rectangle3d, conversion_level: GH_Conversion) -> Tuple[bool, Rectangle3d]: ...
    @overload
    @staticmethod
    def ToRectangle3d_Secondary(data: object, rc: Rectangle3d) -> Tuple[bool, Rectangle3d]: ...
    @overload
    @staticmethod
    def ToSafeRhinoCommonObject(data: object) -> object: ...
    @overload
    @staticmethod
    def ToSHA_Hash(data: Iterable[int]) -> Guid: ...
    @overload
    @staticmethod
    def ToSHA_Hash(data: Stream) -> Guid: ...
    @overload
    @staticmethod
    def ToSize(in_: SizeF) -> Size: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def ToString_Primary(data: object, destination: str) -> Tuple[bool, str]: ...
    @overload
    @staticmethod
    def ToString(data: object, conversion_level: GH_Conversion) -> Tuple[bool, str]: ...
    @overload
    @staticmethod
    def ToString_Secondary(data: object, destination: str) -> Tuple[bool, str]: ...
    @overload
    @staticmethod
    def ToSubD_Primary(data: object, rc: SubD) -> Tuple[bool, SubD]: ...
    @overload
    @staticmethod
    def ToSubD(data: object, rc: SubD, conversion_level: GH_Conversion) -> Tuple[bool, SubD]: ...
    @overload
    @staticmethod
    def ToSubD_Secondary(data: object, rc: SubD) -> Tuple[bool, SubD]: ...
    @overload
    @staticmethod
    def ToSurface_Primary(data: object, rc: Surface) -> Tuple[bool, Surface]: ...
    @overload
    @staticmethod
    def ToSurface(data: object, rc: Surface, conversion_level: GH_Conversion) -> Tuple[bool, Surface]: ...
    @overload
    @staticmethod
    def ToSurface_Secondary(data: object, rc: Surface) -> Tuple[bool, Surface]: ...
    @overload
    @staticmethod
    def ToTextDot_Primary(data: object, rc: TextDot) -> Tuple[bool, TextDot]: ...
    @overload
    @staticmethod
    def ToTextDot(data: object, rc: TextDot, conversion_level: GH_Conversion) -> Tuple[bool, TextDot]: ...
    @overload
    @staticmethod
    def ToTextDot_Secondary(data: object, rc: TextDot) -> Tuple[bool, TextDot]: ...
    @overload
    @staticmethod
    def ToTextEntity_Primary(data: object, rc: TextEntity) -> Tuple[bool, TextEntity]: ...
    @overload
    @staticmethod
    def ToTextEntity(data: object, rc: TextEntity, conversion_level: GH_Conversion) -> Tuple[bool, TextEntity]: ...
    @overload
    @staticmethod
    def ToTextEntity_Secondary(data: object, rc: TextEntity) -> Tuple[bool, TextEntity]: ...
    @overload
    @staticmethod
    def ToUVInterval_Primary(data: object, rc: UVInterval) -> Tuple[bool, UVInterval]: ...
    @overload
    @staticmethod
    def ToUVInterval(data: object, rc: UVInterval, conversion_level: GH_Conversion) -> Tuple[bool, UVInterval]: ...
    @overload
    @staticmethod
    def ToUVInterval_Secondary(data: object, rc: UVInterval) -> Tuple[bool, UVInterval]: ...
    @overload
    @staticmethod
    def ToVariableName(compound: str) -> str: ...
    @overload
    @staticmethod
    def ToVariant(value: object) -> GH_Variant: ...
    @overload
    @staticmethod
    def ToVector3d_Primary(data: object, rc: Vector3d) -> Tuple[bool, Vector3d]: ...
    @overload
    @staticmethod
    def ToVector3d(data: object, rc: Vector3d, conversion_level: GH_Conversion) -> Tuple[bool, Vector3d]: ...
    @overload
    @staticmethod
    def ToVector3d_Secondary(data: object, rc: Vector3d) -> Tuple[bool, Vector3d]: ...


from .Generic import SortedDictionary
class GH_CustomEventServer:
    @overload
    def __init__(self, consumer: IGH_EventConsumer): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def GuidTable(self) -> SortedDictionary: ...
    @property
    def GuidTableCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_DataComparison(Enum):
    ShortestList = 0
    LongestList = 1
    CrossReference = 2


class GH_DataMapping(Enum):
    # None = 0
    Flatten = 1
    Graft = 2


class GH_DebugDescriptionWriter:
    @overload
    def __init__(self): ...
    @overload
    def CloseBlock(self) -> None: ...
    @overload
    def CreateBlock(self, name: str) -> None: ...
    @overload
    def CreateLog(self) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WriteLine(self) -> None: ...
    @overload
    def WriteLine(self, line: str) -> None: ...
    @overload
    def WriteLine(self, line: str, args: Iterable[object]) -> None: ...
    @overload
    def WriteLogToFile(self, path: str) -> bool: ...


class GH_DisplayExpiredEventArgs:
    @overload
    def __init__(self, eForceRedraw: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ForceRedraw(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_DocContextEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Context(self) -> GH_DocumentContext: ...
    @property
    def Document(self) -> GH_Document: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_DocEnabledEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Enabled(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_DocFilePathEventArgs:
    @overload
    def __init__(self, document: GH_Document, oldPath: str, newPath: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def NewFilePath(self) -> str: ...
    @property
    def OldFilePath(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_DocModifiedEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Modified(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from .ObjectModel import ReadOnlyCollection
class GH_DocObjectEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> MutableSequence[IGH_Attributes]: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Object(self) -> Sequence[IGH_DocumentObject]: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> ReadOnlyCollection: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_DocSettingsEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Kind(self) -> GH_DocumentSettings: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from .Alignment import GH_Align
from .Alignment import GH_Distribute
from System import TimeSpan
from System import Guid
from .Undo import GH_UndoRecord
from Rhino import RhinoDoc
from .RemotePanel import RcpLayout
from .Generic import SortedDictionary
from .Expressions import GH_Variant
from .Expressions import GH_ExpressionParser
from .Undo import GH_UndoServer
from .Generic import IList
from .Generic import SortedList
from .Generic import HashSet
class GH_Document:
    @overload
    def __init__(self): ...
    IgnoredUnknowns: HashSet
    ScheduleInactive: int
    ScheduleRecursive: int
    @overload
    def ActiveObjects(self) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def add_ContextChanged(self, obj: ContextChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DefaultPreviewColourChanged(obj: DefaultPreviewColourChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_DefaultSelectedPreviewColourChanged(obj: DefaultSelectedPreviewColourChangedEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, obj: EnabledChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_EnableSolutionsChanged(obj: EnableSolutionsChangedEventHandler) -> None: ...
    @overload
    def add_FilePathChanged(self, obj: FilePathChangedEventHandler) -> None: ...
    @overload
    def add_ModifiedChanged(self, obj: ModifiedChangedEventHandler) -> None: ...
    @overload
    def add_ObjectsAdded(self, obj: ObjectsAddedEventHandler) -> None: ...
    @overload
    def add_ObjectsDeleted(self, obj: ObjectsDeletedEventHandler) -> None: ...
    @overload
    def add_SettingsChanged(self, obj: SettingsChangedEventHandler) -> None: ...
    @overload
    def add_SolutionEnd(self, obj: SolutionEndEventHandler) -> None: ...
    @overload
    def add_SolutionStart(self, obj: SolutionStartEventHandler) -> None: ...
    @overload
    def add_UndoStateChanged(self, obj: UndoStateChangedEventHandler) -> None: ...
    @overload
    def AddObject(self, docObject: IGH_DocumentObject, update: bool, index: int) -> bool: ...
    @overload
    def AlignObjects(self, align: GH_Align, distribute: GH_Distribute) -> None: ...
    @overload
    def AlignObjects(self, align: GH_Align, distribute: GH_Distribute, objs: MutableSequence[IGH_DocumentObject]) -> None: ...
    @overload
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    @overload
    def ArrangeObject(self, obj: IGH_DocumentObject, motion: GH_Arrange) -> bool: ...
    @overload
    def ArrangeObjects(self, objs: Iterable[IGH_DocumentObject], motion: GH_Arrange) -> bool: ...
    @overload
    def AssociateWithRhinoDocument(self) -> None: ...
    @overload
    def AutoLayoutComponents(self, limitToSelection: bool) -> None: ...
    @overload
    def AutoSave(self, trigger: GH_AutoSaveTrigger) -> bool: ...
    @overload
    def AutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> bool: ...
    @overload
    @staticmethod
    def AutoSaveFileName(filename: str) -> str: ...
    @overload
    def BoundingBox(self, limitToSelection: bool) -> RectangleF: ...
    @overload
    def BringSelectionToTop(self) -> None: ...
    @overload
    def ClearIgnoreList(self) -> None: ...
    @overload
    def ClearReferenceTable(self) -> None: ...
    @overload
    def CloseAllSubsidiaries(self) -> int: ...
    @overload
    def ClusterInputHooks(self) -> Iterable[GH_ClusterInputHook]: ...
    @overload
    def ClusterInstanceCount(self, id: Guid) -> int: ...
    @overload
    def ClusterOutputHooks(self) -> Iterable[GH_ClusterOutputHook]: ...
    @overload
    def CompareTo(self, other: GH_Document) -> int: ...
    @overload
    def ConstructDocumentTree(self) -> GH_DocumentTree: ...
    @overload
    def ContainsClusterHooks(self) -> bool: ...
    @overload
    def ConvertFullNamesToNickNames(self) -> None: ...
    @overload
    def ConvertNickNamesToFullNames(self) -> None: ...
    @overload
    def CreateAutomaticClusterHooks(self) -> None: ...
    @overload
    def CreateConnectivityDiagram(self) -> GH_ConnectivityDiagram: ...
    @overload
    def CreateExpressionParser(self) -> GH_ExpressionParser: ...
    @overload
    def DefineConstant(self, name: str, value: GH_Variant) -> None: ...
    @overload
    def DeselectAll(self) -> None: ...
    @overload
    def DestroyAttributeCache(self) -> None: ...
    @overload
    def DestroyAutoSaveFiles(self) -> None: ...
    @overload
    def DestroyObjectTable(self) -> None: ...
    @overload
    def DestroyPreviewCaches(self) -> None: ...
    @overload
    def DestroyPreviewMeshes(self) -> None: ...
    @overload
    def DestroyProxySources(self) -> None: ...
    @overload
    def DisabledObjects(self) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    @staticmethod
    def DuplicateDocument(doc: GH_Document) -> GH_Document: ...
    @overload
    def EnabledObjects(self) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExpandSelection(self, Upstream: bool, Downstream: bool, GrowSelection: bool) -> None: ...
    @overload
    def ExpirePreview(self, redraw: bool) -> None: ...
    @overload
    def ExpireSolution(self) -> None: ...
    @overload
    @staticmethod
    def FilterActive(in_: MutableSequence[IGH_DocumentObject]) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    @staticmethod
    def FilterDisabled(in_: MutableSequence[IGH_DocumentObject]) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    @staticmethod
    def FilterEnabled(in_: MutableSequence[IGH_DocumentObject]) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    @staticmethod
    def FilterInactive(in_: MutableSequence[IGH_DocumentObject]) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def FilterObjects(self, selectedObjects: GH_Filter, enabledObjects: GH_Filter, activeObjects: GH_Filter) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    @staticmethod
    def FilterObjects(in_: MutableSequence[IGH_DocumentObject], bSelectedObjects: GH_Filter, bEnabledObjects: GH_Filter, bActiveObjects: GH_Filter) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    @staticmethod
    def FilterSelected(in_: MutableSequence[IGH_DocumentObject]) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    @staticmethod
    def FilterUnselected(in_: MutableSequence[IGH_DocumentObject]) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    def FindAllDownstreamObjects(self, from_: MutableSequence[IGH_ActiveObject]) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def FindAllDownstreamObjects(self, from_: IGH_ActiveObject) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def FindAllDownstreamObjects(self, from_: MutableSequence[IGH_ActiveObject], filter: GH_ActiveObjectFilter) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def FindAllDownstreamObjects(self, from_: IGH_ActiveObject, filter: GH_ActiveObjectFilter) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def FindAttribute(self, id: Guid) -> IGH_Attributes: ...
    @overload
    def FindAttribute(self, pt: PointF, topLevelOnly: bool) -> IGH_Attributes: ...
    @overload
    def FindAttributeByGrip(self, pt: PointF, bLimitToOutside: bool, SearchRadius: int) -> IGH_Attributes: ...
    @overload
    def FindAttributeByGrip(self, pt: PointF, bLimitToOutside: bool, bIncludeInputs: bool, bIncludeOutputs: bool, SearchRadius: int) -> IGH_Attributes: ...
    @overload
    def FindClusters(self, filepath: str) -> MutableSequence[GH_Cluster]: ...
    @overload
    def FindClusters(self, id: Guid) -> MutableSequence[GH_Cluster]: ...
    @overload
    def FindComponent(self, id: Guid) -> IGH_Component: ...
    @overload
    def FindComponent(self, pt: Point) -> IGH_Component: ...
    @overload
    def FindFloatingParameter(self, pt: Point) -> IGH_Param: ...
    @overload
    def FindInputParameter(self, pt: Point) -> IGH_Param: ...
    @overload
    def FindObject(self, id: Guid, topLevelOnly: bool) -> T: ...
    @overload
    def FindObject(self, pt: PointF, radius: float) -> IGH_DocumentObject: ...
    @overload
    def FindObject(self, id: Guid, topLevelOnly: bool) -> IGH_DocumentObject: ...
    @overload
    def FindObjects(self, keys: MutableSequence[str], maxCount: int) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    def FindOutputParameter(self, pt: Point) -> IGH_Param: ...
    @overload
    def FindParameter(self, id: Guid) -> IGH_Param: ...
    @overload
    def FindWireAt(self, point: PointF, radius: float, source: IGH_Param, target: IGH_Param) -> Tuple[bool, IGH_Param, IGH_Param]: ...
    @overload
    def ForcePreview(self, previewOn: bool) -> None: ...
    @property
    def AbortRequested(self) -> bool: ...
    @property
    def ActiveDoc(self) -> bool: ...
    @property
    def AttributeCount(self) -> int: ...
    @property
    def Attributes(self) -> Iterable[IGH_Attributes]: ...
    @property
    def Author(self) -> IGH_Author: ...
    @property
    def ConstantServer(self) -> SortedDictionary: ...
    @property
    def ContainsCustomPreviewObjects(self) -> bool: ...
    @property
    def ContainsCustomRenderObjects(self) -> bool: ...
    @property
    def Context(self) -> GH_DocumentContext: ...
    @property
    def CustomRenderObjects(self) -> Iterable[GH_CustomPreviewComponent]: ...
    @property
    @classmethod
    def DefaultPreviewColour(cls) -> Color: ...
    @property
    @classmethod
    def DefaultSelectedPreviewColour(cls) -> Color: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def DocumentID(self) -> Guid: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    @classmethod
    def EnableSolutions(cls) -> bool: ...
    @property
    def EventServer(self) -> GH_DocumentEventServer: ...
    @property
    def FileNameProxy(self) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def IgnoredCount(self) -> int: ...
    @property
    def IsFilePathDefined(self) -> bool: ...
    @property
    def IsModified(self) -> bool: ...
    @property
    def ModifiedSubsidiaries(self) -> int: ...
    @property
    def Nested(self) -> bool: ...
    @property
    def ObjectCount(self) -> int: ...
    @property
    def Objects(self) -> Iterable[IGH_DocumentObject]: ...
    @property
    def ObjectSpan(self) -> TimeSpan: ...
    @property
    def Owner(self) -> IGH_DocumentOwner: ...
    @property
    def PreviewBoundary(self) -> GH_PreviewBoundary: ...
    @property
    def PreviewBoundingBox(self) -> BoundingBox: ...
    @property
    def PreviewColour(self) -> Color: ...
    @property
    def PreviewColourSelected(self) -> Color: ...
    @property
    def PreviewCustomMeshParameters(self) -> MeshingParameters: ...
    @property
    def PreviewFilter(self) -> GH_PreviewFilter: ...
    @property
    def PreviewMeshType(self) -> GH_PreviewMesh: ...
    @property
    def PreviewMode(self) -> GH_PreviewMode: ...
    @property
    def Profiler(self) -> GH_ProfilerMode: ...
    @property
    def Properties(self) -> GH_DocumentProperties: ...
    @property
    def RaiseEvents(self) -> bool: ...
    @property
    def RemotePanelLayout(self) -> RcpLayout: ...
    @property
    def RhinoDocument(self) -> RhinoDoc: ...
    @property
    def RuntimeID(self) -> int: ...
    @property
    def ScheduleDelay(self) -> int: ...
    @property
    def SelectedCount(self) -> int: ...
    @property
    def SelectionTopology(self) -> GH_SelectionTopology: ...
    @property
    def SolutionDepth(self) -> int: ...
    @property
    def SolutionHistory(self) -> MutableSequence[GH_SolutionSpan]: ...
    @property
    def SolutionSpan(self) -> TimeSpan: ...
    @property
    def SolutionState(self) -> GH_ProcessStep: ...
    @property
    def StateServer(self) -> GH_StateServer: ...
    @property
    def Thumbnail(self) -> Bitmap: ...
    @property
    def UndoServer(self) -> GH_UndoServer: ...
    @property
    def UndoUtil(self) -> GH_UndoUtil: ...
    @property
    def ValueTable(self) -> GH_SettingsServer: ...
    @overload
    def GetAllInstanceIDs(self, topLevelOnly: bool) -> SortedList: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InactiveObjects(self) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def InvertSelection(self) -> None: ...
    @overload
    @staticmethod
    def IsEscapeKeyDown() -> bool: ...
    @overload
    def IsRenderMeshPipelineViewport(self, pipeline: DisplayPipeline) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document, resolveProxies: bool) -> bool: ...
    @overload
    def MergeDocument(self, other: GH_Document, resolveProxies: bool, removeProxies: bool) -> bool: ...
    @overload
    def Modified(self) -> None: ...
    @overload
    def MutateAllIds(self) -> None: ...
    @overload
    def NewSolution(self, expireAllObjects: bool) -> None: ...
    @overload
    def NewSolution(self, expireAllObjects: bool, mode: GH_SolutionMode) -> None: ...
    @overload
    @staticmethod
    def NonBlankFilter(iObj: IGH_ActiveObject) -> bool: ...
    @overload
    @staticmethod
    def NullFilter(iObj: IGH_ActiveObject) -> bool: ...
    @overload
    def OnContextChanged(self) -> None: ...
    @overload
    def OnEnabledChanged(self) -> None: ...
    @overload
    def OnFilePathChanged(self, old: str, new: str) -> None: ...
    @overload
    def OnModifiedChanged(self) -> None: ...
    @overload
    def OnObjectAdded(self, doc_object: IGH_DocumentObject) -> None: ...
    @overload
    def OnObjectDeleted(self, doc_object: IGH_DocumentObject) -> None: ...
    @overload
    def OnObjectsAdded(self, doc_objects: Iterable[IGH_DocumentObject]) -> None: ...
    @overload
    def OnObjectsDeleted(self, doc_objects: Iterable[IGH_DocumentObject]) -> None: ...
    @overload
    def OnSettingsChanged(self, kind: GH_DocumentSettings) -> None: ...
    @overload
    def OnUndoStateChanged(self, op: GH_UndoOperation, rec: GH_UndoRecord) -> None: ...
    @overload
    def PreviewCurrentMeshParameters(self) -> MeshingParameters: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def Redo(self) -> bool: ...
    @overload
    def RelevantObjectAtPoint(self, pt: PointF) -> GH_RelevantObjectData: ...
    @overload
    def RelevantObjectAtPoint(self, pt: PointF, searchFilter: GH_RelevantObjectFilter) -> GH_RelevantObjectData: ...
    @overload
    def remove_ContextChanged(self, obj: ContextChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DefaultPreviewColourChanged(obj: DefaultPreviewColourChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_DefaultSelectedPreviewColourChanged(obj: DefaultSelectedPreviewColourChangedEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, obj: EnabledChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_EnableSolutionsChanged(obj: EnableSolutionsChangedEventHandler) -> None: ...
    @overload
    def remove_FilePathChanged(self, obj: FilePathChangedEventHandler) -> None: ...
    @overload
    def remove_ModifiedChanged(self, obj: ModifiedChangedEventHandler) -> None: ...
    @overload
    def remove_ObjectsAdded(self, obj: ObjectsAddedEventHandler) -> None: ...
    @overload
    def remove_ObjectsDeleted(self, obj: ObjectsDeletedEventHandler) -> None: ...
    @overload
    def remove_SettingsChanged(self, obj: SettingsChangedEventHandler) -> None: ...
    @overload
    def remove_SolutionEnd(self, obj: SolutionEndEventHandler) -> None: ...
    @overload
    def remove_SolutionStart(self, obj: SolutionStartEventHandler) -> None: ...
    @overload
    def remove_UndoStateChanged(self, obj: UndoStateChangedEventHandler) -> None: ...
    @overload
    def RemoveObject(self, docObject: IGH_DocumentObject, update: bool) -> bool: ...
    @overload
    def RemoveObject(self, attribute: IGH_Attributes, update: bool) -> bool: ...
    @overload
    def RemoveObjects(self, objectList: Iterable[IGH_DocumentObject], update: bool) -> int: ...
    @overload
    def RemoveSelection(self, update: bool) -> None: ...
    @overload
    def RepairProxySources(self) -> bool: ...
    @overload
    def ReplaceProxySources(self) -> None: ...
    @overload
    def RequestAbortSolution(self) -> None: ...
    @overload
    def RunningAsCommand(self) -> Command: ...
    @overload
    def ScheduleSolution(self, delay: int) -> None: ...
    @overload
    def ScheduleSolution(self, delay: int, callback: GH_ScheduleDelegate) -> None: ...
    @overload
    def Select(self, obj_dat: GH_RelevantObjectData) -> GH_SelectionState: ...
    @overload
    def Select(self, obj_dat: GH_RelevantObjectData, bAdd: bool, bRemove: bool) -> GH_SelectionState: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    def SelectedObjects(self) -> MutableSequence[IGH_DocumentObject]: ...
    @ActiveDoc.setter
    def ActiveDoc(self, Value: bool) -> None: ...
    @Context.setter
    def Context(self, Value: GH_DocumentContext) -> None: ...
    @DefaultPreviewColour.setter
    @classmethod
    def DefaultPreviewColour(clsValue: Color) -> None: ...
    @DefaultSelectedPreviewColour.setter
    @classmethod
    def DefaultSelectedPreviewColour(clsValue: Color) -> None: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    @EnableSolutions.setter
    @classmethod
    def EnableSolutions(clsValue: bool) -> None: ...
    @FilePath.setter
    def FilePath(self, Value: str) -> None: ...
    @IsModified.setter
    def IsModified(self, Value: bool) -> None: ...
    @Nested.setter
    def Nested(self, Value: bool) -> None: ...
    @Owner.setter
    def Owner(self, Value: IGH_DocumentOwner) -> None: ...
    @PreviewBoundary.setter
    def PreviewBoundary(self, value: GH_PreviewBoundary) -> None: ...
    @PreviewColour.setter
    def PreviewColour(self, Value: Color) -> None: ...
    @PreviewColourSelected.setter
    def PreviewColourSelected(self, Value: Color) -> None: ...
    @PreviewCustomMeshParameters.setter
    def PreviewCustomMeshParameters(self, Value: MeshingParameters) -> None: ...
    @PreviewFilter.setter
    def PreviewFilter(self, Value: GH_PreviewFilter) -> None: ...
    @PreviewMeshType.setter
    def PreviewMeshType(self, Value: GH_PreviewMesh) -> None: ...
    @PreviewMode.setter
    def PreviewMode(self, Value: GH_PreviewMode) -> None: ...
    @Profiler.setter
    def Profiler(self, Value: GH_ProfilerMode) -> None: ...
    @RaiseEvents.setter
    def RaiseEvents(self, Value: bool) -> None: ...
    @Thumbnail.setter
    def Thumbnail(self, Value: Bitmap) -> None: ...
    @overload
    def SetEnabledFlags(self, bEnable: bool) -> None: ...
    @overload
    def SetEnabledFlags(self, objects: MutableSequence[IGH_DocumentObject], bEnable: bool) -> None: ...
    @overload
    def SetPreviewFlags(self, bPreview: bool) -> None: ...
    @overload
    def SetPreviewFlags(self, objects: MutableSequence[IGH_DocumentObject], bPreview: bool) -> None: ...
    @overload
    def SetStatusBarEventHelper(self, message: GH_RuntimeMessage) -> None: ...
    @overload
    def ShowPreviewSettings(self) -> None: ...
    @overload
    def SolutionProgress(self) -> Tuple[int, int, int]: ...
    @overload
    def ToggleEnabledFlags(self) -> None: ...
    @overload
    def ToggleEnabledFlags(self, objects: MutableSequence[IGH_DocumentObject]) -> None: ...
    @overload
    def TogglePreviewFlags(self) -> None: ...
    @overload
    def TogglePreviewFlags(self, objects: MutableSequence[IGH_DocumentObject]) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TranslateObjects(self, trXForm: Size, bLimitToSelection: bool) -> None: ...
    @overload
    def Undo(self) -> bool: ...
    @overload
    def UnselectedObjects(self) -> MutableSequence[IGH_DocumentObject]: ...
    @overload
    def UpdateAllSubsidiaries(self) -> int: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    def Write(self, writer: GH_IWriter, objList: Iterable[IGH_DocumentObject]) -> bool: ...


class GH_DocumentAssociations:
    @overload
    def __init__(self): ...
    @overload
    def Associate(self, rhinoFile: str, grasshopperFile: str) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetGrasshopperAssociations(self, rhinoFile: str) -> MutableSequence[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRhinoAssociations(self, grasshopperFile: str) -> MutableSequence[str]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_DocumentContext(Enum):
    Unknown = 0
    # None = 1
    Open = 2
    Close = 3
    Loaded = 4
    Unloaded = 5
    Lock = 6
    Unlock = 7


class GH_DocumentEventServer:
    @overload
    def __init__(self, document: GH_Document): ...
    @overload
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    @overload
    def ClearGuidTable(self) -> None: ...
    @overload
    def CreateGuidTable(self) -> None: ...
    @overload
    def EnsureGuidTable(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def GuidTableRefCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


from .Forms import DialogResult
from System import DateTime
class GH_DocumentIO:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, internal_doc: GH_Document): ...
    @overload
    def ClearClipboard(self, clipboard: GH_ClipboardType) -> None: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType) -> bool: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType, limitToSelection: bool) -> bool: ...
    @overload
    def Copy(self, clipboard: GH_ClipboardType, guids: Iterable[Guid]) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def DisableOverwriteProtection(cls) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def IsDocument(self) -> bool: ...
    @property
    def LocalClipboardContent(self) -> str: ...
    @overload
    @staticmethod
    def GetDocumentIcon(filePath: str, size: Size) -> Bitmap: ...
    @overload
    @staticmethod
    def GetDocumentThumbnail(filePath: str) -> Bitmap: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Open(self) -> bool: ...
    @overload
    def Open(self, filePath: str) -> bool: ...
    @overload
    def OpenDocumentDialog(self, path: str, title: str) -> str: ...
    @overload
    def Paste(self, clipboard: GH_ClipboardType) -> bool: ...
    @overload
    def Save(self) -> bool: ...
    @overload
    def SaveAs(self) -> bool: ...
    @overload
    def SaveAsCopyDocumentDialog(self, path: str) -> str: ...
    @overload
    def SaveAsDocumentDialog(self, path: str) -> str: ...
    @overload
    def SaveBackup(self) -> bool: ...
    @overload
    def SaveDocumentDialog(self, path: str, title: str) -> str: ...
    @overload
    def SaveQuiet(self, path: str) -> bool: ...
    @DisableOverwriteProtection.setter
    @classmethod
    def DisableOverwriteProtection(clsAutoPropertyValue: bool) -> None: ...
    @Document.setter
    def Document(self, AutoPropertyValue: GH_Document) -> None: ...
    @LocalClipboardContent.setter
    def LocalClipboardContent(self, Value: str) -> None: ...
    @overload
    @staticmethod
    def ShowOverwriteDialog(filename: str) -> int: ...
    @overload
    @staticmethod
    def ShowOverwriteDialog(filename: str, lastSave: DateTime, fileOnDisk: DateTime) -> int: ...
    @overload
    @staticmethod
    def SubsidiaryDocumentSavePrompt(document: GH_Document) -> DialogResult: ...
    @overload
    @staticmethod
    def SubsidiaryDocumentSavePrompt(documentName: str, modified: bool, modifiedSubsidiaries: int) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from .Undo import IGH_UndoAction
from .Undo import GH_UndoRecord
from .Forms import ToolStripDropDown
from .Forms import ToolStrip
from .Forms import ToolStripSeparator
from System import EventHandler
from .Forms import ToolStripMenuItem
from .Forms import ToolStripItem
from .Forms import ToolStripTextBox
from System import Decimal
from .Base import GH_DigitScrollerBase
from .Forms import Control
class GH_DocumentObject(GH_InstanceDescription):
    @overload
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    @overload
    def add_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    @overload
    def add_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    @overload
    def add_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    @overload
    def add_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    @overload
    def add_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    @overload
    def AddedToDocument(self, document: GH_Document) -> None: ...
    @overload
    def AppendMenuItems(self, menu: ToolStripDropDown) -> bool: ...
    @overload
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    @overload
    def CreateAttributes(self) -> None: ...
    @overload
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExpirePreview(self, redraw: bool) -> None: ...
    @overload
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Category(self) -> str: ...
    @property
    def ComponentGuid(self) -> Guid: ...
    @property
    def Description(self) -> str: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Bitmap: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsolateObject(self) -> None: ...
    @overload
    @staticmethod
    def Menu_AppendColourPicker(menu: ToolStripDropDown, colour: Color, colourChanged: ColourEventHandler) -> GH_ColourPicker: ...
    @overload
    @staticmethod
    def Menu_AppendCustomItem(menu: ToolStripDropDown, control: Control) -> bool: ...
    @overload
    @staticmethod
    def Menu_AppendCustomItem(menu: ToolStripDropDown, control: Control, keydown: KeyDownEventHandler) -> bool: ...
    @overload
    @staticmethod
    def Menu_AppendCustomItem(menu: ToolStripDropDown, control: Control, keydown: KeyDownEventHandler, enabled: bool, width: int, lockOnFocus: bool) -> bool: ...
    @overload
    @staticmethod
    def Menu_AppendDigitScrollerItem(menu: ToolStripDropDown, min: Decimal, max: Decimal, value: Decimal, decimals: int) -> GH_DigitScrollerBase: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: ToolStrip, text: str) -> ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler) -> ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, enabled: bool) -> ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, icon: Image) -> ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, enabled: bool, checked: bool) -> ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, icon: Image, tag: object) -> ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendItem(menu: ToolStrip, text: str, click: EventHandler, icon: Image, enabled: bool, checked: bool) -> ToolStripMenuItem: ...
    @overload
    @staticmethod
    def Menu_AppendSeparator(menu: ToolStrip) -> ToolStripSeparator: ...
    @overload
    @staticmethod
    def Menu_AppendTextItem(menu: ToolStripDropDown, text: str, keydown: KeyDownEventHandler, textchanged: TextChangedEventHandler, lockOnFocus: bool) -> ToolStripTextBox: ...
    @overload
    @staticmethod
    def Menu_AppendTextItem(menu: ToolStripDropDown, text: str, keydown: KeyDownEventHandler, textchanged: TextChangedEventHandler, enabled: bool, width: int, lockOnFocus: bool) -> ToolStripTextBox: ...
    @overload
    @staticmethod
    def Menu_MoveItem(item: ToolStripItem, precedingItems: Iterable[str]) -> bool: ...
    @overload
    @staticmethod
    def Menu_MoveItem(item: ToolStripItem, insertBelow: bool, targets: Iterable[str]) -> bool: ...
    @overload
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    @overload
    def OnAttributesChanged(self) -> None: ...
    @overload
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: object) -> None: ...
    @overload
    def OnPingDocument(self) -> GH_Document: ...
    @overload
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    @overload
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ReadFull(self, reader: GH_IReader) -> bool: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> Guid: ...
    @overload
    def RecordUndoEvent(self, record: GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: IGH_UndoAction) -> Guid: ...
    @overload
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    @overload
    def remove_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    @overload
    def remove_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    @overload
    def remove_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    @overload
    def remove_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    @overload
    def remove_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    @overload
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @Attributes.setter
    def Attributes(self, Value: IGH_Attributes) -> None: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, Value: GH_IconDisplayMode) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    @overload
    def SetIconOverride(self, customIcon: Bitmap) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TriggerAutoSave(self) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, id: Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> None: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    def WriteFull(self, writer: GH_IWriter) -> bool: ...


from System import DateTime
class GH_DocumentProperties:
    @overload
    def __init__(self): ...
    @overload
    def DisplayProperties(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CopyRight(self) -> str: ...
    @property
    def Date(self) -> DateTime: ...
    @property
    def DateTag(self) -> DateTime: ...
    @property
    def Description(self) -> str: ...
    @property
    def IconImageData(self) -> str: ...
    @property
    def KeepOpen(self) -> bool: ...
    @property
    def ProjectFileName(self) -> str: ...
    @property
    def Revisions(self) -> MutableSequence[GH_Revision]: ...
    @property
    def ViewList(self) -> MutableSequence[GH_NamedView]: ...
    @property
    def ViewTarget(self) -> Point: ...
    @property
    def ZoomFactor(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IconBitmap(self, size: Size) -> Bitmap: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @CopyRight.setter
    def CopyRight(self, Value: str) -> None: ...
    @DateTag.setter
    def DateTag(self, Value: DateTime) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @IconImageData.setter
    def IconImageData(self, Value: str) -> None: ...
    @KeepOpen.setter
    def KeepOpen(self, Value: bool) -> None: ...
    @ProjectFileName.setter
    def ProjectFileName(self, Value: str) -> None: ...
    @ViewTarget.setter
    def ViewTarget(self, Value: Point) -> None: ...
    @ZoomFactor.setter
    def ZoomFactor(self, Value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_DocumentRank(Enum):
    Unset = 0
    TopLevel = 1
    Subsidiary = 2


class GH_DocumentServer:
    @overload
    def __init__(self): ...
    def __iter__(self) -> Iterator[GH_Document]: ...
    @overload
    def add_DocumentAdded(self, obj: DocumentAddedEventHandler) -> None: ...
    @overload
    def add_DocumentRemoved(self, obj: DocumentRemovedEventHandler) -> None: ...
    @overload
    def AddDocument(self, document: GH_Document) -> None: ...
    @overload
    def AddDocument(self, document: GH_Document) -> Tuple[bool]: ...
    @overload
    def AddDocument(self, filepath: str, makeActive: bool) -> GH_Document: ...
    @overload
    def AddNewDocument(self) -> GH_Document: ...
    @overload
    def Contains(self, doc: GH_Document) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> Sequence[GH_Document]: ...
    @property
    def DocumentCount(self) -> int: ...
    @property
    def DocumentNames(self) -> MutableSequence[str]: ...
    @property
    def ModifiedDocumentCount(self) -> int: ...
    @overload
    def GetEnumerator(self) -> Iterator[Any]: ...
    @overload
    def GetEnumerator_Generic(self) -> Iterator[GH_Document]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, doc: GH_Document) -> int: ...
    @overload
    def IndexOf(self, filepath: str) -> int: ...
    @overload
    def IndexOfAutoSave(self, autoSavePath: str) -> int: ...
    @overload
    def NextAvailableDocument(self) -> GH_Document: ...
    @overload
    def PromoteDocument(self, document: GH_Document) -> None: ...
    @overload
    def remove_DocumentAdded(self, obj: DocumentAddedEventHandler) -> None: ...
    @overload
    def remove_DocumentRemoved(self, obj: DocumentRemovedEventHandler) -> None: ...
    @overload
    def RemoveAllDocuments(self) -> None: ...
    @overload
    def RemoveDocument(self, document: GH_Document) -> None: ...
    @overload
    def SafeRemoveDocument(self, document: GH_Document) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class GH_DocumentSettings(Enum):
    Preview = 0
    Properties = 1


class GH_DocumentTree:
    @overload
    def __init__(self, root: GH_Document): ...
    @overload
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def FlatCollection(self) -> Iterable[GH_Document]: ...
    @property
    def Root(self) -> GH_DocumentTreeNode: ...
    @property
    def RootDocument(self) -> GH_Document: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_DocumentTreeNode:
    @overload
    def __init__(self, node: GH_Document): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def SubNodes(self) -> MutableSequence[GH_DocumentTreeNode]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from .Undo import GH_UndoRecord
class GH_DocUndoEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Operation(self) -> GH_UndoOperation: ...
    @property
    def Record(self) -> GH_UndoRecord: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Exposure(Enum):
    primary = 2
    secondary = 4
    tertiary = 8
    quarternary = 16
    quinary = 32
    senary = 64
    septenary = 128
    octonary = 256
    last = 256
    dropdown = 65536
    obscure = 65536
    hidden = -1


from System import Guid
class GH_ExternalFile:
    @overload
    def __init__(self, path: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def FileHash(self) -> Guid: ...
    @property
    def FileName(self) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def FileSize(self) -> int: ...
    @property
    def FileType(self) -> GH_ExternalFileType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsIdenticalTo(self, other: GH_ExternalFile) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class GH_ExternalFileType(Enum):
    Unknown = 0
    Assembly = 1
    UserObject = 2
    Cluster = 3


class GH_FileSystemEventServer:
    @overload
    @staticmethod
    def AddWatcher(owner: object, path: str, callback: FileEvent) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def AllPaths(cls) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def RemoveWatcher(owner: object) -> None: ...
    @overload
    @staticmethod
    def RemoveWatcher(owner: object, path: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import TimeSpan
from .Forms import Control
from .Forms import Form
class GH_FileWatcher:
    @overload
    @staticmethod
    def CreateDirectoryWatcher(folderPath: str, filter: str, events: GH_FileWatcherEvents, delegate: FileChangedSimple) -> GH_FileWatcher: ...
    @overload
    @staticmethod
    def CreateDirectoryWatcher(folderPath: str, filter: str, events: GH_FileWatcherEvents, delegate: FileChanged) -> GH_FileWatcher: ...
    @overload
    @staticmethod
    def CreateFileWatcher(filePath: str, events: GH_FileWatcherEvents, delegate: FileChangedSimple) -> GH_FileWatcher: ...
    @overload
    @staticmethod
    def CreateFileWatcher(filePath: str, events: GH_FileWatcherEvents, delegate: FileChanged) -> GH_FileWatcher: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Active(self) -> bool: ...
    @property
    def Buffer(self) -> TimeSpan: ...
    @property
    def InvokeOnDefaultThread(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def Path(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Active.setter
    def Active(self, Value: bool) -> None: ...
    @Buffer.setter
    def Buffer(self, Value: TimeSpan) -> None: ...
    @InvokeOnDefaultThread.setter
    def InvokeOnDefaultThread(self, Value: bool) -> None: ...
    @overload
    def SetCustomUIThread(self, target: Control) -> None: ...
    @overload
    def SetCustomUIThread(self, target: Form) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_FileWatcherEvents(Enum):
    # None = 0
    Changed = 1
    Renamed = 2
    Created = 4
    Deleted = 8
    All = 15


class GH_Filter(Enum):
    DontCare = 0
    Include = 1
    Exclude = 2


class GH_FontServer:
    @overload
    @staticmethod
    def add_ConsoleFamilyChanged(obj: ConsoleFamilyChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ScriptFamilyChanged(obj: ScriptFamilyChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_StandardFamilyChanged(obj: StandardFamilyChangedEventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FontToString(font: Font) -> str: ...
    @property
    @classmethod
    def Console(cls) -> Font: ...
    @property
    @classmethod
    def ConsoleAdjusted(cls) -> Font: ...
    @property
    @classmethod
    def ConsoleSmall(cls) -> Font: ...
    @property
    @classmethod
    def ConsoleSmallAdjusted(cls) -> Font: ...
    @property
    @classmethod
    def FamilyConsole(cls) -> FontFamily: ...
    @property
    @classmethod
    def FamilyScript(cls) -> FontFamily: ...
    @property
    @classmethod
    def FamilyStandard(cls) -> FontFamily: ...
    @property
    @classmethod
    def Large(cls) -> Font: ...
    @property
    @classmethod
    def LargeAdjusted(cls) -> Font: ...
    @property
    @classmethod
    def Script(cls) -> Font: ...
    @property
    @classmethod
    def ScriptSmall(cls) -> Font: ...
    @property
    @classmethod
    def Small(cls) -> Font: ...
    @property
    @classmethod
    def Standard(cls) -> Font: ...
    @property
    @classmethod
    def StandardAdjusted(cls) -> Font: ...
    @property
    @classmethod
    def StandardBold(cls) -> Font: ...
    @property
    @classmethod
    def StandardItalic(cls) -> Font: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def MeasureString(text: str, font: Font) -> Size: ...
    @overload
    @staticmethod
    def MeasureString(text: str, font: Font, maxwidth: float) -> Size: ...
    @overload
    @staticmethod
    def MeasureString(text: str, font: Font, iLayout: SizeF) -> Size: ...
    @overload
    @staticmethod
    def NewFont(family: FontFamily, size: float) -> Font: ...
    @overload
    @staticmethod
    def NewFont(font: Font, style: FontStyle) -> Font: ...
    @overload
    @staticmethod
    def NewFont(font: Font, size: float) -> Font: ...
    @overload
    @staticmethod
    def NewFont(family: str, size: float, style: FontStyle) -> Font: ...
    @overload
    @staticmethod
    def NewFont(family: FontFamily, size: float, style: FontStyle) -> Font: ...
    @overload
    @staticmethod
    def NewFont(font: Font, size: float, style: FontStyle) -> Font: ...
    @overload
    @staticmethod
    def remove_ConsoleFamilyChanged(obj: ConsoleFamilyChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ScriptFamilyChanged(obj: ScriptFamilyChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_StandardFamilyChanged(obj: StandardFamilyChangedEventHandler) -> None: ...
    @FamilyConsole.setter
    @classmethod
    def FamilyConsole(clsValue: FontFamily) -> None: ...
    @FamilyScript.setter
    @classmethod
    def FamilyScript(clsValue: FontFamily) -> None: ...
    @FamilyStandard.setter
    @classmethod
    def FamilyStandard(clsValue: FontFamily) -> None: ...
    @overload
    @staticmethod
    def StringToFont(text: str) -> Font: ...
    @overload
    @staticmethod
    def StringWidth(text: str, font: Font) -> int: ...
    @overload
    @staticmethod
    def StringWidth(text: Iterable[str], font: Font) -> int: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import UnitSystem
from .Forms import Keys
from .Types import Complex
from System import IFormatProvider
from .Types import GH_Boolean
from .Types import GH_Integer
from .Types import GH_Matrix
from .Types import GH_Number
from .Types import GH_ComplexNumber
from .Types import GH_Colour
from .Types import GH_Time
from System import DateTime
from .Types import GH_Interval
from .Types import GH_Interval2D
from .Types import GH_Point
from .Types import GH_Hatch
from .Types import GH_TextEntity
from .Types import GH_TextDot
from .Types import GH_Leader
from .Types import GH_Dimension
from .Types import GH_LinearDimension
from .Types import GH_RadialDimension
from .Types import GH_AngularDimension
from .Types import GH_OrdinateDimension
from .Types import GH_Centermark
from .Types import GH_InstanceReference
from .Types import GH_DetailView
from .Types import GH_Vector
from .Types import GH_Plane
from .Types import GH_Line
from .Types import GH_Circle
from .Types import GH_Arc
from .Types import GH_Curve
from .Types import GH_Surface
from .Types import GH_Brep
from .Types import GH_Extrusion
from .Types import GH_SubD
from .Types import GH_Box
from .Types import GH_Mesh
from .Types import GH_MeshFace
from .Types import GH_PointCloud
from .Types import IGH_GeometricGoo
class GH_Format:
    @overload
    @staticmethod
    def DefaultCulture() -> IFormatProvider: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FormatAngularDimension(data: GH_AngularDimension) -> str: ...
    @overload
    @staticmethod
    def FormatAnnotationValidity(val: AnnotationBase, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatArc(data: GH_Arc) -> str: ...
    @overload
    @staticmethod
    def FormatArc(data: Arc) -> str: ...
    @overload
    @staticmethod
    def FormatArcValidity(val: Arc, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatBoolean(data: bool) -> str: ...
    @overload
    @staticmethod
    def FormatBoolean(data: GH_Boolean) -> str: ...
    @overload
    @staticmethod
    def FormatBoundingBoxValidity(val: BoundingBox, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatBox(data: GH_Box) -> str: ...
    @overload
    @staticmethod
    def FormatBox(data: Box) -> str: ...
    @overload
    @staticmethod
    def FormatBoxValidity(val: Box, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatBrep(data: Brep) -> str: ...
    @overload
    @staticmethod
    def FormatBrep(data: GH_Brep) -> str: ...
    @overload
    @staticmethod
    def FormatBrepValidity(val: Brep, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatCentermark(data: GH_Centermark) -> str: ...
    @overload
    @staticmethod
    def FormatCircle(data: GH_Circle) -> str: ...
    @overload
    @staticmethod
    def FormatCircle(data: Circle) -> str: ...
    @overload
    @staticmethod
    def FormatCircleValidity(val: Circle, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatColour(data: GH_Colour) -> str: ...
    @overload
    @staticmethod
    def FormatColour(data: Color) -> str: ...
    @overload
    @staticmethod
    def FormatComplexNumber(data: GH_ComplexNumber) -> str: ...
    @overload
    @staticmethod
    def FormatComplexNumber(num: Complex) -> str: ...
    @overload
    @staticmethod
    def FormatComplexValidity(val: Complex, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatCurve(data: GH_Curve) -> str: ...
    @overload
    @staticmethod
    def FormatCurve(data: Curve, prefix: str, name: str) -> str: ...
    @overload
    @staticmethod
    def FormatCurveValidity(val: Curve, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatDate(data: GH_Time) -> str: ...
    @overload
    @staticmethod
    def FormatDate(data: DateTime) -> str: ...
    @overload
    @staticmethod
    def FormatDetailView(data: GH_DetailView) -> str: ...
    @overload
    @staticmethod
    def FormatDetailViewValidity(val: DetailView, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatDimension(data: GH_Dimension) -> str: ...
    @overload
    @staticmethod
    def FormatDouble(data: float) -> str: ...
    @overload
    @staticmethod
    def FormatDouble(data: GH_Number) -> str: ...
    @overload
    @staticmethod
    def FormatDoubleValidity(val: float, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatExtrusion(data: GH_Extrusion) -> str: ...
    @overload
    @staticmethod
    def FormatExtrusion(data: Extrusion) -> str: ...
    @overload
    @staticmethod
    def FormatExtrusionValidity(val: Extrusion, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatFilePath(path: str, maxLength: int) -> str: ...
    @overload
    @staticmethod
    def FormatFilePath(path: str, maxWidth: int, font: Font) -> str: ...
    @overload
    @staticmethod
    def FormatGeometry(data: IGH_GeometricGoo) -> str: ...
    @overload
    @staticmethod
    def FormatHatch(data: GH_Hatch) -> str: ...
    @overload
    @staticmethod
    def FormatHatchValidity(val: Hatch, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatInstanceReference(data: GH_InstanceReference) -> str: ...
    @overload
    @staticmethod
    def FormatInstanceReferenceValidity(val: InstanceReferenceGeometry, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatInteger(data: int) -> str: ...
    @overload
    @staticmethod
    def FormatInteger(data: GH_Integer) -> str: ...
    @overload
    @staticmethod
    def FormatInterval(data: Interval) -> str: ...
    @overload
    @staticmethod
    def FormatInterval(data: GH_Interval) -> str: ...
    @overload
    @staticmethod
    def FormatInterval(data: GH_Interval2D) -> str: ...
    @overload
    @staticmethod
    def FormatInterval(t0: float, t1: float) -> str: ...
    @overload
    @staticmethod
    def FormatIntervalValidity(val: Interval, identifier: str, testSingleton: bool, testDecreasing: bool) -> str: ...
    @overload
    @staticmethod
    def FormatKeys(keys: Keys) -> str: ...
    @overload
    @staticmethod
    def FormatLeader(data: GH_Leader) -> str: ...
    @overload
    @staticmethod
    def FormatLightValidity(val: Light, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatLine(data: Line) -> str: ...
    @overload
    @staticmethod
    def FormatLine(data: GH_Line) -> str: ...
    @overload
    @staticmethod
    def FormatLinearDimension(data: GH_LinearDimension) -> str: ...
    @overload
    @staticmethod
    def FormatLineValidity(val: Line, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatMatrix(data: Matrix) -> str: ...
    @overload
    @staticmethod
    def FormatMatrix(data: GH_Matrix) -> str: ...
    @overload
    @staticmethod
    def FormatMesh(data: GH_Mesh) -> str: ...
    @overload
    @staticmethod
    def FormatMesh(data: Mesh, sPrefix: str) -> str: ...
    @overload
    @staticmethod
    def FormatMeshFace(data: GH_MeshFace) -> str: ...
    @overload
    @staticmethod
    def FormatMeshFaceValidity(val: MeshFace, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatMeshValidity(val: Mesh, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatOrdinateDimension(data: GH_OrdinateDimension) -> str: ...
    @overload
    @staticmethod
    def FormatPlane(data: GH_Plane) -> str: ...
    @overload
    @staticmethod
    def FormatPlane(data: Plane) -> str: ...
    @overload
    @staticmethod
    def FormatPlaneValidity(val: Plane, identifier: str, testUnitAxes: bool) -> str: ...
    @overload
    @staticmethod
    def FormatPoint(data: GH_Point) -> str: ...
    @overload
    @staticmethod
    def FormatPoint(data: Point3d) -> str: ...
    @overload
    @staticmethod
    def FormatPointCloud(data: PointCloud) -> str: ...
    @overload
    @staticmethod
    def FormatPointCloud(data: GH_PointCloud) -> str: ...
    @overload
    @staticmethod
    def FormatPointCloud(data: PointCloud, prefix: str) -> str: ...
    @overload
    @staticmethod
    def FormatPointCloudValidity(val: PointCloud, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatPointValidity(val: Point3d, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatRadialDimension(data: GH_RadialDimension) -> str: ...
    @overload
    @staticmethod
    def FormatRectangleValidity(val: Rectangle3d, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatSingle(data: float) -> str: ...
    @overload
    @staticmethod
    def FormatSubD(data: SubD) -> str: ...
    @overload
    @staticmethod
    def FormatSubD(data: GH_SubD) -> str: ...
    @overload
    @staticmethod
    def FormatSubDValidity(val: SubD, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatSurface(data: GH_Surface) -> str: ...
    @overload
    @staticmethod
    def FormatSurface(data: Brep) -> str: ...
    @overload
    @staticmethod
    def FormatSurfaceValidity(val: Surface, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatTextDot(data: GH_TextDot) -> str: ...
    @overload
    @staticmethod
    def FormatTextDotValidity(val: TextDot, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatTextEntity(data: GH_TextEntity) -> str: ...
    @overload
    @staticmethod
    def FormatTextEntity(data: TextEntity) -> str: ...
    @overload
    @staticmethod
    def FormatTextEntity(data: TextEntity, prefix: str) -> str: ...
    @overload
    @staticmethod
    def FormatTransformValidity(val: Transform, identifier: str) -> str: ...
    @overload
    @staticmethod
    def FormatVector(data: Vector3d) -> str: ...
    @overload
    @staticmethod
    def FormatVector(data: GH_Vector) -> str: ...
    @overload
    @staticmethod
    def FormatVectorValidity(val: Vector3d, identifier: str, testZero: bool, testUnit: bool) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def RhinoUnitName() -> str: ...
    @overload
    @staticmethod
    def RhinoUnitName(unitSystem: UnitSystem) -> str: ...
    @overload
    @staticmethod
    def RhinoUnitSymbol() -> str: ...
    @overload
    @staticmethod
    def RhinoUnitSymbol(unitSystem: UnitSystem) -> str: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TreatAsCollection(obj: object) -> bool: ...


class GH_GetterResult(Enum):
    accept = 0
    success = 1
    cancel = 2


from System import Guid
class GH_GHALoadingEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def LoadingMechanism(self) -> GH_LoadingMechanism: ...
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_GHXHarvester:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def HarvestBoundingBoxes(file: str) -> MutableSequence[RectangleF]: ...
    @overload
    @staticmethod
    def HarvestBoundingBoxes(archive: GH_Archive) -> MutableSequence[RectangleF]: ...
    @overload
    @staticmethod
    def HarvestBoundingBoxes(node: GH_IReader) -> MutableSequence[RectangleF]: ...
    @overload
    @staticmethod
    def HarvestPivots(file: str) -> MutableSequence[PointF]: ...
    @overload
    @staticmethod
    def HarvestPivots(archive: GH_Archive) -> MutableSequence[PointF]: ...
    @overload
    @staticmethod
    def HarvestPivots(node: GH_IReader) -> MutableSequence[PointF]: ...
    @overload
    def ToString(self) -> str: ...


from .Graphs import IGH_Graph
from System import Guid
class GH_GraphProxy:
    @overload
    def __init__(self, nGraph: IGH_Graph, T: type): ...
    @overload
    def CompareTo(self, other: GH_GraphProxy) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def GUID(self) -> Guid: ...
    @property
    def Icon(self) -> Image: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> type: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_GuidConflictSolution(Enum):
    Unset = 0
    Replace = 1
    ReplaceAll = 2
    Skip = 3
    SkipAll = 4


from System import Guid
class GH_GuidTable:
    @overload
    def __init__(self): ...
    @overload
    def Add(self, id: Guid, obj: IGH_ActiveObject) -> None: ...
    @overload
    def AllObjects(self) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, id: Guid) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Objects(self, id: Guid) -> MutableSequence[IGH_ActiveObject]: ...
    @overload
    def ToString(self) -> str: ...


class GH_IconDisplayMode(Enum):
    application = 0
    icon = 1
    name = 2


class GH_IncrementalParamNameConstructor:
    @overload
    def __init__(self, format_mask: str, start_index: int): ...
    @overload
    def Current(self) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def FormatMask(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Next(self) -> str: ...
    @overload
    def Reset(self) -> None: ...
    @FormatMask.setter
    def FormatMask(self, Value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class GH_InstanceDescription:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: IGH_InstanceDescription): ...
    @overload
    def __init__(self, name: str, nickName: str, description: str, category: str): ...
    @overload
    def __init__(self, name: str, nickName: str, description: str, category: str, subCategory: str): ...
    @overload
    def CopyFrom(self, other: IGH_InstanceDescription) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ReadFull(self, reader: GH_IReader) -> bool: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    def WriteFull(self, writer: GH_IWriter) -> bool: ...


class GH_LibraryLicense(Enum):
    unset = 0
    expired = 1
    alpha = 2
    beta = 3
    free = 4
    opensource = 5
    trial = 6
    commercial = 7
    educational = 8
    developer = 9
    reseller = 10
    other = 11


class GH_LineParser:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ParseLine(self, line: str, action: GH_LineParserAction) -> Tuple[object, GH_LineParserAction]: ...
    @overload
    def ToString(self) -> str: ...


class GH_LineParserAction(Enum):
    Include = 0
    Ignore = 1
    Abort = 2


class GH_ListUtil:
    @overload
    @staticmethod
    def CountNonNullRefs(L: MutableSequence[T]) -> int: ...
    @overload
    @staticmethod
    def CountNullRefs(L: MutableSequence[T]) -> int: ...
    @overload
    @staticmethod
    def EnsureNonNullCount(L: MutableSequence[T], N: int) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FirstNonNullItem(L: MutableSequence[T]) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def RemoveNullRefs(L: MutableSequence[T]) -> MutableSequence[T]: ...
    @overload
    def ToString(self) -> str: ...


class GH_LoadingAttribute:
    @overload
    def __init__(self, demand: GH_LoadingDemand): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class GH_LoadingDemand(Enum):
    Default = 0
    ForceCOFF = 1
    ForceDirect = 2
    # None = -1


class GH_LoadingException:
    @overload
    def __init__(self, name: str, message: str): ...
    @overload
    def __init__(self, name: str, ex: Exception): ...
    @overload
    def __init__(self, name: str, message: str, type: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_LoadingInstruction(Enum):
    Proceed = 0
    Abort = 1


class GH_LoadingMechanism(Enum):
    COFF = 1
    Direct = 2
    Unknown = -1


from System import Guid
class GH_MarkovChain:
    @overload
    def __init__(self): ...
    @overload
    def AppendPattern(self, pattern: GH_MarkovPattern) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Description(self) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExtendHistory(self, new_id: Guid) -> None: ...
    @overload
    def FindPattern(self, id: Guid) -> GH_MarkovPattern: ...
    @overload
    def FindPattern(self, id1: Guid, id2: Guid) -> GH_MarkovPattern: ...
    @overload
    def FindPattern(self, id1: Guid, id2: Guid, id3: Guid) -> GH_MarkovPattern: ...
    @property
    def Level1(self) -> MutableSequence[GH_MarkovPattern]: ...
    @property
    def Level2(self) -> MutableSequence[GH_MarkovPattern]: ...
    @property
    def Level3(self) -> MutableSequence[GH_MarkovPattern]: ...
    @property
    def PatternCount(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ReadFromDisc(self) -> None: ...
    @overload
    def ReduceDataset(self) -> None: ...
    @overload
    def SuggestEvents(self) -> Iterable[Guid]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WriteToDisc(self) -> None: ...


from System import Guid
class GH_MarkovOutcome:
    @overload
    def __init__(self, newId: Guid): ...
    @overload
    def __init__(self, other: GH_MarkovOutcome): ...
    @overload
    def __init__(self, newId: Guid, newValence: int): ...
    @overload
    def DecreaseValence(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Id(self) -> Guid: ...
    @property
    def IsInsignificant(self) -> bool: ...
    @property
    def Valence(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IncreaseValence(self) -> None: ...
    @Valence.setter
    def Valence(self, AutoPropertyValue: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class GH_MarkovPattern:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pat: Iterable[Guid]): ...
    @overload
    def __init__(self, other: GH_MarkovPattern): ...
    @overload
    def AppendOutcome(self, id: Guid) -> None: ...
    @overload
    def AppendOutcome(self, outcome: GH_MarkovOutcome) -> None: ...
    @overload
    def CompareTo(self, other: GH_MarkovPattern) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Depth(self) -> int: ...
    @property
    def IsInsignificant(self) -> bool: ...
    @property
    def MaximumValence(self) -> int: ...
    @property
    def Outcomes(self) -> MutableSequence[GH_MarkovOutcome]: ...
    @property
    def Pattern(self) -> Iterable[Guid]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RemoveInsignificantOutcomes(self) -> None: ...
    @overload
    def Simplify(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_MatchLevel(Enum):
    # None = 0
    Exact = 1
    Start = 2
    WordExact = 4
    WordStart = 8
    Contains = 16
    AllClean = 31
    Fuzzy = 32
    All = 63


class GH_MatchWeight(Enum):
    Fuzzy = 10
    Contains = 10
    WordExact = 100
    Start = 100
    WordStart = 100
    Exact = 100


class GH_MathUtil:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def WrapInteger(X: int, upper: int) -> int: ...
    @overload
    @staticmethod
    def WrapInteger(number: int, lower: int, upper: int) -> int: ...


from .Drawing2D import WrapMode
from .Forms import Padding
class GH_MemoryBitmap:
    @overload
    def __init__(self, bitmap: Bitmap): ...
    @overload
    def __init__(self, bitmap: Bitmap, wrap: WrapMode): ...
    @overload
    def A(self, x: int, y: int) -> int: ...
    @overload
    def B(self, x: int, y: int) -> int: ...
    @overload
    def Colour(self, x: int, y: int) -> Color: ...
    @overload
    def Colour(self, x: int, y: int, col: Color) -> None: ...
    @overload
    def CopyChannel(self, source: GH_BitmapChannel, target: GH_BitmapChannel) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Filter_AlphaEdges(self, padding: Padding, alpha_override: int) -> None: ...
    @overload
    def Filter_Blur(self) -> None: ...
    @overload
    def Filter_Blur(self, N: int) -> None: ...
    @overload
    def Filter_Blur(self, interior_weight: int, exterior_weight: int) -> None: ...
    @overload
    def Filter_Blur(self, N: int, interior_weight: int, exterior_weight: int) -> None: ...
    @overload
    def Filter_BlurAlpha(self, N: int, interior_weight: int, exterior_weight: int) -> None: ...
    @overload
    def Filter_Contrast(self, channel: GH_BitmapChannel, factor: float) -> None: ...
    @overload
    def Filter_DitherPattern(self, colour: Color) -> None: ...
    @overload
    def Filter_DropShadow(self, offset: Size, blur: int, darkness: float) -> None: ...
    @overload
    def Filter_Dullify(self) -> None: ...
    @overload
    def Filter_Equalize(self, channel: GH_BitmapChannel, value: int) -> None: ...
    @overload
    def Filter_GreyScale(self) -> None: ...
    @overload
    def Filter_GreyScale(self, amount: float) -> None: ...
    @overload
    def Filter_HueScale(self) -> None: ...
    @overload
    def Filter_Invert(self, channel: GH_BitmapChannel) -> None: ...
    @overload
    def Filter_LumScale(self) -> None: ...
    @overload
    def Filter_Multiply(self, channel: GH_BitmapChannel, factor: float) -> None: ...
    @overload
    def Filter_Multiply(self, channel: GH_BitmapChannel, factor: float, anchor: int) -> None: ...
    @overload
    def Filter_SatScale(self) -> None: ...
    @overload
    def Filter_Shift(self, channel: GH_BitmapChannel, amount: int) -> None: ...
    @overload
    def Filter_SpectrumScale(self) -> None: ...
    @overload
    def Filter_Tint(self, tint: Color, lum_factor: float, sat_factor: float) -> None: ...
    @overload
    def G(self, x: int, y: int) -> int: ...
    @property
    def HasAlphaChannel(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def SizeOf(self) -> int: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OpaqueArea(self) -> Rectangle: ...
    @overload
    @staticmethod
    def PadBitmap(bmp: Image, padding: Padding, padding_color: Color) -> Bitmap: ...
    @overload
    def R(self, x: int, y: int) -> int: ...
    @overload
    def Release(self, includeChanges: bool) -> None: ...
    @overload
    def Sample(self, x: float, y: float, col: Color) -> Tuple[bool, Color]: ...
    @overload
    def Sample(self, x: int, y: int, col: Color) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def ShrinkBitmap(image: Bitmap) -> Bitmap: ...
    @overload
    def ToString(self) -> str: ...


class GH_NoiseTable:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Permutation(N: int) -> int: ...
    @overload
    @staticmethod
    def Sample(N: int) -> float: ...
    @overload
    def ToString(self) -> str: ...


class GH_ObjectChangedEventArgs:
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eType: GH_ObjectEventType): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eCustomDescription: str): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eType: GH_ObjectEventType, eTag: object): ...
    @overload
    def __init__(self, eSender: IGH_DocumentObject, eCustomDescription: str, eTag: object): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def CustomType(self) -> str: ...
    @property
    def Sender(self) -> IGH_DocumentObject: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Type(self) -> GH_ObjectEventType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_ObjectEventType(Enum):
    Unset = 0
    NickName = 1
    NickNameAccepted = 2
    Icon = 3
    IconDisplayMode = 4
    Layout = 5
    Sources = 6
    Selected = 7
    Enabled = 8
    Preview = 9
    PersistentData = 10
    DataMatching = 11
    DataMapping = 12
    Options = 13
    Custom = 2147483647


class GH_ObjectSpecies(Enum):
    none = 0
    doc_object = 1
    parameter = 16
    component = 32
    group = 64
    wire = 128
    grip_in = 256
    grip_out = 512
    grip = 768
    balloon = 1024
    any = 4294967295


class GH_ObjectType(Enum):
    # None = 0
    CompiledObject = 1
    UserObject = 2




class GH_ParamAccess(Enum):
    item = 0
    list = 1
    tree = 2


class GH_ParamData(Enum):
    unknown = 0
    void = 1
    local = 2
    remote = 3


from Rhino import RhinoDoc
class GH_ParameterContext:
    @overload
    def __init__(self, name: str, rhDoc: RhinoDoc, runmode: RunMode): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsScripted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def RhinoDoc(self) -> RhinoDoc: ...
    @property
    def SolveIndex(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @SolveIndex.setter
    def SolveIndex(self, AutoPropertyValue: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ParameterSide(Enum):
    Input = 0
    Output = 1


class GH_ParamHashFields(Enum):
    # None = 0
    Input = 1
    Output = 2
    InputAndOutput = 3
    InstanceId = 4
    NickName = 8
    Access = 16
    TypeId = 32
    PersistentData = 64
    Expression = 128
    TypeHint = 256
    Sources = 65536
    Recipients = 131072
    SourcesAndRecipients = 196608
    SerialData = 16777216
    All = 16974335


class GH_ParamKind(Enum):
    unknown = 0
    floating = 1
    input = 2
    output = 3


class GH_ParamServerEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def OriginalArguments(self) -> GH_ObjectChangedEventArgs: ...
    @property
    def Parameter(self) -> IGH_Param: ...
    @property
    def ParameterIndex(self) -> int: ...
    @property
    def ParameterSide(self) -> GH_ParameterSide: ...
    @property
    def Server(self) -> GH_ComponentParamServer: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_ParamWireDisplay(Enum):
    default = 0
    faint = 1
    hidden = 2


class GH_PatternMatching:
    @overload
    @staticmethod
    def Contains(value: str, pattern: str, ignoreCase: bool, culture: CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def EndsWith(value: str, pattern: str, ignoreCase: bool, culture: CultureInfo) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Equals(value: str, pattern: str, ignoreCase: bool, culture: CultureInfo) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsMatch(mode: MatchingMode, value: str, pattern: str, ignoreCase: bool, culture: CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def MatchRegex(value: str, pattern: str, ignoreCase: bool, culture: CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def MatchWildcards(value: str, pattern: str, ignoreCase: bool, culture: CultureInfo) -> bool: ...
    @overload
    @staticmethod
    def StartsWith(value: str, pattern: str, ignoreCase: bool, culture: CultureInfo) -> bool: ...
    @overload
    def ToString(self) -> str: ...








class GH_PickBox(Enum):
    Window = 0
    Crossing = 1


class GH_PingDocumentEventArgs:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_PluginFolderType(Enum):
    Core = 0
    Default = 1
    RhiFolder = 2
    UserFolder = 3


class GH_PreviewArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DefaultCurveThickness(self) -> int: ...
    @property
    def Display(self) -> DisplayPipeline: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @property
    def ShadeMaterial(self) -> DisplayMaterial: ...
    @property
    def ShadeMaterial_Selected(self) -> DisplayMaterial: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def WireColour(self) -> Color: ...
    @property
    def WireColour_Selected(self) -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_PreviewBoundary:
    @overload
    def __init__(self, points: Iterable[PointF]): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Boundary(self) -> Region: ...
    @property
    def Limits(self) -> RectangleF: ...
    @property
    def Points(self) -> Iterable[PointF]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsVisible(self, obj: IGH_DocumentObject) -> bool: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_PreviewExpiredEventArgs:
    @overload
    def __init__(self, eForceRedraw: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ForceRedraw(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_PreviewFilter(Enum):
    # None = 0
    Selected = 1


class GH_PreviewMesh(Enum):
    # None = 0
    LowQuality = 1
    HighQuality = 2
    Document = 3
    Custom = 4


class GH_PreviewMeshArgs:
    @overload
    def __init__(self, vp: RhinoViewport, pl: DisplayPipeline, mat: DisplayMaterial, meshParams: MeshingParameters): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Material(self) -> DisplayMaterial: ...
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @property
    def Pipeline(self) -> DisplayPipeline: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_PreviewMode(Enum):
    Disabled = 0
    Wireframe = 1
    Shaded = 2


class GH_PreviewUtil:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, enable: bool): ...
    @overload
    def AddBox(self, box: Box) -> None: ...
    @overload
    def AddBrep(self, brep: Brep) -> None: ...
    @overload
    def AddCurve(self, curve: Curve) -> None: ...
    @overload
    def AddLine(self, line: Line) -> None: ...
    @overload
    def AddMesh(self, mesh: Mesh) -> None: ...
    @overload
    def AddPlane(self, plane: Plane) -> None: ...
    @overload
    def AddPoint(self, point: Point3d) -> None: ...
    @overload
    def AddVector(self, vector: Line) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def WireColour(self) -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Redraw(self) -> None: ...
    @Enabled.setter
    def Enabled(self, Value: bool) -> None: ...
    @WireColour.setter
    def WireColour(self, Value: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_PreviewWireArgs:
    @overload
    def __init__(self, vp: RhinoViewport, pl: DisplayPipeline, col: Color, thickness: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Pipeline(self) -> DisplayPipeline: ...
    @property
    def Thickness(self) -> int: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_PrincipalState(Enum):
    CannotBePrincipal = 0
    IsPrincipal = 1
    IsNotPrincipal = 2


from System import IntPtr
class GH_Process:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def Handle(cls) -> IntPtr: ...
    @property
    @classmethod
    def HandleCount(cls) -> int: ...
    @property
    @classmethod
    def HasExited(cls) -> bool: ...
    @property
    @classmethod
    def MaxWorkingSet(cls) -> int: ...
    @property
    @classmethod
    def Name(cls) -> str: ...
    @property
    @classmethod
    def PeakPrivateBytes(cls) -> int: ...
    @property
    @classmethod
    def PrivateBytes(cls) -> int: ...
    @property
    @classmethod
    def WorkingSet(cls) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from .Forms import AutoValidate
from .Forms import ValidationConstraints
from .Forms import IButtonControl
from .Forms import Form
from System import EventHandler
from .Forms import AutoSizeMode
from .Forms import FormBorderStyle
from .Forms import DialogResult
from .Forms import MenuStrip
from .Forms import Padding
from .Forms import MainMenu
from .Forms import SizeGripStyle
from .Forms import FormStartPosition
from .Forms import FormWindowState
from .Forms import FormClosingEventHandler
from .Forms import FormClosedEventHandler
from .Forms import InputLanguageChangedEventHandler
from .Forms import InputLanguageChangingEventHandler
from .Forms import MdiLayout
from .Forms import DpiChangedEventHandler
from .Forms import IWin32Window
from .Forms import BindingContext
from .Forms import Control
from .Forms import AutoScaleMode
from .Forms import HScrollProperties
from .Forms import VScrollProperties
from .Forms import DockPaddingEdges
from .Forms import ScrollEventHandler
from .Forms import AnchorStyles
from .Forms.Layout import LayoutEngine
from .Forms import ImageLayout
from .Forms import ContextMenu
from .Forms import ContextMenuStrip
from .Forms import Cursor
from .Forms import ControlBindingsCollection
from .Forms import DockStyle
from .Forms import RightToLeft
from System import Delegate
from System import IAsyncResult
from .Forms import Message
from .Forms import AccessibleObject
from .Forms import AccessibleRole
from .Forms import ControlCollection
from System import IntPtr
from .Forms import IWindowTarget
from .Forms import ControlEventHandler
from .Forms import DragEventHandler
from .Forms import GiveFeedbackEventHandler
from .Forms import HelpEventHandler
from .Forms import InvalidateEventHandler
from .Forms import PaintEventHandler
from .Forms import QueryContinueDragEventHandler
from .Forms import QueryAccessibilityHelpEventHandler
from .Forms import KeyEventHandler
from .Forms import KeyPressEventHandler
from .Forms import LayoutEventHandler
from .Forms import MouseEventHandler
from .Forms import PreviewKeyDownEventHandler
from .Forms import UICuesEventHandler
from .Forms import DragDropEffects
from .Forms import GetChildAtPointSkip
from .Forms import IContainerControl
from .Forms import PreProcessControlState
from .Forms import BoundsSpecified
from .Forms import ImeMode
from .Remoting import ObjRef
class GH_ProcessForm:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @overload
    @staticmethod
    def FormatBytes(B: int) -> str: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def ActiveControl(self) -> Control: ...
    @property
    def ActiveMdiChild(self) -> Form: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @property
    def DesktopLocation(self) -> Point: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMdiChild(self) -> bool: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @property
    def MdiParent(self) -> Form: ...
    @property
    def Menu(self) -> MainMenu: ...
    @property
    def MergedMenu(self) -> MainMenu: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Modal(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @property
    def Owner(self) -> Form: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def ParentForm(self) -> Form: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Region: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowIcon(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Color: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> Tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> Tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> Tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class GH_ProcessStep(Enum):
    PreProcess = 0
    Process = 1
    PostProcess = 2
    Aborted = 3


class GH_ProfilerMode(Enum):
    # None = 0
    Processor = 1
    Memory = 2


from .Special import GH_Group
class GH_RelevantObjectData:
    @overload
    def __init__(self, pt: PointF): ...
    @overload
    def CreateBalloonData(self, obj: IGH_DocumentObject) -> None: ...
    @overload
    def CreateGripData(self, obj: IGH_DocumentObject, is_input: bool) -> None: ...
    @overload
    def CreateGroupData(self, group: GH_Group) -> None: ...
    @overload
    def CreateObjectData(self, obj: IGH_DocumentObject) -> None: ...
    @overload
    def CreateWireData(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def Group(self) -> GH_Group: ...
    @property
    def IsTopLevelObject(self) -> bool: ...
    @property
    def Object(self) -> IGH_DocumentObject: ...
    @property
    def ObjectType(self) -> GH_ObjectSpecies: ...
    @property
    def Parameter(self) -> IGH_Param: ...
    @property
    def Point(self) -> PointF: ...
    @property
    def TopLevelObject(self) -> IGH_DocumentObject: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_RelevantObjectFilter(Enum):
    # None = 0
    Groups = 1
    InputGrips = 2
    OutputGrips = 4
    Grips = 6
    Attributes = 8
    Wires = 1024
    All = 2147483647


from Rhino import RhinoDoc
from System import Guid
from .Generic import Dictionary
class GH_RenderArgs:
    @overload
    def __init__(self, doc: RhinoDoc, vp: ViewportInfo, geometry: RenderPrimitiveList, id: Guid, materialCache: Dictionary): ...
    @overload
    def __init__(self, doc: RhinoDoc, vp: ViewportInfo, geometry: RenderPrimitiveList, id: Guid, matNormal: RenderMaterial, matSelected: RenderMaterial): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> RhinoDoc: ...
    @property
    def Geomety(self) -> RenderPrimitiveList: ...
    @property
    def MaterialCache(self) -> Dictionary: ...
    @property
    def MaterialNormal(self) -> RenderMaterial: ...
    @property
    def MaterialSelected(self) -> RenderMaterial: ...
    @property
    def ModelTransform(self) -> Transform: ...
    @property
    def PluginId(self) -> Guid: ...
    @property
    def Viewport(self) -> ViewportInfo: ...
    @property
    def ViewportName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PopModelTransform(self) -> Transform: ...
    @overload
    def PushModelTransform(self, transform: Transform) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import DateTime
class GH_Revision:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Date(self) -> DateTime: ...
    @property
    def DateTag(self) -> DateTime: ...
    @property
    def Description(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @DateTag.setter
    def DateTag(self, Value: DateTime) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from System import DateTime
class GH_RuntimeMessage:
    @overload
    def __init__(self, nMessage: str, nType: GH_RuntimeMessageLevel, nSource: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Event(self) -> DateTime: ...
    @property
    def HasSource(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @property
    def Type(self) -> GH_RuntimeMessageLevel: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_RuntimeMessageLevel(Enum):
    Blank = 0
    Warning = 10
    Error = 20
    Remark = 255


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class GH_ScheduleDelegate:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, doc: GH_Document, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, doc: GH_Document) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ScriptComponentUtilities:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FindAllNameSpaces(asm: Assembly) -> MutableSequence[str]: ...
    @overload
    @staticmethod
    def FindTopLevelNameSpaces(asm: Assembly) -> MutableSequence[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def ReflectType_CS(obj: object) -> str: ...
    @overload
    @staticmethod
    def ReflectType_CS(obj: object, method_name: str) -> str: ...
    @overload
    @staticmethod
    def ReflectType_VB(obj: object) -> str: ...
    @overload
    @staticmethod
    def ReflectType_VB(obj: object, method_name: str) -> str: ...
    @overload
    def ToString(self) -> str: ...


class GH_ScriptInstance:
    @overload
    def AfterRunScript(self) -> None: ...
    @overload
    def BeforeRunScript(self) -> None: ...
    @overload
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InvokeRunScript(self, owner: IGH_Component, rhinoDocument: object, iteration: int, inputs: MutableSequence[object], DA: IGH_DataAccess) -> None: ...
    @Hidden.setter
    def Hidden(self, Value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_SearchHit:
    @overload
    def __init__(self, obj: IGH_DocumentObject, weight: int): ...
    @overload
    def CompareTo(self, other: GH_SearchHit) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Object(self) -> IGH_DocumentObject: ...
    @property
    def Weight(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_SelectionState(Enum):
    Changed = 0
    Unchanged = 1


class GH_SelectionTopology(Enum):
    # None = 0
    Convex = 1
    Concave = 2


from System import DateTime
from .Forms import IWin32Window
class GH_SettingsServer:
    @overload
    def __init__(self, databaseName: str): ...
    @overload
    def __init__(self, databaseName: str, loadSettings: bool): ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ConstainsEntry(self, name: str) -> bool: ...
    @overload
    def DeleteValue(self, key: str) -> None: ...
    @overload
    def EntryNames(self) -> MutableSequence[str]: ...
    @overload
    def EntryType(self, name: str) -> GH_SettingsType: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def DatabaseName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def GetValue(self, key: str, default: int) -> int: ...
    @overload
    def GetValue(self, key: str, default: int) -> int: ...
    @overload
    def GetValue(self, key: str, default: float) -> float: ...
    @overload
    def GetValue(self, key: str, default: DateTime) -> DateTime: ...
    @overload
    def GetValue(self, key: str, default: str) -> str: ...
    @overload
    def GetValue(self, key: str, default: Size) -> Size: ...
    @overload
    def GetValue(self, key: str, default: Point) -> Point: ...
    @overload
    def GetValue(self, key: str, default: Rectangle) -> Rectangle: ...
    @overload
    def GetValue(self, key: str, default: bool) -> bool: ...
    @overload
    def GetValue(self, key: str, default: Color) -> Color: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def SetValue(self, key: str) -> None: ...
    @overload
    def SetValue(self, key: str, value: Color) -> None: ...
    @overload
    def SetValue(self, key: str, value: Size) -> None: ...
    @overload
    def SetValue(self, key: str, value: Point) -> None: ...
    @overload
    def SetValue(self, key: str, value: DateTime) -> None: ...
    @overload
    def SetValue(self, key: str, value: str) -> None: ...
    @overload
    def SetValue(self, key: str, value: float) -> None: ...
    @overload
    def SetValue(self, key: str, value: int) -> None: ...
    @overload
    def SetValue(self, key: str, value: int) -> None: ...
    @overload
    def SetValue(self, key: str, value: bool) -> None: ...
    @overload
    def SetValue(self, key: str, value: Rectangle) -> None: ...
    @overload
    def ShowSettingsBrowser(self, parent: IWin32Window) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    def WritePersistentSettings(self) -> None: ...


class GH_SettingsType(Enum):
    _null = 0
    _boolean = 1
    _byte = 2
    _integer = 3
    _double = 4
    _string = 6
    _date = 7
    _color = 8
    _point = 9
    _size = 10
    _rectangle = 11
    _unknown = -1


from System import DateTime
from System import TimeSpan
class GH_SolutionEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def Duration(self) -> TimeSpan: ...
    @property
    def EndTime(self) -> DateTime: ...
    @property
    def StartTime(self) -> DateTime: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_SolutionExpiredEventArgs:
    @overload
    def __init__(self, eRecompute: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Recompute(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_SolutionMode(Enum):
    Default = 0
    CommandLine = 1
    Silent = 2


class GH_SolutionPhase(Enum):
    Blank = 0
    Collecting = 1
    Collected = 2
    Computing = 3
    Computed = 4
    Failed = 10


from System import DateTime
class GH_SolutionSpan:
    @overload
    def __init__(self, t0: DateTime, t1: DateTime): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def EndTime(self) -> DateTime: ...
    @property
    def StartTime(self) -> DateTime: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import DateTime
from System import Guid
from .Generic import SortedList
class GH_State:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_State): ...
    @overload
    def AddStateObject(self, obj: IGH_StateAwareObject, obj_id: Guid) -> None: ...
    @overload
    def ClearStates(self) -> None: ...
    @overload
    def CreateStateFromDocument(self, doc: GH_Document) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Data(self, id: Guid) -> str: ...
    @property
    def Data(self) -> Sequence[str]: ...
    @property
    def LastModified(self) -> DateTime: ...
    @property
    def Name(self) -> str: ...
    @property
    def StateCount(self) -> int: ...
    @property
    def StateData(self) -> SortedList: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def RemoveStateObject(self, obj_id: Guid) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from .ObjectModel import ReadOnlyCollection
from .Generic import IComparer
from System import Predicate
from System import Action
from .Generic import Enumerator
from System import Comparison
from System import Converter
class GH_StateServer:
    @overload
    def __init__(self, owner: GH_Document): ...
    def __iter__(self) -> Iterator[GH_State]: ...
    def __getitem__(self, index: int) -> GH_State: ...
    def __setitem__(self, index: int, value: GH_State): ...
    @overload
    def Add(self, item: GH_State) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[GH_State]) -> None: ...
    @overload
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: GH_State) -> int: ...
    @overload
    def BinarySearch(self, item: GH_State, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: GH_State, comparer: IComparer) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: GH_State) -> bool: ...
    @overload
    def ConvertAll(self, converter: Converter) -> MutableSequence[TOutput]: ...
    @overload
    def CopyTo(self, array: Iterable[GH_State]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[GH_State], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[GH_State], arrayIndex: int, count: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Exists(self, match: Predicate) -> bool: ...
    @overload
    def Find(self, match: Predicate) -> GH_State: ...
    @overload
    def FindAll(self, match: Predicate) -> MutableSequence[GH_State]: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def FindLast(self, match: Predicate) -> GH_State: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def Names(self) -> MutableSequence[str]: ...
    @property
    def Owner(self) -> GH_Document: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRange(self, index: int, count: int) -> MutableSequence[GH_State]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: GH_State) -> int: ...
    @overload
    def IndexOf(self, item: GH_State, index: int) -> int: ...
    @overload
    def IndexOf(self, item: GH_State, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, item: GH_State) -> None: ...
    @overload
    def InsertRange(self, index: int, collection: Iterable[GH_State]) -> None: ...
    @overload
    def LastIndexOf(self, item: GH_State) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_State, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_State, index: int, count: int) -> int: ...
    @overload
    def NewStateFromDocument(self) -> GH_State: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def Remove(self, item: GH_State) -> bool: ...
    @overload
    def RemoveAll(self, match: Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def RemoveState(self, index: int) -> bool: ...
    @overload
    def RestoreState(self, name: str) -> Tuple[bool, int, int]: ...
    @overload
    def RestoreState(self, index: int) -> Tuple[bool, int, int]: ...
    @overload
    def RestoreState(self, index: int, recompute: bool) -> Tuple[bool, int, int]: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @property
    def Item(self) -> MutableSequence[GH_State]: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    @overload
    def ToArray(self) -> Iterable[GH_State]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TrimExcess(self) -> None: ...
    @overload
    def TrueForAll(self, match: Predicate) -> bool: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_StateTag:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Stage(self) -> Rectangle: ...
    @property
    def StateDescription(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Render(self, graphics: Graphics) -> None: ...
    @Stage.setter
    def Stage(self, Value: Rectangle) -> None: ...
    @StateDescription.setter
    def StateDescription(self, Value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_StateTagLayoutDirection(Enum):
    Left = 0
    Right = 1


from .ObjectModel import ReadOnlyCollection
from .Generic import IComparer
from System import Predicate
from System import Action
from .Generic import Enumerator
from System import Comparison
from System import Converter
class GH_StateTagList:
    @overload
    def __init__(self): ...
    def __iter__(self) -> Iterator[IGH_StateTag]: ...
    def __getitem__(self, index: int) -> IGH_StateTag: ...
    def __setitem__(self, index: int, value: IGH_StateTag): ...
    @overload
    def Add(self, item: IGH_StateTag) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[IGH_StateTag]) -> None: ...
    @overload
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: IGH_StateTag) -> int: ...
    @overload
    def BinarySearch(self, item: IGH_StateTag, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: IGH_StateTag, comparer: IComparer) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: IGH_StateTag) -> bool: ...
    @overload
    def ConvertAll(self, converter: Converter) -> MutableSequence[TOutput]: ...
    @overload
    def CopyTo(self, array: Iterable[IGH_StateTag]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[IGH_StateTag], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[IGH_StateTag], arrayIndex: int, count: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Exists(self, match: Predicate) -> bool: ...
    @overload
    def Find(self, match: Predicate) -> IGH_StateTag: ...
    @overload
    def FindAll(self, match: Predicate) -> MutableSequence[IGH_StateTag]: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def FindLast(self, match: Predicate) -> IGH_StateTag: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def ForEach(self, action: Action) -> None: ...
    @property
    def BoundingBox(self) -> Rectangle: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRange(self, index: int, count: int) -> MutableSequence[IGH_StateTag]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: IGH_StateTag) -> int: ...
    @overload
    def IndexOf(self, item: IGH_StateTag, index: int) -> int: ...
    @overload
    def IndexOf(self, item: IGH_StateTag, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, item: IGH_StateTag) -> None: ...
    @overload
    def InsertRange(self, index: int, collection: Iterable[IGH_StateTag]) -> None: ...
    @overload
    def IsTtipPoint(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    def LastIndexOf(self, item: IGH_StateTag) -> int: ...
    @overload
    def LastIndexOf(self, item: IGH_StateTag, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: IGH_StateTag, index: int, count: int) -> int: ...
    @overload
    def Layout(self, box: Rectangle, direction: GH_StateTagLayoutDirection) -> None: ...
    @overload
    def Remove(self, item: IGH_StateTag) -> bool: ...
    @overload
    def RemoveAll(self, match: Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def RenderStateTags(self, G: Graphics) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @property
    def Item(self) -> MutableSequence[IGH_StateTag]: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    @overload
    def ToArray(self) -> Iterable[IGH_StateTag]: ...
    @overload
    def TooltipSetup(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TrimExcess(self) -> None: ...
    @overload
    def TrueForAll(self, match: Predicate) -> bool: ...


from System import StringComparison
class GH_StringMatcher:
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def ComputeWeight(value: str, key: str, comp: StringComparison) -> int: ...
    @overload
    @staticmethod
    def ComputeWeight(value: str, key: str, level: GH_MatchLevel, comp: StringComparison) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def LevenshteinDistance(A: str, B: str) -> int: ...
    @overload
    def ToString(self) -> str: ...


class GH_StringPattern:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, char_pool: str): ...
    @overload
    def __init__(self, char_pool: str, depth: int): ...
    @overload
    def Current(self) -> str: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def FormatMask(self) -> str: ...
    @property
    def StackDepth(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Next(self) -> str: ...
    @overload
    def Reset(self) -> None: ...
    @FormatMask.setter
    def FormatMask(self, Value: str) -> None: ...
    @StackDepth.setter
    def StackDepth(self, Value: int) -> None: ...
    @overload
    def SetCharPool(self, char_pool: str) -> None: ...
    @overload
    def SetCharPool(self, char_pool: Iterable[str]) -> None: ...
    @overload
    def ToString(self) -> str: ...




class GH_TimeKind(Enum):
    Unset = 0
    Mixed = 1
    PureTime = 2
    PureDate = 3
    DateAndTime = 4


from System import Guid
class GH_TypeLib:
    t_bool: type
    t_byte: type
    t_int16: type
    t_int32: type
    t_int64: type
    t_uint16: type
    t_uint32: type
    t_uint64: type
    t_time: type
    t_single: type
    t_double: type
    t_decimal: type
    t_guid: type
    t_char: type
    t_string: type
    t_color: type
    t_size: type
    t_sizef: type
    t_point: type
    t_pointf: type
    t_rectangle: type
    t_rectanglef: type
    t_object: type
    id_bool: Guid
    id_byte: Guid
    id_int16: Guid
    id_int32: Guid
    id_int64: Guid
    id_uint16: Guid
    id_uint32: Guid
    id_uint64: Guid
    id_time: Guid
    id_single: Guid
    id_double: Guid
    id_decimal: Guid
    id_guid: Guid
    id_char: Guid
    id_string: Guid
    id_color: Guid
    id_size: Guid
    id_sizef: Guid
    id_point: Guid
    id_pointf: Guid
    id_rectangle: Guid
    id_rectanglef: Guid
    id_object: Guid
    t_gh_goo: type
    t_gh_objwrapper: type
    t_gh_bool: type
    t_gh_int: type
    t_gh_number: type
    t_gh_complex: type
    t_gh_complexnumber: type
    t_gh_guid: type
    t_gh_matrix: type
    t_gh_transform: type
    t_gh_string: type
    t_gh_colour: type
    t_gh_time: type
    t_gh_path: type
    t_gh_structpath: type
    t_gh_material: type
    t_gh_interval2D: type
    t_gh_uvinterval: type
    t_gh_interval: type
    t_gh_vector: type
    t_gh_point: type
    t_gh_plane: type
    t_gh_arc: type
    t_gh_line: type
    t_gh_curve: type
    t_gh_circle: type
    t_gh_rectangle: type
    t_gh_box: type
    t_gh_brep: type
    t_gh_subd: type
    t_gh_surface: type
    t_gh_extrusion: type
    t_gh_mesh: type
    t_gh_meshface: type
    t_gh_pointcloud: type
    t_gh_hatch: type
    t_gh_textdot: type
    t_gh_annotationbase: type
    t_gh_textentity: type
    t_gh_leader: type
    t_gh_dimension: type
    t_gh_lineardimension: type
    t_gh_ordinatedimension: type
    t_gh_radialdimension: type
    t_gh_angulardimension: type
    t_gh_centermark: type
    t_gh_instancereference: type
    t_gh_detailview: type
    t_gh_light: type
    t_gh_modelobject: type
    id_gh_goo: Guid
    id_gh_objwrapper: Guid
    id_gh_bool: Guid
    id_gh_int: Guid
    id_gh_number: Guid
    id_gh_complex: Guid
    id_gh_complexnumber: Guid
    id_gh_guid: Guid
    id_gh_matrix: Guid
    id_gh_transform: Guid
    id_gh_string: Guid
    id_gh_colour: Guid
    id_gh_time: Guid
    id_gh_path: Guid
    id_gh_structpath: Guid
    id_gh_material: Guid
    id_gh_interval2D: Guid
    id_gh_uvinterval: Guid
    id_gh_interval: Guid
    id_gh_vector: Guid
    id_gh_point: Guid
    id_gh_plane: Guid
    id_gh_arc: Guid
    id_gh_line: Guid
    id_gh_curve: Guid
    id_gh_circle: Guid
    id_gh_rectangle: Guid
    id_gh_box: Guid
    id_gh_brep: Guid
    id_gh_subd: Guid
    id_gh_surface: Guid
    id_gh_extrusion: Guid
    id_gh_mesh: Guid
    id_gh_meshface: Guid
    id_gh_pointcloud: Guid
    id_gh_hatch: Guid
    id_gh_textentity: Guid
    id_gh_textdot: Guid
    id_gh_leader: Guid
    id_gh_dimension: Guid
    id_gh_lineardimension: Guid
    id_gh_ordinatedimension: Guid
    id_gh_radialdimension: Guid
    id_gh_angulardimension: Guid
    id_gh_centermark: Guid
    id_gh_instancereference: Guid
    id_gh_detailview: Guid
    id_gh_light: Guid
    id_gh_modelobject: Guid
    t_rc_plane: type
    t_rc_point3d: type
    t_rc_point3f: type
    t_rc_vector3d: type
    t_rc_vector3f: type
    t_rc_transform: type
    t_rc_interval: type
    t_rc_matrix: type
    t_rc_line: type
    t_rc_rectangle: type
    t_rc_arc: type
    t_rc_circle: type
    t_rc_ellipse: type
    t_rc_polyline: type
    t_rc_box: type
    t_rc_boundingbox: type
    t_rc_sphere: type
    t_rc_cone: type
    t_rc_cylinder: type
    t_rc_torus: type
    t_rc_curve: type
    t_rc_linecurve: type
    t_rc_polylinecurve: type
    t_rc_arccurve: type
    t_rc_nurbscurve: type
    t_rc_polycurve: type
    t_rc_surface: type
    t_rc_sumsurface: type
    t_rc_revsurface: type
    t_rc_nurbssurface: type
    t_rc_planesurface: type
    t_rc_brep: type
    t_rc_brepface: type
    t_rc_brepedge: type
    t_rc_subd: type
    t_rc_extrusion: type
    t_rc_mesh: type
    t_rc_meshface: type
    t_rc_point: type
    t_rc_pointcloud: type
    t_rc_hatch: type
    t_rc_textdot: type
    t_rc_annotationbase: type
    t_rc_textentity: type
    t_rc_leader: type
    t_rc_dimension: type
    t_rc_lineardimension: type
    t_rc_ordinatedimension: type
    t_rc_radialdimension: type
    t_rc_angulardimension: type
    t_rc_centermark: type
    t_rc_instancereference: type
    t_rc_detailview: type
    t_rc_light: type
    id_rc_plane: Guid
    id_rc_point3d: Guid
    id_rc_point3f: Guid
    id_rc_vector3d: Guid
    id_rc_vector3f: Guid
    id_rc_transform: Guid
    id_rc_interval: Guid
    id_rc_matrix: Guid
    id_rc_line: Guid
    id_rc_rectangle: Guid
    id_rc_arc: Guid
    id_rc_circle: Guid
    id_rc_ellipse: Guid
    id_rc_polyline: Guid
    id_rc_box: Guid
    id_rc_boundingbox: Guid
    id_rc_sphere: Guid
    id_rc_cone: Guid
    id_rc_cylinder: Guid
    id_rc_torus: Guid
    id_rc_curve: Guid
    id_rc_linecurve: Guid
    id_rc_polylinecurve: Guid
    id_rc_arccurve: Guid
    id_rc_nurbscurve: Guid
    id_rc_polycurve: Guid
    id_rc_surface: Guid
    id_rc_sumsurface: Guid
    id_rc_revsurface: Guid
    id_rc_nurbssurface: Guid
    id_rc_planesurface: Guid
    id_rc_extrusion: Guid
    id_rc_brep: Guid
    id_rc_brepface: Guid
    id_rc_brepedge: Guid
    id_rc_subd: Guid
    id_rc_mesh: Guid
    id_rc_meshface: Guid
    id_rc_point: Guid
    id_rc_pointcloud: Guid
    id_rc_hatch: Guid
    id_rc_textentity: Guid
    id_rc_textdot: Guid
    id_rc_leader: Guid
    id_rc_dimension: Guid
    id_rc_lineardimension: Guid
    id_rc_ordinatedimension: Guid
    id_rc_radialdimension: Guid
    id_rc_angulardimension: Guid
    id_rc_centermark: Guid
    id_rc_instancereference: Guid
    id_rc_light: Guid
    id_rc_detailview: Guid
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_UndoOperation(Enum):
    ClearUndoStack = 0
    ClearRedoStack = 1
    RecordAdded = 2
    RecordRemoved = 3
    Undo = 4
    Redo = 5


from .Undo import GH_UndoRecord
from System import Guid
from .Undo import IGH_UndoAction
class GH_UndoUtil:
    @overload
    def CreateAddObjectEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> GH_UndoRecord: ...
    @overload
    def CreateAddObjectEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreateAddStateEvent(self, name: str, stateIndex: int, state: GH_State) -> GH_UndoRecord: ...
    @overload
    def CreateEnabledEvent(self, name: str, obj: IGH_ActiveObject) -> GH_UndoRecord: ...
    @overload
    def CreateGenericObjectEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreateLayoutEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreateLayoutEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> GH_UndoRecord: ...
    @overload
    def CreateNickNameEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreatePersistentDataEvent(self, name: str, obj: GH_PersistentParam) -> GH_UndoRecord: ...
    @overload
    def CreatePivotEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreatePivotEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> GH_UndoRecord: ...
    @overload
    def CreatePreviewEvent(self, name: str, obj: IGH_ActiveObject) -> GH_UndoRecord: ...
    @overload
    def CreateRemoveObjectEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> GH_UndoRecord: ...
    @overload
    def CreateRemoveObjectEvent(self, name: str, obj: IGH_DocumentObject) -> GH_UndoRecord: ...
    @overload
    def CreateRemoveStateEvent(self, name: str, stateIndex: int, state: GH_State) -> GH_UndoRecord: ...
    @overload
    def CreateReplaceStateEvent(self, name: str, stateIndex: int, oldState: GH_State, newState: GH_State) -> GH_UndoRecord: ...
    @overload
    def CreateWireEvent(self, name: str, param: IGH_Param) -> GH_UndoRecord: ...
    @overload
    def CreateWireEvent(self, name: str, params: Iterable[IGH_Param]) -> GH_UndoRecord: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MergeRecords(self, count: int) -> bool: ...
    @overload
    def RecordAddObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    @overload
    def RecordAddObjectEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> Guid: ...
    @overload
    def RecordAddStateEvent(self, name: str, stateIndex: int, state: GH_State) -> Guid: ...
    @overload
    def RecordEnabledEvent(self, name: str, obj: IGH_ActiveObject) -> Guid: ...
    @overload
    def RecordEvent(self, record: GH_UndoRecord) -> Guid: ...
    @overload
    def RecordEvent(self, name: str, actions: Iterable[IGH_UndoAction]) -> Guid: ...
    @overload
    def RecordEvent(self, name: str, action: IGH_UndoAction) -> Guid: ...
    @overload
    def RecordEvent(self, name: str, actions: Iterable[IGH_UndoAction]) -> Guid: ...
    @overload
    def RecordGenericObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    @overload
    def RecordLayoutEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> Guid: ...
    @overload
    def RecordLayoutEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    @overload
    def RecordNickNameEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    @overload
    def RecordPersistentDataEvent(self, name: str, obj: GH_PersistentParam) -> Guid: ...
    @overload
    def RecordPivotEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> Guid: ...
    @overload
    def RecordPivotEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    @overload
    def RecordPreviewEvent(self, name: str, obj: IGH_ActiveObject) -> Guid: ...
    @overload
    def RecordRemoveObjectEvent(self, name: str, objs: Iterable[IGH_DocumentObject]) -> Guid: ...
    @overload
    def RecordRemoveObjectEvent(self, name: str, obj: IGH_DocumentObject) -> Guid: ...
    @overload
    def RecordRemoveStateEvent(self, name: str, stateIndex: int, state: GH_State) -> Guid: ...
    @overload
    def RecordReplaceStateEvent(self, name: str, stateIndex: int, oldState: GH_State, newState: GH_State) -> Guid: ...
    @overload
    def RecordWireEvent(self, name: str, params: Iterable[IGH_Param]) -> Guid: ...
    @overload
    def RecordWireEvent(self, name: str, param: IGH_Param) -> Guid: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class GH_UpgradeUtil:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def MigrateInputParameters(source: IGH_Component, target: IGH_Component) -> bool: ...
    @overload
    @staticmethod
    def MigrateInputParameters(source: IGH_Component, target: IGH_Component, index0: Iterable[int], index1: Iterable[int]) -> bool: ...
    @overload
    @staticmethod
    def MigrateOutputParameters(source: IGH_Component, target: IGH_Component) -> bool: ...
    @overload
    @staticmethod
    def MigrateOutputParameters(source: IGH_Component, target: IGH_Component, index0: Iterable[int], index1: Iterable[int]) -> bool: ...
    @overload
    @staticmethod
    def MigrateRecipients(from_: IGH_Param, to: IGH_Param) -> int: ...
    @overload
    @staticmethod
    def MigrateRecipients(recipients: Iterable[IGH_Param], target: IGH_Param) -> int: ...
    @overload
    @staticmethod
    def MigrateSources(from_: IGH_Param, to: IGH_Param) -> int: ...
    @overload
    @staticmethod
    def MigrateSources(sources: Iterable[IGH_Param], target: IGH_Param) -> int: ...
    @overload
    @staticmethod
    def ReplaceInputParameters(source: IGH_Component, target: IGH_Component) -> None: ...
    @overload
    @staticmethod
    def ReplaceOutputParameters(source: IGH_Component, target: IGH_Component) -> None: ...
    @overload
    @staticmethod
    def SwapComponents(oldComponent: IGH_Component, newComponent: IGH_Component) -> bool: ...
    @overload
    @staticmethod
    def SwapComponents(oldComponent: IGH_Component, newComponentGuid: Guid) -> IGH_Component: ...
    @overload
    @staticmethod
    def SwapComponents(oldComponent: IGH_Component, newComponent: IGH_Component, migrateParameters: bool) -> bool: ...
    @overload
    @staticmethod
    def SwapComponents(oldComponent: IGH_Component, newComponentGuid: Guid, migrateParameters: bool) -> IGH_Component: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
class GH_UserObject:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source_file: str): ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def CreateDefaultPath(self, avoid_conflict: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BaseGuid(self) -> Guid: ...
    @property
    def Data(self) -> Iterable[int]: ...
    @property
    def Description(self) -> GH_InstanceDescription: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Guid(self) -> Guid: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Path(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InstantiateObject(self) -> IGH_DocumentObject: ...
    @overload
    def ReadFromFile(self) -> None: ...
    @overload
    def SaveToFile(self) -> bool: ...
    @BaseGuid.setter
    def BaseGuid(self, Value: Guid) -> None: ...
    @Data.setter
    def Data(self, Value: Iterable[int]) -> None: ...
    @Description.setter
    def Description(self, Value: GH_InstanceDescription) -> None: ...
    @Exposure.setter
    def Exposure(self, Value: GH_Exposure) -> None: ...
    @Guid.setter
    def Guid(self, Value: Guid) -> None: ...
    @Icon.setter
    def Icon(self, Value: Bitmap) -> None: ...
    @Path.setter
    def Path(self, Value: str) -> None: ...
    @overload
    def SetDataFromObject(self, obj: IGH_DocumentObject) -> None: ...
    @overload
    def ToString(self) -> str: ...




class GH_VarParamEventArgs:
    @overload
    def __init__(self, n_param: IGH_Param, n_side: GH_VarParamSide): ...
    @overload
    def __init__(self, n_param: IGH_Param, n_side: GH_VarParamSide, n_index: int): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def Param(self) -> IGH_Param: ...
    @property
    def Side(self) -> GH_VarParamSide: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_VarParamSide(Enum):
    Input = 0
    Output = 1


from System import Guid
class GH_WireTopology:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, source_id: Guid, target_id: Guid): ...
    @overload
    def __init__(self, source: IGH_Param, target: IGH_Param): ...
    @overload
    def __init__(self, target: IGH_Param, index: int): ...
    @overload
    def __init__(self, source_id: Guid, target_id: Guid, source_index: int): ...
    @overload
    def DestroyConnection(self, doc: GH_Document) -> None: ...
    @overload
    def EnsureConnection(self, doc: GH_Document) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def SourceIndex(self) -> int: ...
    @property
    def SourceParameterID(self) -> Guid: ...
    @property
    def TargetParameterID(self) -> Guid: ...
    @property
    def ValidIndex(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from .ObjectModel import ReadOnlyCollection
from .Generic import IComparer
from System import Predicate
from System import Action
from .Generic import Enumerator
from System import Comparison
from System import Converter
class GH_WireTopologyDiagram:
    @overload
    def __init__(self): ...
    def __iter__(self) -> Iterator[GH_WireTopology]: ...
    def __getitem__(self, index: int) -> GH_WireTopology: ...
    def __setitem__(self, index: int, value: GH_WireTopology): ...
    @overload
    def Add(self, item: GH_WireTopology) -> None: ...
    @overload
    def Add(self, wire: GH_WireTopology, filter_duplicates: bool) -> None: ...
    @overload
    def AddRange(self, collection: Iterable[GH_WireTopology]) -> None: ...
    @overload
    def AppendDiagram(self, doc: GH_Document) -> None: ...
    @overload
    def AppendDiagram(self, objs: Iterable[IGH_DocumentObject]) -> None: ...
    @overload
    def AppendDiagram(self, obj: IGH_DocumentObject) -> None: ...
    @overload
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: GH_WireTopology) -> int: ...
    @overload
    def BinarySearch(self, item: GH_WireTopology, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: GH_WireTopology, comparer: IComparer) -> int: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: GH_WireTopology) -> bool: ...
    @overload
    def ConvertAll(self, converter: Converter) -> MutableSequence[TOutput]: ...
    @overload
    def CopyTo(self, array: Iterable[GH_WireTopology]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[GH_WireTopology], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[GH_WireTopology], arrayIndex: int, count: int) -> None: ...
    @overload
    def DestroyConnections(self, doc: GH_Document, throw_exceptions: bool) -> None: ...
    @overload
    def EnsureConnections(self, doc: GH_Document, throw_exceptions: bool) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Exists(self, match: Predicate) -> bool: ...
    @overload
    def Find(self, match: Predicate) -> GH_WireTopology: ...
    @overload
    def FindAll(self, match: Predicate) -> MutableSequence[GH_WireTopology]: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def FindLast(self, match: Predicate) -> GH_WireTopology: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    @overload
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRange(self, index: int, count: int) -> MutableSequence[GH_WireTopology]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: GH_WireTopology) -> int: ...
    @overload
    def IndexOf(self, item: GH_WireTopology, index: int) -> int: ...
    @overload
    def IndexOf(self, item: GH_WireTopology, index: int, count: int) -> int: ...
    @overload
    def Insert(self, index: int, item: GH_WireTopology) -> None: ...
    @overload
    def InsertRange(self, index: int, collection: Iterable[GH_WireTopology]) -> None: ...
    @overload
    def LastIndexOf(self, item: GH_WireTopology) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_WireTopology, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_WireTopology, index: int, count: int) -> int: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def Remove(self, item: GH_WireTopology) -> bool: ...
    @overload
    def RemoveAll(self, match: Predicate) -> int: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @property
    def Item(self) -> MutableSequence[GH_WireTopology]: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    @overload
    def ToArray(self) -> Iterable[GH_WireTopology]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TrimExcess(self) -> None: ...
    @overload
    def TrueForAll(self, match: Predicate) -> bool: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_ZuiAction:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsTooltipRegion(self, canvasPoint: PointF) -> bool: ...
    @overload
    def Perform(self) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class GHAFileLoadedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_GHALoadingEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_GHALoadingEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from .Generic import IList
from System import TimeSpan
class IGH_ActiveObject:
    @overload
    def AddRuntimeMessage(self, Type: GH_RuntimeMessageLevel, Message: str) -> None: ...
    @overload
    def ClearData(self) -> None: ...
    @overload
    def ClearRuntimeMessages(self) -> None: ...
    @overload
    def CollectData(self) -> None: ...
    @overload
    def ComputeData(self) -> None: ...
    @overload
    def DependsOn(self, PotentialSource: IGH_ActiveObject) -> bool: ...
    @property
    def IsDataProvider(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def MutableNickName(self) -> bool: ...
    @property
    def Phase(self) -> GH_SolutionPhase: ...
    @property
    def ProcessorTime(self) -> TimeSpan: ...
    @property
    def RuntimeMessageLevel(self) -> GH_RuntimeMessageLevel: ...
    @overload
    def RegisterRemoteIDs(self, id_list: GH_GuidTable) -> None: ...
    @overload
    def RuntimeMessages(self, level: GH_RuntimeMessageLevel) -> Iterable[str]: ...
    @overload
    def SDKCompliancy(self, exeVersion: int, exeServiceRelease: int) -> bool: ...
    @Locked.setter
    def Locked(self, Value: bool) -> None: ...
    @MutableNickName.setter
    def MutableNickName(self, Value: bool) -> None: ...
    @Phase.setter
    def Phase(self, Value: GH_SolutionPhase) -> None: ...


from .Canvas import GH_Canvas
from .Canvas import GH_CanvasChannel
from System import Guid
class IGH_Attributes:
    @overload
    def AppendToAttributeTree(self, attributes: MutableSequence[IGH_Attributes]) -> None: ...
    @overload
    def ExpireLayout(self) -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> PointF: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> PointF: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Selected(self) -> bool: ...
    @overload
    def InvalidateCanvas(self, canvas: GH_Canvas, e: GH_CanvasMouseEvent) -> bool: ...
    @overload
    def IsMenuRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: RectangleF, method: GH_PickBox) -> bool: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, newID: Guid) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def RenderToCanvas(self, canvas: GH_Canvas, channel: GH_CanvasChannel) -> None: ...
    @Bounds.setter
    def Bounds(self, Value: RectangleF) -> None: ...
    @Parent.setter
    def Parent(self, Value: IGH_Attributes) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...


class IGH_Author:
    @property
    def Address(self) -> str: ...
    @property
    def Company(self) -> str: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Email(self) -> str: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Phone(self) -> str: ...
    @property
    def Website(self) -> str: ...


from Rhino import RhinoDoc
from System import Guid
class IGH_BakeAwareData:
    @overload
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes) -> Tuple[bool, Guid]: ...


from Rhino import RhinoDoc
class IGH_BakeAwareObject:
    @overload
    def BakeGeometry(self, doc: RhinoDoc, obj_ids: MutableSequence[Guid]) -> None: ...
    @overload
    def BakeGeometry(self, doc: RhinoDoc, att: ObjectAttributes, obj_ids: MutableSequence[Guid]) -> None: ...
    @property
    def IsBakeCapable(self) -> bool: ...


class IGH_Component:
    @property
    def DataComparison(self) -> GH_DataComparison: ...
    @property
    def InConstructor(self) -> bool: ...
    @property
    def IsValidMasterParameterIndex(self) -> bool: ...
    @property
    def MasterParameterIndex(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def Params(self) -> GH_ComponentParamServer: ...
    @property
    def RunCount(self) -> int: ...
    @DataComparison.setter
    def DataComparison(self, Value: GH_DataComparison) -> None: ...
    @MasterParameterIndex.setter
    def MasterParameterIndex(self, Value: int) -> None: ...
    @Message.setter
    def Message(self, Value: str) -> None: ...


class IGH_ContextualComponent:
    @property
    def Archive(self) -> GH_Archive: ...


class IGH_ContextualParameter:
    @overload
    def AssignContextualData(self, data: Iterable[Any]) -> None: ...
    @overload
    def AutoAssignContextualData(self, context: GH_ParameterContext) -> bool: ...
    @property
    def AtLeast(self) -> int: ...
    @property
    def AtMost(self) -> int: ...
    @property
    def ContextualData(self) -> Iterable[object]: ...
    @property
    def Immediate(self) -> bool: ...
    @property
    def Prompt(self) -> str: ...


class IGH_ContextualParameter2:
    @overload
    def ClearContextualData(self) -> None: ...


from .Data import GH_Path
from .Data import IGH_DataTree
from .Data import IGH_Structure
from .Data import GH_Structure
class IGH_DataAccess:
    @overload
    def AbortComponentSolution(self) -> None: ...
    @overload
    def BlitData(self, paramIndex: int, tree: GH_Structure, overwrite: bool) -> bool: ...
    @overload
    def DisableGapLogic(self) -> None: ...
    @overload
    def DisableGapLogic(self, paramIndex: int) -> None: ...
    @property
    def Iteration(self) -> int: ...
    @overload
    def GetData(self, name: str, destination: T) -> Tuple[bool, T]: ...
    @overload
    def GetData(self, index: int, destination: T) -> Tuple[bool, T]: ...
    @overload
    def GetDataList(self, name: str, list: MutableSequence[T]) -> bool: ...
    @overload
    def GetDataList(self, index: int, list: MutableSequence[T]) -> bool: ...
    @overload
    def GetDataTree(self, index: int) -> Tuple[bool, GH_Structure]: ...
    @overload
    def GetDataTree(self, name: str) -> Tuple[bool, GH_Structure]: ...
    @overload
    def IncrementIteration(self) -> None: ...
    @overload
    def ParameterTargetIndex(self, paramIndex: int) -> int: ...
    @overload
    def ParameterTargetPath(self, paramIndex: int) -> GH_Path: ...
    @overload
    def SetData(self, paramIndex: int, data: object) -> bool: ...
    @overload
    def SetData(self, paramName: str, data: object) -> bool: ...
    @overload
    def SetData(self, paramIndex: int, data: object, itemIndexOverride: int) -> bool: ...
    @overload
    def SetDataList(self, paramIndex: int, data: Iterable[Any]) -> bool: ...
    @overload
    def SetDataList(self, paramName: str, data: Iterable[Any]) -> bool: ...
    @overload
    def SetDataList(self, paramIndex: int, data: Iterable[Any], listIndexOverride: int) -> bool: ...
    @overload
    def SetDataTree(self, paramIndex: int, tree: IGH_DataTree) -> bool: ...
    @overload
    def SetDataTree(self, paramIndex: int, tree: IGH_Structure) -> bool: ...
    @overload
    def Util_CountNonNullRefs(self, L: MutableSequence[T]) -> int: ...
    @overload
    def Util_CountNullRefs(self, L: MutableSequence[T]) -> int: ...
    @overload
    def Util_EnsureNonNullCount(self, L: MutableSequence[T], N: int) -> bool: ...
    @overload
    def Util_FirstNonNullItem(self, L: MutableSequence[T]) -> int: ...
    @overload
    def Util_RemoveNullRefs(self, L: MutableSequence[T]) -> MutableSequence[T]: ...


class IGH_DebugDescription:
    @overload
    def AppendToDebugLog(self, writer: GH_DebugDescriptionWriter) -> None: ...


from System import Guid
from .Undo import IGH_UndoAction
from .Undo import GH_UndoRecord
from .Forms import ToolStripDropDown
class IGH_DocumentObject:
    @overload
    def add_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    @overload
    def add_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    @overload
    def add_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    @overload
    def add_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    @overload
    def add_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    @overload
    def add_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    @overload
    def AddedToDocument(self, document: GH_Document) -> None: ...
    @overload
    def AppendMenuItems(self, menu: ToolStripDropDown) -> bool: ...
    @overload
    def CreateAttributes(self) -> None: ...
    @overload
    def DocumentContextChanged(self, document: GH_Document, context: GH_DocumentContext) -> None: ...
    @overload
    def ExpirePreview(self, redraw: bool) -> None: ...
    @overload
    def ExpireSolution(self, recompute: bool) -> None: ...
    @property
    def Attributes(self) -> IGH_Attributes: ...
    @property
    def ComponentGuid(self) -> Guid: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Icon_24x24_Locked(self) -> Bitmap: ...
    @property
    def IconDisplayMode(self) -> GH_IconDisplayMode: ...
    @property
    def Obsolete(self) -> bool: ...
    @overload
    def IsolateObject(self) -> None: ...
    @overload
    def MovedBetweenDocuments(self, oldDocument: GH_Document, newDocument: GH_Document) -> None: ...
    @overload
    def OnAttributesChanged(self) -> None: ...
    @overload
    def OnDisplayExpired(self, redraw: bool) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str) -> None: ...
    @overload
    def OnObjectChanged(self, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType) -> None: ...
    @overload
    def OnObjectChanged(self, eventType: GH_ObjectEventType, tag: object) -> None: ...
    @overload
    def OnObjectChanged(self, customEvent: str, tag: object) -> None: ...
    @overload
    def OnPingDocument(self) -> GH_Document: ...
    @overload
    def OnPreviewExpired(self, redraw: bool) -> None: ...
    @overload
    def OnSolutionExpired(self, recompute: bool) -> None: ...
    @overload
    def RecordUndoEvent(self, record: GH_UndoRecord) -> None: ...
    @overload
    def RecordUndoEvent(self, undoName: str) -> Guid: ...
    @overload
    def RecordUndoEvent(self, undoName: str, action: IGH_UndoAction) -> Guid: ...
    @overload
    def remove_AttributesChanged(self, obj: AttributesChangedEventHandler) -> None: ...
    @overload
    def remove_DisplayExpired(self, obj: DisplayExpiredEventHandler) -> None: ...
    @overload
    def remove_ObjectChanged(self, obj: ObjectChangedEventHandler) -> None: ...
    @overload
    def remove_PingDocument(self, obj: PingDocumentEventHandler) -> None: ...
    @overload
    def remove_PreviewExpired(self, obj: PreviewExpiredEventHandler) -> None: ...
    @overload
    def remove_SolutionExpired(self, obj: SolutionExpiredEventHandler) -> None: ...
    @overload
    def RemovedFromDocument(self, document: GH_Document) -> None: ...
    @Attributes.setter
    def Attributes(self, Value: IGH_Attributes) -> None: ...
    @IconDisplayMode.setter
    def IconDisplayMode(self, Value: GH_IconDisplayMode) -> None: ...
    @overload
    def TriggerAutoSave(self) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def TriggerAutoSave(self, id: Guid) -> None: ...
    @overload
    def TriggerAutoSave(self, trigger: GH_AutoSaveTrigger, id: Guid) -> None: ...


class IGH_DocumentOwner:
    @overload
    def DocumentClosed(self, document: GH_Document) -> None: ...
    @overload
    def DocumentModified(self, document: GH_Document) -> None: ...
    @overload
    def OwnerDocument(self) -> GH_Document: ...


class IGH_EventConsumer:
    @overload
    def IsRelevantEvent(self, obj: RhinoObject) -> bool: ...
    @overload
    def PartialExpiration(self, server: GH_CustomEventServer) -> None: ...
    @overload
    def TotalExpiration(self, server: GH_CustomEventServer) -> None: ...


class IGH_InitCodeAware:
    @overload
    def SetInitCode(self, code: str) -> None: ...


from System import Guid
class IGH_InstanceDescription:
    @property
    def Category(self) -> str: ...
    @property
    def Description(self) -> str: ...
    @property
    def HasCategory(self) -> bool: ...
    @property
    def HasSubCategory(self) -> bool: ...
    @property
    def InstanceDescription(self) -> str: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def Keywords(self) -> Iterable[str]: ...
    @property
    def Name(self) -> str: ...
    @property
    def NickName(self) -> str: ...
    @property
    def SubCategory(self) -> str: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, UUID: Guid) -> None: ...
    @Category.setter
    def Category(self, Value: str) -> None: ...
    @Description.setter
    def Description(self, Value: str) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @NickName.setter
    def NickName(self, Value: str) -> None: ...
    @SubCategory.setter
    def SubCategory(self, Value: str) -> None: ...


from .Generic import SortedDictionary
class IGH_InstanceGuidDependent:
    @overload
    def InstanceGuidsChanged(self, map: SortedDictionary) -> None: ...


from System import Guid
class IGH_ObjectProxy:
    @overload
    def CreateInstance(self) -> IGH_DocumentObject: ...
    @overload
    def DuplicateProxy(self) -> IGH_ObjectProxy: ...
    @property
    def Desc(self) -> IGH_InstanceDescription: ...
    @property
    def Exposure(self) -> GH_Exposure: ...
    @property
    def Guid(self) -> Guid: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Kind(self) -> GH_ObjectType: ...
    @property
    def LibraryGuid(self) -> Guid: ...
    @property
    def Location(self) -> str: ...
    @property
    def Obsolete(self) -> bool: ...
    @property
    def SDKCompliant(self) -> bool: ...
    @property
    def Type(self) -> type: ...
    @Exposure.setter
    def Exposure(self, Value: GH_Exposure) -> None: ...


from System import Guid
from .Generic import IList
from .Data import IGH_Structure
from .Data import GH_Path
class IGH_Param:
    @overload
    def AddSource(self, source: IGH_Param) -> None: ...
    @overload
    def AddSource(self, source: IGH_Param, index: int) -> None: ...
    @overload
    def AddVolatileData(self, path: GH_Path, index: int, data: object) -> bool: ...
    @overload
    def AddVolatileDataList(self, path: GH_Path, list: Iterable[Any]) -> bool: ...
    @overload
    def AddVolatileDataTree(self, tree: IGH_Structure) -> bool: ...
    @overload
    def ClearProxySources(self) -> None: ...
    @overload
    def CreateProxySources(self) -> None: ...
    @property
    def Access(self) -> GH_ParamAccess: ...
    @property
    def DataMapping(self) -> GH_DataMapping: ...
    @property
    def DataType(self) -> GH_ParamData: ...
    @property
    def HasProxySources(self) -> bool: ...
    @property
    def Kind(self) -> GH_ParamKind: ...
    @property
    def Optional(self) -> bool: ...
    @property
    def ProxySourceCount(self) -> int: ...
    @property
    def Recipients(self) -> Iterable[IGH_Param]: ...
    @property
    def Reverse(self) -> bool: ...
    @property
    def Simplify(self) -> bool: ...
    @property
    def SourceCount(self) -> int: ...
    @property
    def Sources(self) -> Iterable[IGH_Param]: ...
    @property
    def StateTags(self) -> GH_StateTagList: ...
    @property
    def Type(self) -> type: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def VolatileData(self) -> IGH_Structure: ...
    @property
    def VolatileDataCount(self) -> int: ...
    @property
    def WireDisplay(self) -> GH_ParamWireDisplay: ...
    @overload
    def RelinkProxySources(self, document: GH_Document) -> bool: ...
    @overload
    def RemoveAllSources(self) -> None: ...
    @overload
    def RemoveEffects(self) -> None: ...
    @overload
    def RemoveSource(self, source: IGH_Param) -> None: ...
    @overload
    def RemoveSource(self, source_id: Guid) -> None: ...
    @overload
    def ReplaceSource(self, old_source: IGH_Param, new_source: IGH_Param) -> None: ...
    @overload
    def ReplaceSource(self, old_source_id: Guid, new_source: IGH_Param) -> None: ...
    @Access.setter
    def Access(self, Value: GH_ParamAccess) -> None: ...
    @DataMapping.setter
    def DataMapping(self, Value: GH_DataMapping) -> None: ...
    @Optional.setter
    def Optional(self, Value: bool) -> None: ...
    @Reverse.setter
    def Reverse(self, Value: bool) -> None: ...
    @Simplify.setter
    def Simplify(self, Value: bool) -> None: ...
    @WireDisplay.setter
    def WireDisplay(self, Value: GH_ParamWireDisplay) -> None: ...


class IGH_ParamNameConstructor:
    @overload
    def Current(self) -> str: ...
    @overload
    def Next(self) -> str: ...
    @overload
    def Reset(self) -> None: ...


class IGH_ParamWithPostProcess:
    @overload
    def PostProcessData(self) -> None: ...


class IGH_PreviewArgs:
    @property
    def DefaultCurveThickness(self) -> int: ...
    @property
    def Display(self) -> DisplayPipeline: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def MeshingParameters(self) -> MeshingParameters: ...
    @property
    def ShadeMaterial(self) -> DisplayMaterial: ...
    @property
    def ShadeMaterial_Selected(self) -> DisplayMaterial: ...
    @property
    def Viewport(self) -> RhinoViewport: ...
    @property
    def WireColour(self) -> Color: ...
    @property
    def WireColour_Selected(self) -> Color: ...


class IGH_PreviewData:
    @overload
    def DrawViewportMeshes(self, args: GH_PreviewMeshArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: GH_PreviewWireArgs) -> None: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...


class IGH_PreviewMeshData:
    @overload
    def DestroyPreviewMeshes(self) -> None: ...
    @overload
    def GetPreviewMeshes(self) -> Iterable[Mesh]: ...


class IGH_PreviewObject:
    @overload
    def DrawViewportMeshes(self, args: IGH_PreviewArgs) -> None: ...
    @overload
    def DrawViewportWires(self, args: IGH_PreviewArgs) -> None: ...
    @property
    def ClippingBox(self) -> BoundingBox: ...
    @property
    def Hidden(self) -> bool: ...
    @property
    def IsPreviewCapable(self) -> bool: ...
    @Hidden.setter
    def Hidden(self, Value: bool) -> None: ...


from System import Guid
class IGH_ProxyParameter:
    @property
    def ProxyGuid(self) -> Guid: ...


class IGH_RenderAwareData:
    @overload
    def AppendRenderGeometry(self, args: GH_RenderArgs, material: RenderMaterial) -> None: ...


class IGH_ScriptInstance:
    @overload
    def AfterRunScript(self) -> None: ...
    @overload
    def BeforeRunScript(self) -> None: ...
    @overload
    def InvokeRunScript(self, owner: IGH_Component, rhinoDocument: object, iteration: int, inputs: MutableSequence[object], DA: IGH_DataAccess) -> None: ...


class IGH_StateAwareObject:
    @overload
    def LoadState(self, state: str) -> None: ...
    @overload
    def SaveState(self) -> str: ...


class IGH_StateTag:
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Stage(self) -> Rectangle: ...
    @property
    def StateDescription(self) -> str: ...
    @overload
    def Render(self, graphics: Graphics) -> None: ...
    @Stage.setter
    def Stage(self, Value: Rectangle) -> None: ...
    @StateDescription.setter
    def StateDescription(self, Value: str) -> None: ...


class IGH_SyncObject:
    pass


class IGH_TaskCapableComponent:
    @property
    def InPreSolve(self) -> bool: ...
    @property
    def UseTasks(self) -> bool: ...
    @overload
    def RequestTaskCancellation(self) -> None: ...
    @InPreSolve.setter
    def InPreSolve(self, Value: bool) -> None: ...
    @UseTasks.setter
    def UseTasks(self, Value: bool) -> None: ...


from System import DateTime
from System import Guid
class IGH_UpgradeObject:
    @property
    def UpgradeFrom(self) -> Guid: ...
    @property
    def UpgradeTo(self) -> Guid: ...
    @property
    def Version(self) -> DateTime: ...
    @overload
    def Upgrade(self, target: IGH_DocumentObject, document: GH_Document) -> IGH_DocumentObject: ...


from .Forms import ToolStripMenuItem
from .Types import IGH_Goo
from .Data import IGH_Structure
class IGH_UserPromptAware:
    @overload
    def PromptMenuMultipleItems(self) -> ToolStripMenuItem: ...
    @overload
    def PromptMenuSingleItem(self) -> ToolStripMenuItem: ...
    @overload
    def PromptMultipleItems(self) -> IGH_Structure: ...
    @overload
    def PromptSingleItem(self) -> IGH_Goo: ...


class IGH_ValueProxy:
    @overload
    def Duplicate(self) -> IGH_ValueProxy: ...
    @overload
    def FromString(self, in_: str) -> bool: ...
    @property
    def IsParsable(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ProxyName(self) -> str: ...
    @property
    def ProxyType(self) -> type: ...
    @property
    def ProxyValue(self) -> object: ...
    @property
    def UserString(self) -> str: ...
    @overload
    def MutateString(self, in_: str) -> str: ...
    @UserString.setter
    def UserString(self, Value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class IGH_VariableParameterComponent:
    @overload
    def CanInsertParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    @overload
    def CanRemoveParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    @overload
    def CreateParameter(self, side: GH_ParameterSide, index: int) -> IGH_Param: ...
    @overload
    def DestroyParameter(self, side: GH_ParameterSide, index: int) -> bool: ...
    @overload
    def VariableParameterMaintenance(self) -> None: ...


class IGH_VarParamComponent:
    @overload
    def ConstructVariable(self, e: GH_VarParamEventArgs) -> IGH_Param: ...
    @property
    def IsInputVariable(self) -> bool: ...
    @property
    def IsOutputVariable(self) -> bool: ...
    @overload
    def IsVariableParam(self, e: GH_VarParamEventArgs) -> bool: ...
    @overload
    def ManagerConstructed(self, side: GH_VarParamSide, manager: GH_VariableParameterManager) -> None: ...
    @overload
    def ParametersModified(self, side: GH_VarParamSide) -> None: ...


class IGH_ZuiAction:
    @property
    def Name(self) -> str: ...
    @overload
    def Perform(self) -> None: ...


from .RemotePanel import IRcpItem
class IRcpAwareObject:
    @overload
    def PublishRcpItem(self) -> IRcpItem: ...


class MatchingMode(Enum):
    Equals = 0
    Wildcards = 1
    Regex = 2
    Contains = 3
    StartsWith = 4
    EndsWith = 5


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ModifiedChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocModifiedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocModifiedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Guid
from .Canvas import GH_Canvas
from .Canvas import GH_CanvasChannel
from .Forms import KeyEventArgs
from .Canvas import GH_ObjectResponse
class NullParamAttributes:
    @overload
    def __init__(self, param: IGH_Param): ...
    @overload
    def AppendToAttributeTree(self, attributes: MutableSequence[IGH_Attributes]) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExpireLayout(self) -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> PointF: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> PointF: ...
    @property
    def Owner(self) -> IGH_Param: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InvalidateCanvas(self, canvas: GH_Canvas, e: GH_CanvasMouseEvent) -> bool: ...
    @overload
    def IsMenuRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: RectangleF, method: GH_PickBox) -> bool: ...
    @overload
    def IsTooltipRegion(self, point: PointF) -> bool: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, newId: Guid) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def RenderToCanvas(self, canvas: GH_Canvas, channel: GH_CanvasChannel) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Bounds.setter
    def Bounds(self, Value: RectangleF) -> None: ...
    @Parent.setter
    def Parent(self, Value: IGH_Attributes) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, point: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ObjectChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_ObjectChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_ObjectChangedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ObjectsAddedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocObjectEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ObjectsDeletedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocObjectEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ParameterChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_ParamServerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_ParamServerEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ParameterNickNameChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_ParamServerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_ParamServerEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ParameterSourcesChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_ParamServerEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_ParamServerEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class PingDocumentEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_PingDocumentEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_PingDocumentEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class PreviewExpiredEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_PreviewExpiredEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_PreviewExpiredEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SaveOnDataFlatteningChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SaveOnDocumentUnloadChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SaveOnObjectAddedChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SaveOnObjectChangeChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SaveOnObjectRemovedChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SaveOnWireEventChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class ScriptFamilyChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SettingsChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocSettingsEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocSettingsEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SolutionEndEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_SolutionEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_SolutionEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SolutionExpiredEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: IGH_DocumentObject, e: GH_SolutionExpiredEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: IGH_DocumentObject, e: GH_SolutionExpiredEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class SolutionStartEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_SolutionEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_SolutionEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class StandardFamilyChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from .Serialization import SerializationInfo
from .Serialization import StreamingContext
class UndoStateChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_DocUndoEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_DocUndoEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
