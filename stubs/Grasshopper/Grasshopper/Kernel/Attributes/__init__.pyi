from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from Grasshopper.Kernel import IGH_Component
from System.Drawing import RectangleF
from Grasshopper.GUI.Canvas import GH_Canvas
from Grasshopper.GUI import GH_CanvasMouseEvent
from Grasshopper.GUI.Canvas import GH_ObjectResponse
from System.Drawing import PointF
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
from System.Drawing import Graphics
from Grasshopper.GUI.Canvas import GH_PaletteStyle
from Grasshopper.Kernel import GH_PickBox
from Grasshopper.Kernel import IGH_Attributes
from Grasshopper.Kernel import IGH_DocumentObject
from System import Guid
from GH_IO.Serialization import GH_IWriter
from GH_IO.Serialization import GH_IReader
from Grasshopper.GUI.Canvas import GH_CanvasChannel
from System.Windows.Forms import KeyEventArgs
class GH_ComponentAttributes:
    @overload
    def __init__(self, component: IGH_Component): ...
    @overload
    def AppendToAttributeTree(self, attributes: MutableSequence[IGH_Attributes]) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExpireLayout(self) -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def ContentBox(self) -> RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> PointF: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> PointF: ...
    @property
    def Owner(self) -> IGH_Component: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InvalidateCanvas(self, canvas: GH_Canvas, e: GH_CanvasMouseEvent) -> bool: ...
    @overload
    def IsMenuRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: RectangleF, method: GH_PickBox) -> bool: ...
    @overload
    def IsTooltipRegion(self, point: PointF) -> bool: ...
    @overload
    @staticmethod
    def LayoutBounds(owner: IGH_Component, bounds: RectangleF) -> RectangleF: ...
    @overload
    @staticmethod
    def LayoutComponentBox(owner: IGH_Component) -> RectangleF: ...
    @overload
    @staticmethod
    def LayoutInputParams(owner: IGH_Component, componentBox: RectangleF) -> None: ...
    @overload
    @staticmethod
    def LayoutOutputParams(owner: IGH_Component, componentBox: RectangleF) -> None: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, newId: Guid) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    @staticmethod
    def RenderComponentParameters(canvas: GH_Canvas, graphics: Graphics, owner: IGH_Component, style: GH_PaletteStyle) -> None: ...
    @overload
    def RenderToCanvas(self, canvas: GH_Canvas, channel: GH_CanvasChannel) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Bounds.setter
    def Bounds(self, Value: RectangleF) -> None: ...
    @Parent.setter
    def Parent(self, Value: IGH_Attributes) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from Grasshopper.Kernel import IGH_Param
from System.Drawing import PointF
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
from Grasshopper.GUI.Canvas import GH_Canvas
from Grasshopper.GUI import GH_CanvasMouseEvent
from Grasshopper.GUI.Canvas import GH_ObjectResponse
from System.Drawing import RectangleF
from Grasshopper.Kernel import GH_PickBox
from Grasshopper.Kernel import IGH_Attributes
from Grasshopper.Kernel import IGH_DocumentObject
from System import Guid
from GH_IO.Serialization import GH_IWriter
from GH_IO.Serialization import GH_IReader
from Grasshopper.GUI.Canvas import GH_CanvasChannel
from System.Windows.Forms import KeyEventArgs
class GH_FloatingParamAttributes:
    @overload
    def __init__(self, param: IGH_Param): ...
    DefaultWidth: int
    IconHeight: int
    TextHeight: int
    @overload
    def AppendToAttributeTree(self, attributes: MutableSequence[IGH_Attributes]) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExpireLayout(self) -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> PointF: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> PointF: ...
    @property
    def Owner(self) -> IGH_Param: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InvalidateCanvas(self, canvas: GH_Canvas, e: GH_CanvasMouseEvent) -> bool: ...
    @overload
    def IsMenuRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: RectangleF, method: GH_PickBox) -> bool: ...
    @overload
    def IsTooltipRegion(self, point: PointF) -> bool: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, newId: Guid) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def RenderToCanvas(self, canvas: GH_Canvas, channel: GH_CanvasChannel) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Bounds.setter
    def Bounds(self, Value: RectangleF) -> None: ...
    @Parent.setter
    def Parent(self, Value: IGH_Attributes) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, point: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from Grasshopper.Kernel import IGH_Param
from Grasshopper.Kernel import IGH_Attributes
from System.Drawing import PointF
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
from System.Drawing import RectangleF
from Grasshopper.Kernel import GH_PickBox
from Grasshopper.Kernel import IGH_DocumentObject
from System import Guid
from GH_IO.Serialization import GH_IWriter
from GH_IO.Serialization import GH_IReader
from Grasshopper.GUI.Canvas import GH_Canvas
from Grasshopper.GUI.Canvas import GH_CanvasChannel
from Grasshopper.GUI import GH_CanvasMouseEvent
from System.Windows.Forms import KeyEventArgs
from Grasshopper.GUI.Canvas import GH_ObjectResponse
class GH_LinkedParamAttributes:
    @overload
    def __init__(self, param: IGH_Param, parent: IGH_Attributes): ...
    @overload
    def AppendToAttributeTree(self, attributes: MutableSequence[IGH_Attributes]) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def ExpireLayout(self) -> None: ...
    @property
    def AllowMessageBalloon(self) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def DocObject(self) -> IGH_DocumentObject: ...
    @property
    def GetTopLevel(self) -> IGH_Attributes: ...
    @property
    def HasInputGrip(self) -> bool: ...
    @property
    def HasOutputGrip(self) -> bool: ...
    @property
    def InputGrip(self) -> PointF: ...
    @property
    def InstanceGuid(self) -> Guid: ...
    @property
    def IsTopLevel(self) -> bool: ...
    @property
    def OutputGrip(self) -> PointF: ...
    @property
    def Owner(self) -> IGH_Param: ...
    @property
    def Parent(self) -> IGH_Attributes: ...
    @property
    def PathName(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def InvalidateCanvas(self, canvas: GH_Canvas, e: GH_CanvasMouseEvent) -> bool: ...
    @overload
    def IsMenuRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, point: PointF) -> bool: ...
    @overload
    def IsPickRegion(self, box: RectangleF, method: GH_PickBox) -> bool: ...
    @overload
    def IsTooltipRegion(self, point: PointF) -> bool: ...
    @overload
    def NewInstanceGuid(self) -> None: ...
    @overload
    def NewInstanceGuid(self, newId: Guid) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def RenderToCanvas(self, canvas: GH_Canvas, channel: GH_CanvasChannel) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Bounds.setter
    def Bounds(self, Value: RectangleF) -> None: ...
    @Parent.setter
    def Parent(self, Value: IGH_Attributes) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, point: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


