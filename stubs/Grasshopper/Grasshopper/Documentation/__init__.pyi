from typing import overload, Any
from collections.abc import Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from System import IFormatProvider
from System import TypeCode
from System.Collections.ObjectModel import ReadOnlyCollection



class GH_Audience(Enum):
    Beginner = 0
    Intermediate = 1
    Expert = 2


class GH_ContentCollection:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Content(self) -> MutableSequence[IGH_Content]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Sequence[IGH_Content]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Format:
    @overload
    @staticmethod
    def Create(content: str, style: GH_Style) -> GH_Format: ...
    @overload
    @staticmethod
    def Create(content: IGH_Content, style: GH_Style) -> GH_Format: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Content(self) -> IGH_Content: ...
    @property
    def Style(self) -> GH_Style: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_GlossaryItem:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Author(self) -> IGH_Content: ...
    @property
    def Contact(self) -> IGH_Content: ...
    @property
    def Descriptions(self) -> MutableSequence[IGH_Content]: ...
    @property
    def Path(self) -> str: ...
    @property
    def Pronunciation(self) -> IGH_Content: ...
    @property
    def Synonyms(self) -> ReadOnlyCollection: ...
    @property
    def Word(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def ParseFile(path: str) -> GH_GlossaryItem: ...
    @overload
    def ToString(self) -> str: ...


class GH_Link:
    @overload
    @staticmethod
    def CreateExternalLink(text: str, url: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateExternalLink(text: str, url: str, tooltip: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateGlossaryLink(text: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateGlossaryLink(text: str, glossaryEntry: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateSharedLink(linkId: str, target: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateSharedLink(linkId: str, target: str, tooltip: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateTopicLink(text: str, topicName: str) -> GH_Link: ...
    @overload
    @staticmethod
    def CreateTopicLink(text: str, topicName: str, tooltip: str) -> GH_Link: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Destination(self) -> str: ...
    @property
    def IsSharedLink(self) -> bool: ...
    @property
    def LinkId(self) -> str: ...
    @property
    def Target(self) -> GH_Target: ...
    @property
    def Text(self) -> IGH_Content: ...
    @property
    def Tooltip(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_List:
    @overload
    @staticmethod
    def Create(ordered: bool) -> GH_List: ...
    @overload
    @staticmethod
    def Create(ordered: bool, items: Iterable[IGH_Content]) -> GH_List: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Items(self) -> MutableSequence[IGH_Content]: ...
    @property
    def Ordered(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Paragraph:
    @overload
    @staticmethod
    def Create(content: str) -> GH_Paragraph: ...
    @overload
    @staticmethod
    def Create(content: Iterable[str]) -> GH_Paragraph: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Content(self) -> IGH_Content: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Parser:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def Whitespace(cls) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsChapterHeaderLine(line: str) -> bool: ...
    @overload
    @staticmethod
    def IsCommentLine(line: str) -> bool: ...
    @overload
    @staticmethod
    def IsLinkLine(line: str) -> bool: ...
    @overload
    @staticmethod
    def IsLinkLine(line: str) -> tuple[bool, str, str, str]: ...
    @overload
    @staticmethod
    def IsListLine(line: str) -> bool: ...
    @overload
    @staticmethod
    def IsParagraphHeaderLine(line: str) -> bool: ...
    @overload
    @staticmethod
    def IsQuoteLine(line: str) -> bool: ...
    @overload
    @staticmethod
    def StringToFragment(text: str) -> IGH_Content: ...
    @overload
    def ToString(self) -> str: ...


class GH_RuntimeFile:
    TagAuthor: str
    TagContact: str
    TagTitle: str
    TagSeeAlso: str
    TagCategory: str
    TagKeywords: str
    TagSynonyms: str
    TagErranyms: str
    TagComponent: str
    TagRhinoCommand: str
    TagPronunciation: str
    TagExpert: str
    TagBeginner: str
    TagDescription: str
    TagIntermediate: str
    TagAutoLink: str
    TagInclude: str
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Content(self, key: str) -> MutableSequence[Iterable[str]]: ...
    @property
    def Keys(self) -> MutableSequence[str]: ...
    @property
    def Path(self) -> str: ...
    @property
    @classmethod
    def Tags(cls) -> Iterable[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsTag(text: str) -> bool: ...
    @overload
    @staticmethod
    def IsTagLine(line: str) -> tuple[bool, str, str]: ...
    @overload
    @staticmethod
    def ParseFile(path: str) -> GH_RuntimeFile: ...
    @overload
    def ToString(self) -> str: ...


class GH_Style(Enum):
    # None = 0
    WeakEmphasis = 1
    StrongEmphasis = 2
    Monospaced = 3
    Boxed = 4
    ChapterHeader = 5
    ParagraphHeader = 6


class GH_Target(Enum):
    Glossary = 0
    Topic = 1
    External = 2


class GH_Text:
    @overload
    @staticmethod
    def Create(text: str) -> GH_Text: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Topic:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self, level: GH_Audience) -> GH_ContentCollection: ...
    @property
    def SafeDescription(self, level: GH_Audience) -> GH_ContentCollection: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def ParseFile(path: str) -> GH_Topic: ...
    @overload
    def ToString(self) -> str: ...


class IGH_Content:
    pass
