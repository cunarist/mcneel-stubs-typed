from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Params

__all__ = ['Params']


from Rhino.Geometry import Point2d
from Rhino.Geometry import Vector2d
from Rhino.DocObjects import HatchLine
class Attributes:
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Attributes) -> bool: ...
    @overload
    @staticmethod
    def From(modelHatchLine: HatchLine) -> Attributes: ...
    @property
    def Angle(self) -> float: ...
    @property
    def Base(self) -> Point2d: ...
    @property
    def Offset(self) -> Vector2d: ...
    @property
    def Segments(self) -> IReadOnlyList: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Angle.setter
    def Angle(self, AutoPropertyValue: float) -> None: ...
    @Base.setter
    def Base(self, AutoPropertyValue: Point2d) -> None: ...
    @Offset.setter
    def Offset(self, AutoPropertyValue: Vector2d) -> None: ...
    @Segments.setter
    def Segments(self, AutoPropertyValue: IReadOnlyList) -> None: ...
    @overload
    def ToHatchLine(self) -> HatchLine: ...
    @overload
    def ToString(self) -> str: ...


from Grasshopper.Rhinoceros import ModelData
from Grasshopper.Rhinoceros import ModelUserText
from Grasshopper.Rhinoceros import ModelContentName
from Grasshopper.Rhinoceros import ModelTags
from Grasshopper.Rhinoceros import Attributes
class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Lines(self) -> IReadOnlyList: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Tags(self) -> ModelTags: ...
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(path: str) -> Attributes: ...
    @Lines.setter
    def Lines(self, AutoPropertyValue: IReadOnlyList) -> None: ...
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @UserText.setter
    def UserText(self, AutoPropertyValue: ModelUserText) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


from System import Nullable
from Grasshopper.Rhinoceros import ModelData
from Grasshopper.Rhinoceros import ModelUserText
from Grasshopper.Rhinoceros import ModelContentName
from Grasshopper.Rhinoceros import ModelTags
from Grasshopper.Rhinoceros import Attributes
class Attributes:
    @overload
    def __init__(self): ...
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def CapStyle(self) -> Nullable: ...
    @property
    def JoinStyle(self) -> Nullable: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Segments(self) -> IReadOnlyList: ...
    @property
    def Tags(self) -> ModelTags: ...
    @property
    def TaperPoints(self) -> IReadOnlyList: ...
    @property
    def UserText(self) -> ModelUserText: ...
    @property
    def Width(self) -> Nullable: ...
    @property
    def WidthUnits(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(path: str) -> Attributes: ...
    @CapStyle.setter
    def CapStyle(self, AutoPropertyValue: Nullable) -> None: ...
    @JoinStyle.setter
    def JoinStyle(self, AutoPropertyValue: Nullable) -> None: ...
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @Segments.setter
    def Segments(self, AutoPropertyValue: IReadOnlyList) -> None: ...
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @TaperPoints.setter
    def TaperPoints(self, value: IReadOnlyList) -> None: ...
    @UserText.setter
    def UserText(self, AutoPropertyValue: ModelUserText) -> None: ...
    @Width.setter
    def Width(self, AutoPropertyValue: Nullable) -> None: ...
    @WidthUnits.setter
    def WidthUnits(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


from System import Nullable
class Attributes:
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Attributes) -> bool: ...
    @property
    def Color(self) -> Nullable: ...
    @property
    def LineScale(self) -> Nullable: ...
    @property
    def Linetype(self) -> Nullable: ...
    @property
    def LineWidth(self) -> Nullable: ...
    @property
    def Order(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Color.setter
    def Color(self, AutoPropertyValue: Nullable) -> None: ...
    @LineScale.setter
    def LineScale(self, AutoPropertyValue: Nullable) -> None: ...
    @Linetype.setter
    def Linetype(self, AutoPropertyValue: Nullable) -> None: ...
    @LineWidth.setter
    def LineWidth(self, AutoPropertyValue: Nullable) -> None: ...
    @Order.setter
    def Order(self, AutoPropertyValue: Nullable) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import HatchLine
from Rhino.Geometry import Point2d
from Rhino.Geometry import Vector2d
from Grasshopper.Rhinoceros import ModelValue
from Grasshopper.Rhinoceros import T
from Grasshopper.Rhinoceros import ModelValue
class ModelHatchLine(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, hatchLine: HatchLine): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelHatchLine: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def Angle(self) -> float: ...
    @property
    def Base(self) -> Point2d: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Offset(self) -> Vector2d: ...
    @property
    def Segments(self) -> IReadOnlyList: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelHatchLine: ...
    @overload
    def op_Implicit(hatchLine: HatchLine) -> ModelHatchLine: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToHatchLine(self) -> HatchLine: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import HatchPattern
from System import Guid
from System import Nullable
from Grasshopper.Rhinoceros import Attributes
from Grasshopper.Rhinoceros import ModelUserText
from Grasshopper.Rhinoceros import ModelContentName
from Grasshopper.Rhinoceros import ModelTags
from Grasshopper.Rhinoceros import ModelContent
from Grasshopper.Rhinoceros import T
from Grasshopper.Rhinoceros import ModelData
from Grasshopper.Rhinoceros import ModelComponentContent
class ModelHatchPattern(ModelComponentContent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, pattern: HatchPattern): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelHatchPattern: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def FillType(self) -> Nullable: ...
    @property
    def Id(self) -> Nullable: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Lines(self) -> IReadOnlyList: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Tags(self) -> ModelTags: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Unset() -> ModelHatchPattern: ...
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(pattern: HatchPattern) -> ModelHatchPattern: ...
    @overload
    def op_Implicit(path: str) -> ModelHatchPattern: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelHatchPattern: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import Linetype
from System import Guid
from Grasshopper.Rhinoceros import ModelContentName
from System import Nullable
from Grasshopper.Rhinoceros import Attributes
from Grasshopper.Rhinoceros import ModelUserText
from Grasshopper.Rhinoceros import ModelTags
from Grasshopper.Rhinoceros import ModelContent
from Grasshopper.Rhinoceros import T
from Grasshopper.Rhinoceros import ModelData
from Grasshopper.Rhinoceros import ModelComponentContent
class ModelLinetype(ModelComponentContent):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    def __init__(self, linetype: Linetype): ...
    @overload
    def __init__(self, id: Guid): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelLinetype: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @property
    def CapStyle(self) -> Nullable: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Id(self) -> Nullable: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def JoinStyle(self) -> Nullable: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Segments(self) -> IReadOnlyList: ...
    @property
    def Tags(self) -> ModelTags: ...
    @property
    def TaperPoints(self) -> IReadOnlyList: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Unset() -> ModelLinetype: ...
    @property
    def UserText(self) -> ModelUserText: ...
    @property
    def Width(self) -> Nullable: ...
    @property
    def WidthUnits(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(linetype: Linetype) -> ModelLinetype: ...
    @overload
    def op_Implicit(path: str) -> ModelLinetype: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ModelLinetype: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.Geometry import Matrix
from Rhino.Geometry import Point3d
from Rhino.Geometry import Vector3d
from System.Drawing import Color
from Rhino.Geometry import Interval
from GH_IO.Serialization import GH_IWriter
from GH_IO.Serialization import GH_IReader
class ModelLineWidth(GH_Number):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Duplicate(self) -> IGH_Goo: ...
    @overload
    def DuplicateNumber(self) -> GH_Number: ...
    @overload
    def EmitProxy(self) -> IGH_GooProxy: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelLineWidth) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def QC_Type(self) -> GH_QuickCastType: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def QC_Bool(self) -> bool: ...
    @overload
    def QC_Col(self) -> Color: ...
    @overload
    def QC_CompareTo(self, other: IGH_QuickCast) -> int: ...
    @overload
    def QC_Complex(self) -> Complex: ...
    @overload
    def QC_Distance(self, other: IGH_QuickCast) -> float: ...
    @overload
    def QC_Hash(self) -> int: ...
    @overload
    def QC_Int(self) -> int: ...
    @overload
    def QC_Interval(self) -> Interval: ...
    @overload
    def QC_Matrix(self) -> Matrix: ...
    @overload
    def QC_Num(self) -> float: ...
    @overload
    def QC_Pt(self) -> Point3d: ...
    @overload
    def QC_Text(self) -> str: ...
    @overload
    def QC_Vec(self) -> Vector3d: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ScriptVariable(self) -> object: ...
    @Value.setter
    def Value(self, new_value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from System import Nullable
from Grasshopper.Rhinoceros import ModelValue
from Grasshopper.Rhinoceros import ModelValue
class ObjectDrafting(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Attributes): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDrafting: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def Color(self) -> Nullable: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LineScale(self) -> Nullable: ...
    @property
    def Linetype(self) -> Nullable: ...
    @property
    def LineWidth(self) -> Nullable: ...
    @property
    def Order(self) -> Nullable: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(attributes: Attributes) -> ObjectDrafting: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import ObjectPlotColorSource
from System import Nullable
from Grasshopper.Rhinoceros import ModelValue
from Grasshopper.Rhinoceros import ModelValue
class ObjectDraftingColor(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Value): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDraftingColor: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def Color(self) -> Nullable: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Source(self) -> ObjectPlotColorSource: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(data: ObjectDraftingColor) -> Value: ...
    @overload
    def op_Implicit(data: Value) -> ObjectDraftingColor: ...
    @overload
    def ToAttributes(self) -> Value: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import ObjectLinetypeSource
from Grasshopper.Rhinoceros import ModelValue
from Grasshopper.Rhinoceros import ModelValue
class ObjectDraftingLinetype(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Value): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDraftingLinetype: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Linetype(self) -> ModelLinetype: ...
    @property
    def Source(self) -> ObjectLinetypeSource: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(data: ObjectDraftingLinetype) -> Value: ...
    @overload
    def op_Implicit(data: Value) -> ObjectDraftingLinetype: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import ObjectPlotWeightSource
from System import Nullable
from Grasshopper.Rhinoceros import ModelValue
from Grasshopper.Rhinoceros import ModelValue
class ObjectDraftingLineWidth(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, value: Value): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ObjectDraftingLineWidth: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Source(self) -> ObjectPlotWeightSource: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Width(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(data: ObjectDraftingLineWidth) -> Value: ...
    @overload
    def op_Implicit(data: Value) -> ObjectDraftingLineWidth: ...
    @overload
    def ToAttributes(self) -> Value: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import ObjectPlotColorSource
from Grasshopper.Rhinoceros import ModelColor
class Value:
    @overload
    def __init__(self, source: ObjectPlotColorSource): ...
    @overload
    def __init__(self, color: ModelColor): ...
    @overload
    def __init__(self, source: ObjectPlotColorSource, color: ModelColor): ...
    @overload
    def CompareTo(self, other: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Deconstruct(self) -> Tuple[ObjectPlotColorSource, ModelColor]: ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def ByDisplay() -> Value: ...
    @property
    def ByLayer() -> Value: ...
    @property
    def ByParent() -> Value: ...
    @property
    def Color(self) -> ModelColor: ...
    @property
    def Source(self) -> ObjectPlotColorSource: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(color: ModelColor) -> Value: ...
    @overload
    def op_Implicit(source: ObjectPlotColorSource) -> Value: ...
    @overload
    def op_Implicit(value: Value) -> ModelColor: ...
    @overload
    def op_Implicit(value: Value) -> ObjectPlotColorSource: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import ObjectLinetypeSource
class Value:
    @overload
    def __init__(self, source: ObjectLinetypeSource): ...
    @overload
    def __init__(self, value: ModelLinetype): ...
    @overload
    def __init__(self, source: ObjectLinetypeSource, value: ModelLinetype): ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Deconstruct(self) -> Tuple[ObjectLinetypeSource, ModelLinetype]: ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def ByLayer() -> Value: ...
    @property
    def ByParent() -> Value: ...
    @property
    def Continuous() -> Value: ...
    @property
    def Linetype(self) -> ModelLinetype: ...
    @property
    def Source(self) -> ObjectLinetypeSource: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(color: ModelLinetype) -> Value: ...
    @overload
    def op_Implicit(source: ObjectLinetypeSource) -> Value: ...
    @overload
    def op_Implicit(value: Value) -> ModelLinetype: ...
    @overload
    def op_Implicit(value: Value) -> ObjectLinetypeSource: ...
    @overload
    def ToString(self) -> str: ...


from Rhino.DocObjects import ObjectPlotWeightSource
class Value:
    @overload
    def __init__(self, source: ObjectPlotWeightSource): ...
    @overload
    def __init__(self, value: float): ...
    @overload
    def __init__(self, source: ObjectPlotWeightSource, value: float): ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Deconstruct(self) -> Tuple[ObjectPlotWeightSource, float]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @property
    def ByLayer() -> Value: ...
    @property
    def ByParent() -> Value: ...
    @property
    def Source(self) -> ObjectPlotWeightSource: ...
    @property
    def Width(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(source: ObjectPlotWeightSource) -> Value: ...
    @overload
    def op_Implicit(value: Value) -> ObjectPlotWeightSource: ...
    @overload
    def op_Implicit(color: float) -> Value: ...
    @overload
    def op_Implicit(value: Value) -> float: ...
    @overload
    def ToString(self) -> str: ...
