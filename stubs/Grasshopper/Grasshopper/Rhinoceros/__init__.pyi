from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Annotations
import Display
import Drafting
import Model
import Params
import Render

__all__ = ['Annotations', 'Display', 'Drafting', 'Model', 'Params', 'Render']


class Attributes:
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Tags(self) -> ModelTags: ...
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @UserText.setter
    def UserText(self, AutoPropertyValue: ModelUserText) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Tags(self) -> ModelTags: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Name.setter
    def Name(self, Value: ModelContentName) -> None: ...
    @Notes.setter
    def Notes(self, AutoPropertyValue: str) -> None: ...
    @Parent.setter
    def Parent(self, Value: ModelContentName) -> None: ...
    @Path.setter
    def Path(self, Value: ModelContentName) -> None: ...
    @Tags.setter
    def Tags(self, AutoPropertyValue: ModelTags) -> None: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class Attributes:
    @overload
    def Clone(self) -> Attributes: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def ToModelData(self) -> ModelData: ...
    @overload
    def ToString(self) -> str: ...


class ModelColor:
    @overload
    def CompareTo(self, other: ModelColor) -> int: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelColor) -> bool: ...
    @overload
    @staticmethod
    def FromArgb(argb: int) -> ModelColor: ...
    @overload
    @staticmethod
    def FromArgb(r: int, g: int, b: int) -> ModelColor: ...
    @overload
    @staticmethod
    def FromArgb(a: int, r: int, g: int, b: int) -> ModelColor: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __eq__(left: ModelColor, right: ModelColor) -> bool: ...
    @overload
    def __eq__(left: ModelColor, right: Color) -> bool: ...
    @overload
    def __eq__(right: ModelColor, left: Color) -> bool: ...
    @overload
    def op_Explicit(color: ModelColor) -> ColorRGBA: ...
    @overload
    def op_Implicit(color: Color) -> ModelColor: ...
    @overload
    def op_Implicit(color: ColorRGBA) -> ModelColor: ...
    @overload
    def op_Implicit(color: ModelColor) -> Color: ...
    @overload
    def __ne__(left: ModelColor, right: ModelColor) -> bool: ...
    @overload
    def __ne__(left: ModelColor, right: Color) -> bool: ...
    @overload
    def __ne__(right: ModelColor, left: Color) -> bool: ...
    @overload
    def ToArgb(self) -> int: ...
    @overload
    def ToString(self) -> str: ...


from System import Nullable
class ModelComponentContent(ModelContent):
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Id(self) -> Nullable: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Tags(self) -> ModelTags: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def UserText(self) -> ModelUserText: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from System import Guid
from System import Nullable
class ModelContent(ModelData):
    @overload
    @staticmethod
    def Cast(source: object) -> ModelContent: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelContent) -> bool: ...
    @overload
    @staticmethod
    def FromId(document: RhinoDoc, guid: Guid) -> ModelContent: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Id(self) -> Nullable: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> ModelContentName: ...
    @property
    def Notes(self) -> str: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Path(self) -> ModelContentName: ...
    @property
    def Tags(self) -> ModelTags: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ModelContentEnablerLoader(GH_AssemblyPriority):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def PriorityLoad(self) -> GH_LoadingInstruction: ...
    @overload
    def ToString(self) -> str: ...


from System import StringComparer
class ModelContentName:
    Empty: ModelContentName
    Comparer: StringComparer
    @overload
    @staticmethod
    def Combine(paths: Iterable[ModelContentName]) -> ModelContentName: ...
    @overload
    def CompareTo(self, other: ModelContentName) -> int: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ModelContentName) -> bool: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsDefaultOrEmpty(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Parent(self) -> ModelContentName: ...
    @property
    def Separator() -> str: ...
    @property
    def Stem(self) -> ModelContentName: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __truediv__(left: ModelContentName, right: ModelContentName) -> ModelContentName: ...
    @overload
    def __eq__(left: ModelContentName, right: ModelContentName) -> bool: ...
    @overload
    def __eq__(right: ModelContentName, left: str) -> bool: ...
    @overload
    def __eq__(left: ModelContentName, right: str) -> bool: ...
    @overload
    def op_Implicit(value: str) -> ModelContentName: ...
    @overload
    def op_Implicit(value: ModelContentName) -> str: ...
    @overload
    def __ne__(left: ModelContentName, right: ModelContentName) -> bool: ...
    @overload
    def __ne__(right: ModelContentName, left: str) -> bool: ...
    @overload
    def __ne__(left: ModelContentName, right: str) -> bool: ...
    @overload
    def __invert__(value: ModelContentName) -> ModelContentName: ...
    @overload
    def Split(self) -> Iterable[str]: ...
    @overload
    def ToString(self) -> str: ...


class ModelData:
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelData) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToAttributes(self) -> Attributes: ...
    @overload
    def ToDetails(self) -> str: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from .Generic import IReadOnlyList
from .Types import IGH_Goo
from .Types import IGH_GooProxy
from .Types import Q
class ModelFont:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, font: Font): ...
    @overload
    def __init__(self, familyName: str): ...
    @overload
    def CastFrom(self, source: object) -> bool: ...
    @overload
    def CastTo(self, target: Q) -> Tuple[bool, Q]: ...
    @overload
    def Duplicate(self) -> IGH_Goo: ...
    @overload
    def EmitProxy(self) -> IGH_GooProxy: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelFont) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def InstalledFamilies() -> IReadOnlyList: ...
    @property
    def InstalledFonts() -> IReadOnlyList: ...
    @property
    def IsInstalled(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsValidWhyNot(self) -> str: ...
    @property
    def TypeDescription(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Value(self) -> Font: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def IsFamilyNameInstalled(familyName: str) -> bool: ...
    @overload
    def op_Implicit(familyName: str) -> ModelFont: ...
    @overload
    def op_Implicit(font: Font) -> ModelFont: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def ScriptVariable(self) -> object: ...
    @Value.setter
    def Value(self, new_value: Font) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from Rhino import RhinoDoc
class ModelMeshingParameters(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelMeshingParameters: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def DefaultAnalysis() -> ModelMeshingParameters: ...
    @property
    def DefaultRender() -> ModelMeshingParameters: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def FastRender() -> ModelMeshingParameters: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def QualityRender() -> ModelMeshingParameters: ...
    @property
    def TypeName(self) -> str: ...
    @property
    def Unset() -> ModelMeshingParameters: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(parameters: MeshingParameters) -> ModelMeshingParameters: ...
    @overload
    def ToMeshingParameters(self, document: RhinoDoc) -> MeshingParameters: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class ModelTags:
    @overload
    def __init__(self, source: Iterable[str]): ...
    def __iter__(self) -> Iterator[str]: ...
    Empty: ModelTags
    @overload
    def AddRange(self, source: Iterable[str]) -> ModelTags: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: ModelTags) -> int: ...
    @overload
    def Contains(self, value: str) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ModelTags) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsDefaultOrEmpty(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def GetEnumerator(self) -> Iterator[str]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __add__(left: ModelTags, right: Iterable[str]) -> ModelTags: ...
    @overload
    def __eq__(left: ModelTags, right: ModelTags) -> bool: ...
    @overload
    def op_Implicit(value: ModelTags) -> str: ...
    @overload
    def op_Implicit(value: str) -> ModelTags: ...
    @overload
    def __ne__(left: ModelTags, right: ModelTags) -> bool: ...
    @overload
    def __sub__(left: ModelTags, right: Iterable[str]) -> ModelTags: ...
    @overload
    def RemoveRange(self, source: Iterable[str]) -> ModelTags: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import RhinoDoc
from Rhino import UnitSystem
class ModelUnitSystem(ModelValue):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, attributes: Value): ...
    @overload
    def __init__(self, space: ActiveSpace, document: RhinoDoc): ...
    @overload
    def AdjustDocumentUnitSystem(self, document: RhinoDoc, space: ActiveSpace, scale: bool) -> None: ...
    @overload
    @staticmethod
    def Cast(source: object) -> ModelUnitSystem: ...
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    @staticmethod
    def Copy(source: RhinoDoc, target: RhinoDoc, space: ActiveSpace) -> None: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def ActiveSpace(self) -> ActiveSpace: ...
    @property
    def BaseSystem(self) -> UnitSystem: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Factor(self) -> float: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MetersPerUnit(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def op_Implicit(attributes: Value) -> ModelUnitSystem: ...
    @overload
    def op_Implicit(us: ModelUnitSystem) -> Value: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from .Generic import KeyValuePair
class ModelUserText:
    @overload
    def __init__(self, source: Iterable[KeyValuePair]): ...
    def __iter__(self) -> Iterator[KeyValuePair]: ...
    def __getitem__(self, index: int) -> KeyValuePair: ...
    Empty: ModelUserText
    @overload
    def ContainsKey(self, key: str) -> bool: ...
    @overload
    def EnsureRange(self, keys: Iterable[str]) -> ModelUserText: ...
    @overload
    def EnsureRange(self, source: Iterable[KeyValuePair]) -> ModelUserText: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: ModelUserText) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsDefault(self) -> bool: ...
    @property
    def IsDefaultOrEmpty(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Item(self) -> Sequence[KeyValuePair]: ...
    @property
    def Item(self, key: str) -> str: ...
    @property
    def Keys(self) -> Iterable[str]: ...
    @property
    def Values(self) -> Iterable[str]: ...
    @overload
    def GetEnumerator(self) -> Iterator[KeyValuePair]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MergeRange(self, source: Iterable[KeyValuePair]) -> ModelUserText: ...
    @overload
    def MergeRange(self, source: Iterable[str]) -> ModelUserText: ...
    @overload
    def __add__(left: ModelUserText, right: Iterable[str]) -> ModelUserText: ...
    @overload
    def __add__(left: ModelUserText, right: Iterable[KeyValuePair]) -> ModelUserText: ...
    @overload
    def __and__(left: ModelUserText, right: Iterable[str]) -> ModelUserText: ...
    @overload
    def __and__(left: ModelUserText, right: Iterable[KeyValuePair]) -> ModelUserText: ...
    @overload
    def __or__(left: ModelUserText, right: Iterable[str]) -> ModelUserText: ...
    @overload
    def __or__(left: ModelUserText, right: Iterable[KeyValuePair]) -> ModelUserText: ...
    @overload
    def __eq__(left: ModelUserText, right: ModelUserText) -> bool: ...
    @overload
    def __ne__(left: ModelUserText, right: ModelUserText) -> bool: ...
    @overload
    def __sub__(left: ModelUserText, right: Iterable[KeyValuePair]) -> ModelUserText: ...
    @overload
    def __sub__(left: ModelUserText, right: Iterable[str]) -> ModelUserText: ...
    @overload
    def RemoveRange(self, keys: Iterable[str]) -> ModelUserText: ...
    @overload
    def RemoveRange(self, source: Iterable[KeyValuePair]) -> ModelUserText: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TryGetValue(self, key: str) -> Tuple[bool, str]: ...
    @overload
    def UpdateRange(self, keys: Iterable[str]) -> ModelUserText: ...
    @overload
    def UpdateRange(self, source: Iterable[KeyValuePair]) -> ModelUserText: ...


class ModelValue:
    @overload
    def CastTo(self) -> Tuple[bool, T]: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: ModelValue) -> bool: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def TypeName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def TooltipString(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


from Rhino import UnitSystem
from System import Nullable
from Rhino import RhinoDoc
class Value:
    @overload
    def __init__(self, activeSpace: ActiveSpace, name: str): ...
    @overload
    def __init__(self, unitSystem: UnitSystem, name: str): ...
    @overload
    def __init__(self, unitSystem: UnitSystem, name: str, factor: float): ...
    @overload
    def __init__(self, other: Value, name: str, factor: Nullable): ...
    _MetersPerUnit: float
    @overload
    def AdjustDocumentUnitSystem(self, document: RhinoDoc, space: ActiveSpace, scale: bool) -> None: ...
    @overload
    def CompareTo(self, obj: object) -> int: ...
    @overload
    def CompareTo(self, other: Value) -> int: ...
    @overload
    def Equals(self, other: object) -> bool: ...
    @overload
    def Equals(self, other: Value) -> bool: ...
    @property
    def ActiveSpace(self) -> ActiveSpace: ...
    @property
    def BaseSystem(self) -> UnitSystem: ...
    @property
    def Factor(self) -> float: ...
    @property
    def Feet() -> Value: ...
    @property
    def Inches() -> Value: ...
    @property
    def Meters() -> Value: ...
    @property
    def MetersPerUnit(self) -> float: ...
    @property
    def Millimeters() -> Value: ...
    @property
    def ModelUnits() -> Value: ...
    @property
    def Name(self) -> str: ...
    @property
    def None() -> Value: ...
    @property
    def PageUnits() -> Value: ...
    @property
    def Symbol(self) -> str: ...
    @property
    def Unset() -> Value: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __eq__(left: Value, right: Value) -> bool: ...
    @overload
    def __ne__(left: Value, right: Value) -> bool: ...
    @overload
    def ToNonCustomUnitSystem(self) -> Tuple[UnitSystem, float]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def ToUnitSystem(self) -> Tuple[UnitSystem, float]: ...
