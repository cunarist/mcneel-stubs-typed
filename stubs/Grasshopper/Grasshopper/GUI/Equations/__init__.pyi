from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from System.Drawing import Bitmap
from System.Drawing import Color
from System.Drawing import Font
from System.Drawing import Graphics
from System.Drawing import PointF
from System.Drawing import RectangleF
from System.Drawing import SizeF



class GH_EquationFragment:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Size(self) -> SizeF: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Layout(self, font: Font) -> bool: ...
    @overload
    def Position(self, location: PointF) -> bool: ...
    @overload
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @overload
    def ToExpression(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class GH_SequenceFragment(GH_EquationFragment):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def Description(self) -> str: ...
    @property
    def Fragments(self) -> MutableSequence[IGH_EquationFragment]: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Size(self) -> SizeF: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Layout(self, font: Font) -> bool: ...
    @overload
    def Position(self, location: PointF) -> bool: ...
    @overload
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @overload
    def ToExpression(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class GH_TextFragment(GH_EquationFragment):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Size(self) -> SizeF: ...
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Layout(self, font: Font) -> bool: ...
    @overload
    def Position(self, location: PointF) -> bool: ...
    @overload
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @Text.setter
    def Text(self, Value: str) -> None: ...
    @overload
    def ToExpression(self) -> str: ...
    @overload
    def ToString(self) -> str: ...


class IGH_EquationFragment:
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Pivot(self) -> PointF: ...
    @property
    def Size(self) -> SizeF: ...
    @overload
    def Layout(self, font: Font) -> bool: ...
    @overload
    def Position(self, location: PointF) -> bool: ...
    @overload
    def Render(self, graphics: Graphics, font: Font, colour: Color) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: PointF) -> None: ...
    @overload
    def ToExpression(self) -> str: ...
