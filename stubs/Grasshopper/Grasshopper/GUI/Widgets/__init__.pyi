from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class DockCornerChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Bitmap
from Grasshopper.GUI import GH_CanvasMouseEvent
from System.Drawing import Point
from System.Drawing import PointF
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
class GH_AlignWidget(GH_Widget):
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    @overload
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsTooltipRegion(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    @staticmethod
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def Render(self, canvas: GH_Canvas) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Point
from System.Drawing import PointF
from System.Drawing import SizeF
from System.Drawing import Size
from System.Drawing import Bitmap
from Grasshopper.GUI import GH_CanvasMouseEvent
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
class GH_CanvasWidget_FixedObject(GH_Widget):
    @overload
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    @overload
    def CanvasLocation(self, vp: GH_Viewport) -> PointF: ...
    @overload
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @overload
    def ControlLocation(self, vp: GH_Viewport) -> Point: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def Padding(self) -> int: ...
    @property
    def Ratio(self) -> SizeF: ...
    @property
    def Size(self) -> Size: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsTooltipRegion(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    def Render(self, canvas: GH_Canvas) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @Ratio.setter
    def Ratio(self, Value: SizeF) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Bitmap
from System.Drawing import Size
from System.Drawing import Point
from System.Drawing import PointF
from System.Drawing import SizeF
from Grasshopper.GUI import GH_CanvasMouseEvent
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
class GH_CompassWidget(GH_CanvasWidget_FixedObject):
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_WidgetDrawModeChanged(obj: WidgetDrawModeChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    @overload
    def CanvasLocation(self, vp: GH_Viewport) -> PointF: ...
    @overload
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @overload
    def ControlLocation(self, vp: GH_Viewport) -> Point: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def DrawObjects() -> bool: ...
    @property
    def DrawSelectionOnly() -> bool: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def Padding(self) -> int: ...
    @property
    def Radius(self) -> int: ...
    @property
    def Ratio(self) -> SizeF: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsTooltipRegion(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    @staticmethod
    def remove_WidgetDrawModeChanged(obj: WidgetDrawModeChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def Render(self, canvas: GH_Canvas) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @DrawObjects.setter
    def DrawObjects(Value: bool) -> None: ...
    @DrawSelectionOnly.setter
    def DrawSelectionOnly(Value: bool) -> None: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @Ratio.setter
    def Ratio(self, Value: SizeF) -> None: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Bitmap
from System.Drawing import Point
from System.Drawing import PointF
from Grasshopper.GUI import GH_CanvasMouseEvent
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
class GH_MarkovWidget(GH_Widget):
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_DockCornerChanged(obj: DockCornerChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_IconLimitChanged(obj: IconLimitChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    @overload
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def DockCorner() -> GH_MarkovWidgetDock: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def IconLimit() -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsTooltipRegion(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    @staticmethod
    def remove_DockCornerChanged(obj: DockCornerChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_IconLimitChanged(obj: IconLimitChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def Render(self, Canvas: GH_Canvas) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @DockCorner.setter
    def DockCorner(Value: GH_MarkovWidgetDock) -> None: ...
    @IconLimit.setter
    def IconLimit(Value: int) -> None: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_MarkovWidgetDock(Enum):
    TopLeft = 0
    BottomLeft = 1
    TopRight = 2
    BottomRight = 3


from System.Drawing import Bitmap
from System.Drawing import PointF
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
from System.Drawing import Point
from Grasshopper.GUI import GH_CanvasMouseEvent
class GH_MessageWidget(GH_Widget):
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_WidgetLevelChanged(obj: WidgetLevelChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    @overload
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsTooltipRegion(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    @staticmethod
    def remove_WidgetLevelChanged(obj: WidgetLevelChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def Render(self, canvas: GH_Canvas) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Grasshopper.GUI import GH_CanvasMouseEvent
from System.Drawing import Bitmap
from System.Drawing import Point
from System.Drawing import PointF
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
class GH_ProfilerWidget(GH_Widget):
    @overload
    def __init__(self): ...
    @overload
    @staticmethod
    def add_ProfilerThresholdChanged(obj: ProfilerThresholdChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_ShowDurationChanged(obj: ShowDurationChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def add_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    @overload
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def SharedVisible() -> bool: ...
    @property
    def ShowDuration() -> bool: ...
    @property
    def Threshold() -> int: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsTooltipRegion(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    @staticmethod
    def remove_ProfilerThresholdChanged(obj: ProfilerThresholdChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_ShowDurationChanged(obj: ShowDurationChangedEventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_WidgetVisibleChanged(obj: WidgetVisibleChangedEventHandler) -> None: ...
    @overload
    def Render(self, Canvas: GH_Canvas) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @SharedVisible.setter
    def SharedVisible(Value: bool) -> None: ...
    @ShowDuration.setter
    def ShowDuration(Value: bool) -> None: ...
    @Threshold.setter
    def Threshold(Value: int) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Point
from System.Drawing import PointF
from System.Drawing import Bitmap
from Grasshopper.GUI import GH_CanvasMouseEvent
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
class GH_Widget:
    @overload
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    @overload
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def TooltipEnabled(self) -> bool: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsTooltipRegion(self, canvas_coordinate: PointF) -> bool: ...
    @overload
    def Render(self, Canvas: GH_Canvas) -> None: ...
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class IconLimitChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Bitmap
from System.Drawing import Point
from System.Drawing import PointF
class IGH_Widget:
    @overload
    def AppendToMenu(self, menu: ToolStripDropDownMenu) -> None: ...
    @overload
    def Contains(self, pt_control: Point, pt_canvas: PointF) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def Icon_24x24(self) -> Bitmap: ...
    @property
    def Name(self) -> str: ...
    @property
    def Owner(self) -> GH_Canvas: ...
    @property
    def TooltipText(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @overload
    def Render(self, Canvas: GH_Canvas) -> None: ...
    @Owner.setter
    def Owner(self, Value: GH_Canvas) -> None: ...
    @Visible.setter
    def Visible(self, Value: bool) -> None: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class ProfilerThresholdChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class ShowDurationChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class WidgetDrawModeChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class WidgetLevelChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class WidgetVisibleChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class WidgetVisibleChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class WidgetVisibleChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class WidgetVisibleChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class WidgetVisibleChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
