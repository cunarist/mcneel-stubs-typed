from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from System import Guid
from System.Drawing import Size
from System.Drawing import Point
from System.Drawing import Bitmap
from System.Drawing import PointF
from System.Drawing import Graphics
from GH_IO.Serialization import GH_IWriter
from GH_IO.Serialization import GH_IReader
class GH_IconObject:
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Image(self) -> Bitmap: ...
    @property
    def ObjectID(self) -> Guid: ...
    @property
    def Pivot(self) -> Point: ...
    @property
    def Size(self) -> Size: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Grips(self) -> MutableSequence[IGH_IconObjectGrip]: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def RenderObject(self, G: Graphics) -> None: ...
    @overload
    def Resize(self, newSize: Size) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: Point) -> None: ...
    @Size.setter
    def Size(self, Value: Size) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from System import Guid
from System.Drawing import Rectangle
from System.Drawing import Graphics
from System.Drawing import PointF
from GH_IO.Serialization import GH_IWriter
from GH_IO.Serialization import GH_IReader
from System.Drawing import Size
from System.Drawing import Point
from System.Drawing import Bitmap
class GH_IconObject_Rectangle(GH_IconObject):
    @overload
    def __init__(self): ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Image(self) -> Bitmap: ...
    @property
    def ObjectID(self) -> Guid: ...
    @property
    def Pivot(self) -> Point: ...
    @property
    def Rectangle(self) -> Rectangle: ...
    @property
    def Size(self) -> Size: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Grips(self) -> MutableSequence[IGH_IconObjectGrip]: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def RenderObject(self, G: Graphics) -> None: ...
    @overload
    def Resize(self, newSize: Size) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: Point) -> None: ...
    @Size.setter
    def Size(self, Value: Size) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


from System import Guid
from System.Drawing import Point
from System.Drawing import Size
from System.Drawing import Bitmap
from System.Drawing import PointF
from System.Drawing import Graphics
class IGH_IconObject:
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @property
    def Image(self) -> Bitmap: ...
    @property
    def ObjectID(self) -> Guid: ...
    @property
    def Pivot(self) -> Point: ...
    @property
    def Size(self) -> Size: ...
    @overload
    def Grips(self) -> MutableSequence[IGH_IconObjectGrip]: ...
    @overload
    def RenderObject(self, G: Graphics) -> None: ...
    @overload
    def Resize(self, newSize: Size) -> None: ...
    @Pivot.setter
    def Pivot(self, Value: Point) -> None: ...
    @Size.setter
    def Size(self, Value: Size) -> None: ...


from System.Drawing import PointF
from System.Drawing import Graphics
class IGH_IconObjectGrip:
    @property
    def Index(self) -> int: ...
    @property
    def Owner(self) -> IGH_IconObject: ...
    @property
    def Position(self) -> PointF: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @overload
    def RenderGrip(self, G: Graphics) -> None: ...
    @Position.setter
    def Position(self, Value: PointF) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    @Tag.setter
    def Tag(self, Value: object) -> None: ...
