from typing import overload, Any
from collections.abc import Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from GH_IO.Serialization import GH_IReader
from GH_IO.Serialization import GH_IWriter
from GH_Util import BezierF
from Grasshopper.GUI import GH_AsynchFileData
from Grasshopper.GUI import GH_CanvasMouseEvent
from Grasshopper.GUI import GH_CanvasObjectMouseDownEventArgs
from Grasshopper.GUI import GH_TooltipDisplayEventArgs
from Grasshopper.GUI.Canvas.Interaction import IGH_MouseInteraction
from Grasshopper.GUI.Canvas.TagArtists import IGH_TagArtist
from Grasshopper.GUI.Widgets import IGH_Widget
from Grasshopper.Kernel import GH_AutoSaveTrigger
from Grasshopper.Kernel import GH_DocModifiedEventArgs
from Grasshopper.Kernel import GH_DocObjectEventArgs
from Grasshopper.Kernel import GH_DocSettingsEventArgs
from Grasshopper.Kernel import GH_Document
from Grasshopper.Kernel import IGH_ActiveObject
from Grasshopper.Kernel import IGH_Attributes
from Grasshopper.Kernel import IGH_DocumentObject
from Grasshopper.Kernel import IGH_ObjectProxy
from Grasshopper.Kernel import IGH_Param
from Grasshopper.Kernel.Data import IGH_Structure
from System import Action
from System import AsyncCallback
from System import DateTime
from System import Delegate
from System import EventArgs
from System import EventHandler
from System import Guid
from System import IAsyncResult
from System import IFormatProvider
from System import IntPtr
from System import TypeCode
from System.ComponentModel import CancelEventHandler
from System.ComponentModel import IContainer
from System.ComponentModel import ISite
from System.Drawing import Bitmap
from System.Drawing import Brush
from System.Drawing import Color
from System.Drawing import Font
from System.Drawing import Graphics
from System.Drawing import Icon
from System.Drawing import Image
from System.Drawing import Point
from System.Drawing import PointF
from System.Drawing import Rectangle
from System.Drawing import RectangleF
from System.Drawing import Region
from System.Drawing import Size
from System.Drawing import SizeF
from System.Drawing.Drawing2D import GraphicsPath
from System.Drawing.Drawing2D import Matrix
from System.Reflection import MethodInfo
from System.Runtime.Remoting import ObjRef
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Windows.Forms import AccessibleObject
from System.Windows.Forms import AccessibleRole
from System.Windows.Forms import AnchorStyles
from System.Windows.Forms import AutoScaleMode
from System.Windows.Forms import AutoSizeMode
from System.Windows.Forms import AutoValidate
from System.Windows.Forms import BindingContext
from System.Windows.Forms import BoundsSpecified
from System.Windows.Forms import ContextMenu
from System.Windows.Forms import ContextMenuStrip
from System.Windows.Forms import Control
from System.Windows.Forms import ControlBindingsCollection
from System.Windows.Forms import ControlCollection
from System.Windows.Forms import ControlEventHandler
from System.Windows.Forms import Cursor
from System.Windows.Forms import DialogResult
from System.Windows.Forms import DockPaddingEdges
from System.Windows.Forms import DockStyle
from System.Windows.Forms import DpiChangedEventHandler
from System.Windows.Forms import DragDropEffects
from System.Windows.Forms import DragEventHandler
from System.Windows.Forms import Form
from System.Windows.Forms import FormBorderStyle
from System.Windows.Forms import FormClosedEventHandler
from System.Windows.Forms import FormClosingEventHandler
from System.Windows.Forms import FormStartPosition
from System.Windows.Forms import FormWindowState
from System.Windows.Forms import GetChildAtPointSkip
from System.Windows.Forms import GiveFeedbackEventHandler
from System.Windows.Forms import HelpEventHandler
from System.Windows.Forms import HScrollProperties
from System.Windows.Forms import IButtonControl
from System.Windows.Forms import IContainerControl
from System.Windows.Forms import ImageLayout
from System.Windows.Forms import ImeMode
from System.Windows.Forms import InputLanguageChangedEventHandler
from System.Windows.Forms import InputLanguageChangingEventHandler
from System.Windows.Forms import InvalidateEventHandler
from System.Windows.Forms import IWin32Window
from System.Windows.Forms import IWindowTarget
from System.Windows.Forms import KeyEventArgs
from System.Windows.Forms import KeyEventHandler
from System.Windows.Forms import KeyPressEventHandler
from System.Windows.Forms import Keys
from System.Windows.Forms import LayoutEventHandler
from System.Windows.Forms import MainMenu
from System.Windows.Forms import MdiLayout
from System.Windows.Forms import MenuStrip
from System.Windows.Forms import Message
from System.Windows.Forms import MouseEventHandler
from System.Windows.Forms import Padding
from System.Windows.Forms import PaintEventHandler
from System.Windows.Forms import PreProcessControlState
from System.Windows.Forms import PreviewKeyDownEventHandler
from System.Windows.Forms import QueryAccessibilityHelpEventHandler
from System.Windows.Forms import QueryContinueDragEventHandler
from System.Windows.Forms import RightToLeft
from System.Windows.Forms import ScrollEventHandler
from System.Windows.Forms import SizeGripStyle
from System.Windows.Forms import ToolStripDropDownMenu
from System.Windows.Forms import UICuesEventHandler
from System.Windows.Forms import ValidationConstraints
from System.Windows.Forms import VScrollProperties
from System.Windows.Forms.Layout import LayoutEngine

from . import Interaction
from . import TagArtists

__all__ = ['Interaction', 'TagArtists']



class CanvasPaintBackgroundEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPaintBeginEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPaintEndEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintGroupsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintObjectsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintOverlayEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintWidgetsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPostPaintWiresEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintGroupsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintObjectsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintOverlayEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintWidgetsEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class CanvasPrePaintWiresEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Document_ModifiedChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocModifiedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocModifiedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Document_ObjectsAddedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Document_ObjectsDeletedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Document_SettingsChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocSettingsEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocSettingsEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DocumentChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Canvas, e: GH_CanvasDocumentChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Canvas, e: GH_CanvasDocumentChangedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DocumentObjectMouseDownEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_CanvasObjectMouseDownEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_CanvasObjectMouseDownEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class DocumentObjectsDeletedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_Document, e: GH_DocObjectEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_Document, e: GH_DocObjectEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_Border:
    @overload
    def __init__(self, rectangle: RectangleF, topology: GH_BorderTopology): ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    @staticmethod
    def CreateBorders(box: RectangleF, borderSize: int) -> MutableSequence[GH_Border]: ...
    @overload
    @staticmethod
    def CreateBorders(box: RectangleF, padding: Padding) -> MutableSequence[GH_Border]: ...
    @overload
    @staticmethod
    def CreateBorders(box: RectangleF, borderWidth: int, borderHeight: int) -> MutableSequence[GH_Border]: ...
    @overload
    @staticmethod
    def CreateBorders(box: RectangleF, borderLeft: int, borderRight: int, borderTop: int, borderBottom: int) -> MutableSequence[GH_Border]: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Region(self) -> RectangleF: ...
    @property
    def Size_Cursor(self) -> Cursor: ...
    @property
    def Topology(self) -> GH_BorderTopology: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_BorderTopology(Enum):
    TopRight = 0
    TopLeft = 1
    BottomLeft = 2
    BottomRight = 3
    Top = 4
    Left = 5
    Bottom = 6
    Right = 7
    # None = -2
    All = -1


class GH_Canvas:
    @overload
    def __init__(self): ...
    ThumbnailWidth: int
    ThumbnailHeight: int
    ScheduleInactive: int
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CanvasPaintBackground(self, obj: CanvasPaintBackgroundEventHandler) -> None: ...
    @overload
    def add_CanvasPaintBegin(self, obj: CanvasPaintBeginEventHandler) -> None: ...
    @overload
    def add_CanvasPaintEnd(self, obj: CanvasPaintEndEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintGroups(self, obj: CanvasPostPaintGroupsEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintObjects(self, obj: CanvasPostPaintObjectsEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintOverlay(self, obj: CanvasPostPaintOverlayEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintWidgets(self, obj: CanvasPostPaintWidgetsEventHandler) -> None: ...
    @overload
    def add_CanvasPostPaintWires(self, obj: CanvasPostPaintWiresEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintGroups(self, obj: CanvasPrePaintGroupsEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintObjects(self, obj: CanvasPrePaintObjectsEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintOverlay(self, obj: CanvasPrePaintOverlayEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintWidgets(self, obj: CanvasPrePaintWidgetsEventHandler) -> None: ...
    @overload
    def add_CanvasPrePaintWires(self, obj: CanvasPrePaintWiresEventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Document_ModifiedChanged(self, obj: Document_ModifiedChangedEventHandler) -> None: ...
    @overload
    def add_Document_ObjectsAdded(self, obj: Document_ObjectsAddedEventHandler) -> None: ...
    @overload
    def add_Document_ObjectsDeleted(self, obj: Document_ObjectsDeletedEventHandler) -> None: ...
    @overload
    def add_Document_SettingsChanged(self, obj: Document_SettingsChangedEventHandler) -> None: ...
    @overload
    def add_DocumentChanged(self, obj: DocumentChangedEventHandler) -> None: ...
    @overload
    def add_DocumentObjectMouseDown(self, obj: DocumentObjectMouseDownEventHandler) -> None: ...
    @overload
    def add_DocumentObjectsDeleted(self, obj: DocumentObjectsDeletedEventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ModifiersChanged(self, obj: ModifiersChangedEventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_NavigationSettingsChanged(obj: NavigationSettingsChangedEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ViewportChanged(self, obj: ViewportChangedEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def add_WidgetListCreated(obj: WidgetListCreatedEventHandler) -> None: ...
    @overload
    def AddTagArtist(self, artist: IGH_TagArtist) -> None: ...
    @overload
    def AddValidator(self, validator: IGH_CanvasValidator) -> None: ...
    @overload
    def AutoSaveDocument(self, trigger: GH_AutoSaveTrigger) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def CanvasOldSchoolMenu(self) -> ToolStripDropDownMenu: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateMRUPanels(self) -> None: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def CreatePreview(self, size: Size) -> Bitmap: ...
    @overload
    def DestroyMRUPanels(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @overload
    def GenerateHiResImage(self, rec: Rectangle, settings: GH_ImageSettings) -> tuple[MutableSequence[str], Size]: ...
    @overload
    def GenerateHiResImageTile(self, vp: GH_Viewport, bg: Color) -> Bitmap: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def ActiveInteraction(self) -> IGH_MouseInteraction: ...
    @property
    def ActiveObject(self) -> IGH_DocumentObject: ...
    @property
    def ActiveWidget(self) -> IGH_Widget: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def CursorCanvasPosition(self) -> PointF: ...
    @property
    def CursorControlPosition(self) -> Point: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    @classmethod
    def DisplayVoronoiWarning(cls) -> bool: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def Document(self) -> GH_Document: ...
    @property
    def DrawingMode(self) -> GH_CanvasMode: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def Graphics(self) -> Graphics: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def HasControlWithFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsActiveInteraction(self) -> bool: ...
    @property
    def IsActiveObject(self) -> bool: ...
    @property
    def IsActiveWidget(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsDocument(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MarkovSuggestions(self) -> MutableSequence[IGH_ObjectProxy]: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def ModifiersEnabled(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    @classmethod
    def NavigationPanDown(cls) -> Keys: ...
    @property
    @classmethod
    def NavigationPanLeft(cls) -> Keys: ...
    @property
    @classmethod
    def NavigationPanPixels(cls) -> int: ...
    @property
    @classmethod
    def NavigationPanRight(cls) -> Keys: ...
    @property
    @classmethod
    def NavigationPanUp(cls) -> Keys: ...
    @property
    @classmethod
    def NavigationZoomFactor(cls) -> float: ...
    @property
    @classmethod
    def NavigationZoomIn(cls) -> Keys: ...
    @property
    @classmethod
    def NavigationZoomOut(cls) -> Keys: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Painter(self) -> GH_Painter: ...
    @property
    def Painting(self) -> bool: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecordPreviewBoundary(self) -> bool: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Region: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def TagArtistIDs(self) -> MutableSequence[Guid]: ...
    @property
    def Text(self) -> str: ...
    @property
    @classmethod
    def ThumbnailSize(cls) -> Size: ...
    @property
    def TooltipDelay(self) -> int: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def Validator(self) -> IGH_CanvasValidator: ...
    @property
    def ValidGraphics(self) -> bool: ...
    @property
    def Viewport(self) -> GH_Viewport: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Widgets(self) -> MutableSequence[IGH_Widget]: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @property
    @classmethod
    def ZoomFadeHigh(cls) -> int: ...
    @property
    @classmethod
    def ZoomFadeLow(cls) -> int: ...
    @property
    @classmethod
    def ZoomFadeMedium(cls) -> int: ...
    @overload
    def GetCanvasScreenBuffer(self, modeOverride: GH_CanvasMode) -> Bitmap: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetGraphicsObject(self, setupDisplayTransform: bool) -> Graphics: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def HideMRUPanels(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def InstantiateNewObject(self, id: Guid, at: PointF, update: bool) -> bool: ...
    @overload
    def InstantiateNewObject(self, id: Guid, init_code: str, at: PointF, update: bool) -> bool: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def Navigate(self, navigation: GH_CanvasNavigation) -> None: ...
    @overload
    def OnViewportChanged(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def ReevaluateMarkovSuggestions(self) -> None: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CanvasPaintBackground(self, obj: CanvasPaintBackgroundEventHandler) -> None: ...
    @overload
    def remove_CanvasPaintBegin(self, obj: CanvasPaintBeginEventHandler) -> None: ...
    @overload
    def remove_CanvasPaintEnd(self, obj: CanvasPaintEndEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintGroups(self, obj: CanvasPostPaintGroupsEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintObjects(self, obj: CanvasPostPaintObjectsEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintOverlay(self, obj: CanvasPostPaintOverlayEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintWidgets(self, obj: CanvasPostPaintWidgetsEventHandler) -> None: ...
    @overload
    def remove_CanvasPostPaintWires(self, obj: CanvasPostPaintWiresEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintGroups(self, obj: CanvasPrePaintGroupsEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintObjects(self, obj: CanvasPrePaintObjectsEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintOverlay(self, obj: CanvasPrePaintOverlayEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintWidgets(self, obj: CanvasPrePaintWidgetsEventHandler) -> None: ...
    @overload
    def remove_CanvasPrePaintWires(self, obj: CanvasPrePaintWiresEventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Document_ModifiedChanged(self, obj: Document_ModifiedChangedEventHandler) -> None: ...
    @overload
    def remove_Document_ObjectsAdded(self, obj: Document_ObjectsAddedEventHandler) -> None: ...
    @overload
    def remove_Document_ObjectsDeleted(self, obj: Document_ObjectsDeletedEventHandler) -> None: ...
    @overload
    def remove_Document_SettingsChanged(self, obj: Document_SettingsChangedEventHandler) -> None: ...
    @overload
    def remove_DocumentChanged(self, obj: DocumentChangedEventHandler) -> None: ...
    @overload
    def remove_DocumentObjectMouseDown(self, obj: DocumentObjectMouseDownEventHandler) -> None: ...
    @overload
    def remove_DocumentObjectsDeleted(self, obj: DocumentObjectsDeletedEventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ModifiersChanged(self, obj: ModifiersChangedEventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_NavigationSettingsChanged(obj: NavigationSettingsChangedEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ViewportChanged(self, obj: ViewportChangedEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def remove_WidgetListCreated(obj: WidgetListCreatedEventHandler) -> None: ...
    @overload
    def RemoveAllTagArtists(self) -> None: ...
    @overload
    def RemoveTagArtist(self, artist: IGH_TagArtist) -> int: ...
    @overload
    def RemoveTagArtist(self, artistId: Guid) -> int: ...
    @overload
    def RemoveValidator(self, validator: IGH_CanvasValidator) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> tuple[Bitmap]: ...
    @overload
    def ScheduleRegen(self, delay: int) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @ActiveInteraction.setter
    def ActiveInteraction(self, Value: IGH_MouseInteraction) -> None: ...
    @ActiveObject.setter
    def ActiveObject(self, Value: IGH_DocumentObject) -> None: ...
    @ActiveWidget.setter
    def ActiveWidget(self, Value: IGH_Widget) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DisplayVoronoiWarning.setter
    @classmethod
    def DisplayVoronoiWarning(cls, AutoPropertyValue: bool) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Document.setter
    def Document(self, Value: GH_Document) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @ModifiersEnabled.setter
    def ModifiersEnabled(self, Value: bool) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @NavigationPanDown.setter
    @classmethod
    def NavigationPanDown(cls, Value: Keys) -> None: ...
    @NavigationPanLeft.setter
    @classmethod
    def NavigationPanLeft(cls, Value: Keys) -> None: ...
    @NavigationPanPixels.setter
    @classmethod
    def NavigationPanPixels(cls, Value: int) -> None: ...
    @NavigationPanRight.setter
    @classmethod
    def NavigationPanRight(cls, Value: Keys) -> None: ...
    @NavigationPanUp.setter
    @classmethod
    def NavigationPanUp(cls, Value: Keys) -> None: ...
    @NavigationZoomFactor.setter
    @classmethod
    def NavigationZoomFactor(cls, Value: float) -> None: ...
    @NavigationZoomIn.setter
    @classmethod
    def NavigationZoomIn(cls, Value: Keys) -> None: ...
    @NavigationZoomOut.setter
    @classmethod
    def NavigationZoomOut(cls, Value: Keys) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @RecordPreviewBoundary.setter
    def RecordPreviewBoundary(self, AutoPropertyValue: bool) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @ValidGraphics.setter
    def ValidGraphics(self, Value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetSmartTextRenderingHint(self) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def ShowComponentSearchBox(self) -> bool: ...
    @overload
    def ShowComponentSearchBox(self, at: Point) -> bool: ...
    @overload
    def ShowMRUPanels(self) -> None: ...
    @overload
    def ShowNavigationPane(self) -> None: ...
    @overload
    def ShowSearchDialog(self, centerOnCursor: bool) -> None: ...
    @overload
    def StartAutoPan(self) -> None: ...
    @overload
    def StopAutoPan(self) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def UpdateDocumentPreview(self) -> None: ...


class GH_CanvasChannel(Enum):
    First = 0
    Groups = 0
    Wires = 10
    Objects = 20
    Overlay = 30
    Last = 30


class GH_CanvasDocumentChangedEventArgs:
    @overload
    def __init__(self, newDoc: GH_Document, oldDoc: GH_Document): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def NewDocument(self) -> GH_Document: ...
    @property
    def OldDocument(self) -> GH_Document: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_CanvasDropTargetValidator(GH_CanvasValidator):
    @overload
    def __init__(self): ...
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id: Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id: Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    @overload
    def CanNavigateCanvas(self) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def DropDelegate(self) -> Action: ...
    @property
    def DropID(self) -> Guid: ...
    @property
    def DropRegion(self) -> RectangleF: ...
    @property
    def DropText(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @DropDelegate.setter
    def DropDelegate(self, AutoPropertyValue: Action) -> None: ...
    @DropID.setter
    def DropID(self, AutoPropertyValue: Guid) -> None: ...
    @DropRegion.setter
    def DropRegion(self, AutoPropertyValue: RectangleF) -> None: ...
    @DropText.setter
    def DropText(self, AutoPropertyValue: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_CanvasMode(Enum):
    Control = 0
    Thumbnail = 1
    Export = 2


class GH_CanvasNavigation(Enum):
    # None = 0
    PanLeft = 1
    PanRight = 2
    PanUp = 3
    PanDown = 4
    ZoomIn = 5
    ZoomOut = 6


class GH_CanvasValidator:
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id: Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id: Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    @overload
    def CanNavigateCanvas(self) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_CanvasViewportChangedEventArgs:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def Viewport(self) -> GH_Viewport: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_CanvasWidgetListEventArgs:
    @overload
    def AddWidget(self, widget: IGH_Widget) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_CanvasWireValidator(GH_CanvasValidator):
    @overload
    def __init__(self): ...
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id: Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id: Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    @overload
    def CanNavigateCanvas(self) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def WireDelegate(self) -> Action: ...
    @property
    def WireMotionText(self) -> str: ...
    @property
    def WireSource(self) -> Guid: ...
    @property
    def WireSourceText(self) -> str: ...
    @property
    def WireTarget(self) -> Guid: ...
    @property
    def WireTargetText(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...
    @WireDelegate.setter
    def WireDelegate(self, AutoPropertyValue: Action) -> None: ...
    @WireMotionText.setter
    def WireMotionText(self, AutoPropertyValue: str) -> None: ...
    @WireSource.setter
    def WireSource(self, AutoPropertyValue: Guid) -> None: ...
    @WireSourceText.setter
    def WireSourceText(self, AutoPropertyValue: str) -> None: ...
    @WireTarget.setter
    def WireTarget(self, AutoPropertyValue: Guid) -> None: ...
    @WireTargetText.setter
    def WireTargetText(self, AutoPropertyValue: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_Capsule:
    DefaultHighlight: int
    DefaultRadius: int
    @overload
    def AddInputGrip(self, P: PointF) -> None: ...
    @overload
    def AddInputGrip(self, P: Point) -> None: ...
    @overload
    def AddInputGrip(self, Y: float) -> None: ...
    @overload
    def AddInputGrip(self, X: float, Y: float) -> None: ...
    @overload
    def AddOutputGrip(self, P: Point) -> None: ...
    @overload
    def AddOutputGrip(self, P: PointF) -> None: ...
    @overload
    def AddOutputGrip(self, Y: float) -> None: ...
    @overload
    def AddOutputGrip(self, X: float, Y: float) -> None: ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    @staticmethod
    def CreateCapsule(box: RectangleF, palette: GH_Palette) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Rectangle, palette: GH_Palette) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Rectangle, palette: GH_Palette, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: RectangleF, palette: GH_Palette, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: RectangleF, palette: GH_Palette, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateCapsule(box: Rectangle, palette: GH_Palette, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: RectangleF, textbox: RectangleF, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radius: int, highlight: int) -> GH_Capsule: ...
    @overload
    @staticmethod
    def CreateTextCapsule(box: Rectangle, textbox: Rectangle, palette: GH_Palette, text: str, font: Font, orientation: GH_Orientation, radii: Iterable[int], highlight: int) -> GH_Capsule: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Box(self) -> Rectangle: ...
    @property
    def Box_Content(self) -> Rectangle: ...
    @property
    def Font(self) -> Font: ...
    @property
    def Highlight(self) -> int: ...
    @property
    def HighlightShape(self) -> GraphicsPath: ...
    @property
    def InputGrips(self) -> MutableSequence[Point]: ...
    @property
    def JaggedLeft(self) -> bool: ...
    @property
    def JaggedRight(self) -> bool: ...
    @property
    def MaxRadius(self) -> int: ...
    @property
    def OutlineShape(self) -> GraphicsPath: ...
    @property
    def OutputGrips(self) -> MutableSequence[Point]: ...
    @property
    def Palette(self) -> GH_Palette: ...
    @property
    def Radius(self) -> Sequence[int]: ...
    @property
    def RenderEngine(self) -> GH_CapsuleRenderEngine: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextOrientation(self) -> GH_Orientation: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Render(self, G: Graphics, colour: Color) -> None: ...
    @overload
    def Render(self, G: Graphics, style: GH_PaletteStyle) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, colour: Color) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, style: GH_PaletteStyle) -> None: ...
    @overload
    def Render(self, G: Graphics, selected: bool, locked: bool, hidden: bool) -> None: ...
    @overload
    def Render(self, G: Graphics, icon: Image, selected: bool, locked: bool, hidden: bool) -> None: ...
    @Font.setter
    def Font(self, Value: Font) -> None: ...
    @Palette.setter
    def Palette(self, Value: GH_Palette) -> None: ...
    @Text.setter
    def Text(self, Value: str) -> None: ...
    @TextOrientation.setter
    def TextOrientation(self, Value: GH_Orientation) -> None: ...
    @overload
    def SetJaggedEdges(self, left: bool, right: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_CapsuleRenderEngine:
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Rectangle, radius: int, size: int) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Rectangle, R0: int, R1: int, size: int) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Rectangle, radius: int, size: int, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateHighlightBar(rec: Rectangle, R0: int, R1: int, size: int, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateJaggedRectangle(rec: RectangleF, R0: float, R1: float, R2: float, R3: float, jaggedLeft: bool, jaggedRight: bool) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: Rectangle, radius: int) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: RectangleF, radius: float) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: RectangleF, R0: float, R1: float, R2: float, R3: float) -> GraphicsPath: ...
    @overload
    @staticmethod
    def CreateRoundedRectangle(rec: Rectangle, R0: int, R1: int, R2: int, R3: int) -> GraphicsPath: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetImpliedPalette(obj: IGH_ActiveObject) -> GH_Palette: ...
    @overload
    @staticmethod
    def GetImpliedStyle(palette: GH_Palette, attributes: IGH_Attributes) -> GH_PaletteStyle: ...
    @overload
    @staticmethod
    def GetImpliedStyle(palette: GH_Palette, selected: bool, locked: bool, hidden: bool) -> GH_PaletteStyle: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def RenderAlphaFill(self, G: Graphics) -> None: ...
    @overload
    def RenderBackground_Alternative(self, G: Graphics, colourOverride: Color, drawAlphaGrid: bool) -> None: ...
    @overload
    def RenderBackground(self, G: Graphics, zoom: float, style: GH_PaletteStyle) -> None: ...
    @overload
    def RenderBoundaryDots(self, G: Graphics, count: int, style: GH_PaletteStyle) -> None: ...
    @overload
    def RenderGrips_Alternative(self, G: Graphics) -> None: ...
    @overload
    def RenderGrips(self, G: Graphics) -> None: ...
    @overload
    def RenderHighlight(self, G: Graphics) -> None: ...
    @overload
    def RenderIcon(self, G: Graphics, icon: Image, offsetX: int, offsetY: int) -> None: ...
    @overload
    def RenderIcon(self, G: Graphics, icon: Image, box: RectangleF, offsetX: int, offsetY: int) -> None: ...
    @overload
    @staticmethod
    def RenderInputGrip(G: Graphics, zoom: float, loc: PointF, full: bool) -> None: ...
    @overload
    def RenderMessage(self, G: Graphics, message: str, style: GH_PaletteStyle) -> Rectangle: ...
    @overload
    def RenderOutlines(self, G: Graphics, zoom: float, style: GH_PaletteStyle) -> None: ...
    @overload
    @staticmethod
    def RenderOutputGrip(G: Graphics, zoom: float, loc: PointF, full: bool) -> None: ...
    @overload
    def RenderText(self, G: Graphics, colour: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_DisplayMatrix(Enum):
    CanvasToControl = 0
    ControlToCanvas = 1


class GH_DocDiagramPainter:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BoundingBox(self) -> RectangleF: ...
    @property
    def DrawingBox(self) -> Rectangle: ...
    @property
    def IgnoreSelectedStates(self) -> bool: ...
    @property
    def Image(self) -> Bitmap: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Zoom(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MapPoint(self, pt: PointF) -> PointF: ...
    @overload
    def MapPoint(self, pt: Point) -> Point: ...
    @overload
    def MapRectangle(self, rec: Rectangle) -> Rectangle: ...
    @overload
    def MapX(self, x: float) -> float: ...
    @overload
    def MapX(self, x: int) -> int: ...
    @overload
    def MapY(self, y: int) -> int: ...
    @overload
    def MapY(self, y: float) -> float: ...
    @overload
    def PaintDiagram(self, objs: Iterable[IGH_DocumentObject], approx_size: int, inflate: int) -> bool: ...
    @overload
    def PaintDiagram(self, objs: Iterable[IGH_DocumentObject], mapWidth: int, mapHeight: int, inflate: int) -> bool: ...
    @IgnoreSelectedStates.setter
    def IgnoreSelectedStates(self, Value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UnmapPoint(self, pt: Point) -> Point: ...
    @overload
    def UnmapRectangle(self, rec: Rectangle) -> Rectangle: ...
    @overload
    def UnmapX(self, x: int) -> int: ...
    @overload
    def UnmapY(self, y: int) -> int: ...


class GH_DragDropFileAction(Enum):
    # None = 0
    Open = 1
    Examine = 2
    Insert = 3
    Group = 4
    Cluster = 5


class GH_FilePanel:
    PanelPadding: int
    PanelWidth: int
    PanelHeight: int
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def ClientBounds(self) -> Rectangle: ...
    @property
    def Color(self) -> Color: ...
    @property
    def DisplayDate(self) -> str: ...
    @property
    def DisplayName(self) -> str: ...
    @property
    def Hover(self) -> bool: ...
    @property
    def ImageBounds(self) -> Rectangle: ...
    @property
    def IsAnimating(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def TargetDate(self) -> DateTime: ...
    @property
    def TargetFile(self) -> str: ...
    @property
    def TargetThumbnail(self) -> Bitmap: ...
    @property
    def TextBounds(self) -> Rectangle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MouseEnter(self) -> None: ...
    @overload
    def MouseLeave(self) -> None: ...
    @overload
    @staticmethod
    def NewPanel(targetFile: str, targetDate: DateTime) -> GH_FilePanel: ...
    @overload
    def RenderPanel(self, graphics: Graphics) -> None: ...
    @Color.setter
    def Color(self, AutoPropertyValue: Color) -> None: ...
    @Hover.setter
    def Hover(self, AutoPropertyValue: bool) -> None: ...
    @Location.setter
    def Location(self, Value: Point) -> None: ...
    @TargetDate.setter
    def TargetDate(self, AutoPropertyValue: DateTime) -> None: ...
    @TargetFile.setter
    def TargetFile(self, AutoPropertyValue: str) -> None: ...
    @TargetThumbnail.setter
    def TargetThumbnail(self, AutoPropertyValue: Bitmap) -> None: ...
    @overload
    def SetNewLocation(self, point: Point, start: int, duration: int) -> None: ...
    @overload
    def TargetFileChanged(self, watcher: GH_AsynchFileData) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_ImageSettings:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, filePath: str): ...
    @overload
    def __init__(self, folder: str, filename: str, extension: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BackColour(self) -> Color: ...
    @property
    def Extension(self) -> str: ...
    @property
    def FileName(self) -> str: ...
    @property
    def Folder(self) -> str: ...
    @property
    @classmethod
    def TileSize(cls) -> Size: ...
    @property
    def Zoom(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @BackColour.setter
    def BackColour(self, Value: Color) -> None: ...
    @Extension.setter
    def Extension(self, Value: str) -> None: ...
    @FileName.setter
    def FileName(self, Value: str) -> None: ...
    @Folder.setter
    def Folder(self, Value: str) -> None: ...
    @Zoom.setter
    def Zoom(self, Value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_NamedView:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, view_box: Rectangle, target_box: RectangleF): ...
    @overload
    def __init__(self, view: GH_Viewport, region: Rectangle, target: PointF): ...
    @overload
    def __init__(self, view: GH_Viewport, point: Point, target: PointF): ...
    @overload
    def __init__(self, view_name: str, view_point: PointF, view_zoom: float, view_type: GH_NamedViewType): ...
    @overload
    def add_SmoothFrame(self, obj: SmoothFrameEventHandler) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Point(self) -> PointF: ...
    @property
    def Type(self) -> GH_NamedViewType: ...
    @property
    def Zoom(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def LoadFromViewport(self, vp: GH_Viewport, view_type: GH_NamedViewType) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_SmoothFrame(self, obj: SmoothFrameEventHandler) -> None: ...
    @Name.setter
    def Name(self, Value: str) -> None: ...
    @Point.setter
    def Point(self, Value: PointF) -> None: ...
    @Type.setter
    def Type(self, Value: GH_NamedViewType) -> None: ...
    @Zoom.setter
    def Zoom(self, Value: float) -> None: ...
    @overload
    def SetToViewport(self, cv: GH_Canvas) -> None: ...
    @overload
    def SetToViewport(self, vp: GH_Viewport) -> None: ...
    @overload
    def SetToViewport(self, cv: GH_Canvas, length: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_NamedViewEditor:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_NamedViewChanged(self, obj: NamedViewChangedEventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def ActiveControl(self) -> Control: ...
    @property
    def ActiveMdiChild(self) -> Form: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @property
    def DesktopLocation(self) -> Point: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMdiChild(self) -> bool: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @property
    def MdiParent(self) -> Form: ...
    @property
    def Menu(self) -> MainMenu: ...
    @property
    def MergedMenu(self) -> MainMenu: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Modal(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @property
    def Owner(self) -> Form: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def ParentForm(self) -> Form: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Region: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowIcon(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Color: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LoadNamedView(self, view: GH_NamedView) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def OnNamedViewChanged(self) -> None: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_NamedViewChanged(self, obj: NamedViewChangedEventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class GH_NamedViewType(Enum):
    target = 0
    center = 1


class GH_NavigationPaneDialog:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def ActiveControl(self) -> Control: ...
    @property
    def ActiveMdiChild(self) -> Form: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @property
    def DesktopLocation(self) -> Point: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMdiChild(self) -> bool: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @property
    def MdiParent(self) -> Form: ...
    @property
    def Menu(self) -> MainMenu: ...
    @property
    def MergedMenu(self) -> MainMenu: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Modal(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @property
    def Owner(self) -> Form: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Pane(self) -> GH_DocDiagramPainter: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def ParentForm(self) -> Form: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Region: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowIcon(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Color: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @Canvas.setter
    def Canvas(self, Value: GH_Canvas) -> None: ...
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Pane.setter
    def Pane(self, Value: GH_DocDiagramPainter) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class GH_ObjectResponse(Enum):
    Ignore = 0
    Capture = 1
    Release = 2
    Handled = 3


class GH_Orientation(Enum):
    horizontal_center = 0
    horizontal_near = 1
    horizontal_far = 2
    vertical_center = 10
    vertical_near = 11
    vertical_far = 12


class GH_Painter:
    @overload
    def __init__(self, owner: GH_Canvas): ...
    @overload
    @staticmethod
    def ConnectionPath(pointA: PointF, pointB: PointF, directionA: GH_WireDirection, directionB: GH_WireDirection) -> GraphicsPath: ...
    @overload
    @staticmethod
    def ConnectionPathBezier(source: PointF, target: PointF) -> BezierF: ...
    @overload
    def ConnectionVisible(self, a: PointF, b: PointF) -> bool: ...
    @overload
    @staticmethod
    def DetermineWireType(target: IGH_Structure) -> GH_WireType: ...
    @overload
    def DrawBackground(self, viewport: GH_Viewport) -> None: ...
    @overload
    def DrawConnection(self, pointA: PointF, pointB: PointF, directionA: GH_WireDirection, directionB: GH_WireDirection, selectedA: bool, selectedB: bool, type: GH_WireType) -> None: ...
    @overload
    def DrawMiddleGround(self, doc: GH_Document, channel: GH_CanvasChannel) -> None: ...
    @overload
    def DrawNoDocumentMessage(self) -> None: ...
    @overload
    def DrawNULLBuffer(self) -> None: ...
    @overload
    def DrawPivots(self, doc: GH_Document) -> None: ...
    @overload
    def DrawRecipientLinks(self, doc: GH_Document) -> None: ...
    @overload
    def DrawStateFlags(self, doc: GH_Document) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GenerateWirePen_Fill(self, a: PointF, b: PointF, asel: bool, bsel: bool, empty: bool) -> Brush: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class GH_Palette(Enum):
    Normal = 0
    Hidden = 1
    Locked = 2
    Warning = 3
    Error = 4
    White = 5
    Grey = 6
    Black = 7
    Brown = 8
    Pink = 9
    Blue = 10
    Transparent = 11


class GH_PaletteStyle:
    @overload
    def __init__(self, fill: Color): ...
    @overload
    def __init__(self, fill: Color, edge: Color): ...
    @overload
    def __init__(self, fill: Color, edge: Color, text: Color): ...
    m_fill: Color
    m_edge: Color
    m_text: Color
    @overload
    def CreateBrush(self, rec: RectangleF, zoom: float) -> Brush: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Edge(self) -> Color: ...
    @property
    def Fill(self) -> Color: ...
    @property
    def Text(self) -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Edge.setter
    def Edge(self, Value: Color) -> None: ...
    @Fill.setter
    def Fill(self, Value: Color) -> None: ...
    @Text.setter
    def Text(self, Value: Color) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_PopupSearchDialog:
    @overload
    def __init__(self): ...
    @overload
    def Activate(self) -> None: ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def add_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def add_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def add_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def add_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Enter(self, value: EventHandler) -> None: ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def add_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def add_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def add_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def add_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def add_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def add_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def add_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def add_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def add_Leave(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def add_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def add_Move(self, value: EventHandler) -> None: ...
    @overload
    def add_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def add_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def add_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def add_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def add_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Resize(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def add_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validated(self, value: EventHandler) -> None: ...
    @overload
    def add_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def add_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def BeginInvoke(self, method: Delegate) -> IAsyncResult: ...
    @overload
    def BeginInvoke(self, method: Delegate, args: Iterable[object]) -> IAsyncResult: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def ClearMessage(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Contains(self, ctl: Control) -> bool: ...
    @overload
    def CreateControl(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def CreateObjRef(self, requestedType: type) -> ObjRef: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: object, allowedEffects: DragDropEffects) -> DragDropEffects: ...
    @overload
    def DrawToBitmap(self, bitmap: Bitmap, targetBounds: Rectangle) -> None: ...
    @overload
    def EndInvoke(self, asyncResult: IAsyncResult) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindForm(self) -> Form: ...
    @overload
    def Focus(self) -> bool: ...
    @property
    def AcceptButton(self) -> IButtonControl: ...
    @property
    def AccessibilityObject(self) -> AccessibleObject: ...
    @property
    def AccessibleDefaultActionDescription(self) -> str: ...
    @property
    def AccessibleDescription(self) -> str: ...
    @property
    def AccessibleName(self) -> str: ...
    @property
    def AccessibleRole(self) -> AccessibleRole: ...
    @property
    def ActiveControl(self) -> Control: ...
    @property
    def ActiveMdiChild(self) -> Form: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowTransparency(self) -> bool: ...
    @property
    def Anchor(self) -> AnchorStyles: ...
    @property
    def AutoScale(self) -> bool: ...
    @property
    def AutoScaleBaseSize(self) -> Size: ...
    @property
    def AutoScaleDimensions(self) -> SizeF: ...
    @property
    def AutoScaleMode(self) -> AutoScaleMode: ...
    @property
    def AutoScroll(self) -> bool: ...
    @property
    def AutoScrollMargin(self) -> Size: ...
    @property
    def AutoScrollMinSize(self) -> Size: ...
    @property
    def AutoScrollOffset(self) -> Point: ...
    @property
    def AutoScrollPosition(self) -> Point: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def AutoSizeMode(self) -> AutoSizeMode: ...
    @property
    def AutoValidate(self) -> AutoValidate: ...
    @property
    def BackColor(self) -> Color: ...
    @property
    def BackgroundImage(self) -> Image: ...
    @property
    def BackgroundImageLayout(self) -> ImageLayout: ...
    @property
    def BasePoint(self) -> Point: ...
    @property
    def BindingContext(self) -> BindingContext: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def CancelButton(self) -> IButtonControl: ...
    @property
    def CanFocus(self) -> bool: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Canvas(self) -> GH_Canvas: ...
    @property
    def Capture(self) -> bool: ...
    @property
    def CausesValidation(self) -> bool: ...
    @property
    def ClientRectangle(self) -> Rectangle: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CompanyName(self) -> str: ...
    @property
    def Container(self) -> IContainer: ...
    @property
    def ContainsFocus(self) -> bool: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ContextMenuStrip(self) -> ContextMenuStrip: ...
    @property
    def ControlBox(self) -> bool: ...
    @property
    def Controls(self) -> ControlCollection: ...
    @property
    def Created(self) -> bool: ...
    @property
    def CurrentAutoScaleDimensions(self) -> SizeF: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataBindings(self) -> ControlBindingsCollection: ...
    @property
    def DesktopBounds(self) -> Rectangle: ...
    @property
    def DesktopLocation(self) -> Point: ...
    @property
    def DeviceDpi(self) -> int: ...
    @property
    def DialogResult(self) -> DialogResult: ...
    @property
    def DisplayRectangle(self) -> Rectangle: ...
    @property
    def Disposing(self) -> bool: ...
    @property
    def Dock(self) -> DockStyle: ...
    @property
    def DockPadding(self) -> DockPaddingEdges: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Focused(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForeColor(self) -> Color: ...
    @property
    def FormBorderStyle(self) -> FormBorderStyle: ...
    @property
    def Handle(self) -> IntPtr: ...
    @property
    def HasChildren(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def HelpButton(self) -> bool: ...
    @property
    def HorizontalScroll(self) -> HScrollProperties: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def ImeMode(self) -> ImeMode: ...
    @property
    def InvokeRequired(self) -> bool: ...
    @property
    def IsAccessible(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsHandleCreated(self) -> bool: ...
    @property
    def IsMdiChild(self) -> bool: ...
    @property
    def IsMdiContainer(self) -> bool: ...
    @property
    def IsMirrored(self) -> bool: ...
    @property
    def IsRestrictedWindow(self) -> bool: ...
    @property
    def KeyPreview(self) -> bool: ...
    @property
    def LayoutEngine(self) -> LayoutEngine: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MainMenuStrip(self) -> MenuStrip: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def Margin(self) -> Padding: ...
    @property
    def MaximizeBox(self) -> bool: ...
    @property
    def MaximumSize(self) -> Size: ...
    @property
    def MdiChildren(self) -> Iterable[Form]: ...
    @property
    def MdiParent(self) -> Form: ...
    @property
    def Menu(self) -> MainMenu: ...
    @property
    def MergedMenu(self) -> MainMenu: ...
    @property
    def MinimizeBox(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def Modal(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def OwnedForms(self) -> Iterable[Form]: ...
    @property
    def Owner(self) -> Form: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Control: ...
    @property
    def ParentForm(self) -> Form: ...
    @property
    def PreferredSize(self) -> Size: ...
    @property
    def ProductName(self) -> str: ...
    @property
    def ProductVersion(self) -> str: ...
    @property
    def RecreatingHandle(self) -> bool: ...
    @property
    def Region(self) -> Region: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Right(self) -> int: ...
    @property
    def RightToLeft(self) -> RightToLeft: ...
    @property
    def RightToLeftLayout(self) -> bool: ...
    @property
    def ShowIcon(self) -> bool: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Site(self) -> ISite: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SizeGripStyle(self) -> SizeGripStyle: ...
    @property
    def StartPosition(self) -> FormStartPosition: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def TabStop(self) -> bool: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLevel(self) -> bool: ...
    @property
    def TopLevelControl(self) -> Control: ...
    @property
    def TopMost(self) -> bool: ...
    @property
    def TransparencyKey(self) -> Color: ...
    @property
    def UseWaitCursor(self) -> bool: ...
    @property
    def VerticalScroll(self) -> VScrollProperties: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowState(self) -> FormWindowState: ...
    @property
    def WindowTarget(self) -> IWindowTarget: ...
    @overload
    def GetChildAtPoint(self, pt: Point) -> Control: ...
    @overload
    def GetChildAtPoint(self, pt: Point, skipValue: GetChildAtPointSkip) -> Control: ...
    @overload
    def GetContainerControl(self) -> IContainerControl: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetLifetimeService(self) -> object: ...
    @overload
    def GetNextControl(self, ctl: Control, forward: bool) -> Control: ...
    @overload
    def GetPreferredSize(self, proposedSize: Size) -> Size: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def InitializeLifetimeService(self) -> object: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, region: Region) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rc: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, region: Region, invalidateChildren: bool) -> None: ...
    @overload
    def Invoke(self, method: Delegate) -> object: ...
    @overload
    def Invoke(self, method: Delegate, args: Iterable[object]) -> object: ...
    @overload
    def LayoutMdi(self, value: MdiLayout) -> None: ...
    @overload
    def LogicalToDeviceUnits(self, value: Size) -> Size: ...
    @overload
    def LogicalToDeviceUnits(self, value: int) -> int: ...
    @overload
    def PerformAutoScale(self) -> None: ...
    @overload
    def PerformLayout(self) -> None: ...
    @overload
    def PerformLayout(self, affectedControl: Control, affectedProperty: str) -> None: ...
    @overload
    def PointToClient(self, p: Point) -> Point: ...
    @overload
    def PointToScreen(self, p: Point) -> Point: ...
    @overload
    def PreProcessControlMessage(self, msg: Message) -> tuple[PreProcessControlState, Message]: ...
    @overload
    def PreProcessMessage(self, msg: Message) -> tuple[bool, Message]: ...
    @overload
    def RectangleToClient(self, r: Rectangle) -> Rectangle: ...
    @overload
    def RectangleToScreen(self, r: Rectangle) -> Rectangle: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_AutoValidateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BackgroundImageLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_BindingContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_CausesValidationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ChangeUICues(self, value: UICuesEventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_ClientSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_ContextMenuChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ContextMenuStripChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ControlAdded(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_ControlRemoved(self, value: ControlEventHandler) -> None: ...
    @overload
    def remove_CursorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Deactivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_Disposed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DockChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChanged(self, value: DpiChangedEventHandler) -> None: ...
    @overload
    def remove_DpiChangedAfterParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DpiChangedBeforeParent(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: DragEventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Enter(self, value: EventHandler) -> None: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ForeColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormClosed(self, value: FormClosedEventHandler) -> None: ...
    @overload
    def remove_FormClosing(self, value: FormClosingEventHandler) -> None: ...
    @overload
    def remove_GiveFeedback(self, value: GiveFeedbackEventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_HandleDestroyed(self, value: EventHandler) -> None: ...
    @overload
    def remove_HelpButtonClicked(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_HelpRequested(self, value: HelpEventHandler) -> None: ...
    @overload
    def remove_ImeModeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanged(self, value: InputLanguageChangedEventHandler) -> None: ...
    @overload
    def remove_InputLanguageChanging(self, value: InputLanguageChangingEventHandler) -> None: ...
    @overload
    def remove_Invalidated(self, value: InvalidateEventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_KeyPress(self, value: KeyPressEventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: KeyEventHandler) -> None: ...
    @overload
    def remove_Layout(self, value: LayoutEventHandler) -> None: ...
    @overload
    def remove_Leave(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MarginChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximizedBoundsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MaximumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MdiChildActivate(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_MenuStart(self, value: EventHandler) -> None: ...
    @overload
    def remove_MinimumSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseCaptureChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseHover(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: MouseEventHandler) -> None: ...
    @overload
    def remove_Move(self, value: EventHandler) -> None: ...
    @overload
    def remove_PaddingChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: PaintEventHandler) -> None: ...
    @overload
    def remove_ParentChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreviewKeyDown(self, value: PreviewKeyDownEventHandler) -> None: ...
    @overload
    def remove_QueryAccessibilityHelp(self, value: QueryAccessibilityHelpEventHandler) -> None: ...
    @overload
    def remove_QueryContinueDrag(self, value: QueryContinueDragEventHandler) -> None: ...
    @overload
    def remove_RegionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Resize(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeBegin(self, value: EventHandler) -> None: ...
    @overload
    def remove_ResizeEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_RightToLeftLayoutChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Scroll(self, value: ScrollEventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SystemColorsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TabStopChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validated(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validating(self, value: CancelEventHandler) -> None: ...
    @overload
    def remove_VisibleChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveOwnedForm(self, ownedForm: Form) -> None: ...
    @overload
    def ResetBackColor(self) -> None: ...
    @overload
    def ResetBindings(self) -> None: ...
    @overload
    def ResetCursor(self) -> None: ...
    @overload
    def ResetFont(self) -> None: ...
    @overload
    def ResetForeColor(self) -> None: ...
    @overload
    def ResetImeMode(self) -> None: ...
    @overload
    def ResetRightToLeft(self) -> None: ...
    @overload
    def ResetText(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ResumeLayout(self, performLayout: bool) -> None: ...
    @overload
    def Scale(self, factor: SizeF) -> None: ...
    @overload
    def ScaleBitmapLogicalToDevice(self, logicalBitmap: Bitmap) -> tuple[Bitmap]: ...
    @overload
    def ScrollControlIntoView(self, activeControl: Control) -> None: ...
    @overload
    def Select(self) -> None: ...
    @overload
    def SelectNextControl(self, ctl: Control, forward: bool, tabStopOnly: bool, nested: bool, wrap: bool) -> bool: ...
    @overload
    def SendToBack(self) -> None: ...
    @AcceptButton.setter
    def AcceptButton(self, value: IButtonControl) -> None: ...
    @AccessibleDefaultActionDescription.setter
    def AccessibleDefaultActionDescription(self, value: str) -> None: ...
    @AccessibleDescription.setter
    def AccessibleDescription(self, value: str) -> None: ...
    @AccessibleName.setter
    def AccessibleName(self, value: str) -> None: ...
    @AccessibleRole.setter
    def AccessibleRole(self, value: AccessibleRole) -> None: ...
    @ActiveControl.setter
    def ActiveControl(self, value: Control) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowTransparency.setter
    def AllowTransparency(self, value: bool) -> None: ...
    @Anchor.setter
    def Anchor(self, value: AnchorStyles) -> None: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> None: ...
    @AutoScaleBaseSize.setter
    def AutoScaleBaseSize(self, value: Size) -> None: ...
    @AutoScaleDimensions.setter
    def AutoScaleDimensions(self, value: SizeF) -> None: ...
    @AutoScaleMode.setter
    def AutoScaleMode(self, value: AutoScaleMode) -> None: ...
    @AutoScroll.setter
    def AutoScroll(self, value: bool) -> None: ...
    @AutoScrollMargin.setter
    def AutoScrollMargin(self, value: Size) -> None: ...
    @AutoScrollMinSize.setter
    def AutoScrollMinSize(self, value: Size) -> None: ...
    @AutoScrollOffset.setter
    def AutoScrollOffset(self, value: Point) -> None: ...
    @AutoScrollPosition.setter
    def AutoScrollPosition(self, value: Point) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @AutoSizeMode.setter
    def AutoSizeMode(self, value: AutoSizeMode) -> None: ...
    @AutoValidate.setter
    def AutoValidate(self, value: AutoValidate) -> None: ...
    @BackColor.setter
    def BackColor(self, value: Color) -> None: ...
    @BackgroundImage.setter
    def BackgroundImage(self, value: Image) -> None: ...
    @BackgroundImageLayout.setter
    def BackgroundImageLayout(self, value: ImageLayout) -> None: ...
    @BasePoint.setter
    def BasePoint(self, AutoPropertyValue: Point) -> None: ...
    @BindingContext.setter
    def BindingContext(self, value: BindingContext) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @CancelButton.setter
    def CancelButton(self, value: IButtonControl) -> None: ...
    @Canvas.setter
    def Canvas(self, AutoPropertyValue: GH_Canvas) -> None: ...
    @Capture.setter
    def Capture(self, value: bool) -> None: ...
    @CausesValidation.setter
    def CausesValidation(self, value: bool) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @ContextMenuStrip.setter
    def ContextMenuStrip(self, value: ContextMenuStrip) -> None: ...
    @ControlBox.setter
    def ControlBox(self, value: bool) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DesktopBounds.setter
    def DesktopBounds(self, value: Rectangle) -> None: ...
    @DesktopLocation.setter
    def DesktopLocation(self, value: Point) -> None: ...
    @DialogResult.setter
    def DialogResult(self, value: DialogResult) -> None: ...
    @Dock.setter
    def Dock(self, value: DockStyle) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForeColor.setter
    def ForeColor(self, value: Color) -> None: ...
    @FormBorderStyle.setter
    def FormBorderStyle(self, value: FormBorderStyle) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @HelpButton.setter
    def HelpButton(self, value: bool) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @ImeMode.setter
    def ImeMode(self, value: ImeMode) -> None: ...
    @IsAccessible.setter
    def IsAccessible(self, value: bool) -> None: ...
    @IsMdiContainer.setter
    def IsMdiContainer(self, value: bool) -> None: ...
    @KeyPreview.setter
    def KeyPreview(self, value: bool) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MainMenuStrip.setter
    def MainMenuStrip(self, value: MenuStrip) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @Margin.setter
    def Margin(self, value: Padding) -> None: ...
    @MaximizeBox.setter
    def MaximizeBox(self, value: bool) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: Size) -> None: ...
    @MdiParent.setter
    def MdiParent(self, value: Form) -> None: ...
    @Menu.setter
    def Menu(self, value: MainMenu) -> None: ...
    @MinimizeBox.setter
    def MinimizeBox(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Form) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Parent.setter
    def Parent(self, value: Control) -> None: ...
    @Region.setter
    def Region(self, value: Region) -> None: ...
    @RightToLeft.setter
    def RightToLeft(self, value: RightToLeft) -> None: ...
    @RightToLeftLayout.setter
    def RightToLeftLayout(self, value: bool) -> None: ...
    @ShowIcon.setter
    def ShowIcon(self, value: bool) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Site.setter
    def Site(self, value: ISite) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SizeGripStyle.setter
    def SizeGripStyle(self, value: SizeGripStyle) -> None: ...
    @StartPosition.setter
    def StartPosition(self, value: FormStartPosition) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @TabStop.setter
    def TabStop(self, value: bool) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @TopLevel.setter
    def TopLevel(self, value: bool) -> None: ...
    @TopMost.setter
    def TopMost(self, value: bool) -> None: ...
    @TransparencyKey.setter
    def TransparencyKey(self, value: Color) -> None: ...
    @UseWaitCursor.setter
    def UseWaitCursor(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowState.setter
    def WindowState(self, value: FormWindowState) -> None: ...
    @WindowTarget.setter
    def WindowTarget(self, value: IWindowTarget) -> None: ...
    @overload
    def SetAutoScrollMargin(self, x: int, y: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetBounds(self, x: int, y: int, width: int, height: int, specified: BoundsSpecified) -> None: ...
    @overload
    def SetDefaultMessage(self) -> None: ...
    @overload
    def SetDesktopBounds(self, x: int, y: int, width: int, height: int) -> None: ...
    @overload
    def SetDesktopLocation(self, x: int, y: int) -> None: ...
    @overload
    def SetMessage(self, msg: str) -> None: ...
    @overload
    def SetNoResultsMessage(self) -> None: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, owner: IWin32Window) -> None: ...
    @overload
    def ShowDialog(self) -> DialogResult: ...
    @overload
    def ShowDialog(self, owner: IWin32Window) -> DialogResult: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def Validate(self) -> bool: ...
    @overload
    def Validate(self, checkAutoValidate: bool) -> bool: ...
    @overload
    def ValidateChildren(self) -> bool: ...
    @overload
    def ValidateChildren(self, validationConstraints: ValidationConstraints) -> bool: ...


class GH_ResizeBorder(GH_Border):
    @overload
    def __init__(self, borders: GH_Border): ...
    @overload
    def __init__(self, region: RectangleF, topology: GH_BorderTopology): ...
    @overload
    def Contains(self, pt: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Anchor(self) -> PointF: ...
    @property
    def Region(self) -> RectangleF: ...
    @property
    def Size_Cursor(self) -> Cursor: ...
    @property
    def Topology(self) -> GH_BorderTopology: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Anchor.setter
    def Anchor(self, Value: PointF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF, MinSize: SizeF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF, MinSize: SizeF) -> None: ...
    @overload
    def Setup(self, att: IGH_Attributes, MouseCursor: PointF, MinSize: SizeF, MaxSize: SizeF) -> None: ...
    @overload
    def Setup(self, ShapeRegion: RectangleF, ShapePivot: PointF, MouseCursor: PointF, MinSize: SizeF, MaxSize: SizeF) -> None: ...
    @overload
    def Solve(self, nCursor: PointF) -> tuple[RectangleF, PointF]: ...
    @overload
    def ToString(self) -> str: ...


class GH_Skin:
    canvas_mono: bool
    canvas_mono_color: Color
    canvas_back: Color
    canvas_edge: Color
    canvas_grid: Color
    canvas_shade: Color
    canvas_grid_col: int
    canvas_grid_row: int
    canvas_shade_size: int
    wire_default: Color
    wire_empty: Color
    wire_selected_a: Color
    wire_selected_b: Color
    group_back: Color
    panel_back: Color
    zui_fill: Color
    zui_edge: Color
    zui_fill_highlight: Color
    zui_edge_highlight: Color
    palette_black_standard: GH_PaletteStyle
    palette_black_selected: GH_PaletteStyle
    palette_grey_standard: GH_PaletteStyle
    palette_grey_selected: GH_PaletteStyle
    palette_white_standard: GH_PaletteStyle
    palette_white_selected: GH_PaletteStyle
    palette_blue_standard: GH_PaletteStyle
    palette_blue_selected: GH_PaletteStyle
    palette_brown_standard: GH_PaletteStyle
    palette_brown_selected: GH_PaletteStyle
    palette_pink_standard: GH_PaletteStyle
    palette_pink_selected: GH_PaletteStyle
    palette_trans_standard: GH_PaletteStyle
    palette_trans_selected: GH_PaletteStyle
    palette_normal_standard: GH_PaletteStyle
    palette_normal_selected: GH_PaletteStyle
    palette_hidden_standard: GH_PaletteStyle
    palette_hidden_selected: GH_PaletteStyle
    palette_locked_standard: GH_PaletteStyle
    palette_locked_selected: GH_PaletteStyle
    palette_warning_standard: GH_PaletteStyle
    palette_warning_selected: GH_PaletteStyle
    palette_error_standard: GH_PaletteStyle
    palette_error_selected: GH_PaletteStyle
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def LoadSkin() -> None: ...
    @overload
    @staticmethod
    def SaveSkin() -> None: ...
    @overload
    def ToString(self) -> str: ...


class GH_Viewport:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, target: Point): ...
    @overload
    def __init__(self, viewport: GH_Viewport): ...
    @overload
    def __init__(self, target: Point, zoom: float): ...
    ZoomDefault: float
    ZoomDefaultLower: float
    ZoomDefaultUpper: float
    ZoomMinimum: float
    ZoomMaximum: float
    @overload
    def ApplyProjection(self, G: Graphics) -> None: ...
    @overload
    def ComputeProjection(self) -> None: ...
    @overload
    def DollyZoom(self, e: GH_CanvasMouseEvent) -> bool: ...
    @overload
    def Duplicate(self) -> GH_Viewport: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self, pt: Point) -> None: ...
    @overload
    def Focus(self, attributes: MutableSequence[IGH_Attributes]) -> None: ...
    @overload
    def Focus(self, attribute: IGH_Attributes) -> None: ...
    @overload
    def Focus(self, pt: PointF) -> None: ...
    @property
    def ControlMidPoint(self) -> PointF: ...
    @property
    def Diagonal(self) -> float: ...
    @property
    def Height(self) -> int: ...
    @property
    def MidPoint(self) -> PointF: ...
    @property
    def ScreenPort(self) -> Rectangle: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Target(self) -> Point: ...
    @property
    def TargetRatio(self) -> SizeF: ...
    @property
    def Tx(self) -> int: ...
    @property
    def Ty(self) -> int: ...
    @property
    def VisibleRegion(self) -> RectangleF: ...
    @property
    def Width(self) -> int: ...
    @property
    def Zoom(self) -> float: ...
    @property
    def ZoomInverse(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsVisible(self, rec: RectangleF, margin: float) -> tuple[bool, RectangleF]: ...
    @overload
    def IsVisible(self, pt: PointF, margin: float) -> tuple[bool, PointF]: ...
    @overload
    def LimitUnit(self, guide_value: float, no_less_than: float, no_more_than: float) -> float: ...
    @overload
    def Project(self, pt: PointF) -> tuple[PointF]: ...
    @overload
    def ProjectPoint(self, pt: PointF) -> PointF: ...
    @overload
    def ProjectRectangle(self, rec: RectangleF) -> RectangleF: ...
    @overload
    def ProjectX(self, x: float) -> float: ...
    @overload
    def ProjectY(self, y: float) -> float: ...
    @Height.setter
    def Height(self, Value: int) -> None: ...
    @MidPoint.setter
    def MidPoint(self, Value: PointF) -> None: ...
    @overload
    def Set(self, other: GH_Viewport) -> None: ...
    @Size.setter
    def Size(self, Value: Size) -> None: ...
    @Target.setter
    def Target(self, Value: Point) -> None: ...
    @TargetRatio.setter
    def TargetRatio(self, Value: SizeF) -> None: ...
    @Tx.setter
    def Tx(self, Value: int) -> None: ...
    @Ty.setter
    def Ty(self, Value: int) -> None: ...
    @Width.setter
    def Width(self, Value: int) -> None: ...
    @Zoom.setter
    def Zoom(self, Value: float) -> None: ...
    @Zoom.setter
    def Zoom(self, adjustTarget: bool, Value: float) -> None: ...
    @overload
    def SolveUnit(self, desired: float, no_less_than: float, no_more_than: float) -> float: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unproject(self, pt: PointF) -> tuple[PointF]: ...
    @overload
    def UnprojectPoint(self, pt: PointF) -> PointF: ...
    @overload
    def UnprojectRectangle(self, rec: RectangleF) -> RectangleF: ...
    @overload
    def UnprojectX(self, x: float) -> float: ...
    @overload
    def UnprojectY(self, y: float) -> float: ...
    @overload
    def XFormMatrix(self, projection: GH_DisplayMatrix) -> Matrix: ...


class GH_WireDirection(Enum):
    left = 0
    right = 1


class GH_WireType(Enum):
    dynamic = 0
    wireless = 1
    generic = 2
    faint = 3
    null = 4
    item = 5
    list = 6
    tree = 7
    dynamicAlternative1 = 8


class IGH_CanvasValidator:
    @overload
    def AddedToCanvas(self, canvas: GH_Canvas) -> None: ...
    @overload
    def AppliesToDocument(self, id: Guid) -> bool: ...
    @overload
    def CanAcceptObject(self, id: Guid) -> bool: ...
    @overload
    def CanCreateObject(self, id: Guid, pt: PointF) -> bool: ...
    @overload
    def CanCreateWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDeleteObject(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def CanDeleteWire(self, source: IGH_Param, target: IGH_Param) -> bool: ...
    @overload
    def CanDragObject(self, object: IGH_DocumentObject, dragFromPoint: PointF) -> bool: ...
    @overload
    def CanNavigateCanvas(self) -> bool: ...
    @overload
    def CanShowCanvasMenu(self, pt: PointF) -> bool: ...
    @overload
    def CanShowComponentSearchBox(self, pt: PointF) -> bool: ...
    @overload
    def CanShowObjectMenu(self, object: IGH_DocumentObject) -> bool: ...
    @overload
    def RemovedFromCanvas(self, canvas: GH_Canvas) -> None: ...


class IGH_ResponsiveObject:
    @overload
    def RespondToKeyDown(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToKeyUp(self, sender: GH_Canvas, e: KeyEventArgs) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDoubleClick(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseDown(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseMove(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...
    @overload
    def RespondToMouseUp(self, sender: GH_Canvas, e: GH_CanvasMouseEvent) -> GH_ObjectResponse: ...


class IGH_TooltipAwareObject:
    @property
    def TooltipEnabled(self) -> bool: ...
    @overload
    def IsTooltipRegion(self, canvasPoint: PointF) -> bool: ...
    @overload
    def SetupTooltip(self, canvasPoint: PointF, e: GH_TooltipDisplayEventArgs) -> None: ...


class ModifiersChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: EventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: EventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class NamedViewChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_NamedViewEditor, nView: GH_NamedView, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_NamedViewEditor, nView: GH_NamedView) -> None: ...
    @overload
    def ToString(self) -> str: ...


class NavigationSettingsChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SmoothFrameEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: GH_NamedView, canvas: GH_Canvas, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: GH_NamedView, canvas: GH_Canvas) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ViewportChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_CanvasViewportChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_CanvasViewportChangedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class WidgetListCreatedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_CanvasWidgetListEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_CanvasWidgetListEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
