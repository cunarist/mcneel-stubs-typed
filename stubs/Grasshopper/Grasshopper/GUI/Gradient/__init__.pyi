from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from System.Drawing import Color
from System.Drawing import RectangleF
from System.Drawing import PointF
from System.Drawing import Graphics
from GH_IO.Serialization import GH_IWriter
from GH_IO.Serialization import GH_IReader
class GH_Gradient:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Gradient): ...
    @overload
    def __init__(self, parameters: Iterable[float], colours: Iterable[Color]): ...
    @overload
    def add_GradientChanged(self, obj: GradientChangedEventHandler) -> None: ...
    @overload
    def add_SelectionChanged(self, obj: SelectionChangedEventHandler) -> None: ...
    @overload
    def AddGrip(self, grip: GH_Grip) -> None: ...
    @overload
    def AddGrip(self, t: float) -> GH_Grip: ...
    @overload
    def AddGrip(self, t: float, c: Color) -> GH_Grip: ...
    @overload
    def AddGrip(self, t: float, c0: Color, c1: Color) -> GH_Grip: ...
    @overload
    def ColourAt(self, t: float) -> Color: ...
    @overload
    @staticmethod
    def DeleteGripRegion(destination: RectangleF) -> RectangleF: ...
    @overload
    def DisplayGradientEditor(self) -> None: ...
    @overload
    def DisplayGripColourPicker(self, grip: GH_Grip) -> None: ...
    @overload
    @staticmethod
    def EarthlyBrown() -> GH_Gradient: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Forest() -> GH_Gradient: ...
    @property
    def GripCount(self) -> int: ...
    @property
    def Linear(self) -> bool: ...
    @property
    def Locked(self) -> bool: ...
    @property
    def SelectedGrip(self) -> GH_Grip: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def GreyScale() -> GH_Gradient: ...
    @overload
    @staticmethod
    def Heat() -> GH_Gradient: ...
    @overload
    def MouseDown(self, dest: RectangleF, pt: PointF) -> bool: ...
    @overload
    def MouseDragAbort(self) -> bool: ...
    @overload
    def MouseMove(self, dest: RectangleF, pt: PointF) -> bool: ...
    @overload
    def MouseUp(self, dest: RectangleF, pt: PointF, deselect: bool) -> bool: ...
    @overload
    def NearestGrip(self, t: float) -> int: ...
    @overload
    def NearestGrip(self, t: float, side: GH_GripSide) -> int: ...
    @overload
    def NearestGrip(self, dest: RectangleF, pt: PointF, maxRadius: float) -> int: ...
    @overload
    @staticmethod
    def NewGripRegion(destination: RectangleF) -> RectangleF: ...
    @overload
    def NormalizeGrips(self) -> None: ...
    @overload
    def OnGradientChanged(self) -> None: ...
    @overload
    def OnGradientChangedIntermediate(self) -> None: ...
    @overload
    def OnSelectionChanged(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @overload
    def remove_GradientChanged(self, obj: GradientChangedEventHandler) -> None: ...
    @overload
    def remove_SelectionChanged(self, obj: SelectionChangedEventHandler) -> None: ...
    @overload
    def RemoveGrip(self, index: int) -> None: ...
    @overload
    def RemoveGrip(self, grip: GH_Grip) -> None: ...
    @overload
    def Render_Background(self, g: Graphics, dest: RectangleF) -> None: ...
    @overload
    def Render_Gradient(self, g: Graphics, dest: RectangleF) -> None: ...
    @overload
    def Render_Grips(self, g: Graphics, dest: RectangleF) -> None: ...
    @property
    def Grip(self) -> MutableSequence[GH_Grip]: ...
    @Linear.setter
    def Linear(self, Value: bool) -> None: ...
    @Locked.setter
    def Locked(self, Value: bool) -> None: ...
    @SelectedGrip.setter
    def SelectedGrip(self, Value: GH_Grip) -> None: ...
    @overload
    @staticmethod
    def SoGay() -> GH_Gradient: ...
    @overload
    @staticmethod
    def Spectrum() -> GH_Gradient: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Traffic() -> GH_Gradient: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...
    @overload
    @staticmethod
    def Zebra() -> GH_Gradient: ...


class GH_GradientChangedEventArgs:
    @overload
    def __init__(self, gradient: GH_Gradient, intermediate: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Gradient(self) -> GH_Gradient: ...
    @property
    def Intermediate(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System.Drawing import Color
from System import Guid
from GH_IO.Serialization import GH_IWriter
from GH_IO.Serialization import GH_IReader
class GH_Grip:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, other: GH_Grip): ...
    @overload
    def __init__(self, parameter: float, colour: Color): ...
    @overload
    def __init__(self, parameter: float, colourLeft: Color, colourRight: Color): ...
    @overload
    @staticmethod
    def Blend(A: Color, B: Color, t: float) -> Color: ...
    @overload
    def CompareTo(self, other: GH_Grip) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ColourLeft(self) -> Color: ...
    @property
    def ColourRight(self) -> Color: ...
    @property
    def GripId(self) -> Guid: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Parameter(self) -> float: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Type(self) -> GH_GripType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MutateId(self) -> None: ...
    @overload
    def Read(self, reader: GH_IReader) -> bool: ...
    @ColourLeft.setter
    def ColourLeft(self, Value: Color) -> None: ...
    @ColourRight.setter
    def ColourRight(self, Value: Color) -> None: ...
    @Parameter.setter
    def Parameter(self, Value: float) -> None: ...
    @Selected.setter
    def Selected(self, Value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Write(self, writer: GH_IWriter) -> bool: ...


class GH_GripSide(Enum):
    Both = 0
    Left = 1
    Right = 2


class GH_GripType(Enum):
    Continuous = 0
    Discontinuous = 1


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class GradientChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_GradientChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_GradientChangedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import AsyncCallback
from System import IAsyncResult
from System.Reflection import MethodInfo
class SelectionChangedEventHandler:
    @overload
    def __init__(self, TargetObject: object, TargetMethod: IntPtr): ...
    @overload
    def BeginInvoke(self, sender: object, e: GH_GradientChangedEventArgs, DelegateCallback: AsyncCallback, DelegateAsyncState: object) -> IAsyncResult: ...
    @overload
    def Clone(self) -> object: ...
    @overload
    def DynamicInvoke(self, args: Iterable[object]) -> object: ...
    @overload
    def EndInvoke(self, DelegateAsyncResult: IAsyncResult) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invoke(self, sender: object, e: GH_GradientChangedEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...
