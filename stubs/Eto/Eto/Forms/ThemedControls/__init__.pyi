from typing import overload, Any
from collections.abc import Iterable, Iterator, Sequence, MutableSequence, Callable
from enum import Enum

from Eto import DefaultStyleProvider
from Eto import FileAction
from Eto import ICallback
from Eto import IStyleProvider
from Eto import Platform
from Eto import PropertyStore
from Eto import Widget
from Eto.Drawing import Color
from Eto.Drawing import Font
from Eto.Drawing import Icon
from Eto.Drawing import Image
from Eto.Drawing import Padding
from Eto.Drawing import PenLineCap
from Eto.Drawing import Point
from Eto.Drawing import PointF
from Eto.Drawing import Rectangle
from Eto.Drawing import RectangleF
from Eto.Drawing import Size
from Eto.Drawing import SizeF
from Eto.Forms import AboutDialog
from Eto.Forms import AutoSelectMode
from Eto.Forms import BindingCollection
from Eto.Forms import BindingUpdateMode
from Eto.Forms import Button
from Eto.Forms import ButtonSegmentedItem
from Eto.Forms import CollectionEditor
from Eto.Forms import ColorPicker
from Eto.Forms import Command
from Eto.Forms import Container
from Eto.Forms import ContextMenu
from Eto.Forms import Control
from Eto.Forms import Cursor
from Eto.Forms import DataObject
from Eto.Forms import Dialog
from Eto.Forms import DialogDisplayMode
from Eto.Forms import DialogResult
from Eto.Forms import DocumentControl
from Eto.Forms import DocumentPage
from Eto.Forms import DragEffects
from Eto.Forms import Drawable
from Eto.Forms import Expander
from Eto.Forms import FileFilter
from Eto.Forms import FilePicker
from Eto.Forms import FontPicker
from Eto.Forms import ICallback
from Eto.Forms import IndirectBinding
from Eto.Forms import MenuBar
from Eto.Forms import MenuSegmentedItem
from Eto.Forms import MessageBoxButtons
from Eto.Forms import MessageBoxDefaultButton
from Eto.Forms import MessageBoxType
from Eto.Forms import Orientation
from Eto.Forms import Panel
from Eto.Forms import PropertyGrid
from Eto.Forms import Range
from Eto.Forms import Screen
from Eto.Forms import SegmentedButton
from Eto.Forms import SegmentedItem
from Eto.Forms import SegmentedSelectionMode
from Eto.Forms import Spinner
from Eto.Forms import Splitter
from Eto.Forms import SplitterFixedPanel
from Eto.Forms import StackLayout
from Eto.Forms import Stepper
from Eto.Forms import StepperValidDirections
from Eto.Forms import T
from Eto.Forms import TableLayout
from Eto.Forms import TextAlignment
from Eto.Forms import TextBox
from Eto.Forms import TextStepper
from Eto.Forms import ToggleButton
from Eto.Forms import ToolBar
from Eto.Forms import Window
from Eto.Forms import WindowState
from Eto.Forms import WindowStyle
from System import EventArgs
from System import EventHandler
from System import IFormatProvider
from System import IntPtr
from System import TimeSpan
from System import TypeCode
from System import Uri
from System.Collections.Generic import IList
from System.Collections.ObjectModel import Collection
from System.Threading.Tasks import Task



class ThemedAboutDialogHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Dialog: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Designers(self) -> Iterable[str]: ...
    @property
    def Developers(self) -> Iterable[str]: ...
    @property
    def Documenters(self) -> Iterable[str]: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @property
    def License(self) -> str: ...
    @property
    def Logo(self) -> Image: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def ProgramDescription(self) -> str: ...
    @property
    def ProgramName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def Website(self) -> Uri: ...
    @property
    def WebsiteLabel(self) -> str: ...
    @property
    def Widget(self) -> AboutDialog: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @Control.setter
    def Control(self, value: Dialog) -> None: ...
    @Copyright.setter
    def Copyright(self, value: str) -> None: ...
    @Designers.setter
    def Designers(self, value: Iterable[str]) -> None: ...
    @Developers.setter
    def Developers(self, value: Iterable[str]) -> None: ...
    @Documenters.setter
    def Documenters(self, value: Iterable[str]) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @License.setter
    def License(self, value: str) -> None: ...
    @Logo.setter
    def Logo(self, value: Image) -> None: ...
    @ProgramDescription.setter
    def ProgramDescription(self, value: str) -> None: ...
    @ProgramName.setter
    def ProgramName(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...
    @Website.setter
    def Website(self, value: Uri) -> None: ...
    @WebsiteLabel.setter
    def WebsiteLabel(self, value: str) -> None: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


class ThemedButtonSegmentedItemHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> ToggleButton: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Widget(self) -> ButtonSegmentedItem: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @Control.setter
    def Control(self, value: ToggleButton) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Eto.Forms import Panel
class ThemedCollectionEditor(Panel):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Children(self) -> Iterable[Control]: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataContext(self) -> object: ...
    @property
    def DataStore(self) -> Iterable[object]: ...
    @property
    def ElementType(self) -> type: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ExtraContent(self) -> Control: ...
    @property
    def Handler(self) -> object: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsAttached(self) -> bool: ...
    @property
    def IsDataContextChanging(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def IsSuspended(self) -> bool: ...
    @property
    def IsVisualControl(self) -> bool: ...
    @property
    def Loaded(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def LogicalParent(self) -> Container: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Widget: ...
    @property
    def Parent(self) -> Container: ...
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @property
    def ParentWindow(self) -> Window: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Tag(self) -> object: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def VisualParent(self) -> Container: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DataContext.setter
    def DataContext(self, value: object) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[object]) -> None: ...
    @ElementType.setter
    def ElementType(self, value: type) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ExtraContent.setter
    def ExtraContent(self, value: Control) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @IsDataContextChanging.setter
    def IsDataContextChanging(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @StyleProvider.setter
    def StyleProvider(self, value: IStyleProvider) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TriggerStyleChanged(self) -> None: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedCollectionEditorHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> ThemedCollectionEditor: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataStore(self) -> Iterable[object]: ...
    @property
    def ElementType(self) -> type: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> CollectionEditor: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: ThemedCollectionEditor) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[object]) -> None: ...
    @ElementType.setter
    def ElementType(self, value: type) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedColorPickerHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Control(self) -> Control: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> ColorPicker: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: bool) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Control) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedDocumentControlHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowNavigationButtons(self) -> bool: ...
    @property
    def AllowReordering(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CloseBackgroundColor(self) -> Color: ...
    @property
    def CloseCornerRadius(self) -> int: ...
    @property
    def CloseForegroundColor(self) -> Color: ...
    @property
    def CloseHighlightBackgroundColor(self) -> Color: ...
    @property
    def CloseHighlightForegroundColor(self) -> Color: ...
    @property
    def Control(self) -> TableLayout: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DisabledForegroundColor(self) -> Color: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabBackgroundColor(self) -> Color: ...
    @property
    def TabForegroundColor(self) -> Color: ...
    @property
    def TabHighlightBackgroundColor(self) -> Color: ...
    @property
    def TabHighlightForegroundColor(self) -> Color: ...
    @property
    def TabHoverBackgroundColor(self) -> Color: ...
    @property
    def TabHoverForegroundColor(self) -> Color: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabPadding(self) -> Padding: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def UnsavedBackgroundColor(self) -> Color: ...
    @property
    def UseFixedTabHeight(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> DocumentControl: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPage(self, index: int) -> DocumentPage: ...
    @overload
    def GetPageCount(self) -> int: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def InsertPage(self, index: int, page: DocumentPage) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def RemovePage(self, index: int) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowNavigationButtons.setter
    def AllowNavigationButtons(self, value: bool) -> None: ...
    @AllowReordering.setter
    def AllowReordering(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @CloseBackgroundColor.setter
    def CloseBackgroundColor(self, value: Color) -> None: ...
    @CloseCornerRadius.setter
    def CloseCornerRadius(self, value: int) -> None: ...
    @CloseForegroundColor.setter
    def CloseForegroundColor(self, value: Color) -> None: ...
    @CloseHighlightBackgroundColor.setter
    def CloseHighlightBackgroundColor(self, value: Color) -> None: ...
    @CloseHighlightForegroundColor.setter
    def CloseHighlightForegroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: TableLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DisabledForegroundColor.setter
    def DisabledForegroundColor(self, value: Color) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabBackgroundColor.setter
    def TabBackgroundColor(self, value: Color) -> None: ...
    @TabForegroundColor.setter
    def TabForegroundColor(self, value: Color) -> None: ...
    @TabHighlightBackgroundColor.setter
    def TabHighlightBackgroundColor(self, value: Color) -> None: ...
    @TabHighlightForegroundColor.setter
    def TabHighlightForegroundColor(self, value: Color) -> None: ...
    @TabHoverBackgroundColor.setter
    def TabHoverBackgroundColor(self, value: Color) -> None: ...
    @TabHoverForegroundColor.setter
    def TabHoverForegroundColor(self, value: Color) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabPadding.setter
    def TabPadding(self, value: Padding) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @UnsavedBackgroundColor.setter
    def UnsavedBackgroundColor(self, value: Color) -> None: ...
    @UseFixedTabHeight.setter
    def UseFixedTabHeight(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedDocumentPageHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Closable(self) -> bool: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def Control(self) -> Panel: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def HasUnsavedChanges(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> DocumentPage: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Closable.setter
    def Closable(self, value: bool) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Control.setter
    def Control(self, value: Panel) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @HasUnsavedChanges.setter
    def HasUnsavedChanges(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedExpanderHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CollapsedButtonText(self) -> str: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def Control(self) -> StackLayout: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def ExpandedButtonText(self) -> str: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Header(self) -> Control: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> Expander: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @CollapsedButtonText.setter
    def CollapsedButtonText(self, value: str) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Control.setter
    def Control(self, value: StackLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Expanded.setter
    def Expanded(self, value: bool) -> None: ...
    @ExpandedButtonText.setter
    def ExpandedButtonText(self, value: str) -> None: ...
    @Header.setter
    def Header(self, value: Control) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedFilePickerHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def ClearFilters(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> StackLayout: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FileAction(self) -> FileAction: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Title(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> FilePicker: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def InsertFilter(self, index: int, filter: FileFilter) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def RemoveFilter(self, index: int) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: StackLayout) -> None: ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: int) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @FileAction.setter
    def FileAction(self, value: FileAction) -> None: ...
    @FilePath.setter
    def FilePath(self, value: str) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedFontPickerHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Button: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Value(self) -> Font: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> FontPicker: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Button) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Font) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedMenuSegmentedItemHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Control(self) -> ToggleButton: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @property
    def MenuDelay(self) -> TimeSpan: ...
    @property
    def MenuIndicator(self) -> str: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Widget(self) -> MenuSegmentedItem: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @CanSelect.setter
    def CanSelect(self, value: bool) -> None: ...
    @Control.setter
    def Control(self, value: ToggleButton) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Menu.setter
    def Menu(self, value: ContextMenu) -> None: ...
    @MenuDelay.setter
    def MenuDelay(self, value: TimeSpan) -> None: ...
    @MenuIndicator.setter
    def MenuIndicator(self, value: str) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...


from Eto.Forms import Dialog
class ThemedMessageBox(Dialog):
    @overload
    def __init__(self): ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def AddButton(self, text: str, result: object, isDefault: bool, isAbort: bool) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AbortButton(self) -> Button: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoSize(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Children(self) -> Iterable[Control]: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Closeable(self) -> bool: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataContext(self) -> object: ...
    @property
    def DefaultButton(self) -> Button: ...
    @property
    def DisplayMode(self) -> DialogDisplayMode: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Handler(self) -> object: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def Icon(self) -> Icon: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def IsAttached(self) -> bool: ...
    @property
    def IsDataContextChanging(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def IsSuspended(self) -> bool: ...
    @property
    def IsVisualControl(self) -> bool: ...
    @property
    def Loaded(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Location(self) -> Point: ...
    @property
    def LogicalParent(self) -> Container: ...
    @property
    def LogicalPixelSize(self) -> float: ...
    @property
    def Maximizable(self) -> bool: ...
    @property
    def Menu(self) -> MenuBar: ...
    @property
    def Minimizable(self) -> bool: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def NegativeButtons(self) -> Collection: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def Owner(self) -> Window: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Widget: ...
    @property
    def Parent(self) -> Container: ...
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @property
    def ParentWindow(self) -> Window: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def PositiveButtons(self) -> Collection: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Resizable(self) -> bool: ...
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @property
    def Result(self) -> object: ...
    @property
    def Screen(self) -> Screen: ...
    @property
    def ShowInTaskbar(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Tag(self) -> object: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def Title(self) -> str: ...
    @property
    def ToolBar(self) -> ToolBar: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Topmost(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def VisualParent(self) -> Container: ...
    @property
    def Width(self) -> int: ...
    @property
    def WindowState(self) -> WindowState: ...
    @property
    def WindowStyle(self) -> WindowStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def Maximize(self) -> None: ...
    @overload
    def Minimize(self) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SendToBack(self) -> None: ...
    @AbortButton.setter
    def AbortButton(self, value: Button) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AutoSize.setter
    def AutoSize(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Bounds.setter
    def Bounds(self, value: Rectangle) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Closeable.setter
    def Closeable(self, value: bool) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DataContext.setter
    def DataContext(self, value: object) -> None: ...
    @DefaultButton.setter
    def DefaultButton(self, value: Button) -> None: ...
    @DisplayMode.setter
    def DisplayMode(self, value: DialogDisplayMode) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Icon.setter
    def Icon(self, value: Icon) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @IsDataContextChanging.setter
    def IsDataContextChanging(self, value: bool) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @Maximizable.setter
    def Maximizable(self, value: bool) -> None: ...
    @Menu.setter
    def Menu(self, value: MenuBar) -> None: ...
    @Minimizable.setter
    def Minimizable(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self, value: bool) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Owner.setter
    def Owner(self, value: Window) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Resizable.setter
    def Resizable(self, value: bool) -> None: ...
    @Result.setter
    def Result(self, value: object) -> None: ...
    @ShowInTaskbar.setter
    def ShowInTaskbar(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @StyleProvider.setter
    def StyleProvider(self, value: IStyleProvider) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @ToolBar.setter
    def ToolBar(self, value: ToolBar) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Topmost.setter
    def Topmost(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @WindowState.setter
    def WindowState(self, value: WindowState) -> None: ...
    @WindowStyle.setter
    def WindowStyle(self, value: WindowStyle) -> None: ...
    @overload
    def ShowModal(self) -> None: ...
    @overload
    def ShowModal(self, owner: Control) -> None: ...
    @overload
    def ShowModalAsync(self) -> Task: ...
    @overload
    def ShowModalAsync(self, owner: Control) -> Task: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TriggerStyleChanged(self) -> None: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedMessageBoxHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Buttons(self) -> MessageBoxButtons: ...
    @property
    def Caption(self) -> str: ...
    @property
    def DefaultButton(self) -> MessageBoxDefaultButton: ...
    @property
    def ID(self) -> str: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Text(self) -> str: ...
    @property
    def Type(self) -> MessageBoxType: ...
    @property
    def Widget(self) -> Widget: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @Buttons.setter
    def Buttons(self, value: MessageBoxButtons) -> None: ...
    @Caption.setter
    def Caption(self, value: str) -> None: ...
    @DefaultButton.setter
    def DefaultButton(self, value: MessageBoxDefaultButton) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Type.setter
    def Type(self, value: MessageBoxType) -> None: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


from Eto.Forms import Panel
class ThemedPropertyGrid(Panel):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnd(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_PropertyValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ShowCategoriesChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def CreateCellValueBinding(self) -> IndirectBinding: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Children(self) -> Iterable[Control]: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataContext(self) -> object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Handler(self) -> object: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsAttached(self) -> bool: ...
    @property
    def IsDataContextChanging(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def IsSuspended(self) -> bool: ...
    @property
    def IsVisualControl(self) -> bool: ...
    @property
    def Loaded(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def LogicalParent(self) -> Container: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Widget: ...
    @property
    def Parent(self) -> Container: ...
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @property
    def ParentWindow(self) -> Window: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def PropertyCellTypes(self) -> Iterable[PropertyCellType]: ...
    @property
    def SelectedObject(self) -> object: ...
    @property
    def SelectedObjects(self) -> Iterable[object]: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Tag(self) -> object: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def UseValueTypeDefaults(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def VisualParent(self) -> Container: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnd(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_PropertyValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_ShowCategoriesChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DataContext.setter
    def DataContext(self, value: object) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @IsDataContextChanging.setter
    def IsDataContextChanging(self, value: bool) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: object) -> None: ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: Iterable[object]) -> None: ...
    @ShowCategories.setter
    def ShowCategories(self, value: bool) -> None: ...
    @ShowDescription.setter
    def ShowDescription(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @StyleProvider.setter
    def StyleProvider(self, value: IStyleProvider) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: object) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @UseValueTypeDefaults.setter
    def UseValueTypeDefaults(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TriggerStyleChanged(self) -> None: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedPropertyGridHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> ThemedPropertyGrid: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def SelectedObject(self) -> object: ...
    @property
    def SelectedObjects(self) -> Iterable[object]: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> PropertyGrid: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: ThemedPropertyGrid) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: object) -> None: ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: Iterable[object]) -> None: ...
    @ShowCategories.setter
    def ShowCategories(self, value: bool) -> None: ...
    @ShowDescription.setter
    def ShowDescription(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedSegmentedButtonHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def ClearItems(self) -> None: ...
    @overload
    def ClearSelection(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Panel: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexes(self) -> Iterable[int]: ...
    @property
    def SelectionMode(self) -> SegmentedSelectionMode: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Spacing(self) -> int: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> SegmentedButton: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def InsertItem(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def RemoveItem(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Panel) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedIndexes.setter
    def SelectedIndexes(self, value: Iterable[int]) -> None: ...
    @SelectionMode.setter
    def SelectionMode(self, value: SegmentedSelectionMode) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Spacing.setter
    def Spacing(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetItem(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...




class ThemedSpinnerDirection(Enum):
    Clockwise = 1
    CounterClockwise = -1


class ThemedSpinnerHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Drawable: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Direction(self) -> ThemedSpinnerDirection: ...
    @property
    def DisabledAlpha(self) -> float: ...
    @property
    def ElementColor(self) -> Color: ...
    @property
    def ElementSize(self) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Increment(self) -> float: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def LineCap(self) -> PenLineCap: ...
    @property
    def LineThickness(self) -> float: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Mode(self) -> ThemedSpinnerMode: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def NumberOfElements(self) -> int: ...
    @property
    def NumberOfVisibleElements(self) -> int: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Speed(self) -> float: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> Spinner: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Drawable) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Direction.setter
    def Direction(self, value: ThemedSpinnerDirection) -> None: ...
    @DisabledAlpha.setter
    def DisabledAlpha(self, value: float) -> None: ...
    @ElementColor.setter
    def ElementColor(self, value: Color) -> None: ...
    @ElementSize.setter
    def ElementSize(self, value: float) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Increment.setter
    def Increment(self, value: float) -> None: ...
    @LineCap.setter
    def LineCap(self, value: PenLineCap) -> None: ...
    @LineThickness.setter
    def LineThickness(self, value: float) -> None: ...
    @Mode.setter
    def Mode(self, value: ThemedSpinnerMode) -> None: ...
    @NumberOfElements.setter
    def NumberOfElements(self, value: int) -> None: ...
    @NumberOfVisibleElements.setter
    def NumberOfVisibleElements(self, value: int) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Speed.setter
    def Speed(self, value: float) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedSpinnerMode(Enum):
    Line = 0
    Circle = 1


class ThemedSplitterHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Control(self) -> TableLayout: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FixedPanel(self) -> SplitterFixedPanel: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Panel1(self) -> Control: ...
    @property
    def Panel1MinimumSize(self) -> int: ...
    @property
    def Panel2(self) -> Control: ...
    @property
    def Panel2MinimumSize(self) -> int: ...
    @property
    def Position(self) -> int: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @property
    def RelativePosition(self) -> float: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Splitter(self) -> Panel: ...
    @property
    def SplitterWidth(self) -> int: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> Splitter: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Control.setter
    def Control(self, value: TableLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @FixedPanel.setter
    def FixedPanel(self, value: SplitterFixedPanel) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Panel1.setter
    def Panel1(self, value: Control) -> None: ...
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self, value: int) -> None: ...
    @Panel2.setter
    def Panel2(self, value: Control) -> None: ...
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self, value: int) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    @RelativePosition.setter
    def RelativePosition(self, value: float) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedStepperHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Panel: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DownText(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def UpText(self) -> str: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> Stepper: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Panel) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DownText.setter
    def DownText(self, value: str) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @UpText.setter
    def UpText(self, value: str) -> None: ...
    @ValidDirection.setter
    def ValidDirection(self, value: StepperValidDirections) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...


class ThemedTextStepperHandler:
    @overload
    def __init__(self): ...
    @overload
    def AttachEvent(self, id: str) -> None: ...
    @overload
    def CaptureMouse(self) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def Control(self) -> TableLayout: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsMouseCaptured(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def ShowStepper(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Stepper(self) -> Stepper: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextBox(self) -> TextBox: ...
    @property
    def TextColor(self) -> Color: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> TextStepper: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def IsEventHandled(self, id: str) -> bool: ...
    @overload
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def ReleaseMouseCapture(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: AutoSelectMode) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @CaretIndex.setter
    def CaretIndex(self, value: int) -> None: ...
    @Control.setter
    def Control(self, value: TableLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: str) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Selection.setter
    def Selection(self, value: Range) -> None: ...
    @ShowBorder.setter
    def ShowBorder(self, value: bool) -> None: ...
    @ShowStepper.setter
    def ShowStepper(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @ValidDirection.setter
    def ValidDirection(self, value: StepperValidDirections) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateLayout(self) -> None: ...
