from typing import overload, Any, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

from . import Drawing
from . import Forms
from . import IO
from . import Threading

__all__ = ['Drawing', 'Forms', 'IO', 'Threading']


class AttachableMemberIdentifier:
    @overload
    def __init__(self, declaringType: type, memberName: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: AttachableMemberIdentifier) -> bool: ...
    @property
    def DeclaringType(self) -> type: ...
    @property
    def MemberName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __eq__(left: AttachableMemberIdentifier, right: AttachableMemberIdentifier) -> bool: ...
    @overload
    def __ne__(left: AttachableMemberIdentifier, right: AttachableMemberIdentifier) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class AutoInitializeAttribute:
    @overload
    def __init__(self, initialize: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Initialize(self) -> bool: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...




class ContentPropertyAttribute:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...




from System import Action
class DefaultStyleProvider:
    @overload
    def __init__(self): ...
    @overload
    def Add(self, style: str, handler: Action) -> None: ...
    @overload
    def add_StyleWidget(self, value: Action) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Inherit(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def remove_StyleWidget(self, value: Action) -> None: ...
    @Inherit.setter
    def Inherit(self, value: bool) -> None: ...
    @overload
    def ToString(self) -> str: ...






class EtoEnvironment:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def Is64BitProcess(cls) -> bool: ...
    @property
    @classmethod
    def Platform(cls) -> OperatingSystemPlatform: ...
    @overload
    @staticmethod
    def GetFolderPath(folder: EtoSpecialFolder) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class EtoMemberIdentifier(AttachableMemberIdentifier):
    @overload
    def __init__(self, declaringType: type, memberName: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: AttachableMemberIdentifier) -> bool: ...
    @property
    def DeclaringType(self) -> type: ...
    @property
    def MemberName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class EtoSpecialFolder(Enum):
    ApplicationSettings = 0
    ApplicationResources = 1
    Documents = 2
    EntryExecutable = 3
    Downloads = 4


class ExportHandlerAttribute(PlatformExtensionAttribute):
    @overload
    def __init__(self, widgetType: type, handlerType: type): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def HandlerType(self) -> type: ...
    @property
    def PlatformID(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @property
    def WidgetType(self) -> type: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def Register(self, platform: Platform) -> None: ...
    @PlatformID.setter
    def PlatformID(self, value: str) -> None: ...
    @overload
    def Supports(self, platform: Platform) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class ExportInitializerAttribute(PlatformExtensionAttribute):
    @overload
    def __init__(self, initializerType: type): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def InitializerType(self) -> type: ...
    @property
    def PlatformID(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def Register(self, platform: Platform) -> None: ...
    @PlatformID.setter
    def PlatformID(self, value: str) -> None: ...
    @overload
    def Supports(self, platform: Platform) -> bool: ...
    @overload
    def ToString(self) -> str: ...




class FileAction(Enum):
    OpenFile = 0
    SaveFile = 1
    SelectFolder = 2


class HandlerAttribute:
    @overload
    def __init__(self, type: type): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Type(self) -> type: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class HandlerCreatedEventArgs:
    @overload
    def __init__(self, instance: object): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Instance(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ICallback:
    pass


class ICallbackSource:
    @property
    def Callback(self) -> object: ...


class IControlObjectSource:
    @property
    def ControlObject(self) -> object: ...


from System import IntPtr
class IHandler:
    @property
    def ID(self) -> str: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Widget(self) -> Widget: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Initialize(self) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Widget.setter
    def Widget(self, value: Widget) -> None: ...


class IHandler:
    @overload
    def GetFolderPath(self, folder: EtoSpecialFolder) -> str: ...


class IHandlerSource:
    @property
    def Handler(self) -> object: ...


class IPlatformInitializer:
    @overload
    def Initialize(self, platform: Platform) -> None: ...


class IStyleProvider:
    @overload
    def ApplyCascadingStyle(self, container: object, widget: object, style: str) -> None: ...
    @overload
    def ApplyDefault(self, widget: object) -> None: ...
    @overload
    def ApplyStyle(self, widget: object, style: str) -> None: ...
    @property
    def Inherit(self) -> bool: ...


from System.Reflection import Assembly
from System.IO import Stream
class NamespaceInfo:
    @overload
    def __init__(self, ns: str): ...
    @overload
    def __init__(self, ns: str, assembly: Assembly): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindResource(self) -> Stream: ...
    @overload
    def FindResource(self, resourceName: str) -> Stream: ...
    @overload
    def FindType(self, typeName: str) -> type: ...
    @property
    def Assembly(self) -> Assembly: ...
    @property
    def Namespace(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Assembly.setter
    def Assembly(self, value: Assembly) -> None: ...
    @overload
    def ToString(self) -> str: ...


class OperatingSystemPlatform:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def IsLinux(self) -> bool: ...
    @property
    def IsMac(self) -> bool: ...
    @property
    def IsMono(self) -> bool: ...
    @property
    def IsNetCore(self) -> bool: ...
    @property
    def IsNetFramework(self) -> bool: ...
    @property
    def IsUnix(self) -> bool: ...
    @property
    def IsWindows(self) -> bool: ...
    @property
    def IsWinRT(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import EventHandler
from System.Reflection import Assembly
from System import Func
from System.Collections.Generic import Dictionary
from System import IDisposable
from System import Action
class Platform:
    @overload
    def add_HandlerCreated(self, value: EventHandler) -> None: ...
    @overload
    def Add(self, instantiator: Func) -> None: ...
    @overload
    def Add(self, type: type, instantiator: Func) -> None: ...
    @overload
    def add_WidgetCreated(self, value: EventHandler) -> None: ...
    @overload
    def Cache(self, cacheKey: object) -> Dictionary: ...
    @overload
    def Create(self) -> T: ...
    @overload
    def Create(self, type: type) -> object: ...
    @overload
    def CreateShared(self) -> T: ...
    @overload
    def CreateShared(self, type: type) -> object: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Find(self) -> Func: ...
    @overload
    def Find(self, type: type) -> Func: ...
    @property
    @classmethod
    def AllowReinitialize(cls) -> bool: ...
    @property
    def Context(self) -> IDisposable: ...
    @property
    @classmethod
    def Detect(cls) -> Platform: ...
    @property
    def ID(self) -> str: ...
    @property
    @classmethod
    def Instance(cls) -> Platform: ...
    @property
    def IsAndroid(self) -> bool: ...
    @property
    def IsDesktop(self) -> bool: ...
    @property
    def IsGtk(self) -> bool: ...
    @property
    def IsIos(self) -> bool: ...
    @property
    def IsMac(self) -> bool: ...
    @property
    def IsMobile(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsWinForms(self) -> bool: ...
    @property
    def IsWpf(self) -> bool: ...
    @overload
    @staticmethod
    def Get(generatorType: str) -> Platform: ...
    @property
    def SupportedFeatures(self) -> PlatformFeatures: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Initialize(platformType: str) -> None: ...
    @overload
    @staticmethod
    def Initialize(platform: Platform) -> None: ...
    @overload
    def Invoke(self, action: Action) -> None: ...
    @overload
    def Invoke(self, action: Func) -> T: ...
    @overload
    def LoadAssembly(self, assembly: Assembly) -> None: ...
    @overload
    def LoadAssembly(self, assemblyName: str) -> None: ...
    @overload
    def remove_HandlerCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_WidgetCreated(self, value: EventHandler) -> None: ...
    @AllowReinitialize.setter
    @classmethod
    def AllowReinitialize(clsvalue: bool) -> None: ...
    @overload
    def Supports(self) -> bool: ...
    @overload
    def Supports(self, type: type) -> bool: ...
    @overload
    def ThreadStart(self) -> IDisposable: ...
    @overload
    def ToString(self) -> str: ...


class PlatformExtensionAttribute:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def PlatformID(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def Register(self, platform: Platform) -> None: ...
    @PlatformID.setter
    def PlatformID(self, value: str) -> None: ...
    @overload
    def Supports(self, platform: Platform) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PlatformFeatures(Enum):
    # None = 0
    CustomCellSupportsControlView = 1
    DrawableWithTransparentContent = 2
    TabIndexWithCustomContainers = 4


class Platforms:
    Direct2D: str
    Ios: str
    Gtk: str
    Mac64: str
    macOS: str
    WinForms: str
    Wpf: str
    Android: str
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Func
from System import Delegate
from System.ComponentModel import PropertyChangedEventHandler
from System import Action
from System.Windows.Input import ICommand
from System.Collections.Generic import IEqualityComparer
from System.Collections.Generic import KeyCollection
from System.Collections.Generic import ValueCollection
from System.Collections.Generic import Enumerator
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
class PropertyStore:
    @overload
    def __init__(self, parent: object): ...
    def __iter__(self) -> Iterator[KeyValuePair]: ...
    @overload
    def Add(self, key: object, value: object) -> None: ...
    @overload
    def AddEvent(self, key: object, value: Delegate) -> None: ...
    @overload
    def AddHandlerEvent(self, key: str, value: Delegate) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ContainsKey(self, key: object) -> bool: ...
    @overload
    def ContainsValue(self, value: object) -> bool: ...
    @overload
    def Create(self, key: object) -> T: ...
    @overload
    def Create(self, key: object, create: Func) -> T: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Comparer(self) -> IEqualityComparer: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self, key: object) -> object: ...
    @property
    def Keys(self) -> KeyCollection: ...
    @property
    def Parent(self) -> object: ...
    @overload
    def Get(self, key: object, defaultValue: T) -> T: ...
    @overload
    def Get(self, key: object, defaultValue: Func) -> T: ...
    @property
    def Values(self) -> ValueCollection: ...
    @overload
    def GetCommand(self, key: object) -> ICommand: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def OnDeserialization(self, sender: object) -> None: ...
    @overload
    def Remove(self, key: object) -> bool: ...
    @overload
    def RemoveEvent(self, key: object, value: Delegate) -> None: ...
    @Item.setter
    def Item(self, key: object, value: object) -> None: ...
    @overload
    def Set(self, key: object, value: T, defaultValue: T) -> None: ...
    @overload
    def Set(self, key: object, value: T, propertyChanged: Action, defaultValue: T) -> bool: ...
    @overload
    def Set(self, key: object, value: T, propertyChanged: PropertyChangedEventHandler, defaultValue: T, propertyName: str) -> bool: ...
    @overload
    def SetCommand(self, key: object, value: ICommand, setEnabled: Action, addExecute: Action, removeExecute: Action, getParameter: Func) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TriggerEvent(self, key: object, sender: object, args: T) -> None: ...
    @overload
    def TryGetValue(self, key: object) -> tuple[bool, object]: ...
    @overload
    def TrySet(self, key: object, value: T, defaultValue: T) -> bool: ...
    @overload
    def UpdateCommandCanExecute(self, key: object) -> None: ...


class RuntimeNamePropertyAttribute:
    @overload
    def __init__(self, name: str): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def TypeId(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


from System import Action
class Style:
    @overload
    @staticmethod
    def Add(style: str, handler: StyleWidgetHandler) -> None: ...
    @overload
    @staticmethod
    def Add(style: str, styleHandler: StyleHandler) -> None: ...
    @overload
    @staticmethod
    def add_StyleWidget(value: Action) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    @classmethod
    def Provider(cls) -> IStyleProvider: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def remove_StyleWidget(value: Action) -> None: ...
    @Provider.setter
    @classmethod
    def Provider(clsvalue: IStyleProvider) -> None: ...
    @overload
    def ToString(self) -> str: ...






class UnhandledExceptionEventArgs:
    @overload
    def __init__(self, exception: object, isTerminating: bool): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ExceptionObject(self) -> object: ...
    @property
    def IsTerminating(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import EventHandler
class Widget:
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class WidgetCreatedEventArgs:
    @overload
    def __init__(self, instance: Widget): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Instance(self) -> Widget: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...






