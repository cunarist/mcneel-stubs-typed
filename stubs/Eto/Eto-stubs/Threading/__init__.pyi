from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum
from System import *
from System.Drawing import *



class ICallback:
    @overload
    def OnExecuted(self, widget: Thread) -> None: ...


class IHandler:
    @overload
    def Abort(self) -> None: ...
    @overload
    def Create(self) -> None: ...
    @overload
    def CreateCurrent(self) -> None: ...
    @overload
    def CreateMain(self) -> None: ...
    @property
    def IsAlive(self) -> bool: ...
    @property
    def IsMain(self) -> bool: ...
    @overload
    def Start(self) -> None: ...


class Thread(Widget):
    @overload
    def __init__(self, action: Action): ...
    @overload
    def Abort(self) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def CurrentThread() -> Thread: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsAlive(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsMain(self) -> bool: ...
    @property
    def IsMainThread() -> bool: ...
    @property
    def MainThread() -> Thread: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def Start(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
