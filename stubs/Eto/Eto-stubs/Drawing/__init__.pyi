from typing import overload, Any, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



from System.IO import Stream
from System import Nullable
from System.Collections.Generic import IEnumerable
from System.Reflection import Assembly
from System import IntPtr
from System import EventHandler
class Bitmap(Image):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, bytes: Iterable[int]): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, size: Size, pixelFormat: PixelFormat): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat): ...
    @overload
    def __init__(self, width: int, height: int, graphics: Graphics): ...
    @overload
    def __init__(self, image: Image, width: Nullable, height: Nullable, interpolation: ImageInterpolation): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat, data: Iterable[Color]): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat, data: Iterable[int]): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Clone(self, rectangle: Nullable) -> Bitmap: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, assembly: Assembly) -> Bitmap: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, type: type) -> Bitmap: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPixel(self, position: Point) -> Color: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Lock(self) -> BitmapData: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Save(self, stream: Stream, format: ImageFormat) -> None: ...
    @overload
    def Save(self, fileName: str, format: ImageFormat) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def SetPixel(self, position: Point, color: Color) -> None: ...
    @overload
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    @overload
    def ToByteArray(self, imageFormat: ImageFormat) -> Iterable[int]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WithSize(self, fittingSize: Size) -> Icon: ...
    @overload
    def WithSize(self, width: int, height: int) -> Icon: ...


from System import IntPtr
from System.Collections.Generic import IEnumerable
class BitmapData:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def BytesPerPixel(self) -> int: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Data(self) -> IntPtr: ...
    @property
    def Flipped(self) -> bool: ...
    @property
    def Image(self) -> Image: ...
    @property
    def PremultipliedAlpha(self) -> bool: ...
    @property
    def ScanWidth(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPixel(self, position: Point) -> Color: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def GetPixels(self) -> Iterable[Color]: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def SetPixel(self, position: Point, color: Color) -> None: ...
    @overload
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    @overload
    def SetPixels(self, pixels: Iterable[Color]) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TranslateArgbToData(self, argb: int) -> int: ...
    @overload
    def TranslateDataToArgb(self, bitmapData: int) -> int: ...


class Brush:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @ControlObject.setter
    def ControlObject(self, value: object) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Brushes:
    @overload
    @staticmethod
    def Cached(color: Color) -> SolidBrush: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AliceBlue() -> SolidBrush: ...
    @property
    def AntiqueWhite() -> SolidBrush: ...
    @property
    def Aqua() -> SolidBrush: ...
    @property
    def Aquamarine() -> SolidBrush: ...
    @property
    def Azure() -> SolidBrush: ...
    @property
    def Beige() -> SolidBrush: ...
    @property
    def Bisque() -> SolidBrush: ...
    @property
    def Black() -> SolidBrush: ...
    @property
    def BlanchedAlmond() -> SolidBrush: ...
    @property
    def Blue() -> SolidBrush: ...
    @property
    def BlueViolet() -> SolidBrush: ...
    @property
    def Brown() -> SolidBrush: ...
    @property
    def BurlyWood() -> SolidBrush: ...
    @property
    def CadetBlue() -> SolidBrush: ...
    @property
    def Chartreuse() -> SolidBrush: ...
    @property
    def Chocolate() -> SolidBrush: ...
    @property
    def Coral() -> SolidBrush: ...
    @property
    def CornflowerBlue() -> SolidBrush: ...
    @property
    def Cornsilk() -> SolidBrush: ...
    @property
    def Crimson() -> SolidBrush: ...
    @property
    def Cyan() -> SolidBrush: ...
    @property
    def DarkBlue() -> SolidBrush: ...
    @property
    def DarkCyan() -> SolidBrush: ...
    @property
    def DarkGoldenrod() -> SolidBrush: ...
    @property
    def DarkGray() -> SolidBrush: ...
    @property
    def DarkGreen() -> SolidBrush: ...
    @property
    def DarkKhaki() -> SolidBrush: ...
    @property
    def DarkMagenta() -> SolidBrush: ...
    @property
    def DarkOliveGreen() -> SolidBrush: ...
    @property
    def DarkOrange() -> SolidBrush: ...
    @property
    def DarkOrchid() -> SolidBrush: ...
    @property
    def DarkRed() -> SolidBrush: ...
    @property
    def DarkSalmon() -> SolidBrush: ...
    @property
    def DarkSeaGreen() -> SolidBrush: ...
    @property
    def DarkSlateBlue() -> SolidBrush: ...
    @property
    def DarkSlateGray() -> SolidBrush: ...
    @property
    def DarkTurquoise() -> SolidBrush: ...
    @property
    def DarkViolet() -> SolidBrush: ...
    @property
    def DeepPink() -> SolidBrush: ...
    @property
    def DeepSkyBlue() -> SolidBrush: ...
    @property
    def DimGray() -> SolidBrush: ...
    @property
    def DodgerBlue() -> SolidBrush: ...
    @property
    def Firebrick() -> SolidBrush: ...
    @property
    def FloralWhite() -> SolidBrush: ...
    @property
    def ForestGreen() -> SolidBrush: ...
    @property
    def Fuchsia() -> SolidBrush: ...
    @property
    def Gainsboro() -> SolidBrush: ...
    @property
    def GhostWhite() -> SolidBrush: ...
    @property
    def Gold() -> SolidBrush: ...
    @property
    def Goldenrod() -> SolidBrush: ...
    @property
    def Gray() -> SolidBrush: ...
    @property
    def Green() -> SolidBrush: ...
    @property
    def GreenYellow() -> SolidBrush: ...
    @property
    def Honeydew() -> SolidBrush: ...
    @property
    def HotPink() -> SolidBrush: ...
    @property
    def IndianRed() -> SolidBrush: ...
    @property
    def Indigo() -> SolidBrush: ...
    @property
    def Ivory() -> SolidBrush: ...
    @property
    def Khaki() -> SolidBrush: ...
    @property
    def Lavender() -> SolidBrush: ...
    @property
    def LavenderBlush() -> SolidBrush: ...
    @property
    def LawnGreen() -> SolidBrush: ...
    @property
    def LemonChiffon() -> SolidBrush: ...
    @property
    def LightBlue() -> SolidBrush: ...
    @property
    def LightCoral() -> SolidBrush: ...
    @property
    def LightCyan() -> SolidBrush: ...
    @property
    def LightGoldenrodYellow() -> SolidBrush: ...
    @property
    def LightGreen() -> SolidBrush: ...
    @property
    def LightGrey() -> SolidBrush: ...
    @property
    def LightPink() -> SolidBrush: ...
    @property
    def LightSalmon() -> SolidBrush: ...
    @property
    def LightSeaGreen() -> SolidBrush: ...
    @property
    def LightSkyBlue() -> SolidBrush: ...
    @property
    def LightSlateGray() -> SolidBrush: ...
    @property
    def LightSteelBlue() -> SolidBrush: ...
    @property
    def LightYellow() -> SolidBrush: ...
    @property
    def Lime() -> SolidBrush: ...
    @property
    def LimeGreen() -> SolidBrush: ...
    @property
    def Linen() -> SolidBrush: ...
    @property
    def Magenta() -> SolidBrush: ...
    @property
    def Maroon() -> SolidBrush: ...
    @property
    def MediumAquamarine() -> SolidBrush: ...
    @property
    def MediumBlue() -> SolidBrush: ...
    @property
    def MediumOrchid() -> SolidBrush: ...
    @property
    def MediumPurple() -> SolidBrush: ...
    @property
    def MediumSeaGreen() -> SolidBrush: ...
    @property
    def MediumSlateBlue() -> SolidBrush: ...
    @property
    def MediumSpringGreen() -> SolidBrush: ...
    @property
    def MediumTurquoise() -> SolidBrush: ...
    @property
    def MediumVioletRed() -> SolidBrush: ...
    @property
    def MidnightBlue() -> SolidBrush: ...
    @property
    def MintCream() -> SolidBrush: ...
    @property
    def MistyRose() -> SolidBrush: ...
    @property
    def Moccasin() -> SolidBrush: ...
    @property
    def NavajoWhite() -> SolidBrush: ...
    @property
    def Navy() -> SolidBrush: ...
    @property
    def OldLace() -> SolidBrush: ...
    @property
    def Olive() -> SolidBrush: ...
    @property
    def OliveDrab() -> SolidBrush: ...
    @property
    def Orange() -> SolidBrush: ...
    @property
    def OrangeRed() -> SolidBrush: ...
    @property
    def Orchid() -> SolidBrush: ...
    @property
    def PaleGoldenrod() -> SolidBrush: ...
    @property
    def PaleGreen() -> SolidBrush: ...
    @property
    def PaleTurquoise() -> SolidBrush: ...
    @property
    def PaleVioletRed() -> SolidBrush: ...
    @property
    def PapayaWhip() -> SolidBrush: ...
    @property
    def PeachPuff() -> SolidBrush: ...
    @property
    def Peru() -> SolidBrush: ...
    @property
    def Pink() -> SolidBrush: ...
    @property
    def Plum() -> SolidBrush: ...
    @property
    def PowderBlue() -> SolidBrush: ...
    @property
    def Purple() -> SolidBrush: ...
    @property
    def Red() -> SolidBrush: ...
    @property
    def RosyBrown() -> SolidBrush: ...
    @property
    def RoyalBlue() -> SolidBrush: ...
    @property
    def SaddleBrown() -> SolidBrush: ...
    @property
    def Salmon() -> SolidBrush: ...
    @property
    def SandyBrown() -> SolidBrush: ...
    @property
    def SeaGreen() -> SolidBrush: ...
    @property
    def Seashell() -> SolidBrush: ...
    @property
    def Sienna() -> SolidBrush: ...
    @property
    def Silver() -> SolidBrush: ...
    @property
    def SkyBlue() -> SolidBrush: ...
    @property
    def SlateBlue() -> SolidBrush: ...
    @property
    def SlateGray() -> SolidBrush: ...
    @property
    def Snow() -> SolidBrush: ...
    @property
    def SpringGreen() -> SolidBrush: ...
    @property
    def SteelBlue() -> SolidBrush: ...
    @property
    def Tan() -> SolidBrush: ...
    @property
    def Teal() -> SolidBrush: ...
    @property
    def Thistle() -> SolidBrush: ...
    @property
    def Tomato() -> SolidBrush: ...
    @property
    def Transparent() -> SolidBrush: ...
    @property
    def Turquoise() -> SolidBrush: ...
    @property
    def Violet() -> SolidBrush: ...
    @property
    def Wheat() -> SolidBrush: ...
    @property
    def White() -> SolidBrush: ...
    @property
    def WhiteSmoke() -> SolidBrush: ...
    @property
    def Yellow() -> SolidBrush: ...
    @property
    def YellowGreen() -> SolidBrush: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System import Nullable
class Color:
    @overload
    def __init__(self, color: Color, alpha: Nullable): ...
    @overload
    def __init__(self, red: float, green: float, blue: float, alpha: float): ...
    @overload
    def __init__(self, controlObject: object, red: float, green: float, blue: float, alpha: float): ...
    @overload
    @staticmethod
    def Blend(baseColor: Color, blendColor: Color) -> Color: ...
    @overload
    @staticmethod
    def Blend(baseColor: Color, blendColor: Color, blendFactor: float) -> Color: ...
    @overload
    @staticmethod
    def Distance(value1: Color, value2: Color) -> float: ...
    @overload
    def Equals(self, other: Color) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromArgb(argb: int) -> Color: ...
    @overload
    @staticmethod
    def FromArgb(red: int, green: int, blue: int, alpha: int) -> Color: ...
    @overload
    @staticmethod
    def FromElementId(id: int, alpha: int) -> Color: ...
    @overload
    @staticmethod
    def FromGrayscale(val: float, alpha: float) -> Color: ...
    @overload
    @staticmethod
    def FromPremultipliedArgb(argb: int) -> Color: ...
    @overload
    @staticmethod
    def FromPremultipliedArgb(red: int, green: int, blue: int, alpha: int) -> Color: ...
    @overload
    @staticmethod
    def FromRgb(argb: int) -> Color: ...
    @property
    def A(self) -> float: ...
    @property
    def Ab(self) -> int: ...
    @property
    def B(self) -> float: ...
    @property
    def Bb(self) -> int: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def G(self) -> float: ...
    @property
    def Gb(self) -> int: ...
    @property
    def R(self) -> float: ...
    @property
    def Rb(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Invert(self) -> None: ...
    @overload
    def __eq__(color1: Color, color2: Color) -> bool: ...
    @overload
    def __ne__(color1: Color, color2: Color) -> bool: ...
    @overload
    @staticmethod
    def Parse(value: str) -> Color: ...
    @A.setter
    def A(self, value: float) -> None: ...
    @Ab.setter
    def Ab(self, value: int) -> None: ...
    @B.setter
    def B(self, value: float) -> None: ...
    @Bb.setter
    def Bb(self, value: int) -> None: ...
    @G.setter
    def G(self, value: float) -> None: ...
    @Gb.setter
    def Gb(self, value: int) -> None: ...
    @R.setter
    def R(self, value: float) -> None: ...
    @Rb.setter
    def Rb(self, value: int) -> None: ...
    @overload
    def ToArgb(self) -> int: ...
    @overload
    def ToArgb(self, style: ColorStyles) -> int: ...
    @overload
    def ToCMYK(self) -> ColorCMYK: ...
    @overload
    def ToElementId(self) -> int: ...
    @overload
    def ToHex(self, includeAlpha: bool) -> str: ...
    @overload
    def ToHex(self, style: ColorStyles) -> str: ...
    @overload
    def ToHSB(self) -> ColorHSB: ...
    @overload
    def ToHSL(self) -> ColorHSL: ...
    @overload
    def ToPremultipliedArgb(self) -> int: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TryParse(value: str) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def TryParse(value: str, style: ColorStyles) -> Tuple[bool, Color]: ...


class ColorCMYK:
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, cyan: float, magenta: float, yellow: float, black: float, alpha: float): ...
    @overload
    @staticmethod
    def Distance(value1: ColorCMYK, value2: ColorCMYK) -> float: ...
    @overload
    def Equals(self, other: ColorCMYK) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def A(self) -> float: ...
    @property
    def C(self) -> float: ...
    @property
    def K(self) -> float: ...
    @property
    def M(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __eq__(color1: ColorCMYK, color2: ColorCMYK) -> bool: ...
    @overload
    def op_Implicit(cmyk: ColorCMYK) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorCMYK: ...
    @overload
    def __ne__(color1: ColorCMYK, color2: ColorCMYK) -> bool: ...
    @A.setter
    def A(self, value: float) -> None: ...
    @C.setter
    def C(self, value: float) -> None: ...
    @K.setter
    def K(self, value: float) -> None: ...
    @M.setter
    def M(self, value: float) -> None: ...
    @Y.setter
    def Y(self, value: float) -> None: ...
    @overload
    def ToColor(self) -> Color: ...
    @overload
    def ToString(self) -> str: ...


class ColorHSB:
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, brightness: float, alpha: float): ...
    @overload
    @staticmethod
    def Distance(value1: ColorHSB, value2: ColorHSB) -> float: ...
    @overload
    def Equals(self, other: ColorHSB) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def A(self) -> float: ...
    @property
    def B(self) -> float: ...
    @property
    def H(self) -> float: ...
    @property
    def S(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __eq__(color1: ColorHSB, color2: ColorHSB) -> bool: ...
    @overload
    def op_Implicit(hsb: ColorHSB) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorHSB: ...
    @overload
    def __ne__(color1: ColorHSB, color2: ColorHSB) -> bool: ...
    @A.setter
    def A(self, value: float) -> None: ...
    @B.setter
    def B(self, value: float) -> None: ...
    @H.setter
    def H(self, value: float) -> None: ...
    @S.setter
    def S(self, value: float) -> None: ...
    @overload
    def ToColor(self) -> Color: ...
    @overload
    def ToString(self) -> str: ...


class ColorHSL:
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, luminance: float, alpha: float): ...
    @overload
    @staticmethod
    def Distance(value1: ColorHSL, value2: ColorHSL) -> float: ...
    @overload
    def Equals(self, other: ColorHSL) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def A(self) -> float: ...
    @property
    def H(self) -> float: ...
    @property
    def L(self) -> float: ...
    @property
    def S(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __eq__(color1: ColorHSL, color2: ColorHSL) -> bool: ...
    @overload
    def op_Implicit(hsl: ColorHSL) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorHSL: ...
    @overload
    def __ne__(color1: ColorHSL, color2: ColorHSL) -> bool: ...
    @A.setter
    def A(self, value: float) -> None: ...
    @H.setter
    def H(self, value: float) -> None: ...
    @L.setter
    def L(self, value: float) -> None: ...
    @S.setter
    def S(self, value: float) -> None: ...
    @overload
    def ToColor(self) -> Color: ...
    @overload
    def ToString(self) -> str: ...


class Colors:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AliceBlue() -> Color: ...
    @property
    def AntiqueWhite() -> Color: ...
    @property
    def Aqua() -> Color: ...
    @property
    def Aquamarine() -> Color: ...
    @property
    def Azure() -> Color: ...
    @property
    def Beige() -> Color: ...
    @property
    def Bisque() -> Color: ...
    @property
    def Black() -> Color: ...
    @property
    def BlanchedAlmond() -> Color: ...
    @property
    def Blue() -> Color: ...
    @property
    def BlueViolet() -> Color: ...
    @property
    def Brown() -> Color: ...
    @property
    def BurlyWood() -> Color: ...
    @property
    def CadetBlue() -> Color: ...
    @property
    def Chartreuse() -> Color: ...
    @property
    def Chocolate() -> Color: ...
    @property
    def Coral() -> Color: ...
    @property
    def CornflowerBlue() -> Color: ...
    @property
    def Cornsilk() -> Color: ...
    @property
    def Crimson() -> Color: ...
    @property
    def Cyan() -> Color: ...
    @property
    def DarkBlue() -> Color: ...
    @property
    def DarkCyan() -> Color: ...
    @property
    def DarkGoldenrod() -> Color: ...
    @property
    def DarkGray() -> Color: ...
    @property
    def DarkGreen() -> Color: ...
    @property
    def DarkKhaki() -> Color: ...
    @property
    def DarkMagenta() -> Color: ...
    @property
    def DarkOliveGreen() -> Color: ...
    @property
    def DarkOrange() -> Color: ...
    @property
    def DarkOrchid() -> Color: ...
    @property
    def DarkRed() -> Color: ...
    @property
    def DarkSalmon() -> Color: ...
    @property
    def DarkSeaGreen() -> Color: ...
    @property
    def DarkSlateBlue() -> Color: ...
    @property
    def DarkSlateGray() -> Color: ...
    @property
    def DarkTurquoise() -> Color: ...
    @property
    def DarkViolet() -> Color: ...
    @property
    def DeepPink() -> Color: ...
    @property
    def DeepSkyBlue() -> Color: ...
    @property
    def DimGray() -> Color: ...
    @property
    def DodgerBlue() -> Color: ...
    @property
    def Firebrick() -> Color: ...
    @property
    def FloralWhite() -> Color: ...
    @property
    def ForestGreen() -> Color: ...
    @property
    def Fuchsia() -> Color: ...
    @property
    def Gainsboro() -> Color: ...
    @property
    def GhostWhite() -> Color: ...
    @property
    def Gold() -> Color: ...
    @property
    def Goldenrod() -> Color: ...
    @property
    def Gray() -> Color: ...
    @property
    def Green() -> Color: ...
    @property
    def GreenYellow() -> Color: ...
    @property
    def Honeydew() -> Color: ...
    @property
    def HotPink() -> Color: ...
    @property
    def IndianRed() -> Color: ...
    @property
    def Indigo() -> Color: ...
    @property
    def Ivory() -> Color: ...
    @property
    def Khaki() -> Color: ...
    @property
    def Lavender() -> Color: ...
    @property
    def LavenderBlush() -> Color: ...
    @property
    def LawnGreen() -> Color: ...
    @property
    def LemonChiffon() -> Color: ...
    @property
    def LightBlue() -> Color: ...
    @property
    def LightCoral() -> Color: ...
    @property
    def LightCyan() -> Color: ...
    @property
    def LightGoldenrodYellow() -> Color: ...
    @property
    def LightGreen() -> Color: ...
    @property
    def LightGrey() -> Color: ...
    @property
    def LightPink() -> Color: ...
    @property
    def LightSalmon() -> Color: ...
    @property
    def LightSeaGreen() -> Color: ...
    @property
    def LightSkyBlue() -> Color: ...
    @property
    def LightSlateGray() -> Color: ...
    @property
    def LightSteelBlue() -> Color: ...
    @property
    def LightYellow() -> Color: ...
    @property
    def Lime() -> Color: ...
    @property
    def LimeGreen() -> Color: ...
    @property
    def Linen() -> Color: ...
    @property
    def Magenta() -> Color: ...
    @property
    def Maroon() -> Color: ...
    @property
    def MediumAquamarine() -> Color: ...
    @property
    def MediumBlue() -> Color: ...
    @property
    def MediumOrchid() -> Color: ...
    @property
    def MediumPurple() -> Color: ...
    @property
    def MediumSeaGreen() -> Color: ...
    @property
    def MediumSlateBlue() -> Color: ...
    @property
    def MediumSpringGreen() -> Color: ...
    @property
    def MediumTurquoise() -> Color: ...
    @property
    def MediumVioletRed() -> Color: ...
    @property
    def MidnightBlue() -> Color: ...
    @property
    def MintCream() -> Color: ...
    @property
    def MistyRose() -> Color: ...
    @property
    def Moccasin() -> Color: ...
    @property
    def NavajoWhite() -> Color: ...
    @property
    def Navy() -> Color: ...
    @property
    def OldLace() -> Color: ...
    @property
    def Olive() -> Color: ...
    @property
    def OliveDrab() -> Color: ...
    @property
    def Orange() -> Color: ...
    @property
    def OrangeRed() -> Color: ...
    @property
    def Orchid() -> Color: ...
    @property
    def PaleGoldenrod() -> Color: ...
    @property
    def PaleGreen() -> Color: ...
    @property
    def PaleTurquoise() -> Color: ...
    @property
    def PaleVioletRed() -> Color: ...
    @property
    def PapayaWhip() -> Color: ...
    @property
    def PeachPuff() -> Color: ...
    @property
    def Peru() -> Color: ...
    @property
    def Pink() -> Color: ...
    @property
    def Plum() -> Color: ...
    @property
    def PowderBlue() -> Color: ...
    @property
    def Purple() -> Color: ...
    @property
    def Red() -> Color: ...
    @property
    def RosyBrown() -> Color: ...
    @property
    def RoyalBlue() -> Color: ...
    @property
    def SaddleBrown() -> Color: ...
    @property
    def Salmon() -> Color: ...
    @property
    def SandyBrown() -> Color: ...
    @property
    def SeaGreen() -> Color: ...
    @property
    def Seashell() -> Color: ...
    @property
    def Sienna() -> Color: ...
    @property
    def Silver() -> Color: ...
    @property
    def SkyBlue() -> Color: ...
    @property
    def SlateBlue() -> Color: ...
    @property
    def SlateGray() -> Color: ...
    @property
    def Snow() -> Color: ...
    @property
    def SpringGreen() -> Color: ...
    @property
    def SteelBlue() -> Color: ...
    @property
    def Tan() -> Color: ...
    @property
    def Teal() -> Color: ...
    @property
    def Thistle() -> Color: ...
    @property
    def Tomato() -> Color: ...
    @property
    def Transparent() -> Color: ...
    @property
    def Turquoise() -> Color: ...
    @property
    def Violet() -> Color: ...
    @property
    def Wheat() -> Color: ...
    @property
    def White() -> Color: ...
    @property
    def WhiteSmoke() -> Color: ...
    @property
    def Yellow() -> Color: ...
    @property
    def YellowGreen() -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class ColorStyles(Enum):
    # None = 0
    ExcludeAlpha = 1
    AlphaLast = 4
    ShortHex = 8
    All = 13


class DashStyle:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, offset: float, dashes: Iterable[float]): ...
    @overload
    def Equals(self, other: DashStyle) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Dashes(self) -> Iterable[float]: ...
    @property
    def IsSolid(self) -> bool: ...
    @property
    def Offset(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __eq__(style1: DashStyle, style2: DashStyle) -> bool: ...
    @overload
    def __ne__(style1: DashStyle, style2: DashStyle) -> bool: ...
    @overload
    @staticmethod
    def Parse(value: str) -> DashStyle: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TryParse(value: str) -> Tuple[bool, DashStyle]: ...


class DashStyles:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Dash() -> DashStyle: ...
    @property
    def DashDot() -> DashStyle: ...
    @property
    def DashDotDot() -> DashStyle: ...
    @property
    def Dot() -> DashStyle: ...
    @property
    def Solid() -> DashStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class FillMode(Enum):
    Alternate = 0
    Winding = 1


from System import Nullable
from System.IO import Stream
from System import IntPtr
from System import EventHandler
class Font(Widget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, systemFont: SystemFont, size: Nullable, decoration: FontDecoration): ...
    @overload
    def __init__(self, typeface: FontTypeface, size: float, decoration: FontDecoration): ...
    @overload
    def __init__(self, family: str, size: float, style: FontStyle, decoration: FontDecoration): ...
    @overload
    def __init__(self, family: FontFamily, size: float, style: FontStyle, decoration: FontDecoration): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromFile(fileName: str, size: float, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def FromStream(stream: Stream, size: float, decoration: FontDecoration) -> Font: ...
    @property
    def Ascent(self) -> float: ...
    @property
    def Baseline(self) -> float: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Descent(self) -> float: ...
    @property
    def Family(self) -> FontFamily: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def FontDecoration(self) -> FontDecoration: ...
    @property
    def FontStyle(self) -> FontStyle: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def Leading(self) -> float: ...
    @property
    def LineHeight(self) -> float: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Size(self) -> float: ...
    @property
    def Strikethrough(self) -> bool: ...
    @property
    def Style(self) -> str: ...
    @property
    def Typeface(self) -> FontTypeface: ...
    @property
    def Underline(self) -> bool: ...
    @property
    def XHeight(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def MeasureString(self, text: str) -> SizeF: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FontDecoration(Enum):
    # None = 0
    Underline = 1
    Strikethrough = 2


class FontFamilies:
    MonospaceFamilyName: str
    SansFamilyName: str
    SerifFamilyName: str
    CursiveFamilyName: str
    FantasyFamilyName: str
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Cursive() -> FontFamily: ...
    @property
    def Fantasy() -> FontFamily: ...
    @property
    def Monospace() -> FontFamily: ...
    @property
    def Sans() -> FontFamily: ...
    @property
    def Serif() -> FontFamily: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections.Generic import IEnumerable
from System import IntPtr
from System import EventHandler
class FontFamily(Widget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, familyName: str): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, other: FontFamily) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromFiles(fileNames: Iterable[str]) -> FontFamily: ...
    @overload
    @staticmethod
    def FromFiles(fileNames: Iterable[str]) -> FontFamily: ...
    @overload
    @staticmethod
    def FromStreams(streams: Iterable[Stream]) -> FontFamily: ...
    @overload
    @staticmethod
    def FromStreams(streams: Iterable[Stream]) -> FontFamily: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def LocalizedName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Style(self) -> str: ...
    @property
    def Typefaces(self) -> Iterable[FontTypeface]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __eq__(value1: FontFamily, value2: FontFamily) -> bool: ...
    @overload
    def __ne__(value1: FontFamily, value2: FontFamily) -> bool: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections.Generic import IEnumerable
class Fonts:
    @overload
    @staticmethod
    def Cached(familyName: str, size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Cached(family: FontFamily, size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    @staticmethod
    def Cursive(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Fantasy(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @property
    def AvailableFontFamilies() -> Iterable[FontFamily]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Monospace(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Sans(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Serif(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    def ToString(self) -> str: ...


class FontStyle(Enum):
    # None = 0
    Bold = 1
    Italic = 2


from System.IO import Stream
from ..Forms import Range
from System.Collections.Generic import IEnumerable
from System import IntPtr
from System import EventHandler
class FontTypeface(Widget):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, family: FontFamily, handler: IHandler): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: FontTypeface) -> bool: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Family(self) -> FontFamily: ...
    @property
    def FontStyle(self) -> FontStyle: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsSymbol(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def LocalizedName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def HasCharacterRange(self, range: Range) -> bool: ...
    @overload
    def HasCharacterRange(self, start: int, end: int) -> bool: ...
    @overload
    def HasCharacterRanges(self, ranges: Iterable[Range]) -> bool: ...
    @overload
    def __eq__(value1: FontTypeface, value2: FontTypeface) -> bool: ...
    @overload
    def __ne__(value1: FontTypeface, value2: FontTypeface) -> bool: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import IntPtr
from System import EventHandler
class FormattedText(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Alignment(self) -> FormattedTextAlignment: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForegroundBrush(self) -> Brush: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def MaximumHeight(self) -> float: ...
    @property
    def MaximumSize(self) -> SizeF: ...
    @property
    def MaximumWidth(self) -> float: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Style(self) -> str: ...
    @property
    def Text(self) -> str: ...
    @property
    def Trimming(self) -> FormattedTextTrimming: ...
    @property
    def Wrap(self) -> FormattedTextWrapMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Measure(self) -> SizeF: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @Alignment.setter
    def Alignment(self, value: FormattedTextAlignment) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForegroundBrush.setter
    def ForegroundBrush(self, value: Brush) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @MaximumHeight.setter
    def MaximumHeight(self, value: float) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: SizeF) -> None: ...
    @MaximumWidth.setter
    def MaximumWidth(self, value: float) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Trimming.setter
    def Trimming(self, value: FormattedTextTrimming) -> None: ...
    @Wrap.setter
    def Wrap(self, value: FormattedTextWrapMode) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FormattedTextAlignment(Enum):
    Left = 0
    Right = 1
    Center = 2
    Justify = 3


class FormattedTextTrimming(Enum):
    # None = 0
    CharacterEllipsis = 1
    WordEllipsis = 2


class FormattedTextWrapMode(Enum):
    # None = 0
    Word = 1
    Character = 2


class GradientWrapMode(Enum):
    Pad = 0
    Repeat = 1
    Reflect = 2


from System.Collections.Generic import IEnumerable
from System import IDisposable
from System import IntPtr
from System import EventHandler
class Graphics(Widget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, image: Bitmap): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Clear(self, brush: SolidBrush) -> None: ...
    @overload
    def Clear(self, color: Color) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DrawArc(self, color: Color, rectangle: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, rectangle: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawArc(self, color: Color, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, rectangle: RectangleF) -> None: ...
    @overload
    def DrawEllipse(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def DrawEllipse(self, color: Color, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawImage(self, image: Image, rectangle: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, location: PointF) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: PointF) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: float, y: float) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawInsetRectangle(self, topLeftColor: Color, bottomRightColor: Color, rectangle: RectangleF, width: int) -> None: ...
    @overload
    def DrawLine(self, color: Color, start: PointF, end: PointF) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, start: PointF, end: PointF) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, startx: float, starty: float, endx: float, endy: float) -> None: ...
    @overload
    def DrawLine(self, color: Color, startx: float, starty: float, endx: float, endy: float) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawLines(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawLines(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawPath(self, color: Color, path: IGraphicsPath) -> None: ...
    @overload
    def DrawPath(self, pen: Pen, path: IGraphicsPath) -> None: ...
    @overload
    def DrawPolygon(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawRectangle(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, rectangle: RectangleF) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawRectangle(self, color: Color, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawText(self, formattedText: FormattedText, location: PointF) -> None: ...
    @overload
    def DrawText(self, font: Font, color: Color, location: PointF, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: Brush, location: PointF, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: SolidBrush, location: PointF, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: SolidBrush, x: float, y: float, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: Brush, x: float, y: float, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, color: Color, x: float, y: float, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: Brush, frame: RectangleF, text: str, wrap: FormattedTextWrapMode, alignment: FormattedTextAlignment, trimming: FormattedTextTrimming) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FillEllipse(self, brush: Brush, rectangle: RectangleF) -> None: ...
    @overload
    def FillEllipse(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def FillEllipse(self, color: Color, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillPath(self, color: Color, path: IGraphicsPath) -> None: ...
    @overload
    def FillPath(self, brush: Brush, path: IGraphicsPath) -> None: ...
    @overload
    def FillPie(self, brush: Brush, rectangle: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillPie(self, color: Color, rectangle: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillPie(self, color: Color, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillPolygon(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: Iterable[PointF]) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, rectangle: RectangleF) -> None: ...
    @overload
    def FillRectangle(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillRectangle(self, color: Color, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillRectangles(self, brush: Brush, rectangles: Iterable[RectangleF]) -> None: ...
    @overload
    def FillRectangles(self, color: Color, rectangles: Iterable[RectangleF]) -> None: ...
    @overload
    def Flush(self) -> None: ...
    @property
    def AntiAlias(self) -> bool: ...
    @property
    def ClipBounds(self) -> RectangleF: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def CurrentTransform(self) -> IMatrix: ...
    @property
    def DPI(self) -> float: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsRetained(self) -> bool: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PixelOffsetMode(self) -> PixelOffsetMode: ...
    @property
    def PixelsPerPoint(self) -> float: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def PointsPerPixel(self) -> float: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IsVisible(self, rectangle: RectangleF) -> bool: ...
    @overload
    def MeasureString(self, font: Font, text: str) -> SizeF: ...
    @overload
    def MultiplyTransform(self, matrix: IMatrix) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def ResetClip(self) -> None: ...
    @overload
    def RestoreTransform(self) -> None: ...
    @overload
    def RotateTransform(self, angle: float) -> None: ...
    @overload
    def SaveTransform(self) -> None: ...
    @overload
    def SaveTransformState(self) -> IDisposable: ...
    @overload
    def ScaleTransform(self, scale: SizeF) -> None: ...
    @overload
    def ScaleTransform(self, scale: float) -> None: ...
    @overload
    def ScaleTransform(self, scaleX: float, scaleY: float) -> None: ...
    @AntiAlias.setter
    def AntiAlias(self, value: bool) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: PixelOffsetMode) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def SetClip(self, rectangle: RectangleF) -> None: ...
    @overload
    def SetClip(self, path: IGraphicsPath) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TranslateTransform(self, offset: PointF) -> None: ...
    @overload
    def TranslateTransform(self, offsetX: float, offsetY: float) -> None: ...


from System import Func
from System.Collections.Generic import IEnumerable
class GraphicsPath:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IGraphicsPath): ...
    @overload
    def AddArc(self, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def AddBezier(self, start: PointF, control1: PointF, control2: PointF, end: PointF) -> None: ...
    @overload
    def AddCurve(self, points: Iterable[PointF], tension: float) -> None: ...
    @overload
    def AddEllipse(self, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def AddLine(self, startX: float, startY: float, endX: float, endY: float) -> None: ...
    @overload
    def AddLines(self, points: Iterable[PointF]) -> None: ...
    @overload
    def AddPath(self, path: IGraphicsPath, connect: bool) -> None: ...
    @overload
    def AddRectangle(self, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def Clone(self) -> IGraphicsPath: ...
    @overload
    def CloseFigure(self) -> None: ...
    @overload
    @staticmethod
    def Create() -> IGraphicsPath: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FillContains(self, point: PointF) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def CurrentPoint(self) -> PointF: ...
    @property
    def FillMode(self) -> FillMode: ...
    @property
    def Instantiator() -> Func: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetRoundRect(rectangle: RectangleF, radius: float) -> IGraphicsPath: ...
    @overload
    @staticmethod
    def GetRoundRect(rectangle: RectangleF, nwRadius: float, neRadius: float, seRadius: float, swRadius: float) -> IGraphicsPath: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def LineTo(self, x: float, y: float) -> None: ...
    @overload
    def MoveTo(self, x: float, y: float) -> None: ...
    @FillMode.setter
    def FillMode(self, value: FillMode) -> None: ...
    @overload
    def StartFigure(self) -> None: ...
    @overload
    def StrokeContains(self, pen: Pen, point: PointF) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Transform(self, matrix: IMatrix) -> None: ...


class GraphicsPathExtensions:
    @overload
    @staticmethod
    def AddArc(path: IGraphicsPath, location: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    @staticmethod
    def AddCurve(path: IGraphicsPath, points: Iterable[PointF]) -> None: ...
    @overload
    @staticmethod
    def AddCurve(path: IGraphicsPath, tension: float, points: Iterable[PointF]) -> None: ...
    @overload
    @staticmethod
    def AddEllipse(path: IGraphicsPath, location: RectangleF) -> None: ...
    @overload
    @staticmethod
    def AddLine(path: IGraphicsPath, start: PointF, end: PointF) -> None: ...
    @overload
    @staticmethod
    def AddLines(path: IGraphicsPath, points: Iterable[PointF]) -> None: ...
    @overload
    @staticmethod
    def AddRectangle(path: IGraphicsPath, location: RectangleF) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def LineTo(path: IGraphicsPath, point: PointF) -> None: ...
    @overload
    @staticmethod
    def MoveTo(path: IGraphicsPath, point: PointF) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.IO import Stream
from System.Collections.Generic import IEnumerable
from System.Reflection import Assembly
from System import Nullable
from System import IntPtr
from System import EventHandler
class Icon(Image):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, frames: Iterable[IconFrame]): ...
    @overload
    def __init__(self, frames: Iterable[IconFrame]): ...
    @overload
    def __init__(self, scale: float, bitmap: Bitmap): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, assembly: Assembly) -> Icon: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, type: type) -> Icon: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Frames(self) -> Iterable[IconFrame]: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetFrame(self, scale: float, fittingSize: Nullable) -> IconFrame: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WithSize(self, fittingSize: Size) -> Icon: ...
    @overload
    def WithSize(self, width: int, height: int) -> Icon: ...


from System import Func
from System.IO import Stream
from System.Reflection import Assembly
class IconFrame:
    @overload
    def __init__(self, scale: float, load: Func): ...
    @overload
    def __init__(self, scale: float, stream: Stream): ...
    @overload
    def __init__(self, scale: float, bitmap: Bitmap): ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromControlObject(scale: float, controlObject: object) -> IconFrame: ...
    @overload
    @staticmethod
    def FromResource(scale: float, resourceName: str, assembly: Assembly) -> IconFrame: ...
    @property
    def Bitmap(self) -> Bitmap: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def PixelSize(self) -> Size: ...
    @property
    def Scale(self) -> float: ...
    @property
    def Size(self) -> Size: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections.Generic import IEnumerable
class IGraphicsPath:
    @overload
    def AddArc(self, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def AddBezier(self, start: PointF, control1: PointF, control2: PointF, end: PointF) -> None: ...
    @overload
    def AddCurve(self, points: Iterable[PointF], tension: float) -> None: ...
    @overload
    def AddEllipse(self, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def AddLine(self, startX: float, startY: float, endX: float, endY: float) -> None: ...
    @overload
    def AddLines(self, points: Iterable[PointF]) -> None: ...
    @overload
    def AddPath(self, path: IGraphicsPath, connect: bool) -> None: ...
    @overload
    def AddRectangle(self, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def Clone(self) -> IGraphicsPath: ...
    @overload
    def CloseFigure(self) -> None: ...
    @overload
    def FillContains(self, point: PointF) -> bool: ...
    @property
    def Bounds(self) -> RectangleF: ...
    @property
    def CurrentPoint(self) -> PointF: ...
    @property
    def FillMode(self) -> FillMode: ...
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def LineTo(self, x: float, y: float) -> None: ...
    @overload
    def MoveTo(self, x: float, y: float) -> None: ...
    @FillMode.setter
    def FillMode(self, value: FillMode) -> None: ...
    @overload
    def StartFigure(self) -> None: ...
    @overload
    def StrokeContains(self, pen: Pen, point: PointF) -> bool: ...
    @overload
    def Transform(self, matrix: IMatrix) -> None: ...


from System.IO import Stream
from System import Func
class IHandler:
    @overload
    def Create(self, frame: IconFrame, stream: Stream) -> object: ...
    @overload
    def Create(self, frame: IconFrame, load: Func) -> object: ...
    @overload
    def Create(self, frame: IconFrame, bitmap: Bitmap) -> object: ...
    @overload
    def GetBitmap(self, frame: IconFrame) -> Bitmap: ...
    @overload
    def GetPixelSize(self, frame: IconFrame) -> Size: ...


class IHandler:
    @property
    def Size(self) -> Size: ...


class IHandler:
    @overload
    def Create(self, width: int, height: int, bitsPerPixel: int) -> None: ...
    @property
    def Palette(self) -> Palette: ...
    @overload
    def Resize(self, width: int, height: int) -> None: ...
    @Palette.setter
    def Palette(self, value: Palette) -> None: ...


class IHandler:
    @overload
    def Create(self, startColor: Color, endColor: Color, center: PointF, gradientOrigin: PointF, radius: SizeF) -> object: ...
    @overload
    def GetGradientWrap(self, widget: RadialGradientBrush) -> GradientWrapMode: ...
    @overload
    def GetTransform(self, widget: RadialGradientBrush) -> IMatrix: ...
    @overload
    def SetGradientWrap(self, widget: RadialGradientBrush, gradientWrap: GradientWrapMode) -> None: ...
    @overload
    def SetTransform(self, widget: RadialGradientBrush, transform: IMatrix) -> None: ...


class IHandler:
    @overload
    def Create(self, color: Color) -> object: ...
    @overload
    def GetColor(self, widget: SolidBrush) -> Color: ...
    @overload
    def SetColor(self, widget: SolidBrush, color: Color) -> None: ...


from System.IO import Stream
from System.Collections.Generic import IEnumerable
class IHandler:
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, frames: Iterable[IconFrame]) -> None: ...
    @property
    def Frames(self) -> Iterable[IconFrame]: ...


class IHandler:
    @overload
    def Exclude(self, rectangle: Rectangle) -> None: ...
    @overload
    def Reset(self) -> None: ...
    @overload
    def Set(self, rectangle: Rectangle) -> None: ...


class IHandler:
    @overload
    def Create(self, brush: Brush, thickness: float) -> object: ...
    @overload
    def GetBrush(self, widget: Pen) -> Brush: ...
    @overload
    def GetLineCap(self, widget: Pen) -> PenLineCap: ...
    @overload
    def GetLineJoin(self, widget: Pen) -> PenLineJoin: ...
    @overload
    def GetMiterLimit(self, widget: Pen) -> float: ...
    @overload
    def GetThickness(self, widget: Pen) -> float: ...
    @overload
    def SetDashStyle(self, widget: Pen, dashStyle: DashStyle) -> None: ...
    @overload
    def SetLineCap(self, widget: Pen, lineCap: PenLineCap) -> None: ...
    @overload
    def SetLineJoin(self, widget: Pen, lineJoin: PenLineJoin) -> None: ...
    @overload
    def SetMiterLimit(self, widget: Pen, miterLimit: float) -> None: ...
    @overload
    def SetThickness(self, widget: Pen, thickness: float) -> None: ...


class IHandler:
    @overload
    def Get(self, type: SystemIconType, size: SystemIconSize) -> Icon: ...
    @overload
    def GetFileIcon(self, fileName: str, size: SystemIconSize) -> Icon: ...


class IHandler:
    pass


class IHandler:
    @overload
    def Create(self, image: Image, opacity: float) -> object: ...
    @overload
    def GetTransform(self, widget: TextureBrush) -> IMatrix: ...
    @overload
    def SetOpacity(self, widget: TextureBrush, opacity: float) -> None: ...
    @overload
    def SetTransform(self, widget: TextureBrush, transform: IMatrix) -> None: ...


class IHandler:
    @property
    def Alignment(self) -> FormattedTextAlignment: ...
    @property
    def Font(self) -> Font: ...
    @property
    def ForegroundBrush(self) -> Brush: ...
    @property
    def MaximumSize(self) -> SizeF: ...
    @property
    def Text(self) -> str: ...
    @property
    def Trimming(self) -> FormattedTextTrimming: ...
    @property
    def Wrap(self) -> FormattedTextWrapMode: ...
    @overload
    def Measure(self) -> SizeF: ...
    @Alignment.setter
    def Alignment(self, value: FormattedTextAlignment) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @ForegroundBrush.setter
    def ForegroundBrush(self, value: Brush) -> None: ...
    @MaximumSize.setter
    def MaximumSize(self, value: SizeF) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @Trimming.setter
    def Trimming(self, value: FormattedTextTrimming) -> None: ...
    @Wrap.setter
    def Wrap(self, value: FormattedTextWrapMode) -> None: ...


from System.IO import Stream
from System.Collections.Generic import IEnumerable
class IHandler:
    @overload
    def Create(self, family: FontFamily) -> None: ...
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @property
    def Family(self) -> FontFamily: ...
    @property
    def FontStyle(self) -> FontStyle: ...
    @property
    def IsSymbol(self) -> bool: ...
    @property
    def LocalizedName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @overload
    def HasCharacterRanges(self, ranges: Iterable[Range]) -> bool: ...


from System.Collections.Generic import IEnumerable
class IHandler:
    @overload
    def FontFamilyAvailable(self, fontFamily: str) -> bool: ...
    @property
    def AvailableFontFamilies(self) -> Iterable[FontFamily]: ...


from System.Collections.Generic import IEnumerable
class IHandler:
    @overload
    def Create(self, familyName: str) -> None: ...
    @overload
    def CreateFromFiles(self, fileNames: Iterable[str]) -> None: ...
    @overload
    def CreateFromStreams(self, streams: Iterable[Stream]) -> None: ...
    @property
    def LocalizedName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Typefaces(self) -> Iterable[FontTypeface]: ...


from System import Nullable
class IHandler:
    @overload
    def Create(self, systemFont: SystemFont, size: Nullable, decoration: FontDecoration) -> None: ...
    @overload
    def Create(self, typeface: FontTypeface, size: float, decoration: FontDecoration) -> None: ...
    @overload
    def Create(self, family: FontFamily, size: float, style: FontStyle, decoration: FontDecoration) -> None: ...
    @property
    def Ascent(self) -> float: ...
    @property
    def Baseline(self) -> float: ...
    @property
    def Descent(self) -> float: ...
    @property
    def Family(self) -> FontFamily: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def FontDecoration(self) -> FontDecoration: ...
    @property
    def FontStyle(self) -> FontStyle: ...
    @property
    def Leading(self) -> float: ...
    @property
    def LineHeight(self) -> float: ...
    @property
    def Size(self) -> float: ...
    @property
    def Typeface(self) -> FontTypeface: ...
    @property
    def XHeight(self) -> float: ...
    @overload
    def MeasureString(self, text: str) -> SizeF: ...


from System import Nullable
class IHandler:
    @overload
    def ModifyComponent(self, controlObject: object, r: Nullable, g: Nullable, b: Nullable, a: Nullable) -> object: ...


from System.IO import Stream
from System import Nullable
class IHandler:
    @overload
    def Clone(self, rectangle: Nullable) -> Bitmap: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, width: int, height: int, pixelFormat: PixelFormat) -> None: ...
    @overload
    def Create(self, width: int, height: int, graphics: Graphics) -> None: ...
    @overload
    def Create(self, image: Image, width: int, height: int, interpolation: ImageInterpolation) -> None: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def Save(self, stream: Stream, format: ImageFormat) -> None: ...
    @overload
    def Save(self, fileName: str, format: ImageFormat) -> None: ...


class IHandler:
    @overload
    def Create(self) -> None: ...
    @overload
    def Create(self, xx: float, yx: float, xy: float, yy: float, x0: float, y0: float) -> None: ...


class IHandler:
    @property
    def Control(self) -> Color: ...
    @property
    def ControlBackground(self) -> Color: ...
    @property
    def ControlText(self) -> Color: ...
    @property
    def DisabledText(self) -> Color: ...
    @property
    def Highlight(self) -> Color: ...
    @property
    def HighlightText(self) -> Color: ...
    @property
    def LinkText(self) -> Color: ...
    @property
    def Selection(self) -> Color: ...
    @property
    def SelectionText(self) -> Color: ...
    @property
    def WindowBackground(self) -> Color: ...


class IHandler:
    pass


from System.Collections.Generic import IEnumerable
class IHandler:
    @overload
    def Clear(self, brush: SolidBrush) -> None: ...
    @overload
    def CreateFromImage(self, image: Bitmap) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: float, y: float) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, startx: float, starty: float, endx: float, endy: float) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawPath(self, pen: Pen, path: IGraphicsPath) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawText(self, formattedText: FormattedText, location: PointF) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: Brush, x: float, y: float, text: str) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillPath(self, brush: Brush, path: IGraphicsPath) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def Flush(self) -> None: ...
    @property
    def AntiAlias(self) -> bool: ...
    @property
    def ClipBounds(self) -> RectangleF: ...
    @property
    def CurrentTransform(self) -> IMatrix: ...
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @property
    def IsRetained(self) -> bool: ...
    @property
    def PixelOffsetMode(self) -> PixelOffsetMode: ...
    @property
    def PointsPerPixel(self) -> float: ...
    @overload
    def MeasureString(self, font: Font, text: str) -> SizeF: ...
    @overload
    def MultiplyTransform(self, matrix: IMatrix) -> None: ...
    @overload
    def ResetClip(self) -> None: ...
    @overload
    def RestoreTransform(self) -> None: ...
    @overload
    def RotateTransform(self, angle: float) -> None: ...
    @overload
    def SaveTransform(self) -> None: ...
    @overload
    def ScaleTransform(self, scaleX: float, scaleY: float) -> None: ...
    @AntiAlias.setter
    def AntiAlias(self, value: bool) -> None: ...
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: PixelOffsetMode) -> None: ...
    @overload
    def SetClip(self, rectangle: RectangleF) -> None: ...
    @overload
    def SetClip(self, path: IGraphicsPath) -> None: ...
    @overload
    def TranslateTransform(self, offsetX: float, offsetY: float) -> None: ...


class IHandler:
    @overload
    def Create(self, startColor: Color, endColor: Color, startPoint: PointF, endPoint: PointF) -> object: ...
    @overload
    def Create(self, rectangle: RectangleF, startColor: Color, endColor: Color, angle: float) -> object: ...
    @overload
    def GetGradientWrap(self, widget: LinearGradientBrush) -> GradientWrapMode: ...
    @overload
    def GetTransform(self, widget: LinearGradientBrush) -> IMatrix: ...
    @overload
    def SetGradientWrap(self, widget: LinearGradientBrush, gradientWrap: GradientWrapMode) -> None: ...
    @overload
    def SetTransform(self, widget: LinearGradientBrush, transform: IMatrix) -> None: ...


class ILockableImage:
    @overload
    def Lock(self) -> BitmapData: ...
    @overload
    def Unlock(self, bitmapData: BitmapData) -> None: ...


from System import IntPtr
from System import EventHandler
class Image(Widget):
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ImageFormat(Enum):
    Jpeg = 0
    Bitmap = 1
    Tiff = 2
    Png = 3
    Gif = 4


class ImageInterpolation(Enum):
    Default = 0
    # None = 1
    Low = 2
    Medium = 3
    High = 4


class IMatrix:
    @overload
    def Append(self, matrix: IMatrix) -> None: ...
    @overload
    def Clone(self) -> IMatrix: ...
    @property
    def Elements(self) -> Iterable[float]: ...
    @property
    def X0(self) -> float: ...
    @property
    def Xx(self) -> float: ...
    @property
    def Xy(self) -> float: ...
    @property
    def Y0(self) -> float: ...
    @property
    def Yx(self) -> float: ...
    @property
    def Yy(self) -> float: ...
    @overload
    def Invert(self) -> None: ...
    @overload
    def Prepend(self, matrix: IMatrix) -> None: ...
    @overload
    def Rotate(self, angle: float) -> None: ...
    @overload
    def RotateAt(self, angle: float, centerX: float, centerY: float) -> None: ...
    @overload
    def Scale(self, scaleX: float, scaleY: float) -> None: ...
    @overload
    def ScaleAt(self, scaleX: float, scaleY: float, centerX: float, centerY: float) -> None: ...
    @X0.setter
    def X0(self, value: float) -> None: ...
    @Xx.setter
    def Xx(self, value: float) -> None: ...
    @Xy.setter
    def Xy(self, value: float) -> None: ...
    @Y0.setter
    def Y0(self, value: float) -> None: ...
    @Yx.setter
    def Yx(self, value: float) -> None: ...
    @Yy.setter
    def Yy(self, value: float) -> None: ...
    @overload
    def Skew(self, skewX: float, skewY: float) -> None: ...
    @overload
    def TransformPoint(self, point: PointF) -> PointF: ...
    @overload
    def TransformPoint(self, point: Point) -> PointF: ...
    @overload
    def Translate(self, offsetX: float, offsetY: float) -> None: ...


from System import IntPtr
from System import EventHandler
class IndexedBitmap(Image):
    @overload
    def __init__(self, width: int, height: int, bitsPerPixel: int): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def BitsPerPixel(self) -> int: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Palette(self) -> Palette: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Lock(self) -> BitmapData: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Resize(self, width: int, height: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Palette.setter
    def Palette(self, value: Palette) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ITransformBrush:
    @property
    def Transform(self) -> IMatrix: ...
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...


from System import Func
class LinearGradientBrush(Brush):
    @overload
    def __init__(self, startColor: Color, endColor: Color, startPoint: PointF, endPoint: PointF): ...
    @overload
    def __init__(self, rectangle: RectangleF, startColor: Color, endColor: Color, angle: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Instantiator() -> Func: ...
    @property
    def Transform(self) -> IMatrix: ...
    @property
    def Wrap(self) -> GradientWrapMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @ControlObject.setter
    def ControlObject(self, value: object) -> None: ...
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @Wrap.setter
    def Wrap(self, value: GradientWrapMode) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Func
class Matrix:
    @overload
    @staticmethod
    def Append(matrix: IMatrix, matrices: Iterable[IMatrix]) -> None: ...
    @overload
    @staticmethod
    def Create() -> IMatrix: ...
    @overload
    @staticmethod
    def Create(elements: Iterable[float]) -> IMatrix: ...
    @overload
    @staticmethod
    def Create(xx: float, yx: float, xy: float, yy: float, x0: float, y0: float) -> IMatrix: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromRotation(angle: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromRotationAt(angle: float, center: PointF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromRotationAt(angle: float, centerX: float, centerY: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromScale(scale: SizeF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromScale(scaleX: float, scaleY: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromScaleAt(scale: SizeF, center: PointF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromScaleAt(scaleX: float, scaleY: float, centerX: float, centerY: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromSkew(skewX: float, skewY: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromTranslation(offset: PointF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromTranslation(offset: SizeF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromTranslation(distanceX: float, distanceY: float) -> IMatrix: ...
    @property
    def Instantiator() -> Func: ...
    @property
    def InstantiatorWithElements() -> Func: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetScale(matrix: IMatrix) -> PointF: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Inverse(matrix: IMatrix) -> IMatrix: ...
    @overload
    @staticmethod
    def Multiply(matrix: IMatrix, matrices: Iterable[IMatrix]) -> IMatrix: ...
    @overload
    @staticmethod
    def Prepend(matrix: IMatrix, matrices: Iterable[IMatrix]) -> None: ...
    @overload
    @staticmethod
    def RotateAt(matrix: IMatrix, angle: float, center: PointF) -> None: ...
    @overload
    @staticmethod
    def Scale(matrix: IMatrix, scale: float) -> None: ...
    @overload
    @staticmethod
    def Scale(matrix: IMatrix, scale: SizeF) -> None: ...
    @overload
    @staticmethod
    def ScaleAt(matrix: IMatrix, scale: float, center: PointF) -> None: ...
    @overload
    @staticmethod
    def ScaleAt(matrix: IMatrix, scale: SizeF, center: PointF) -> None: ...
    @overload
    @staticmethod
    def ScaleAt(matrix: IMatrix, scale: float, centerX: float, centerY: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TransformRectangle(matrix: IMatrix, rect: RectangleF) -> RectangleF: ...
    @overload
    @staticmethod
    def TransformSize(matrix: IMatrix, size: SizeF) -> SizeF: ...
    @overload
    @staticmethod
    def Translate(matrix: IMatrix, offset: PointF) -> None: ...
    @overload
    @staticmethod
    def Translate(matrix: IMatrix, offset: SizeF) -> None: ...


class Padding:
    @overload
    def __init__(self, all: int): ...
    @overload
    def __init__(self, horizontal: int, vertical: int): ...
    @overload
    def __init__(self, left: int, top: int, right: int, bottom: int): ...
    Empty: Padding
    @overload
    @staticmethod
    def Ceiling(padding: PaddingF) -> Padding: ...
    @overload
    def Equals(self, other: Padding) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def Horizontal(self) -> int: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def Left(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Top(self) -> int: ...
    @property
    def Vertical(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __add__(value1: Padding, value2: Padding) -> Padding: ...
    @overload
    def __eq__(value1: Padding, value2: Padding) -> bool: ...
    @overload
    def op_Explicit(padding: PaddingF) -> Padding: ...
    @overload
    def op_Implicit(all: int) -> Padding: ...
    @overload
    def __ne__(value1: Padding, value2: Padding) -> bool: ...
    @overload
    def __sub__(value1: Padding, value2: Padding) -> Padding: ...
    @overload
    def __neg__(padding: Padding) -> Padding: ...
    @overload
    @staticmethod
    def Round(padding: PaddingF) -> Padding: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Truncate(padding: PaddingF) -> Padding: ...


class PaddingF:
    @overload
    def __init__(self, all: float): ...
    @overload
    def __init__(self, horizontal: float, vertical: float): ...
    @overload
    def __init__(self, left: float, top: float, right: float, bottom: float): ...
    Empty: PaddingF
    @overload
    def Equals(self, other: PaddingF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Bottom(self) -> float: ...
    @property
    def Horizontal(self) -> float: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def Left(self) -> float: ...
    @property
    def Right(self) -> float: ...
    @property
    def Size(self) -> SizeF: ...
    @property
    def Top(self) -> float: ...
    @property
    def Vertical(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def __add__(value1: PaddingF, value2: PaddingF) -> PaddingF: ...
    @overload
    def __eq__(value1: PaddingF, value2: PaddingF) -> bool: ...
    @overload
    def op_Implicit(all: float) -> PaddingF: ...
    @overload
    def op_Implicit(padding: Padding) -> PaddingF: ...
    @overload
    def __ne__(value1: PaddingF, value2: PaddingF) -> bool: ...
    @overload
    def __sub__(value1: PaddingF, value2: PaddingF) -> PaddingF: ...
    @overload
    def __neg__(padding: PaddingF) -> PaddingF: ...
    @Bottom.setter
    def Bottom(self, value: float) -> None: ...
    @Left.setter
    def Left(self, value: float) -> None: ...
    @Right.setter
    def Right(self, value: float) -> None: ...
    @Top.setter
    def Top(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System.Collections.Generic import IEnumerable
from System.IO import BinaryWriter
from System.IO import BinaryReader
from System.Collections.Specialized import NotifyCollectionChangedEventHandler
from System.Collections.Generic import IEnumerator
class Palette:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, colors: Iterable[Color]): ...
    def __iter__(self) -> Iterator[Color]: ...
    def __getitem__(self, index: int) -> Color: ...
    def __setitem__(self, index: int, value: Color): ...
    @overload
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Add(self, item: Color) -> None: ...
    @overload
    def AddRange(self, colors: Iterable[Color]) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Clone(self) -> Palette: ...
    @overload
    def Contains(self, item: Color) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[Color], index: int) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def FindAddColour(self, color: Color) -> int: ...
    @overload
    def FindClosest(self, color: Color) -> int: ...
    @overload
    @staticmethod
    def FromEGA(palEGA: Palette) -> Palette: ...
    @property
    def Count(self) -> int: ...
    @property
    def EGAColors() -> Iterable[int]: ...
    @overload
    @staticmethod
    def GetDosPalette() -> Palette: ...
    @overload
    @staticmethod
    def GetEgaPalette() -> Palette: ...
    @overload
    def GetEnumerator(self) -> Iterator[Color]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRGBColor(self, index: int) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def IndexOf(self, item: Color) -> int: ...
    @overload
    def Insert(self, index: int, item: Color) -> None: ...
    @overload
    def Load(self, reader: BinaryReader, size: int, shift: int, includeAlpha: bool) -> None: ...
    @overload
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    @overload
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Remove(self, item: Color) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def Save(self, writer: BinaryWriter, shift: int, includeAlpha: bool) -> None: ...
    @property
    def Item(self) -> MutableSequence[Color]: ...
    @overload
    def ToString(self) -> str: ...


from System import Func
class Pen:
    @overload
    def __init__(self, color: Color, thickness: float): ...
    @overload
    def __init__(self, brush: Brush, thickness: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Brush(self) -> Brush: ...
    @property
    def Color(self) -> Color: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def DashStyle(self) -> DashStyle: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Instantiator() -> Func: ...
    @property
    def LineCap(self) -> PenLineCap: ...
    @property
    def LineJoin(self) -> PenLineJoin: ...
    @property
    def MiterLimit(self) -> float: ...
    @property
    def Thickness(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @ControlObject.setter
    def ControlObject(self, value: object) -> None: ...
    @DashStyle.setter
    def DashStyle(self, value: DashStyle) -> None: ...
    @LineCap.setter
    def LineCap(self, value: PenLineCap) -> None: ...
    @LineJoin.setter
    def LineJoin(self, value: PenLineJoin) -> None: ...
    @MiterLimit.setter
    def MiterLimit(self, value: float) -> None: ...
    @Thickness.setter
    def Thickness(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PenLineCap(Enum):
    Square = 0
    Butt = 1
    Round = 2


class PenLineJoin(Enum):
    Miter = 0
    Bevel = 1
    Round = 2


class Pens:
    @overload
    @staticmethod
    def Cached(color: Color, thickness: float, dashStyle: DashStyle) -> Pen: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def AliceBlue() -> Pen: ...
    @property
    def AntiqueWhite() -> Pen: ...
    @property
    def Aqua() -> Pen: ...
    @property
    def Aquamarine() -> Pen: ...
    @property
    def Azure() -> Pen: ...
    @property
    def Beige() -> Pen: ...
    @property
    def Bisque() -> Pen: ...
    @property
    def Black() -> Pen: ...
    @property
    def BlanchedAlmond() -> Pen: ...
    @property
    def Blue() -> Pen: ...
    @property
    def BlueViolet() -> Pen: ...
    @property
    def Brown() -> Pen: ...
    @property
    def BurlyWood() -> Pen: ...
    @property
    def CadetBlue() -> Pen: ...
    @property
    def Chartreuse() -> Pen: ...
    @property
    def Chocolate() -> Pen: ...
    @property
    def Coral() -> Pen: ...
    @property
    def CornflowerBlue() -> Pen: ...
    @property
    def Cornsilk() -> Pen: ...
    @property
    def Crimson() -> Pen: ...
    @property
    def Cyan() -> Pen: ...
    @property
    def DarkBlue() -> Pen: ...
    @property
    def DarkCyan() -> Pen: ...
    @property
    def DarkGoldenrod() -> Pen: ...
    @property
    def DarkGray() -> Pen: ...
    @property
    def DarkGreen() -> Pen: ...
    @property
    def DarkKhaki() -> Pen: ...
    @property
    def DarkMagenta() -> Pen: ...
    @property
    def DarkOliveGreen() -> Pen: ...
    @property
    def DarkOrange() -> Pen: ...
    @property
    def DarkOrchid() -> Pen: ...
    @property
    def DarkRed() -> Pen: ...
    @property
    def DarkSalmon() -> Pen: ...
    @property
    def DarkSeaGreen() -> Pen: ...
    @property
    def DarkSlateBlue() -> Pen: ...
    @property
    def DarkSlateGray() -> Pen: ...
    @property
    def DarkTurquoise() -> Pen: ...
    @property
    def DarkViolet() -> Pen: ...
    @property
    def DeepPink() -> Pen: ...
    @property
    def DeepSkyBlue() -> Pen: ...
    @property
    def DimGray() -> Pen: ...
    @property
    def DodgerBlue() -> Pen: ...
    @property
    def Firebrick() -> Pen: ...
    @property
    def FloralWhite() -> Pen: ...
    @property
    def ForestGreen() -> Pen: ...
    @property
    def Fuchsia() -> Pen: ...
    @property
    def Gainsboro() -> Pen: ...
    @property
    def GhostWhite() -> Pen: ...
    @property
    def Gold() -> Pen: ...
    @property
    def Goldenrod() -> Pen: ...
    @property
    def Gray() -> Pen: ...
    @property
    def Green() -> Pen: ...
    @property
    def GreenYellow() -> Pen: ...
    @property
    def Honeydew() -> Pen: ...
    @property
    def HotPink() -> Pen: ...
    @property
    def IndianRed() -> Pen: ...
    @property
    def Indigo() -> Pen: ...
    @property
    def Ivory() -> Pen: ...
    @property
    def Khaki() -> Pen: ...
    @property
    def Lavender() -> Pen: ...
    @property
    def LavenderBlush() -> Pen: ...
    @property
    def LawnGreen() -> Pen: ...
    @property
    def LemonChiffon() -> Pen: ...
    @property
    def LightBlue() -> Pen: ...
    @property
    def LightCoral() -> Pen: ...
    @property
    def LightCyan() -> Pen: ...
    @property
    def LightGoldenrodYellow() -> Pen: ...
    @property
    def LightGreen() -> Pen: ...
    @property
    def LightGrey() -> Pen: ...
    @property
    def LightPink() -> Pen: ...
    @property
    def LightSalmon() -> Pen: ...
    @property
    def LightSeaGreen() -> Pen: ...
    @property
    def LightSkyBlue() -> Pen: ...
    @property
    def LightSlateGray() -> Pen: ...
    @property
    def LightSteelBlue() -> Pen: ...
    @property
    def LightYellow() -> Pen: ...
    @property
    def Lime() -> Pen: ...
    @property
    def LimeGreen() -> Pen: ...
    @property
    def Linen() -> Pen: ...
    @property
    def Magenta() -> Pen: ...
    @property
    def Maroon() -> Pen: ...
    @property
    def MediumAquamarine() -> Pen: ...
    @property
    def MediumBlue() -> Pen: ...
    @property
    def MediumOrchid() -> Pen: ...
    @property
    def MediumPurple() -> Pen: ...
    @property
    def MediumSeaGreen() -> Pen: ...
    @property
    def MediumSlateBlue() -> Pen: ...
    @property
    def MediumSpringGreen() -> Pen: ...
    @property
    def MediumTurquoise() -> Pen: ...
    @property
    def MediumVioletRed() -> Pen: ...
    @property
    def MidnightBlue() -> Pen: ...
    @property
    def MintCream() -> Pen: ...
    @property
    def MistyRose() -> Pen: ...
    @property
    def Moccasin() -> Pen: ...
    @property
    def NavajoWhite() -> Pen: ...
    @property
    def Navy() -> Pen: ...
    @property
    def OldLace() -> Pen: ...
    @property
    def Olive() -> Pen: ...
    @property
    def OliveDrab() -> Pen: ...
    @property
    def Orange() -> Pen: ...
    @property
    def OrangeRed() -> Pen: ...
    @property
    def Orchid() -> Pen: ...
    @property
    def PaleGoldenrod() -> Pen: ...
    @property
    def PaleGreen() -> Pen: ...
    @property
    def PaleTurquoise() -> Pen: ...
    @property
    def PaleVioletRed() -> Pen: ...
    @property
    def PapayaWhip() -> Pen: ...
    @property
    def PeachPuff() -> Pen: ...
    @property
    def Peru() -> Pen: ...
    @property
    def Pink() -> Pen: ...
    @property
    def Plum() -> Pen: ...
    @property
    def PowderBlue() -> Pen: ...
    @property
    def Purple() -> Pen: ...
    @property
    def Red() -> Pen: ...
    @property
    def RosyBrown() -> Pen: ...
    @property
    def RoyalBlue() -> Pen: ...
    @property
    def SaddleBrown() -> Pen: ...
    @property
    def Salmon() -> Pen: ...
    @property
    def SandyBrown() -> Pen: ...
    @property
    def SeaGreen() -> Pen: ...
    @property
    def Seashell() -> Pen: ...
    @property
    def Sienna() -> Pen: ...
    @property
    def Silver() -> Pen: ...
    @property
    def SkyBlue() -> Pen: ...
    @property
    def SlateBlue() -> Pen: ...
    @property
    def SlateGray() -> Pen: ...
    @property
    def Snow() -> Pen: ...
    @property
    def SpringGreen() -> Pen: ...
    @property
    def SteelBlue() -> Pen: ...
    @property
    def Tan() -> Pen: ...
    @property
    def Teal() -> Pen: ...
    @property
    def Thistle() -> Pen: ...
    @property
    def Tomato() -> Pen: ...
    @property
    def Transparent() -> Pen: ...
    @property
    def Turquoise() -> Pen: ...
    @property
    def Violet() -> Pen: ...
    @property
    def Wheat() -> Pen: ...
    @property
    def White() -> Pen: ...
    @property
    def WhiteSmoke() -> Pen: ...
    @property
    def Yellow() -> Pen: ...
    @property
    def YellowGreen() -> Pen: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class PixelFormat(Enum):
    Format32bppRgb = 0
    Format24bppRgb = 1
    Format32bppRgba = 2


class PixelOffsetMode(Enum):
    # None = 0
    Half = 1
    Aligned = 2


class Point:
    @overload
    def __init__(self, size: Size): ...
    @overload
    def __init__(self, point: PointF): ...
    @overload
    def __init__(self, x: int, y: int): ...
    Empty: Point
    @overload
    @staticmethod
    def Abs(point: Point) -> Point: ...
    @overload
    def Distance(self, point: Point) -> float: ...
    @overload
    @staticmethod
    def Distance(point1: Point, point2: Point) -> float: ...
    @overload
    def DotProduct(self, point: Point) -> int: ...
    @overload
    @staticmethod
    def DotProduct(point1: Point, point2: Point) -> int: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Point) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def Length(self) -> float: ...
    @property
    def LengthSquared(self) -> int: ...
    @property
    def Normal(self) -> Point: ...
    @property
    def UnitVector(self) -> PointF: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Max(point1: Point, point2: Point) -> Point: ...
    @overload
    @staticmethod
    def Min(point1: Point, point2: Point) -> Point: ...
    @overload
    def Offset(self, point: Point) -> None: ...
    @overload
    def Offset(self, x: int, y: int) -> None: ...
    @overload
    @staticmethod
    def Offset(point: Point, offset: Point) -> Point: ...
    @overload
    @staticmethod
    def Offset(point: Point, x: int, y: int) -> Point: ...
    @overload
    def __add__(point1: Point, point2: Point) -> Point: ...
    @overload
    def __add__(point: Point, size: Size) -> Point: ...
    @overload
    def __add__(point: Point, value: int) -> Point: ...
    @overload
    def __truediv__(point: Point, value: int) -> Point: ...
    @overload
    def __truediv__(point: Point, size: Size) -> Point: ...
    @overload
    def __eq__(point1: Point, point2: Point) -> bool: ...
    @overload
    def op_Explicit(point: PointF) -> Point: ...
    @overload
    def op_Explicit(size: Size) -> Point: ...
    @overload
    def __ne__(point1: Point, point2: Point) -> bool: ...
    @overload
    def __rmul__(point: Point, factor: int) -> Point: ...
    @overload
    def __mul__(point: Point, size: Size) -> Point: ...
    @overload
    def __mul__(point: Point, factor: float) -> PointF: ...
    @overload
    def __mul__(point: Point, factor: int) -> Point: ...
    @overload
    def __mul__(point1: Point, point2: Point) -> Point: ...
    @overload
    def __sub__(point: Point, size: Size) -> Point: ...
    @overload
    def __sub__(point1: Point, point2: Point) -> Point: ...
    @overload
    def __sub__(point: Point, value: int) -> Point: ...
    @overload
    def __neg__(point: Point) -> Point: ...
    @overload
    def Restrict(self, rectangle: Rectangle) -> None: ...
    @overload
    @staticmethod
    def Restrict(point: Point, rectangle: Rectangle) -> Point: ...
    @overload
    @staticmethod
    def Round(point: PointF) -> Point: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Truncate(point: PointF) -> Point: ...
    @overload
    @staticmethod
    def UnitVectorAtAngle(angle: float) -> PointF: ...


class PointF:
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, point: Point): ...
    @overload
    def __init__(self, x: float, y: float): ...
    Empty: PointF
    @overload
    @staticmethod
    def Abs(point: PointF) -> PointF: ...
    @overload
    def AngleTo(self, destination: PointF) -> float: ...
    @overload
    def Distance(self, point: PointF) -> float: ...
    @overload
    @staticmethod
    def Distance(point1: PointF, point2: PointF) -> float: ...
    @overload
    def DotProduct(self, point: PointF) -> float: ...
    @overload
    @staticmethod
    def DotProduct(point1: PointF, point2: PointF) -> float: ...
    @overload
    def Equals(self, other: PointF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Angle(self) -> float: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def Length(self) -> float: ...
    @property
    def LengthSquared(self) -> float: ...
    @property
    def Normal(self) -> PointF: ...
    @property
    def UnitVector(self) -> PointF: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def LengthTo(self, destination: PointF) -> float: ...
    @overload
    @staticmethod
    def Max(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    @staticmethod
    def Min(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def Offset(self, offset: PointF) -> None: ...
    @overload
    @staticmethod
    def Offset(point: PointF, offset: PointF) -> PointF: ...
    @overload
    def Offset(self, x: float, y: float) -> None: ...
    @overload
    @staticmethod
    def Offset(point: PointF, x: float, y: float) -> PointF: ...
    @overload
    def __add__(point: PointF, value: float) -> PointF: ...
    @overload
    def __add__(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def __add__(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def __truediv__(point: PointF, value: float) -> PointF: ...
    @overload
    def __truediv__(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def __eq__(point1: PointF, point2: PointF) -> bool: ...
    @overload
    def op_Explicit(size: SizeF) -> PointF: ...
    @overload
    def op_Implicit(point: Point) -> PointF: ...
    @overload
    def __ne__(point1: PointF, point2: PointF) -> bool: ...
    @overload
    def __mul__(point: PointF, factor: float) -> PointF: ...
    @overload
    def __mul__(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def __mul__(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def __rmul__(point: PointF, factor: float) -> PointF: ...
    @overload
    def __sub__(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def __sub__(point: PointF, value: float) -> PointF: ...
    @overload
    def __sub__(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def __neg__(point: PointF) -> PointF: ...
    @overload
    def Restrict(self, rectangle: RectangleF) -> None: ...
    @overload
    @staticmethod
    def Restrict(point: Point, rectangle: Rectangle) -> Point: ...
    @overload
    def Rotate(self, angle: float) -> None: ...
    @overload
    @staticmethod
    def Rotate(point: PointF, angle: float) -> PointF: ...
    @X.setter
    def X(self, value: float) -> None: ...
    @Y.setter
    def Y(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UnitVectorAtAngle(angle: float) -> PointF: ...


from System import Func
class RadialGradientBrush(Brush):
    @overload
    def __init__(self, startColor: Color, endColor: Color, center: PointF, gradientOrigin: PointF, radius: SizeF): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Instantiator() -> Func: ...
    @property
    def Transform(self) -> IMatrix: ...
    @property
    def Wrap(self) -> GradientWrapMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @ControlObject.setter
    def ControlObject(self, value: object) -> None: ...
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @Wrap.setter
    def Wrap(self, value: GradientWrapMode) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Rectangle:
    @overload
    def __init__(self, size: Size): ...
    @overload
    def __init__(self, rectangle: RectangleF): ...
    @overload
    def __init__(self, start: Point, end: Point): ...
    @overload
    def __init__(self, location: Point, size: Size): ...
    @overload
    def __init__(self, x: int, y: int, width: int, height: int): ...
    Empty: Rectangle
    @overload
    def Align(self, gridSize: Size) -> None: ...
    @overload
    def Align(self, gridWidth: int, gridHeight: int) -> None: ...
    @overload
    @staticmethod
    def Align(rectangle: Rectangle, gridSize: Size) -> Rectangle: ...
    @overload
    @staticmethod
    def Align(rectangle: Rectangle, gridWidth: int, gridHeight: int) -> Rectangle: ...
    @overload
    @staticmethod
    def Ceiling(rectangle: RectangleF) -> Rectangle: ...
    @overload
    def Contains(self, point: Point) -> bool: ...
    @overload
    def Contains(self, rectangle: Rectangle) -> bool: ...
    @overload
    def Contains(self, x: int, y: int) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Rectangle) -> bool: ...
    @overload
    @staticmethod
    def FromCenter(center: Point, size: Size) -> Rectangle: ...
    @overload
    @staticmethod
    def FromSides(left: int, top: int, right: int, bottom: int) -> Rectangle: ...
    @property
    def Bottom(self) -> int: ...
    @property
    def BottomLeft(self) -> Point: ...
    @property
    def BottomRight(self) -> Point: ...
    @property
    def Center(self) -> Point: ...
    @property
    def EndLocation(self) -> Point: ...
    @property
    def Height(self) -> int: ...
    @property
    def InnerBottom(self) -> int: ...
    @property
    def InnerBottomLeft(self) -> Point: ...
    @property
    def InnerBottomRight(self) -> Point: ...
    @property
    def InnerRight(self) -> int: ...
    @property
    def InnerTopRight(self) -> Point: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MiddleBottom(self) -> Point: ...
    @property
    def MiddleLeft(self) -> Point: ...
    @property
    def MiddleRight(self) -> Point: ...
    @property
    def MiddleTop(self) -> Point: ...
    @property
    def MiddleX(self) -> int: ...
    @property
    def MiddleY(self) -> int: ...
    @property
    def Right(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Top(self) -> int: ...
    @property
    def TopLeft(self) -> Point: ...
    @property
    def TopRight(self) -> Point: ...
    @property
    def Width(self) -> int: ...
    @property
    def X(self) -> int: ...
    @property
    def Y(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Inflate(self, size: Size) -> None: ...
    @overload
    @staticmethod
    def Inflate(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def Inflate(self, width: int, height: int) -> None: ...
    @overload
    @staticmethod
    def Inflate(rectangle: Rectangle, width: int, height: int) -> Rectangle: ...
    @overload
    def Inset(self, padding: Padding) -> None: ...
    @overload
    @staticmethod
    def Inset(rectangle: Rectangle, padding: Padding) -> Rectangle: ...
    @overload
    def Intersect(self, rectangle: Rectangle) -> None: ...
    @overload
    @staticmethod
    def Intersect(rect1: Rectangle, rect2: Rectangle) -> Rectangle: ...
    @overload
    def Intersects(self, rectangle: Rectangle) -> bool: ...
    @overload
    def Normalize(self) -> None: ...
    @overload
    def Offset(self, size: Size) -> None: ...
    @overload
    def Offset(self, point: Point) -> None: ...
    @overload
    @staticmethod
    def Offset(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    @staticmethod
    def Offset(rectangle: Rectangle, point: Point) -> Rectangle: ...
    @overload
    def Offset(self, x: int, y: int) -> None: ...
    @overload
    @staticmethod
    def Offset(rectangle: Rectangle, x: int, y: int) -> Rectangle: ...
    @overload
    def __add__(rectangle: Rectangle, offset: Point) -> Rectangle: ...
    @overload
    def __add__(rectangle: Rectangle, offset: Size) -> Rectangle: ...
    @overload
    def __add__(rectangle: Rectangle, padding: Padding) -> Rectangle: ...
    @overload
    def __truediv__(rectangle: Rectangle, factor: int) -> Rectangle: ...
    @overload
    def __truediv__(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def __eq__(rect1: Rectangle, rect2: Rectangle) -> bool: ...
    @overload
    def op_Explicit(rectangle: RectangleF) -> Rectangle: ...
    @overload
    def __ne__(rect1: Rectangle, rect2: Rectangle) -> bool: ...
    @overload
    def __mul__(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def __mul__(rectangle: Rectangle, factor: int) -> Rectangle: ...
    @overload
    def __sub__(rectangle: Rectangle, padding: Padding) -> Rectangle: ...
    @overload
    def __sub__(rectangle: Rectangle, offset: Point) -> Rectangle: ...
    @overload
    def __sub__(rectangle: Rectangle, offset: Size) -> Rectangle: ...
    @overload
    def Restrict(self, size: Size) -> None: ...
    @overload
    def Restrict(self, rectangle: Rectangle) -> None: ...
    @overload
    def Restrict(self, location: Point, size: Size) -> None: ...
    @overload
    @staticmethod
    def Restrict(rectangle: Rectangle, restrict: Rectangle) -> Rectangle: ...
    @overload
    @staticmethod
    def Restrict(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    @staticmethod
    def Round(rectangle: RectangleF) -> Rectangle: ...
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @BottomLeft.setter
    def BottomLeft(self, value: Point) -> None: ...
    @BottomRight.setter
    def BottomRight(self, value: Point) -> None: ...
    @Center.setter
    def Center(self, value: Point) -> None: ...
    @EndLocation.setter
    def EndLocation(self, value: Point) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @InnerBottom.setter
    def InnerBottom(self, value: int) -> None: ...
    @InnerBottomLeft.setter
    def InnerBottomLeft(self, value: Point) -> None: ...
    @InnerBottomRight.setter
    def InnerBottomRight(self, value: Point) -> None: ...
    @InnerRight.setter
    def InnerRight(self, value: int) -> None: ...
    @InnerTopRight.setter
    def InnerTopRight(self, value: Point) -> None: ...
    @Left.setter
    def Left(self, value: int) -> None: ...
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @MiddleBottom.setter
    def MiddleBottom(self, value: Point) -> None: ...
    @MiddleLeft.setter
    def MiddleLeft(self, value: Point) -> None: ...
    @MiddleRight.setter
    def MiddleRight(self, value: Point) -> None: ...
    @MiddleTop.setter
    def MiddleTop(self, value: Point) -> None: ...
    @MiddleX.setter
    def MiddleX(self, value: int) -> None: ...
    @MiddleY.setter
    def MiddleY(self, value: int) -> None: ...
    @Right.setter
    def Right(self, value: int) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Top.setter
    def Top(self, value: int) -> None: ...
    @TopLeft.setter
    def TopLeft(self, value: Point) -> None: ...
    @TopRight.setter
    def TopRight(self, value: Point) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @X.setter
    def X(self, value: int) -> None: ...
    @Y.setter
    def Y(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Truncate(rectangle: RectangleF) -> Rectangle: ...
    @overload
    def Union(self, rectangle: Rectangle) -> None: ...
    @overload
    @staticmethod
    def Union(rect1: Rectangle, rect2: Rectangle) -> Rectangle: ...


class RectangleF:
    @overload
    def __init__(self, rectangle: Rectangle): ...
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, start: PointF, end: PointF): ...
    @overload
    def __init__(self, location: PointF, size: SizeF): ...
    @overload
    def __init__(self, x: float, y: float, width: float, height: float): ...
    Empty: RectangleF
    @overload
    def Align(self, gridSize: SizeF) -> None: ...
    @overload
    def Align(self, gridWidth: float, gridHeight: float) -> None: ...
    @overload
    @staticmethod
    def Align(rectangle: RectangleF, gridSize: SizeF) -> RectangleF: ...
    @overload
    @staticmethod
    def Align(rectangle: RectangleF, gridWidth: float, gridHeight: float) -> RectangleF: ...
    @overload
    def Contains(self, point: PointF) -> bool: ...
    @overload
    def Contains(self, rectangle: RectangleF) -> bool: ...
    @overload
    def Contains(self, x: float, y: float) -> bool: ...
    @overload
    @staticmethod
    def Distance(rect: RectangleF, point: PointF) -> SizeF: ...
    @overload
    @staticmethod
    def Distance(rect1: RectangleF, rect2: RectangleF) -> SizeF: ...
    @overload
    def Equals(self, other: RectangleF) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def FromCenter(center: PointF, size: SizeF) -> RectangleF: ...
    @overload
    @staticmethod
    def FromSides(left: float, top: float, right: float, bottom: float) -> RectangleF: ...
    @property
    def Bottom(self) -> float: ...
    @property
    def BottomLeft(self) -> PointF: ...
    @property
    def BottomRight(self) -> PointF: ...
    @property
    def Center(self) -> PointF: ...
    @property
    def EndLocation(self) -> PointF: ...
    @property
    def Height(self) -> float: ...
    @property
    def InnerBottom(self) -> float: ...
    @property
    def InnerBottomLeft(self) -> PointF: ...
    @property
    def InnerBottomRight(self) -> PointF: ...
    @property
    def InnerRight(self) -> float: ...
    @property
    def InnerTopRight(self) -> PointF: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def Left(self) -> float: ...
    @property
    def Location(self) -> PointF: ...
    @property
    def MiddleBottom(self) -> PointF: ...
    @property
    def MiddleLeft(self) -> PointF: ...
    @property
    def MiddleRight(self) -> PointF: ...
    @property
    def MiddleTop(self) -> PointF: ...
    @property
    def MiddleX(self) -> float: ...
    @property
    def MiddleY(self) -> float: ...
    @property
    def Right(self) -> float: ...
    @property
    def Size(self) -> SizeF: ...
    @property
    def Top(self) -> float: ...
    @property
    def TopLeft(self) -> PointF: ...
    @property
    def TopRight(self) -> PointF: ...
    @property
    def Width(self) -> float: ...
    @property
    def X(self) -> float: ...
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def Inflate(self, size: SizeF) -> None: ...
    @overload
    @staticmethod
    def Inflate(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def Inflate(self, width: float, height: float) -> None: ...
    @overload
    @staticmethod
    def Inflate(rectangle: RectangleF, width: float, height: float) -> RectangleF: ...
    @overload
    def Inset(self, padding: PaddingF) -> None: ...
    @overload
    @staticmethod
    def Inset(rectangle: RectangleF, padding: PaddingF) -> RectangleF: ...
    @overload
    def Intersect(self, rectangle: RectangleF) -> None: ...
    @overload
    @staticmethod
    def Intersect(rect1: RectangleF, rect2: RectangleF) -> RectangleF: ...
    @overload
    def Intersects(self, rectangle: RectangleF) -> bool: ...
    @overload
    def Normalize(self) -> None: ...
    @overload
    def Offset(self, point: PointF) -> None: ...
    @overload
    def Offset(self, size: SizeF) -> None: ...
    @overload
    @staticmethod
    def Offset(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    @staticmethod
    def Offset(rectangle: RectangleF, point: PointF) -> RectangleF: ...
    @overload
    def Offset(self, x: float, y: float) -> None: ...
    @overload
    @staticmethod
    def Offset(rectangle: RectangleF, x: float, y: float) -> RectangleF: ...
    @overload
    def __add__(rectangle: RectangleF, padding: PaddingF) -> RectangleF: ...
    @overload
    def __add__(rectangle: RectangleF, offset: SizeF) -> RectangleF: ...
    @overload
    def __add__(rectangle: RectangleF, offset: PointF) -> RectangleF: ...
    @overload
    def __truediv__(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def __truediv__(rectangle: RectangleF, factor: float) -> RectangleF: ...
    @overload
    def __eq__(rect1: RectangleF, rect2: RectangleF) -> bool: ...
    @overload
    def op_Implicit(rectangle: Rectangle) -> RectangleF: ...
    @overload
    def __ne__(rect1: RectangleF, rect2: RectangleF) -> bool: ...
    @overload
    def __mul__(rectangle: RectangleF, factor: float) -> RectangleF: ...
    @overload
    def __mul__(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def __sub__(rectangle: RectangleF, padding: PaddingF) -> RectangleF: ...
    @overload
    def __sub__(rectangle: RectangleF, offset: SizeF) -> RectangleF: ...
    @overload
    def __sub__(rectangle: RectangleF, offset: PointF) -> RectangleF: ...
    @overload
    def Restrict(self, rectangle: RectangleF) -> None: ...
    @overload
    def Restrict(self, size: SizeF) -> None: ...
    @overload
    @staticmethod
    def Restrict(rectangle: Rectangle, restrict: Rectangle) -> Rectangle: ...
    @overload
    def Restrict(self, point: PointF, size: SizeF) -> None: ...
    @Bottom.setter
    def Bottom(self, value: float) -> None: ...
    @BottomLeft.setter
    def BottomLeft(self, value: PointF) -> None: ...
    @BottomRight.setter
    def BottomRight(self, value: PointF) -> None: ...
    @Center.setter
    def Center(self, value: PointF) -> None: ...
    @EndLocation.setter
    def EndLocation(self, value: PointF) -> None: ...
    @Height.setter
    def Height(self, value: float) -> None: ...
    @InnerBottom.setter
    def InnerBottom(self, value: float) -> None: ...
    @InnerBottomLeft.setter
    def InnerBottomLeft(self, value: PointF) -> None: ...
    @InnerBottomRight.setter
    def InnerBottomRight(self, value: PointF) -> None: ...
    @InnerRight.setter
    def InnerRight(self, value: float) -> None: ...
    @InnerTopRight.setter
    def InnerTopRight(self, value: PointF) -> None: ...
    @Left.setter
    def Left(self, value: float) -> None: ...
    @Location.setter
    def Location(self, value: PointF) -> None: ...
    @MiddleBottom.setter
    def MiddleBottom(self, value: PointF) -> None: ...
    @MiddleLeft.setter
    def MiddleLeft(self, value: PointF) -> None: ...
    @MiddleRight.setter
    def MiddleRight(self, value: PointF) -> None: ...
    @MiddleTop.setter
    def MiddleTop(self, value: PointF) -> None: ...
    @MiddleX.setter
    def MiddleX(self, value: float) -> None: ...
    @MiddleY.setter
    def MiddleY(self, value: float) -> None: ...
    @Right.setter
    def Right(self, value: float) -> None: ...
    @Size.setter
    def Size(self, value: SizeF) -> None: ...
    @Top.setter
    def Top(self, value: float) -> None: ...
    @TopLeft.setter
    def TopLeft(self, value: PointF) -> None: ...
    @TopRight.setter
    def TopRight(self, value: PointF) -> None: ...
    @Width.setter
    def Width(self, value: float) -> None: ...
    @X.setter
    def X(self, value: float) -> None: ...
    @Y.setter
    def Y(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Union(self, rectangle: RectangleF) -> None: ...
    @overload
    @staticmethod
    def Union(rect1: RectangleF, rect2: RectangleF) -> RectangleF: ...


from System import IntPtr
from System import EventHandler
class Region(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Exclude(self, rectangle: Rectangle) -> None: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Reset(self) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    def Set(self, rectangle: Rectangle) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Size:
    @overload
    def __init__(self, point: Point): ...
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, width: int, height: int): ...
    Empty: Size
    MaxValue: Size
    MinValue: Size
    @overload
    @staticmethod
    def Abs(size: Size) -> Size: ...
    @overload
    @staticmethod
    def Ceiling(size: SizeF) -> Size: ...
    @overload
    def Contains(self, point: Point) -> bool: ...
    @overload
    def Contains(self, x: int, y: int) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: Size) -> bool: ...
    @overload
    def FitTo(self, constraint: Size) -> Size: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Max(size1: Size, size2: Size) -> Size: ...
    @overload
    @staticmethod
    def Min(size1: Size, size2: Size) -> Size: ...
    @overload
    def __add__(size: Size, value: int) -> Size: ...
    @overload
    def __add__(size1: Size, size2: Size) -> Size: ...
    @overload
    def __add__(size: Size, point: Point) -> Size: ...
    @overload
    def __truediv__(size1: Size, size2: Size) -> Size: ...
    @overload
    def __truediv__(size: Size, factor: int) -> Size: ...
    @overload
    def __eq__(size1: Size, size2: Size) -> bool: ...
    @overload
    def op_Explicit(size: SizeF) -> Size: ...
    @overload
    def op_Explicit(point: Point) -> Size: ...
    @overload
    def __ne__(size1: Size, size2: Size) -> bool: ...
    @overload
    def __rmul__(size: Size, factor: int) -> Size: ...
    @overload
    def __mul__(size: Size, factor: float) -> SizeF: ...
    @overload
    def __mul__(size1: Size, size2: Size) -> Size: ...
    @overload
    def __mul__(size: Size, factor: int) -> Size: ...
    @overload
    def __sub__(size1: Size, size2: Size) -> Size: ...
    @overload
    def __sub__(size: Size, point: Point) -> Size: ...
    @overload
    def __sub__(size: Size, value: int) -> Size: ...
    @overload
    def __neg__(size: Size) -> Size: ...
    @overload
    @staticmethod
    def Round(size: SizeF) -> Size: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Truncate(size: SizeF) -> Size: ...


class SizeF:
    @overload
    def __init__(self, point: PointF): ...
    @overload
    def __init__(self, width: float, height: float): ...
    Empty: SizeF
    MaxValue: SizeF
    MinValue: SizeF
    PositiveInfinity: SizeF
    NegativeInfinity: SizeF
    @overload
    @staticmethod
    def Abs(size: SizeF) -> SizeF: ...
    @overload
    def Contains(self, point: PointF) -> bool: ...
    @overload
    def Contains(self, x: float, y: float) -> bool: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def Equals(self, other: SizeF) -> bool: ...
    @overload
    def FitTo(self, constraint: SizeF) -> SizeF: ...
    @property
    def Height(self) -> float: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsZero(self) -> bool: ...
    @property
    def Width(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Max(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    @staticmethod
    def Min(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __add__(size: SizeF, value: float) -> SizeF: ...
    @overload
    def __add__(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __truediv__(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __truediv__(size: SizeF, factor: float) -> SizeF: ...
    @overload
    def __eq__(size1: SizeF, size2: SizeF) -> bool: ...
    @overload
    def op_Explicit(point: PointF) -> SizeF: ...
    @overload
    def op_Implicit(size: Size) -> SizeF: ...
    @overload
    def __ne__(size1: SizeF, size2: SizeF) -> bool: ...
    @overload
    def __rmul__(size: SizeF, factor: float) -> SizeF: ...
    @overload
    def __mul__(size: SizeF, factor: float) -> SizeF: ...
    @overload
    def __mul__(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __sub__(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __sub__(size: SizeF, value: float) -> SizeF: ...
    @overload
    def __neg__(size: SizeF) -> SizeF: ...
    @Height.setter
    def Height(self, value: float) -> None: ...
    @Width.setter
    def Width(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


from System import Func
class SolidBrush(Brush):
    @overload
    def __init__(self, color: Color): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Instantiator() -> Func: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @ControlObject.setter
    def ControlObject(self, value: object) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SystemColors:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def Control() -> Color: ...
    @property
    def ControlBackground() -> Color: ...
    @property
    def ControlText() -> Color: ...
    @property
    def DisabledText() -> Color: ...
    @property
    def Highlight() -> Color: ...
    @property
    def HighlightText() -> Color: ...
    @property
    def LinkText() -> Color: ...
    @property
    def Selection() -> Color: ...
    @property
    def SelectionText() -> Color: ...
    @property
    def WindowBackground() -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class SystemFont(Enum):
    Default = 0
    Bold = 1
    Label = 2
    TitleBar = 3
    ToolTip = 4
    MenuBar = 5
    Menu = 6
    Message = 7
    Palette = 8
    StatusBar = 9
    User = 10


from System import Nullable
class SystemFonts:
    @overload
    @staticmethod
    def Bold(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Cached(systemFont: SystemFont, size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    @staticmethod
    def Default(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    @staticmethod
    def Label(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Menu(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def MenuBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Message(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Palette(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def StatusBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def TitleBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def ToolTip(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def User(size: Nullable, decoration: FontDecoration) -> Font: ...


class SystemIcons:
    @overload
    def Equals(self, obj: object) -> bool: ...
    @overload
    @staticmethod
    def Get(type: SystemIconType, size: SystemIconSize) -> Icon: ...
    @overload
    @staticmethod
    def GetFileIcon(fileName: str, size: SystemIconSize) -> Icon: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @overload
    def ToString(self) -> str: ...


class SystemIconSize(Enum):
    Large = 0
    Small = 1


class SystemIconType(Enum):
    OpenDirectory = 0
    CloseDirectory = 1
    Question = 2
    Error = 3
    Information = 4
    Warning = 5


from System import Func
class TextureBrush(Brush):
    @overload
    def __init__(self, image: Image, opacity: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: object) -> bool: ...
    @property
    def ControlObject(self) -> object: ...
    @property
    def Handler(self) -> object: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Instantiator() -> Func: ...
    @property
    def Opacity(self) -> float: ...
    @property
    def Transform(self) -> IMatrix: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> type: ...
    @ControlObject.setter
    def ControlObject(self, value: object) -> None: ...
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @overload
    def ToString(self) -> str: ...
