from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum



class Bitmap(Image):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, bytes: Iterable[Byte]): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, size: Size, pixelFormat: PixelFormat): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat): ...
    @overload
    def __init__(self, width: int, height: int, graphics: Graphics): ...
    @overload
    def __init__(self, image: Image, width: Nullable, height: Nullable, interpolation: ImageInterpolation): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat, data: Iterable[Color]): ...
    @overload
    def __init__(self, width: int, height: int, pixelFormat: PixelFormat, data: Iterable[int]): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Clone(self, rectangle: Nullable) -> Bitmap: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, assembly: Assembly) -> Bitmap: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, type: Type) -> Bitmap: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPixel(self, position: Point) -> Color: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Lock(self) -> BitmapData: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Save(self, stream: Stream, format: ImageFormat) -> None: ...
    @overload
    def Save(self, fileName: str, format: ImageFormat) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def SetPixel(self, position: Point, color: Color) -> None: ...
    @overload
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    @overload
    def ToByteArray(self, imageFormat: ImageFormat) -> Iterable[Byte]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WithSize(self, fittingSize: Size) -> Icon: ...
    @overload
    def WithSize(self, width: int, height: int) -> Icon: ...


class BitmapData:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BitsPerPixel(self) -> int: ...
    @overload
    @property
    def BytesPerPixel(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Data(self) -> IntPtr: ...
    @overload
    @property
    def Flipped(self) -> bool: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def PremultipliedAlpha(self) -> bool: ...
    @overload
    @property
    def ScanWidth(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPixel(self, position: Point) -> Color: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def GetPixels(self) -> Iterable[Color]: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def SetPixel(self, position: Point, color: Color) -> None: ...
    @overload
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    @overload
    def SetPixels(self, pixels: Iterable[Color]) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TranslateArgbToData(self, argb: int) -> int: ...
    @overload
    def TranslateDataToArgb(self, bitmapData: int) -> int: ...


class Brush:
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ControlObject.setter
    def ControlObject(self, value: Object) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Brushes:
    @overload
    @staticmethod
    def Cached(color: Color) -> SolidBrush: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AliceBlue() -> SolidBrush: ...
    @overload
    @property
    def AntiqueWhite() -> SolidBrush: ...
    @overload
    @property
    def Aqua() -> SolidBrush: ...
    @overload
    @property
    def Aquamarine() -> SolidBrush: ...
    @overload
    @property
    def Azure() -> SolidBrush: ...
    @overload
    @property
    def Beige() -> SolidBrush: ...
    @overload
    @property
    def Bisque() -> SolidBrush: ...
    @overload
    @property
    def Black() -> SolidBrush: ...
    @overload
    @property
    def BlanchedAlmond() -> SolidBrush: ...
    @overload
    @property
    def Blue() -> SolidBrush: ...
    @overload
    @property
    def BlueViolet() -> SolidBrush: ...
    @overload
    @property
    def Brown() -> SolidBrush: ...
    @overload
    @property
    def BurlyWood() -> SolidBrush: ...
    @overload
    @property
    def CadetBlue() -> SolidBrush: ...
    @overload
    @property
    def Chartreuse() -> SolidBrush: ...
    @overload
    @property
    def Chocolate() -> SolidBrush: ...
    @overload
    @property
    def Coral() -> SolidBrush: ...
    @overload
    @property
    def CornflowerBlue() -> SolidBrush: ...
    @overload
    @property
    def Cornsilk() -> SolidBrush: ...
    @overload
    @property
    def Crimson() -> SolidBrush: ...
    @overload
    @property
    def Cyan() -> SolidBrush: ...
    @overload
    @property
    def DarkBlue() -> SolidBrush: ...
    @overload
    @property
    def DarkCyan() -> SolidBrush: ...
    @overload
    @property
    def DarkGoldenrod() -> SolidBrush: ...
    @overload
    @property
    def DarkGray() -> SolidBrush: ...
    @overload
    @property
    def DarkGreen() -> SolidBrush: ...
    @overload
    @property
    def DarkKhaki() -> SolidBrush: ...
    @overload
    @property
    def DarkMagenta() -> SolidBrush: ...
    @overload
    @property
    def DarkOliveGreen() -> SolidBrush: ...
    @overload
    @property
    def DarkOrange() -> SolidBrush: ...
    @overload
    @property
    def DarkOrchid() -> SolidBrush: ...
    @overload
    @property
    def DarkRed() -> SolidBrush: ...
    @overload
    @property
    def DarkSalmon() -> SolidBrush: ...
    @overload
    @property
    def DarkSeaGreen() -> SolidBrush: ...
    @overload
    @property
    def DarkSlateBlue() -> SolidBrush: ...
    @overload
    @property
    def DarkSlateGray() -> SolidBrush: ...
    @overload
    @property
    def DarkTurquoise() -> SolidBrush: ...
    @overload
    @property
    def DarkViolet() -> SolidBrush: ...
    @overload
    @property
    def DeepPink() -> SolidBrush: ...
    @overload
    @property
    def DeepSkyBlue() -> SolidBrush: ...
    @overload
    @property
    def DimGray() -> SolidBrush: ...
    @overload
    @property
    def DodgerBlue() -> SolidBrush: ...
    @overload
    @property
    def Firebrick() -> SolidBrush: ...
    @overload
    @property
    def FloralWhite() -> SolidBrush: ...
    @overload
    @property
    def ForestGreen() -> SolidBrush: ...
    @overload
    @property
    def Fuchsia() -> SolidBrush: ...
    @overload
    @property
    def Gainsboro() -> SolidBrush: ...
    @overload
    @property
    def GhostWhite() -> SolidBrush: ...
    @overload
    @property
    def Gold() -> SolidBrush: ...
    @overload
    @property
    def Goldenrod() -> SolidBrush: ...
    @overload
    @property
    def Gray() -> SolidBrush: ...
    @overload
    @property
    def Green() -> SolidBrush: ...
    @overload
    @property
    def GreenYellow() -> SolidBrush: ...
    @overload
    @property
    def Honeydew() -> SolidBrush: ...
    @overload
    @property
    def HotPink() -> SolidBrush: ...
    @overload
    @property
    def IndianRed() -> SolidBrush: ...
    @overload
    @property
    def Indigo() -> SolidBrush: ...
    @overload
    @property
    def Ivory() -> SolidBrush: ...
    @overload
    @property
    def Khaki() -> SolidBrush: ...
    @overload
    @property
    def Lavender() -> SolidBrush: ...
    @overload
    @property
    def LavenderBlush() -> SolidBrush: ...
    @overload
    @property
    def LawnGreen() -> SolidBrush: ...
    @overload
    @property
    def LemonChiffon() -> SolidBrush: ...
    @overload
    @property
    def LightBlue() -> SolidBrush: ...
    @overload
    @property
    def LightCoral() -> SolidBrush: ...
    @overload
    @property
    def LightCyan() -> SolidBrush: ...
    @overload
    @property
    def LightGoldenrodYellow() -> SolidBrush: ...
    @overload
    @property
    def LightGreen() -> SolidBrush: ...
    @overload
    @property
    def LightGrey() -> SolidBrush: ...
    @overload
    @property
    def LightPink() -> SolidBrush: ...
    @overload
    @property
    def LightSalmon() -> SolidBrush: ...
    @overload
    @property
    def LightSeaGreen() -> SolidBrush: ...
    @overload
    @property
    def LightSkyBlue() -> SolidBrush: ...
    @overload
    @property
    def LightSlateGray() -> SolidBrush: ...
    @overload
    @property
    def LightSteelBlue() -> SolidBrush: ...
    @overload
    @property
    def LightYellow() -> SolidBrush: ...
    @overload
    @property
    def Lime() -> SolidBrush: ...
    @overload
    @property
    def LimeGreen() -> SolidBrush: ...
    @overload
    @property
    def Linen() -> SolidBrush: ...
    @overload
    @property
    def Magenta() -> SolidBrush: ...
    @overload
    @property
    def Maroon() -> SolidBrush: ...
    @overload
    @property
    def MediumAquamarine() -> SolidBrush: ...
    @overload
    @property
    def MediumBlue() -> SolidBrush: ...
    @overload
    @property
    def MediumOrchid() -> SolidBrush: ...
    @overload
    @property
    def MediumPurple() -> SolidBrush: ...
    @overload
    @property
    def MediumSeaGreen() -> SolidBrush: ...
    @overload
    @property
    def MediumSlateBlue() -> SolidBrush: ...
    @overload
    @property
    def MediumSpringGreen() -> SolidBrush: ...
    @overload
    @property
    def MediumTurquoise() -> SolidBrush: ...
    @overload
    @property
    def MediumVioletRed() -> SolidBrush: ...
    @overload
    @property
    def MidnightBlue() -> SolidBrush: ...
    @overload
    @property
    def MintCream() -> SolidBrush: ...
    @overload
    @property
    def MistyRose() -> SolidBrush: ...
    @overload
    @property
    def Moccasin() -> SolidBrush: ...
    @overload
    @property
    def NavajoWhite() -> SolidBrush: ...
    @overload
    @property
    def Navy() -> SolidBrush: ...
    @overload
    @property
    def OldLace() -> SolidBrush: ...
    @overload
    @property
    def Olive() -> SolidBrush: ...
    @overload
    @property
    def OliveDrab() -> SolidBrush: ...
    @overload
    @property
    def Orange() -> SolidBrush: ...
    @overload
    @property
    def OrangeRed() -> SolidBrush: ...
    @overload
    @property
    def Orchid() -> SolidBrush: ...
    @overload
    @property
    def PaleGoldenrod() -> SolidBrush: ...
    @overload
    @property
    def PaleGreen() -> SolidBrush: ...
    @overload
    @property
    def PaleTurquoise() -> SolidBrush: ...
    @overload
    @property
    def PaleVioletRed() -> SolidBrush: ...
    @overload
    @property
    def PapayaWhip() -> SolidBrush: ...
    @overload
    @property
    def PeachPuff() -> SolidBrush: ...
    @overload
    @property
    def Peru() -> SolidBrush: ...
    @overload
    @property
    def Pink() -> SolidBrush: ...
    @overload
    @property
    def Plum() -> SolidBrush: ...
    @overload
    @property
    def PowderBlue() -> SolidBrush: ...
    @overload
    @property
    def Purple() -> SolidBrush: ...
    @overload
    @property
    def Red() -> SolidBrush: ...
    @overload
    @property
    def RosyBrown() -> SolidBrush: ...
    @overload
    @property
    def RoyalBlue() -> SolidBrush: ...
    @overload
    @property
    def SaddleBrown() -> SolidBrush: ...
    @overload
    @property
    def Salmon() -> SolidBrush: ...
    @overload
    @property
    def SandyBrown() -> SolidBrush: ...
    @overload
    @property
    def SeaGreen() -> SolidBrush: ...
    @overload
    @property
    def Seashell() -> SolidBrush: ...
    @overload
    @property
    def Sienna() -> SolidBrush: ...
    @overload
    @property
    def Silver() -> SolidBrush: ...
    @overload
    @property
    def SkyBlue() -> SolidBrush: ...
    @overload
    @property
    def SlateBlue() -> SolidBrush: ...
    @overload
    @property
    def SlateGray() -> SolidBrush: ...
    @overload
    @property
    def Snow() -> SolidBrush: ...
    @overload
    @property
    def SpringGreen() -> SolidBrush: ...
    @overload
    @property
    def SteelBlue() -> SolidBrush: ...
    @overload
    @property
    def Tan() -> SolidBrush: ...
    @overload
    @property
    def Teal() -> SolidBrush: ...
    @overload
    @property
    def Thistle() -> SolidBrush: ...
    @overload
    @property
    def Tomato() -> SolidBrush: ...
    @overload
    @property
    def Transparent() -> SolidBrush: ...
    @overload
    @property
    def Turquoise() -> SolidBrush: ...
    @overload
    @property
    def Violet() -> SolidBrush: ...
    @overload
    @property
    def Wheat() -> SolidBrush: ...
    @overload
    @property
    def White() -> SolidBrush: ...
    @overload
    @property
    def WhiteSmoke() -> SolidBrush: ...
    @overload
    @property
    def Yellow() -> SolidBrush: ...
    @overload
    @property
    def YellowGreen() -> SolidBrush: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class Color:
    @overload
    def __init__(self, color: Color, alpha: Nullable): ...
    @overload
    def __init__(self, red: float, green: float, blue: float, alpha: float): ...
    @overload
    def __init__(self, controlObject: Object, red: float, green: float, blue: float, alpha: float): ...
    @overload
    @staticmethod
    def Blend(baseColor: Color, blendColor: Color) -> Color: ...
    @overload
    @staticmethod
    def Blend(baseColor: Color, blendColor: Color, blendFactor: float) -> Color: ...
    @overload
    @staticmethod
    def Distance(value1: Color, value2: Color) -> float: ...
    @overload
    def Equals(self, other: Color) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromArgb(argb: int) -> Color: ...
    @overload
    @staticmethod
    def FromArgb(red: int, green: int, blue: int, alpha: int) -> Color: ...
    @overload
    @staticmethod
    def FromElementId(id: int, alpha: int) -> Color: ...
    @overload
    @staticmethod
    def FromGrayscale(val: float, alpha: float) -> Color: ...
    @overload
    @staticmethod
    def FromPremultipliedArgb(argb: int) -> Color: ...
    @overload
    @staticmethod
    def FromPremultipliedArgb(red: int, green: int, blue: int, alpha: int) -> Color: ...
    @overload
    @staticmethod
    def FromRgb(argb: int) -> Color: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def Ab(self) -> int: ...
    @overload
    @property
    def B(self) -> float: ...
    @overload
    @property
    def Bb(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def G(self) -> float: ...
    @overload
    @property
    def Gb(self) -> int: ...
    @overload
    @property
    def R(self) -> float: ...
    @overload
    @property
    def Rb(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invert(self) -> None: ...
    @overload
    def __eq__(color1: Color, color2: Color) -> bool: ...
    @overload
    def __ne__(color1: Color, color2: Color) -> bool: ...
    @overload
    @staticmethod
    def Parse(value: str) -> Color: ...
    @overload
    @A.setter
    def A(self, value: float) -> None: ...
    @overload
    @Ab.setter
    def Ab(self, value: int) -> None: ...
    @overload
    @B.setter
    def B(self, value: float) -> None: ...
    @overload
    @Bb.setter
    def Bb(self, value: int) -> None: ...
    @overload
    @G.setter
    def G(self, value: float) -> None: ...
    @overload
    @Gb.setter
    def Gb(self, value: int) -> None: ...
    @overload
    @R.setter
    def R(self, value: float) -> None: ...
    @overload
    @Rb.setter
    def Rb(self, value: int) -> None: ...
    @overload
    def ToArgb(self) -> int: ...
    @overload
    def ToArgb(self, style: ColorStyles) -> int: ...
    @overload
    def ToCMYK(self) -> ColorCMYK: ...
    @overload
    def ToElementId(self) -> int: ...
    @overload
    def ToHex(self, includeAlpha: bool) -> str: ...
    @overload
    def ToHex(self, style: ColorStyles) -> str: ...
    @overload
    def ToHSB(self) -> ColorHSB: ...
    @overload
    def ToHSL(self) -> ColorHSL: ...
    @overload
    def ToPremultipliedArgb(self) -> int: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TryParse(value: str) -> Tuple[bool, Color]: ...
    @overload
    @staticmethod
    def TryParse(value: str, style: ColorStyles) -> Tuple[bool, Color]: ...


class ColorCMYK:
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, cyan: float, magenta: float, yellow: float, black: float, alpha: float): ...
    @overload
    @staticmethod
    def Distance(value1: ColorCMYK, value2: ColorCMYK) -> float: ...
    @overload
    def Equals(self, other: ColorCMYK) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def C(self) -> float: ...
    @overload
    @property
    def K(self) -> float: ...
    @overload
    @property
    def M(self) -> float: ...
    @overload
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(color1: ColorCMYK, color2: ColorCMYK) -> bool: ...
    @overload
    def op_Implicit(cmyk: ColorCMYK) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorCMYK: ...
    @overload
    def __ne__(color1: ColorCMYK, color2: ColorCMYK) -> bool: ...
    @overload
    @A.setter
    def A(self, value: float) -> None: ...
    @overload
    @C.setter
    def C(self, value: float) -> None: ...
    @overload
    @K.setter
    def K(self, value: float) -> None: ...
    @overload
    @M.setter
    def M(self, value: float) -> None: ...
    @overload
    @Y.setter
    def Y(self, value: float) -> None: ...
    @overload
    def ToColor(self) -> Color: ...
    @overload
    def ToString(self) -> str: ...


class ColorHSB:
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, brightness: float, alpha: float): ...
    @overload
    @staticmethod
    def Distance(value1: ColorHSB, value2: ColorHSB) -> float: ...
    @overload
    def Equals(self, other: ColorHSB) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def B(self) -> float: ...
    @overload
    @property
    def H(self) -> float: ...
    @overload
    @property
    def S(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(color1: ColorHSB, color2: ColorHSB) -> bool: ...
    @overload
    def op_Implicit(hsb: ColorHSB) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorHSB: ...
    @overload
    def __ne__(color1: ColorHSB, color2: ColorHSB) -> bool: ...
    @overload
    @A.setter
    def A(self, value: float) -> None: ...
    @overload
    @B.setter
    def B(self, value: float) -> None: ...
    @overload
    @H.setter
    def H(self, value: float) -> None: ...
    @overload
    @S.setter
    def S(self, value: float) -> None: ...
    @overload
    def ToColor(self) -> Color: ...
    @overload
    def ToString(self) -> str: ...


class ColorHSL:
    @overload
    def __init__(self, color: Color): ...
    @overload
    def __init__(self, hue: float, saturation: float, luminance: float, alpha: float): ...
    @overload
    @staticmethod
    def Distance(value1: ColorHSL, value2: ColorHSL) -> float: ...
    @overload
    def Equals(self, other: ColorHSL) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def A(self) -> float: ...
    @overload
    @property
    def H(self) -> float: ...
    @overload
    @property
    def L(self) -> float: ...
    @overload
    @property
    def S(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(color1: ColorHSL, color2: ColorHSL) -> bool: ...
    @overload
    def op_Implicit(hsl: ColorHSL) -> Color: ...
    @overload
    def op_Implicit(color: Color) -> ColorHSL: ...
    @overload
    def __ne__(color1: ColorHSL, color2: ColorHSL) -> bool: ...
    @overload
    @A.setter
    def A(self, value: float) -> None: ...
    @overload
    @H.setter
    def H(self, value: float) -> None: ...
    @overload
    @L.setter
    def L(self, value: float) -> None: ...
    @overload
    @S.setter
    def S(self, value: float) -> None: ...
    @overload
    def ToColor(self) -> Color: ...
    @overload
    def ToString(self) -> str: ...


class Colors:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AliceBlue() -> Color: ...
    @overload
    @property
    def AntiqueWhite() -> Color: ...
    @overload
    @property
    def Aqua() -> Color: ...
    @overload
    @property
    def Aquamarine() -> Color: ...
    @overload
    @property
    def Azure() -> Color: ...
    @overload
    @property
    def Beige() -> Color: ...
    @overload
    @property
    def Bisque() -> Color: ...
    @overload
    @property
    def Black() -> Color: ...
    @overload
    @property
    def BlanchedAlmond() -> Color: ...
    @overload
    @property
    def Blue() -> Color: ...
    @overload
    @property
    def BlueViolet() -> Color: ...
    @overload
    @property
    def Brown() -> Color: ...
    @overload
    @property
    def BurlyWood() -> Color: ...
    @overload
    @property
    def CadetBlue() -> Color: ...
    @overload
    @property
    def Chartreuse() -> Color: ...
    @overload
    @property
    def Chocolate() -> Color: ...
    @overload
    @property
    def Coral() -> Color: ...
    @overload
    @property
    def CornflowerBlue() -> Color: ...
    @overload
    @property
    def Cornsilk() -> Color: ...
    @overload
    @property
    def Crimson() -> Color: ...
    @overload
    @property
    def Cyan() -> Color: ...
    @overload
    @property
    def DarkBlue() -> Color: ...
    @overload
    @property
    def DarkCyan() -> Color: ...
    @overload
    @property
    def DarkGoldenrod() -> Color: ...
    @overload
    @property
    def DarkGray() -> Color: ...
    @overload
    @property
    def DarkGreen() -> Color: ...
    @overload
    @property
    def DarkKhaki() -> Color: ...
    @overload
    @property
    def DarkMagenta() -> Color: ...
    @overload
    @property
    def DarkOliveGreen() -> Color: ...
    @overload
    @property
    def DarkOrange() -> Color: ...
    @overload
    @property
    def DarkOrchid() -> Color: ...
    @overload
    @property
    def DarkRed() -> Color: ...
    @overload
    @property
    def DarkSalmon() -> Color: ...
    @overload
    @property
    def DarkSeaGreen() -> Color: ...
    @overload
    @property
    def DarkSlateBlue() -> Color: ...
    @overload
    @property
    def DarkSlateGray() -> Color: ...
    @overload
    @property
    def DarkTurquoise() -> Color: ...
    @overload
    @property
    def DarkViolet() -> Color: ...
    @overload
    @property
    def DeepPink() -> Color: ...
    @overload
    @property
    def DeepSkyBlue() -> Color: ...
    @overload
    @property
    def DimGray() -> Color: ...
    @overload
    @property
    def DodgerBlue() -> Color: ...
    @overload
    @property
    def Firebrick() -> Color: ...
    @overload
    @property
    def FloralWhite() -> Color: ...
    @overload
    @property
    def ForestGreen() -> Color: ...
    @overload
    @property
    def Fuchsia() -> Color: ...
    @overload
    @property
    def Gainsboro() -> Color: ...
    @overload
    @property
    def GhostWhite() -> Color: ...
    @overload
    @property
    def Gold() -> Color: ...
    @overload
    @property
    def Goldenrod() -> Color: ...
    @overload
    @property
    def Gray() -> Color: ...
    @overload
    @property
    def Green() -> Color: ...
    @overload
    @property
    def GreenYellow() -> Color: ...
    @overload
    @property
    def Honeydew() -> Color: ...
    @overload
    @property
    def HotPink() -> Color: ...
    @overload
    @property
    def IndianRed() -> Color: ...
    @overload
    @property
    def Indigo() -> Color: ...
    @overload
    @property
    def Ivory() -> Color: ...
    @overload
    @property
    def Khaki() -> Color: ...
    @overload
    @property
    def Lavender() -> Color: ...
    @overload
    @property
    def LavenderBlush() -> Color: ...
    @overload
    @property
    def LawnGreen() -> Color: ...
    @overload
    @property
    def LemonChiffon() -> Color: ...
    @overload
    @property
    def LightBlue() -> Color: ...
    @overload
    @property
    def LightCoral() -> Color: ...
    @overload
    @property
    def LightCyan() -> Color: ...
    @overload
    @property
    def LightGoldenrodYellow() -> Color: ...
    @overload
    @property
    def LightGreen() -> Color: ...
    @overload
    @property
    def LightGrey() -> Color: ...
    @overload
    @property
    def LightPink() -> Color: ...
    @overload
    @property
    def LightSalmon() -> Color: ...
    @overload
    @property
    def LightSeaGreen() -> Color: ...
    @overload
    @property
    def LightSkyBlue() -> Color: ...
    @overload
    @property
    def LightSlateGray() -> Color: ...
    @overload
    @property
    def LightSteelBlue() -> Color: ...
    @overload
    @property
    def LightYellow() -> Color: ...
    @overload
    @property
    def Lime() -> Color: ...
    @overload
    @property
    def LimeGreen() -> Color: ...
    @overload
    @property
    def Linen() -> Color: ...
    @overload
    @property
    def Magenta() -> Color: ...
    @overload
    @property
    def Maroon() -> Color: ...
    @overload
    @property
    def MediumAquamarine() -> Color: ...
    @overload
    @property
    def MediumBlue() -> Color: ...
    @overload
    @property
    def MediumOrchid() -> Color: ...
    @overload
    @property
    def MediumPurple() -> Color: ...
    @overload
    @property
    def MediumSeaGreen() -> Color: ...
    @overload
    @property
    def MediumSlateBlue() -> Color: ...
    @overload
    @property
    def MediumSpringGreen() -> Color: ...
    @overload
    @property
    def MediumTurquoise() -> Color: ...
    @overload
    @property
    def MediumVioletRed() -> Color: ...
    @overload
    @property
    def MidnightBlue() -> Color: ...
    @overload
    @property
    def MintCream() -> Color: ...
    @overload
    @property
    def MistyRose() -> Color: ...
    @overload
    @property
    def Moccasin() -> Color: ...
    @overload
    @property
    def NavajoWhite() -> Color: ...
    @overload
    @property
    def Navy() -> Color: ...
    @overload
    @property
    def OldLace() -> Color: ...
    @overload
    @property
    def Olive() -> Color: ...
    @overload
    @property
    def OliveDrab() -> Color: ...
    @overload
    @property
    def Orange() -> Color: ...
    @overload
    @property
    def OrangeRed() -> Color: ...
    @overload
    @property
    def Orchid() -> Color: ...
    @overload
    @property
    def PaleGoldenrod() -> Color: ...
    @overload
    @property
    def PaleGreen() -> Color: ...
    @overload
    @property
    def PaleTurquoise() -> Color: ...
    @overload
    @property
    def PaleVioletRed() -> Color: ...
    @overload
    @property
    def PapayaWhip() -> Color: ...
    @overload
    @property
    def PeachPuff() -> Color: ...
    @overload
    @property
    def Peru() -> Color: ...
    @overload
    @property
    def Pink() -> Color: ...
    @overload
    @property
    def Plum() -> Color: ...
    @overload
    @property
    def PowderBlue() -> Color: ...
    @overload
    @property
    def Purple() -> Color: ...
    @overload
    @property
    def Red() -> Color: ...
    @overload
    @property
    def RosyBrown() -> Color: ...
    @overload
    @property
    def RoyalBlue() -> Color: ...
    @overload
    @property
    def SaddleBrown() -> Color: ...
    @overload
    @property
    def Salmon() -> Color: ...
    @overload
    @property
    def SandyBrown() -> Color: ...
    @overload
    @property
    def SeaGreen() -> Color: ...
    @overload
    @property
    def Seashell() -> Color: ...
    @overload
    @property
    def Sienna() -> Color: ...
    @overload
    @property
    def Silver() -> Color: ...
    @overload
    @property
    def SkyBlue() -> Color: ...
    @overload
    @property
    def SlateBlue() -> Color: ...
    @overload
    @property
    def SlateGray() -> Color: ...
    @overload
    @property
    def Snow() -> Color: ...
    @overload
    @property
    def SpringGreen() -> Color: ...
    @overload
    @property
    def SteelBlue() -> Color: ...
    @overload
    @property
    def Tan() -> Color: ...
    @overload
    @property
    def Teal() -> Color: ...
    @overload
    @property
    def Thistle() -> Color: ...
    @overload
    @property
    def Tomato() -> Color: ...
    @overload
    @property
    def Transparent() -> Color: ...
    @overload
    @property
    def Turquoise() -> Color: ...
    @overload
    @property
    def Violet() -> Color: ...
    @overload
    @property
    def Wheat() -> Color: ...
    @overload
    @property
    def White() -> Color: ...
    @overload
    @property
    def WhiteSmoke() -> Color: ...
    @overload
    @property
    def Yellow() -> Color: ...
    @overload
    @property
    def YellowGreen() -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class ColorStyles(Enum):
    # None = 0
    ExcludeAlpha = 1
    AlphaLast = 4
    ShortHex = 8
    All = 13


class DashStyle:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, offset: float, dashes: Iterable[float]): ...
    @overload
    def Equals(self, other: DashStyle) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Dashes(self) -> Iterable[float]: ...
    @overload
    @property
    def IsSolid(self) -> bool: ...
    @overload
    @property
    def Offset(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(style1: DashStyle, style2: DashStyle) -> bool: ...
    @overload
    def __ne__(style1: DashStyle, style2: DashStyle) -> bool: ...
    @overload
    @staticmethod
    def Parse(value: str) -> DashStyle: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TryParse(value: str) -> Tuple[bool, DashStyle]: ...


class DashStyles:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Dash() -> DashStyle: ...
    @overload
    @property
    def DashDot() -> DashStyle: ...
    @overload
    @property
    def DashDotDot() -> DashStyle: ...
    @overload
    @property
    def Dot() -> DashStyle: ...
    @overload
    @property
    def Solid() -> DashStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class FillMode(Enum):
    Alternate = 0
    Winding = 1


class Font(Widget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, systemFont: SystemFont, size: Nullable, decoration: FontDecoration): ...
    @overload
    def __init__(self, typeface: FontTypeface, size: float, decoration: FontDecoration): ...
    @overload
    def __init__(self, family: str, size: float, style: FontStyle, decoration: FontDecoration): ...
    @overload
    def __init__(self, family: FontFamily, size: float, style: FontStyle, decoration: FontDecoration): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromFile(fileName: str, size: float, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def FromStream(stream: Stream, size: float, decoration: FontDecoration) -> Font: ...
    @overload
    @property
    def Ascent(self) -> float: ...
    @overload
    @property
    def Baseline(self) -> float: ...
    @overload
    @property
    def Bold(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Descent(self) -> float: ...
    @overload
    @property
    def Family(self) -> FontFamily: ...
    @overload
    @property
    def FamilyName(self) -> str: ...
    @overload
    @property
    def FontDecoration(self) -> FontDecoration: ...
    @overload
    @property
    def FontStyle(self) -> FontStyle: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Italic(self) -> bool: ...
    @overload
    @property
    def Leading(self) -> float: ...
    @overload
    @property
    def LineHeight(self) -> float: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> float: ...
    @overload
    @property
    def Strikethrough(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Typeface(self) -> FontTypeface: ...
    @overload
    @property
    def Underline(self) -> bool: ...
    @overload
    @property
    def XHeight(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def MeasureString(self, text: str) -> SizeF: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FontDecoration(Enum):
    # None = 0
    Underline = 1
    Strikethrough = 2


class FontFamilies:
    MonospaceFamilyName: str
    SansFamilyName: str
    SerifFamilyName: str
    CursiveFamilyName: str
    FantasyFamilyName: str
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cursive() -> FontFamily: ...
    @overload
    @property
    def Fantasy() -> FontFamily: ...
    @overload
    @property
    def Monospace() -> FontFamily: ...
    @overload
    @property
    def Sans() -> FontFamily: ...
    @overload
    @property
    def Serif() -> FontFamily: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class FontFamily(Widget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, familyName: str): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, other: FontFamily) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromFiles(fileNames: Iterable[str]) -> FontFamily: ...
    @overload
    @staticmethod
    def FromFiles(fileNames: Iterable[str]) -> FontFamily: ...
    @overload
    @staticmethod
    def FromStreams(streams: Iterable[Stream]) -> FontFamily: ...
    @overload
    @staticmethod
    def FromStreams(streams: Iterable[Stream]) -> FontFamily: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def LocalizedName(self) -> str: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Typefaces(self) -> Iterable[FontTypeface]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(value1: FontFamily, value2: FontFamily) -> bool: ...
    @overload
    def __ne__(value1: FontFamily, value2: FontFamily) -> bool: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Fonts:
    @overload
    @staticmethod
    def Cached(familyName: str, size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Cached(family: FontFamily, size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    @staticmethod
    def Cursive(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def Fantasy(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @property
    def AvailableFontFamilies() -> Iterable[FontFamily]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Monospace(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Sans(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Serif(size: float, style: FontStyle, decoration: FontDecoration) -> Font: ...
    @overload
    def ToString(self) -> str: ...


class FontStyle(Enum):
    # None = 0
    Bold = 1
    Italic = 2


from ..Forms import Range
class FontTypeface(Widget):
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, family: FontFamily, handler: IHandler): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: FontTypeface) -> bool: ...
    @overload
    @property
    def Bold(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Family(self) -> FontFamily: ...
    @overload
    @property
    def FontStyle(self) -> FontStyle: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSymbol(self) -> bool: ...
    @overload
    @property
    def Italic(self) -> bool: ...
    @overload
    @property
    def LocalizedName(self) -> str: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def HasCharacterRange(self, range: Range) -> bool: ...
    @overload
    def HasCharacterRange(self, start: int, end: int) -> bool: ...
    @overload
    def HasCharacterRanges(self, ranges: Iterable[Range]) -> bool: ...
    @overload
    def __eq__(value1: FontTypeface, value2: FontTypeface) -> bool: ...
    @overload
    def __ne__(value1: FontTypeface, value2: FontTypeface) -> bool: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FormattedText(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Alignment(self) -> FormattedTextAlignment: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForegroundBrush(self) -> Brush: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def MaximumHeight(self) -> float: ...
    @overload
    @property
    def MaximumSize(self) -> SizeF: ...
    @overload
    @property
    def MaximumWidth(self) -> float: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Trimming(self) -> FormattedTextTrimming: ...
    @overload
    @property
    def Wrap(self) -> FormattedTextWrapMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Measure(self) -> SizeF: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Alignment.setter
    def Alignment(self, value: FormattedTextAlignment) -> None: ...
    @overload
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @overload
    @ForegroundBrush.setter
    def ForegroundBrush(self, value: Brush) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @MaximumHeight.setter
    def MaximumHeight(self, value: float) -> None: ...
    @overload
    @MaximumSize.setter
    def MaximumSize(self, value: SizeF) -> None: ...
    @overload
    @MaximumWidth.setter
    def MaximumWidth(self, value: float) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    @Trimming.setter
    def Trimming(self, value: FormattedTextTrimming) -> None: ...
    @overload
    @Wrap.setter
    def Wrap(self, value: FormattedTextWrapMode) -> None: ...
    @overload
    def ToString(self) -> str: ...


class FormattedTextAlignment(Enum):
    Left = 0
    Right = 1
    Center = 2
    Justify = 3


class FormattedTextTrimming(Enum):
    # None = 0
    CharacterEllipsis = 1
    WordEllipsis = 2


class FormattedTextWrapMode(Enum):
    # None = 0
    Word = 1
    Character = 2


class GradientWrapMode(Enum):
    Pad = 0
    Repeat = 1
    Reflect = 2


class Graphics(Widget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, image: Bitmap): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Clear(self, brush: SolidBrush) -> None: ...
    @overload
    def Clear(self, color: Color) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DrawArc(self, color: Color, rectangle: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, rectangle: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawArc(self, color: Color, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, rectangle: RectangleF) -> None: ...
    @overload
    def DrawEllipse(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def DrawEllipse(self, color: Color, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawImage(self, image: Image, rectangle: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, location: PointF) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: PointF) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: float, y: float) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawInsetRectangle(self, topLeftColor: Color, bottomRightColor: Color, rectangle: RectangleF, width: int) -> None: ...
    @overload
    def DrawLine(self, color: Color, start: PointF, end: PointF) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, start: PointF, end: PointF) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, startx: float, starty: float, endx: float, endy: float) -> None: ...
    @overload
    def DrawLine(self, color: Color, startx: float, starty: float, endx: float, endy: float) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawLines(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawLines(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawPath(self, color: Color, path: IGraphicsPath) -> None: ...
    @overload
    def DrawPath(self, pen: Pen, path: IGraphicsPath) -> None: ...
    @overload
    def DrawPolygon(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawRectangle(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, rectangle: RectangleF) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawRectangle(self, color: Color, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawText(self, formattedText: FormattedText, location: PointF) -> None: ...
    @overload
    def DrawText(self, font: Font, color: Color, location: PointF, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: Brush, location: PointF, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: SolidBrush, location: PointF, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: SolidBrush, x: float, y: float, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: Brush, x: float, y: float, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, color: Color, x: float, y: float, text: str) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: Brush, frame: RectangleF, text: str, wrap: FormattedTextWrapMode, alignment: FormattedTextAlignment, trimming: FormattedTextTrimming) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FillEllipse(self, brush: Brush, rectangle: RectangleF) -> None: ...
    @overload
    def FillEllipse(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def FillEllipse(self, color: Color, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillPath(self, color: Color, path: IGraphicsPath) -> None: ...
    @overload
    def FillPath(self, brush: Brush, path: IGraphicsPath) -> None: ...
    @overload
    def FillPie(self, brush: Brush, rectangle: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillPie(self, color: Color, rectangle: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillPie(self, color: Color, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillPolygon(self, color: Color, points: Iterable[PointF]) -> None: ...
    @overload
    def FillPolygon(self, brush: Brush, points: Iterable[PointF]) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, rectangle: RectangleF) -> None: ...
    @overload
    def FillRectangle(self, color: Color, rectangle: RectangleF) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillRectangle(self, color: Color, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillRectangles(self, brush: Brush, rectangles: Iterable[RectangleF]) -> None: ...
    @overload
    def FillRectangles(self, color: Color, rectangles: Iterable[RectangleF]) -> None: ...
    @overload
    def Flush(self) -> None: ...
    @overload
    @property
    def AntiAlias(self) -> bool: ...
    @overload
    @property
    def ClipBounds(self) -> RectangleF: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def CurrentTransform(self) -> IMatrix: ...
    @overload
    @property
    def DPI(self) -> float: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsRetained(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def PixelOffsetMode(self) -> PixelOffsetMode: ...
    @overload
    @property
    def PixelsPerPoint(self) -> float: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def PointsPerPixel(self) -> float: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsVisible(self, rectangle: RectangleF) -> bool: ...
    @overload
    def MeasureString(self, font: Font, text: str) -> SizeF: ...
    @overload
    def MultiplyTransform(self, matrix: IMatrix) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def ResetClip(self) -> None: ...
    @overload
    def RestoreTransform(self) -> None: ...
    @overload
    def RotateTransform(self, angle: float) -> None: ...
    @overload
    def SaveTransform(self) -> None: ...
    @overload
    def SaveTransformState(self) -> IDisposable: ...
    @overload
    def ScaleTransform(self, scale: SizeF) -> None: ...
    @overload
    def ScaleTransform(self, scale: float) -> None: ...
    @overload
    def ScaleTransform(self, scaleX: float, scaleY: float) -> None: ...
    @overload
    @AntiAlias.setter
    def AntiAlias(self, value: bool) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...
    @overload
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: PixelOffsetMode) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def SetClip(self, rectangle: RectangleF) -> None: ...
    @overload
    def SetClip(self, path: IGraphicsPath) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TranslateTransform(self, offset: PointF) -> None: ...
    @overload
    def TranslateTransform(self, offsetX: float, offsetY: float) -> None: ...


class GraphicsPath:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IGraphicsPath): ...
    @overload
    def AddArc(self, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def AddBezier(self, start: PointF, control1: PointF, control2: PointF, end: PointF) -> None: ...
    @overload
    def AddCurve(self, points: Iterable[PointF], tension: float) -> None: ...
    @overload
    def AddEllipse(self, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def AddLine(self, startX: float, startY: float, endX: float, endY: float) -> None: ...
    @overload
    def AddLines(self, points: Iterable[PointF]) -> None: ...
    @overload
    def AddPath(self, path: IGraphicsPath, connect: bool) -> None: ...
    @overload
    def AddRectangle(self, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def Clone(self) -> IGraphicsPath: ...
    @overload
    def CloseFigure(self) -> None: ...
    @overload
    @staticmethod
    def Create() -> IGraphicsPath: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FillContains(self, point: PointF) -> bool: ...
    @overload
    @property
    def Bounds(self) -> RectangleF: ...
    @overload
    @property
    def CurrentPoint(self) -> PointF: ...
    @overload
    @property
    def FillMode(self) -> FillMode: ...
    @overload
    @property
    def Instantiator() -> Func: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetRoundRect(rectangle: RectangleF, radius: float) -> IGraphicsPath: ...
    @overload
    @staticmethod
    def GetRoundRect(rectangle: RectangleF, nwRadius: float, neRadius: float, seRadius: float, swRadius: float) -> IGraphicsPath: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def LineTo(self, x: float, y: float) -> None: ...
    @overload
    def MoveTo(self, x: float, y: float) -> None: ...
    @overload
    @FillMode.setter
    def FillMode(self, value: FillMode) -> None: ...
    @overload
    def StartFigure(self) -> None: ...
    @overload
    def StrokeContains(self, pen: Pen, point: PointF) -> bool: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Transform(self, matrix: IMatrix) -> None: ...


class GraphicsPathExtensions:
    @overload
    @staticmethod
    def AddArc(path: IGraphicsPath, location: RectangleF, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    @staticmethod
    def AddCurve(path: IGraphicsPath, points: Iterable[PointF]) -> None: ...
    @overload
    @staticmethod
    def AddCurve(path: IGraphicsPath, tension: float, points: Iterable[PointF]) -> None: ...
    @overload
    @staticmethod
    def AddEllipse(path: IGraphicsPath, location: RectangleF) -> None: ...
    @overload
    @staticmethod
    def AddLine(path: IGraphicsPath, start: PointF, end: PointF) -> None: ...
    @overload
    @staticmethod
    def AddLines(path: IGraphicsPath, points: Iterable[PointF]) -> None: ...
    @overload
    @staticmethod
    def AddRectangle(path: IGraphicsPath, location: RectangleF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def LineTo(path: IGraphicsPath, point: PointF) -> None: ...
    @overload
    @staticmethod
    def MoveTo(path: IGraphicsPath, point: PointF) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Icon(Image):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, frames: Iterable[IconFrame]): ...
    @overload
    def __init__(self, frames: Iterable[IconFrame]): ...
    @overload
    def __init__(self, scale: float, bitmap: Bitmap): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, assembly: Assembly) -> Icon: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, type: Type) -> Icon: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Frames(self) -> Iterable[IconFrame]: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetFrame(self, scale: float, fittingSize: Nullable) -> IconFrame: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def WithSize(self, fittingSize: Size) -> Icon: ...
    @overload
    def WithSize(self, width: int, height: int) -> Icon: ...


class IconFrame:
    @overload
    def __init__(self, scale: float, load: Func): ...
    @overload
    def __init__(self, scale: float, stream: Stream): ...
    @overload
    def __init__(self, scale: float, bitmap: Bitmap): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromControlObject(scale: float, controlObject: Object) -> IconFrame: ...
    @overload
    @staticmethod
    def FromResource(scale: float, resourceName: str, assembly: Assembly) -> IconFrame: ...
    @overload
    @property
    def Bitmap(self) -> Bitmap: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def PixelSize(self) -> Size: ...
    @overload
    @property
    def Scale(self) -> float: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class IGraphicsPath:
    @overload
    def AddArc(self, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def AddBezier(self, start: PointF, control1: PointF, control2: PointF, end: PointF) -> None: ...
    @overload
    def AddCurve(self, points: Iterable[PointF], tension: float) -> None: ...
    @overload
    def AddEllipse(self, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def AddLine(self, startX: float, startY: float, endX: float, endY: float) -> None: ...
    @overload
    def AddLines(self, points: Iterable[PointF]) -> None: ...
    @overload
    def AddPath(self, path: IGraphicsPath, connect: bool) -> None: ...
    @overload
    def AddRectangle(self, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def Clone(self) -> IGraphicsPath: ...
    @overload
    def CloseFigure(self) -> None: ...
    @overload
    def FillContains(self, point: PointF) -> bool: ...
    @overload
    @property
    def Bounds(self) -> RectangleF: ...
    @overload
    @property
    def CurrentPoint(self) -> PointF: ...
    @overload
    @property
    def FillMode(self) -> FillMode: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    def LineTo(self, x: float, y: float) -> None: ...
    @overload
    def MoveTo(self, x: float, y: float) -> None: ...
    @overload
    @FillMode.setter
    def FillMode(self, value: FillMode) -> None: ...
    @overload
    def StartFigure(self) -> None: ...
    @overload
    def StrokeContains(self, pen: Pen, point: PointF) -> bool: ...
    @overload
    def Transform(self, matrix: IMatrix) -> None: ...


class IHandler:
    @overload
    def Create(self, frame: IconFrame, stream: Stream) -> Object: ...
    @overload
    def Create(self, frame: IconFrame, load: Func) -> Object: ...
    @overload
    def Create(self, frame: IconFrame, bitmap: Bitmap) -> Object: ...
    @overload
    def GetBitmap(self, frame: IconFrame) -> Bitmap: ...
    @overload
    def GetPixelSize(self, frame: IconFrame) -> Size: ...


class IHandler:
    @overload
    @property
    def Size(self) -> Size: ...


class IHandler:
    @overload
    def Create(self, width: int, height: int, bitsPerPixel: int) -> None: ...
    @overload
    @property
    def Palette(self) -> Palette: ...
    @overload
    def Resize(self, width: int, height: int) -> None: ...
    @overload
    @Palette.setter
    def Palette(self, value: Palette) -> None: ...


class IHandler:
    @overload
    def Create(self, startColor: Color, endColor: Color, center: PointF, gradientOrigin: PointF, radius: SizeF) -> Object: ...
    @overload
    def GetGradientWrap(self, widget: RadialGradientBrush) -> GradientWrapMode: ...
    @overload
    def GetTransform(self, widget: RadialGradientBrush) -> IMatrix: ...
    @overload
    def SetGradientWrap(self, widget: RadialGradientBrush, gradientWrap: GradientWrapMode) -> None: ...
    @overload
    def SetTransform(self, widget: RadialGradientBrush, transform: IMatrix) -> None: ...


class IHandler:
    @overload
    def Create(self, color: Color) -> Object: ...
    @overload
    def GetColor(self, widget: SolidBrush) -> Color: ...
    @overload
    def SetColor(self, widget: SolidBrush, color: Color) -> None: ...


class IHandler:
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, frames: Iterable[IconFrame]) -> None: ...
    @overload
    @property
    def Frames(self) -> Iterable[IconFrame]: ...


class IHandler:
    @overload
    def Exclude(self, rectangle: Rectangle) -> None: ...
    @overload
    def Reset(self) -> None: ...
    @overload
    def Set(self, rectangle: Rectangle) -> None: ...


class IHandler:
    @overload
    def Create(self, brush: Brush, thickness: float) -> Object: ...
    @overload
    def GetBrush(self, widget: Pen) -> Brush: ...
    @overload
    def GetLineCap(self, widget: Pen) -> PenLineCap: ...
    @overload
    def GetLineJoin(self, widget: Pen) -> PenLineJoin: ...
    @overload
    def GetMiterLimit(self, widget: Pen) -> float: ...
    @overload
    def GetThickness(self, widget: Pen) -> float: ...
    @overload
    def SetDashStyle(self, widget: Pen, dashStyle: DashStyle) -> None: ...
    @overload
    def SetLineCap(self, widget: Pen, lineCap: PenLineCap) -> None: ...
    @overload
    def SetLineJoin(self, widget: Pen, lineJoin: PenLineJoin) -> None: ...
    @overload
    def SetMiterLimit(self, widget: Pen, miterLimit: float) -> None: ...
    @overload
    def SetThickness(self, widget: Pen, thickness: float) -> None: ...


class IHandler:
    @overload
    def Get(self, type: SystemIconType, size: SystemIconSize) -> Icon: ...
    @overload
    def GetFileIcon(self, fileName: str, size: SystemIconSize) -> Icon: ...


class IHandler:
    pass


class IHandler:
    @overload
    def Create(self, image: Image, opacity: float) -> Object: ...
    @overload
    def GetTransform(self, widget: TextureBrush) -> IMatrix: ...
    @overload
    def SetOpacity(self, widget: TextureBrush, opacity: float) -> None: ...
    @overload
    def SetTransform(self, widget: TextureBrush, transform: IMatrix) -> None: ...


class IHandler:
    @overload
    @property
    def Alignment(self) -> FormattedTextAlignment: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForegroundBrush(self) -> Brush: ...
    @overload
    @property
    def MaximumSize(self) -> SizeF: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Trimming(self) -> FormattedTextTrimming: ...
    @overload
    @property
    def Wrap(self) -> FormattedTextWrapMode: ...
    @overload
    def Measure(self) -> SizeF: ...
    @overload
    @Alignment.setter
    def Alignment(self, value: FormattedTextAlignment) -> None: ...
    @overload
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @overload
    @ForegroundBrush.setter
    def ForegroundBrush(self, value: Brush) -> None: ...
    @overload
    @MaximumSize.setter
    def MaximumSize(self, value: SizeF) -> None: ...
    @overload
    @Text.setter
    def Text(self, value: str) -> None: ...
    @overload
    @Trimming.setter
    def Trimming(self, value: FormattedTextTrimming) -> None: ...
    @overload
    @Wrap.setter
    def Wrap(self, value: FormattedTextWrapMode) -> None: ...


class IHandler:
    @overload
    def Create(self, family: FontFamily) -> None: ...
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    @property
    def Family(self) -> FontFamily: ...
    @overload
    @property
    def FontStyle(self) -> FontStyle: ...
    @overload
    @property
    def IsSymbol(self) -> bool: ...
    @overload
    @property
    def LocalizedName(self) -> str: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def HasCharacterRanges(self, ranges: Iterable[Range]) -> bool: ...


class IHandler:
    @overload
    def FontFamilyAvailable(self, fontFamily: str) -> bool: ...
    @overload
    @property
    def AvailableFontFamilies(self) -> Iterable[FontFamily]: ...


class IHandler:
    @overload
    def Create(self, familyName: str) -> None: ...
    @overload
    def CreateFromFiles(self, fileNames: Iterable[str]) -> None: ...
    @overload
    def CreateFromStreams(self, streams: Iterable[Stream]) -> None: ...
    @overload
    @property
    def LocalizedName(self) -> str: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def Typefaces(self) -> Iterable[FontTypeface]: ...


class IHandler:
    @overload
    def Create(self, systemFont: SystemFont, size: Nullable, decoration: FontDecoration) -> None: ...
    @overload
    def Create(self, typeface: FontTypeface, size: float, decoration: FontDecoration) -> None: ...
    @overload
    def Create(self, family: FontFamily, size: float, style: FontStyle, decoration: FontDecoration) -> None: ...
    @overload
    @property
    def Ascent(self) -> float: ...
    @overload
    @property
    def Baseline(self) -> float: ...
    @overload
    @property
    def Descent(self) -> float: ...
    @overload
    @property
    def Family(self) -> FontFamily: ...
    @overload
    @property
    def FamilyName(self) -> str: ...
    @overload
    @property
    def FontDecoration(self) -> FontDecoration: ...
    @overload
    @property
    def FontStyle(self) -> FontStyle: ...
    @overload
    @property
    def Leading(self) -> float: ...
    @overload
    @property
    def LineHeight(self) -> float: ...
    @overload
    @property
    def Size(self) -> float: ...
    @overload
    @property
    def Typeface(self) -> FontTypeface: ...
    @overload
    @property
    def XHeight(self) -> float: ...
    @overload
    def MeasureString(self, text: str) -> SizeF: ...


class IHandler:
    @overload
    def ModifyComponent(self, controlObject: Object, r: Nullable, g: Nullable, b: Nullable, a: Nullable) -> Object: ...


class IHandler:
    @overload
    def Clone(self, rectangle: Nullable) -> Bitmap: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, width: int, height: int, pixelFormat: PixelFormat) -> None: ...
    @overload
    def Create(self, width: int, height: int, graphics: Graphics) -> None: ...
    @overload
    def Create(self, image: Image, width: int, height: int, interpolation: ImageInterpolation) -> None: ...
    @overload
    def GetPixel(self, x: int, y: int) -> Color: ...
    @overload
    def Save(self, stream: Stream, format: ImageFormat) -> None: ...
    @overload
    def Save(self, fileName: str, format: ImageFormat) -> None: ...


class IHandler:
    @overload
    def Create(self) -> None: ...
    @overload
    def Create(self, xx: float, yx: float, xy: float, yy: float, x0: float, y0: float) -> None: ...


class IHandler:
    @overload
    @property
    def Control(self) -> Color: ...
    @overload
    @property
    def ControlBackground(self) -> Color: ...
    @overload
    @property
    def ControlText(self) -> Color: ...
    @overload
    @property
    def DisabledText(self) -> Color: ...
    @overload
    @property
    def Highlight(self) -> Color: ...
    @overload
    @property
    def HighlightText(self) -> Color: ...
    @overload
    @property
    def LinkText(self) -> Color: ...
    @overload
    @property
    def Selection(self) -> Color: ...
    @overload
    @property
    def SelectionText(self) -> Color: ...
    @overload
    @property
    def WindowBackground(self) -> Color: ...


class IHandler:
    pass


class IHandler:
    @overload
    def Clear(self, brush: SolidBrush) -> None: ...
    @overload
    def CreateFromImage(self, image: Bitmap) -> None: ...
    @overload
    def DrawArc(self, pen: Pen, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def DrawEllipse(self, pen: Pen, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawImage(self, image: Image, source: RectangleF, destination: RectangleF) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: float, y: float) -> None: ...
    @overload
    def DrawImage(self, image: Image, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawLine(self, pen: Pen, startx: float, starty: float, endx: float, endy: float) -> None: ...
    @overload
    def DrawLines(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawPath(self, pen: Pen, path: IGraphicsPath) -> None: ...
    @overload
    def DrawPolygon(self, pen: Pen, points: Iterable[PointF]) -> None: ...
    @overload
    def DrawRectangle(self, pen: Pen, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def DrawText(self, formattedText: FormattedText, location: PointF) -> None: ...
    @overload
    def DrawText(self, font: Font, brush: Brush, x: float, y: float, text: str) -> None: ...
    @overload
    def FillEllipse(self, brush: Brush, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def FillPath(self, brush: Brush, path: IGraphicsPath) -> None: ...
    @overload
    def FillPie(self, brush: Brush, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None: ...
    @overload
    def FillRectangle(self, brush: Brush, x: float, y: float, width: float, height: float) -> None: ...
    @overload
    def Flush(self) -> None: ...
    @overload
    @property
    def AntiAlias(self) -> bool: ...
    @overload
    @property
    def ClipBounds(self) -> RectangleF: ...
    @overload
    @property
    def CurrentTransform(self) -> IMatrix: ...
    @overload
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @overload
    @property
    def IsRetained(self) -> bool: ...
    @overload
    @property
    def PixelOffsetMode(self) -> PixelOffsetMode: ...
    @overload
    @property
    def PointsPerPixel(self) -> float: ...
    @overload
    def MeasureString(self, font: Font, text: str) -> SizeF: ...
    @overload
    def MultiplyTransform(self, matrix: IMatrix) -> None: ...
    @overload
    def ResetClip(self) -> None: ...
    @overload
    def RestoreTransform(self) -> None: ...
    @overload
    def RotateTransform(self, angle: float) -> None: ...
    @overload
    def SaveTransform(self) -> None: ...
    @overload
    def ScaleTransform(self, scaleX: float, scaleY: float) -> None: ...
    @overload
    @AntiAlias.setter
    def AntiAlias(self, value: bool) -> None: ...
    @overload
    @ImageInterpolation.setter
    def ImageInterpolation(self, value: ImageInterpolation) -> None: ...
    @overload
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: PixelOffsetMode) -> None: ...
    @overload
    def SetClip(self, rectangle: RectangleF) -> None: ...
    @overload
    def SetClip(self, path: IGraphicsPath) -> None: ...
    @overload
    def TranslateTransform(self, offsetX: float, offsetY: float) -> None: ...


class IHandler:
    @overload
    def Create(self, startColor: Color, endColor: Color, startPoint: PointF, endPoint: PointF) -> Object: ...
    @overload
    def Create(self, rectangle: RectangleF, startColor: Color, endColor: Color, angle: float) -> Object: ...
    @overload
    def GetGradientWrap(self, widget: LinearGradientBrush) -> GradientWrapMode: ...
    @overload
    def GetTransform(self, widget: LinearGradientBrush) -> IMatrix: ...
    @overload
    def SetGradientWrap(self, widget: LinearGradientBrush, gradientWrap: GradientWrapMode) -> None: ...
    @overload
    def SetTransform(self, widget: LinearGradientBrush, transform: IMatrix) -> None: ...


class ILockableImage:
    @overload
    def Lock(self) -> BitmapData: ...
    @overload
    def Unlock(self, bitmapData: BitmapData) -> None: ...


class Image(Widget):
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ImageFormat(Enum):
    Jpeg = 0
    Bitmap = 1
    Tiff = 2
    Png = 3
    Gif = 4


class ImageInterpolation(Enum):
    Default = 0
    # None = 1
    Low = 2
    Medium = 3
    High = 4


class IMatrix:
    @overload
    def Append(self, matrix: IMatrix) -> None: ...
    @overload
    def Clone(self) -> IMatrix: ...
    @overload
    @property
    def Elements(self) -> Iterable[float]: ...
    @overload
    @property
    def X0(self) -> float: ...
    @overload
    @property
    def Xx(self) -> float: ...
    @overload
    @property
    def Xy(self) -> float: ...
    @overload
    @property
    def Y0(self) -> float: ...
    @overload
    @property
    def Yx(self) -> float: ...
    @overload
    @property
    def Yy(self) -> float: ...
    @overload
    def Invert(self) -> None: ...
    @overload
    def Prepend(self, matrix: IMatrix) -> None: ...
    @overload
    def Rotate(self, angle: float) -> None: ...
    @overload
    def RotateAt(self, angle: float, centerX: float, centerY: float) -> None: ...
    @overload
    def Scale(self, scaleX: float, scaleY: float) -> None: ...
    @overload
    def ScaleAt(self, scaleX: float, scaleY: float, centerX: float, centerY: float) -> None: ...
    @overload
    @X0.setter
    def X0(self, value: float) -> None: ...
    @overload
    @Xx.setter
    def Xx(self, value: float) -> None: ...
    @overload
    @Xy.setter
    def Xy(self, value: float) -> None: ...
    @overload
    @Y0.setter
    def Y0(self, value: float) -> None: ...
    @overload
    @Yx.setter
    def Yx(self, value: float) -> None: ...
    @overload
    @Yy.setter
    def Yy(self, value: float) -> None: ...
    @overload
    def Skew(self, skewX: float, skewY: float) -> None: ...
    @overload
    def TransformPoint(self, point: PointF) -> PointF: ...
    @overload
    def TransformPoint(self, point: Point) -> PointF: ...
    @overload
    def Translate(self, offsetX: float, offsetY: float) -> None: ...


class IndexedBitmap(Image):
    @overload
    def __init__(self, width: int, height: int, bitsPerPixel: int): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BitsPerPixel(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Palette(self) -> Palette: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Lock(self) -> BitmapData: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Resize(self, width: int, height: int) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    @Palette.setter
    def Palette(self, value: Palette) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class ITransformBrush:
    @overload
    @property
    def Transform(self) -> IMatrix: ...
    @overload
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...


class LinearGradientBrush(Brush):
    @overload
    def __init__(self, startColor: Color, endColor: Color, startPoint: PointF, endPoint: PointF): ...
    @overload
    def __init__(self, rectangle: RectangleF, startColor: Color, endColor: Color, angle: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Instantiator() -> Func: ...
    @overload
    @property
    def Transform(self) -> IMatrix: ...
    @overload
    @property
    def Wrap(self) -> GradientWrapMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ControlObject.setter
    def ControlObject(self, value: Object) -> None: ...
    @overload
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @overload
    @Wrap.setter
    def Wrap(self, value: GradientWrapMode) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Matrix:
    @overload
    @staticmethod
    def Append(matrix: IMatrix, matrices: Iterable[IMatrix]) -> None: ...
    @overload
    @staticmethod
    def Create() -> IMatrix: ...
    @overload
    @staticmethod
    def Create(elements: Iterable[float]) -> IMatrix: ...
    @overload
    @staticmethod
    def Create(xx: float, yx: float, xy: float, yy: float, x0: float, y0: float) -> IMatrix: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromRotation(angle: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromRotationAt(angle: float, center: PointF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromRotationAt(angle: float, centerX: float, centerY: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromScale(scale: SizeF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromScale(scaleX: float, scaleY: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromScaleAt(scale: SizeF, center: PointF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromScaleAt(scaleX: float, scaleY: float, centerX: float, centerY: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromSkew(skewX: float, skewY: float) -> IMatrix: ...
    @overload
    @staticmethod
    def FromTranslation(offset: PointF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromTranslation(offset: SizeF) -> IMatrix: ...
    @overload
    @staticmethod
    def FromTranslation(distanceX: float, distanceY: float) -> IMatrix: ...
    @overload
    @property
    def Instantiator() -> Func: ...
    @overload
    @property
    def InstantiatorWithElements() -> Func: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetScale(matrix: IMatrix) -> PointF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Inverse(matrix: IMatrix) -> IMatrix: ...
    @overload
    @staticmethod
    def Multiply(matrix: IMatrix, matrices: Iterable[IMatrix]) -> IMatrix: ...
    @overload
    @staticmethod
    def Prepend(matrix: IMatrix, matrices: Iterable[IMatrix]) -> None: ...
    @overload
    @staticmethod
    def RotateAt(matrix: IMatrix, angle: float, center: PointF) -> None: ...
    @overload
    @staticmethod
    def Scale(matrix: IMatrix, scale: float) -> None: ...
    @overload
    @staticmethod
    def Scale(matrix: IMatrix, scale: SizeF) -> None: ...
    @overload
    @staticmethod
    def ScaleAt(matrix: IMatrix, scale: float, center: PointF) -> None: ...
    @overload
    @staticmethod
    def ScaleAt(matrix: IMatrix, scale: SizeF, center: PointF) -> None: ...
    @overload
    @staticmethod
    def ScaleAt(matrix: IMatrix, scale: float, centerX: float, centerY: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def TransformRectangle(matrix: IMatrix, rect: RectangleF) -> RectangleF: ...
    @overload
    @staticmethod
    def TransformSize(matrix: IMatrix, size: SizeF) -> SizeF: ...
    @overload
    @staticmethod
    def Translate(matrix: IMatrix, offset: PointF) -> None: ...
    @overload
    @staticmethod
    def Translate(matrix: IMatrix, offset: SizeF) -> None: ...


class Padding:
    @overload
    def __init__(self, all: int): ...
    @overload
    def __init__(self, horizontal: int, vertical: int): ...
    @overload
    def __init__(self, left: int, top: int, right: int, bottom: int): ...
    Empty: Padding
    @overload
    @staticmethod
    def Ceiling(padding: PaddingF) -> Padding: ...
    @overload
    def Equals(self, other: Padding) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bottom(self) -> int: ...
    @overload
    @property
    def Horizontal(self) -> int: ...
    @overload
    @property
    def IsZero(self) -> bool: ...
    @overload
    @property
    def Left(self) -> int: ...
    @overload
    @property
    def Right(self) -> int: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Top(self) -> int: ...
    @overload
    @property
    def Vertical(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __add__(value1: Padding, value2: Padding) -> Padding: ...
    @overload
    def __eq__(value1: Padding, value2: Padding) -> bool: ...
    @overload
    def op_Explicit(padding: PaddingF) -> Padding: ...
    @overload
    def op_Implicit(all: int) -> Padding: ...
    @overload
    def __ne__(value1: Padding, value2: Padding) -> bool: ...
    @overload
    def __sub__(value1: Padding, value2: Padding) -> Padding: ...
    @overload
    def __neg__(padding: Padding) -> Padding: ...
    @overload
    @staticmethod
    def Round(padding: PaddingF) -> Padding: ...
    @overload
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @overload
    @Left.setter
    def Left(self, value: int) -> None: ...
    @overload
    @Right.setter
    def Right(self, value: int) -> None: ...
    @overload
    @Top.setter
    def Top(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Truncate(padding: PaddingF) -> Padding: ...


class PaddingF:
    @overload
    def __init__(self, all: float): ...
    @overload
    def __init__(self, horizontal: float, vertical: float): ...
    @overload
    def __init__(self, left: float, top: float, right: float, bottom: float): ...
    Empty: PaddingF
    @overload
    def Equals(self, other: PaddingF) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Bottom(self) -> float: ...
    @overload
    @property
    def Horizontal(self) -> float: ...
    @overload
    @property
    def IsZero(self) -> bool: ...
    @overload
    @property
    def Left(self) -> float: ...
    @overload
    @property
    def Right(self) -> float: ...
    @overload
    @property
    def Size(self) -> SizeF: ...
    @overload
    @property
    def Top(self) -> float: ...
    @overload
    @property
    def Vertical(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __add__(value1: PaddingF, value2: PaddingF) -> PaddingF: ...
    @overload
    def __eq__(value1: PaddingF, value2: PaddingF) -> bool: ...
    @overload
    def op_Implicit(all: float) -> PaddingF: ...
    @overload
    def op_Implicit(padding: Padding) -> PaddingF: ...
    @overload
    def __ne__(value1: PaddingF, value2: PaddingF) -> bool: ...
    @overload
    def __sub__(value1: PaddingF, value2: PaddingF) -> PaddingF: ...
    @overload
    def __neg__(padding: PaddingF) -> PaddingF: ...
    @overload
    @Bottom.setter
    def Bottom(self, value: float) -> None: ...
    @overload
    @Left.setter
    def Left(self, value: float) -> None: ...
    @overload
    @Right.setter
    def Right(self, value: float) -> None: ...
    @overload
    @Top.setter
    def Top(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Palette:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, colors: Iterable[Color]): ...
    def __iter__(self) -> Iterator[Color]: ...
    def __getitem__(self, index: int) -> Color: ...
    def __setitem__(self, index: int, value: Color): ...
    @overload
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Add(self, item: Color) -> None: ...
    @overload
    def AddRange(self, colors: Iterable[Color]) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Clone(self) -> Palette: ...
    @overload
    def Contains(self, item: Color) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[Color], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindAddColour(self, color: Color) -> int: ...
    @overload
    def FindClosest(self, color: Color) -> int: ...
    @overload
    @staticmethod
    def FromEGA(palEGA: Palette) -> Palette: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def EGAColors() -> Iterable[int]: ...
    @overload
    @overload
    @staticmethod
    def GetDosPalette() -> Palette: ...
    @overload
    @staticmethod
    def GetEgaPalette() -> Palette: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetRGBColor(self, index: int) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: Color) -> int: ...
    @overload
    def Insert(self, index: int, item: Color) -> None: ...
    @overload
    def Load(self, reader: BinaryReader, size: int, shift: int, includeAlpha: bool) -> None: ...
    @overload
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    @overload
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Remove(self, item: Color) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    def Save(self, writer: BinaryWriter, shift: int, includeAlpha: bool) -> None: ...
    @overload
    @property
    def Item(self) -> MutableSequence[Color]: ...
    @overload
    def ToString(self) -> str: ...


class Pen:
    @overload
    def __init__(self, color: Color, thickness: float): ...
    @overload
    def __init__(self, brush: Brush, thickness: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Brush(self) -> Brush: ...
    @overload
    @property
    def Color(self) -> Color: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DashStyle(self) -> DashStyle: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Instantiator() -> Func: ...
    @overload
    @property
    def LineCap(self) -> PenLineCap: ...
    @overload
    @property
    def LineJoin(self) -> PenLineJoin: ...
    @overload
    @property
    def MiterLimit(self) -> float: ...
    @overload
    @property
    def Thickness(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @overload
    @ControlObject.setter
    def ControlObject(self, value: Object) -> None: ...
    @overload
    @DashStyle.setter
    def DashStyle(self, value: DashStyle) -> None: ...
    @overload
    @LineCap.setter
    def LineCap(self, value: PenLineCap) -> None: ...
    @overload
    @LineJoin.setter
    def LineJoin(self, value: PenLineJoin) -> None: ...
    @overload
    @MiterLimit.setter
    def MiterLimit(self, value: float) -> None: ...
    @overload
    @Thickness.setter
    def Thickness(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PenLineCap(Enum):
    Square = 0
    Butt = 1
    Round = 2


class PenLineJoin(Enum):
    Miter = 0
    Bevel = 1
    Round = 2


class Pens:
    @overload
    @staticmethod
    def Cached(color: Color, thickness: float, dashStyle: DashStyle) -> Pen: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AliceBlue() -> Pen: ...
    @overload
    @property
    def AntiqueWhite() -> Pen: ...
    @overload
    @property
    def Aqua() -> Pen: ...
    @overload
    @property
    def Aquamarine() -> Pen: ...
    @overload
    @property
    def Azure() -> Pen: ...
    @overload
    @property
    def Beige() -> Pen: ...
    @overload
    @property
    def Bisque() -> Pen: ...
    @overload
    @property
    def Black() -> Pen: ...
    @overload
    @property
    def BlanchedAlmond() -> Pen: ...
    @overload
    @property
    def Blue() -> Pen: ...
    @overload
    @property
    def BlueViolet() -> Pen: ...
    @overload
    @property
    def Brown() -> Pen: ...
    @overload
    @property
    def BurlyWood() -> Pen: ...
    @overload
    @property
    def CadetBlue() -> Pen: ...
    @overload
    @property
    def Chartreuse() -> Pen: ...
    @overload
    @property
    def Chocolate() -> Pen: ...
    @overload
    @property
    def Coral() -> Pen: ...
    @overload
    @property
    def CornflowerBlue() -> Pen: ...
    @overload
    @property
    def Cornsilk() -> Pen: ...
    @overload
    @property
    def Crimson() -> Pen: ...
    @overload
    @property
    def Cyan() -> Pen: ...
    @overload
    @property
    def DarkBlue() -> Pen: ...
    @overload
    @property
    def DarkCyan() -> Pen: ...
    @overload
    @property
    def DarkGoldenrod() -> Pen: ...
    @overload
    @property
    def DarkGray() -> Pen: ...
    @overload
    @property
    def DarkGreen() -> Pen: ...
    @overload
    @property
    def DarkKhaki() -> Pen: ...
    @overload
    @property
    def DarkMagenta() -> Pen: ...
    @overload
    @property
    def DarkOliveGreen() -> Pen: ...
    @overload
    @property
    def DarkOrange() -> Pen: ...
    @overload
    @property
    def DarkOrchid() -> Pen: ...
    @overload
    @property
    def DarkRed() -> Pen: ...
    @overload
    @property
    def DarkSalmon() -> Pen: ...
    @overload
    @property
    def DarkSeaGreen() -> Pen: ...
    @overload
    @property
    def DarkSlateBlue() -> Pen: ...
    @overload
    @property
    def DarkSlateGray() -> Pen: ...
    @overload
    @property
    def DarkTurquoise() -> Pen: ...
    @overload
    @property
    def DarkViolet() -> Pen: ...
    @overload
    @property
    def DeepPink() -> Pen: ...
    @overload
    @property
    def DeepSkyBlue() -> Pen: ...
    @overload
    @property
    def DimGray() -> Pen: ...
    @overload
    @property
    def DodgerBlue() -> Pen: ...
    @overload
    @property
    def Firebrick() -> Pen: ...
    @overload
    @property
    def FloralWhite() -> Pen: ...
    @overload
    @property
    def ForestGreen() -> Pen: ...
    @overload
    @property
    def Fuchsia() -> Pen: ...
    @overload
    @property
    def Gainsboro() -> Pen: ...
    @overload
    @property
    def GhostWhite() -> Pen: ...
    @overload
    @property
    def Gold() -> Pen: ...
    @overload
    @property
    def Goldenrod() -> Pen: ...
    @overload
    @property
    def Gray() -> Pen: ...
    @overload
    @property
    def Green() -> Pen: ...
    @overload
    @property
    def GreenYellow() -> Pen: ...
    @overload
    @property
    def Honeydew() -> Pen: ...
    @overload
    @property
    def HotPink() -> Pen: ...
    @overload
    @property
    def IndianRed() -> Pen: ...
    @overload
    @property
    def Indigo() -> Pen: ...
    @overload
    @property
    def Ivory() -> Pen: ...
    @overload
    @property
    def Khaki() -> Pen: ...
    @overload
    @property
    def Lavender() -> Pen: ...
    @overload
    @property
    def LavenderBlush() -> Pen: ...
    @overload
    @property
    def LawnGreen() -> Pen: ...
    @overload
    @property
    def LemonChiffon() -> Pen: ...
    @overload
    @property
    def LightBlue() -> Pen: ...
    @overload
    @property
    def LightCoral() -> Pen: ...
    @overload
    @property
    def LightCyan() -> Pen: ...
    @overload
    @property
    def LightGoldenrodYellow() -> Pen: ...
    @overload
    @property
    def LightGreen() -> Pen: ...
    @overload
    @property
    def LightGrey() -> Pen: ...
    @overload
    @property
    def LightPink() -> Pen: ...
    @overload
    @property
    def LightSalmon() -> Pen: ...
    @overload
    @property
    def LightSeaGreen() -> Pen: ...
    @overload
    @property
    def LightSkyBlue() -> Pen: ...
    @overload
    @property
    def LightSlateGray() -> Pen: ...
    @overload
    @property
    def LightSteelBlue() -> Pen: ...
    @overload
    @property
    def LightYellow() -> Pen: ...
    @overload
    @property
    def Lime() -> Pen: ...
    @overload
    @property
    def LimeGreen() -> Pen: ...
    @overload
    @property
    def Linen() -> Pen: ...
    @overload
    @property
    def Magenta() -> Pen: ...
    @overload
    @property
    def Maroon() -> Pen: ...
    @overload
    @property
    def MediumAquamarine() -> Pen: ...
    @overload
    @property
    def MediumBlue() -> Pen: ...
    @overload
    @property
    def MediumOrchid() -> Pen: ...
    @overload
    @property
    def MediumPurple() -> Pen: ...
    @overload
    @property
    def MediumSeaGreen() -> Pen: ...
    @overload
    @property
    def MediumSlateBlue() -> Pen: ...
    @overload
    @property
    def MediumSpringGreen() -> Pen: ...
    @overload
    @property
    def MediumTurquoise() -> Pen: ...
    @overload
    @property
    def MediumVioletRed() -> Pen: ...
    @overload
    @property
    def MidnightBlue() -> Pen: ...
    @overload
    @property
    def MintCream() -> Pen: ...
    @overload
    @property
    def MistyRose() -> Pen: ...
    @overload
    @property
    def Moccasin() -> Pen: ...
    @overload
    @property
    def NavajoWhite() -> Pen: ...
    @overload
    @property
    def Navy() -> Pen: ...
    @overload
    @property
    def OldLace() -> Pen: ...
    @overload
    @property
    def Olive() -> Pen: ...
    @overload
    @property
    def OliveDrab() -> Pen: ...
    @overload
    @property
    def Orange() -> Pen: ...
    @overload
    @property
    def OrangeRed() -> Pen: ...
    @overload
    @property
    def Orchid() -> Pen: ...
    @overload
    @property
    def PaleGoldenrod() -> Pen: ...
    @overload
    @property
    def PaleGreen() -> Pen: ...
    @overload
    @property
    def PaleTurquoise() -> Pen: ...
    @overload
    @property
    def PaleVioletRed() -> Pen: ...
    @overload
    @property
    def PapayaWhip() -> Pen: ...
    @overload
    @property
    def PeachPuff() -> Pen: ...
    @overload
    @property
    def Peru() -> Pen: ...
    @overload
    @property
    def Pink() -> Pen: ...
    @overload
    @property
    def Plum() -> Pen: ...
    @overload
    @property
    def PowderBlue() -> Pen: ...
    @overload
    @property
    def Purple() -> Pen: ...
    @overload
    @property
    def Red() -> Pen: ...
    @overload
    @property
    def RosyBrown() -> Pen: ...
    @overload
    @property
    def RoyalBlue() -> Pen: ...
    @overload
    @property
    def SaddleBrown() -> Pen: ...
    @overload
    @property
    def Salmon() -> Pen: ...
    @overload
    @property
    def SandyBrown() -> Pen: ...
    @overload
    @property
    def SeaGreen() -> Pen: ...
    @overload
    @property
    def Seashell() -> Pen: ...
    @overload
    @property
    def Sienna() -> Pen: ...
    @overload
    @property
    def Silver() -> Pen: ...
    @overload
    @property
    def SkyBlue() -> Pen: ...
    @overload
    @property
    def SlateBlue() -> Pen: ...
    @overload
    @property
    def SlateGray() -> Pen: ...
    @overload
    @property
    def Snow() -> Pen: ...
    @overload
    @property
    def SpringGreen() -> Pen: ...
    @overload
    @property
    def SteelBlue() -> Pen: ...
    @overload
    @property
    def Tan() -> Pen: ...
    @overload
    @property
    def Teal() -> Pen: ...
    @overload
    @property
    def Thistle() -> Pen: ...
    @overload
    @property
    def Tomato() -> Pen: ...
    @overload
    @property
    def Transparent() -> Pen: ...
    @overload
    @property
    def Turquoise() -> Pen: ...
    @overload
    @property
    def Violet() -> Pen: ...
    @overload
    @property
    def Wheat() -> Pen: ...
    @overload
    @property
    def White() -> Pen: ...
    @overload
    @property
    def WhiteSmoke() -> Pen: ...
    @overload
    @property
    def Yellow() -> Pen: ...
    @overload
    @property
    def YellowGreen() -> Pen: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class PixelFormat(Enum):
    Format32bppRgb = 0
    Format24bppRgb = 1
    Format32bppRgba = 2


class PixelOffsetMode(Enum):
    # None = 0
    Half = 1
    Aligned = 2


class Point:
    @overload
    def __init__(self, size: Size): ...
    @overload
    def __init__(self, point: PointF): ...
    @overload
    def __init__(self, x: int, y: int): ...
    Empty: Point
    @overload
    @staticmethod
    def Abs(point: Point) -> Point: ...
    @overload
    def Distance(self, point: Point) -> float: ...
    @overload
    @staticmethod
    def Distance(point1: Point, point2: Point) -> float: ...
    @overload
    def DotProduct(self, point: Point) -> int: ...
    @overload
    @staticmethod
    def DotProduct(point1: Point, point2: Point) -> int: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Point) -> bool: ...
    @overload
    @property
    def IsZero(self) -> bool: ...
    @overload
    @property
    def Length(self) -> float: ...
    @overload
    @property
    def LengthSquared(self) -> int: ...
    @overload
    @property
    def Normal(self) -> Point: ...
    @overload
    @property
    def UnitVector(self) -> PointF: ...
    @overload
    @property
    def X(self) -> int: ...
    @overload
    @property
    def Y(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Max(point1: Point, point2: Point) -> Point: ...
    @overload
    @staticmethod
    def Min(point1: Point, point2: Point) -> Point: ...
    @overload
    def Offset(self, point: Point) -> None: ...
    @overload
    def Offset(self, x: int, y: int) -> None: ...
    @overload
    @staticmethod
    def Offset(point: Point, offset: Point) -> Point: ...
    @overload
    @staticmethod
    def Offset(point: Point, x: int, y: int) -> Point: ...
    @overload
    def __add__(point1: Point, point2: Point) -> Point: ...
    @overload
    def __add__(point: Point, size: Size) -> Point: ...
    @overload
    def __add__(point: Point, value: int) -> Point: ...
    @overload
    def __truediv__(point: Point, value: int) -> Point: ...
    @overload
    def __truediv__(point: Point, size: Size) -> Point: ...
    @overload
    def __eq__(point1: Point, point2: Point) -> bool: ...
    @overload
    def op_Explicit(point: PointF) -> Point: ...
    @overload
    def op_Explicit(size: Size) -> Point: ...
    @overload
    def __ne__(point1: Point, point2: Point) -> bool: ...
    @overload
    def __rmul__(point: Point, factor: int) -> Point: ...
    @overload
    def __mul__(point: Point, size: Size) -> Point: ...
    @overload
    def __mul__(point: Point, factor: float) -> PointF: ...
    @overload
    def __mul__(point: Point, factor: int) -> Point: ...
    @overload
    def __mul__(point1: Point, point2: Point) -> Point: ...
    @overload
    def __sub__(point: Point, size: Size) -> Point: ...
    @overload
    def __sub__(point1: Point, point2: Point) -> Point: ...
    @overload
    def __sub__(point: Point, value: int) -> Point: ...
    @overload
    def __neg__(point: Point) -> Point: ...
    @overload
    def Restrict(self, rectangle: Rectangle) -> None: ...
    @overload
    @staticmethod
    def Restrict(point: Point, rectangle: Rectangle) -> Point: ...
    @overload
    @staticmethod
    def Round(point: PointF) -> Point: ...
    @overload
    @X.setter
    def X(self, value: int) -> None: ...
    @overload
    @Y.setter
    def Y(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Truncate(point: PointF) -> Point: ...
    @overload
    @staticmethod
    def UnitVectorAtAngle(angle: float) -> PointF: ...


class PointF:
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, point: Point): ...
    @overload
    def __init__(self, x: float, y: float): ...
    Empty: PointF
    @overload
    @staticmethod
    def Abs(point: PointF) -> PointF: ...
    @overload
    def AngleTo(self, destination: PointF) -> float: ...
    @overload
    def Distance(self, point: PointF) -> float: ...
    @overload
    @staticmethod
    def Distance(point1: PointF, point2: PointF) -> float: ...
    @overload
    def DotProduct(self, point: PointF) -> float: ...
    @overload
    @staticmethod
    def DotProduct(point1: PointF, point2: PointF) -> float: ...
    @overload
    def Equals(self, other: PointF) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Angle(self) -> float: ...
    @overload
    @property
    def IsZero(self) -> bool: ...
    @overload
    @property
    def Length(self) -> float: ...
    @overload
    @property
    def LengthSquared(self) -> float: ...
    @overload
    @property
    def Normal(self) -> PointF: ...
    @overload
    @property
    def UnitVector(self) -> PointF: ...
    @overload
    @property
    def X(self) -> float: ...
    @overload
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def LengthTo(self, destination: PointF) -> float: ...
    @overload
    @staticmethod
    def Max(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    @staticmethod
    def Min(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def Offset(self, offset: PointF) -> None: ...
    @overload
    @staticmethod
    def Offset(point: PointF, offset: PointF) -> PointF: ...
    @overload
    def Offset(self, x: float, y: float) -> None: ...
    @overload
    @staticmethod
    def Offset(point: PointF, x: float, y: float) -> PointF: ...
    @overload
    def __add__(point: PointF, value: float) -> PointF: ...
    @overload
    def __add__(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def __add__(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def __truediv__(point: PointF, value: float) -> PointF: ...
    @overload
    def __truediv__(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def __eq__(point1: PointF, point2: PointF) -> bool: ...
    @overload
    def op_Explicit(size: SizeF) -> PointF: ...
    @overload
    def op_Implicit(point: Point) -> PointF: ...
    @overload
    def __ne__(point1: PointF, point2: PointF) -> bool: ...
    @overload
    def __mul__(point: PointF, factor: float) -> PointF: ...
    @overload
    def __mul__(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def __mul__(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def __rmul__(point: PointF, factor: float) -> PointF: ...
    @overload
    def __sub__(point: PointF, size: SizeF) -> PointF: ...
    @overload
    def __sub__(point: PointF, value: float) -> PointF: ...
    @overload
    def __sub__(point1: PointF, point2: PointF) -> PointF: ...
    @overload
    def __neg__(point: PointF) -> PointF: ...
    @overload
    def Restrict(self, rectangle: RectangleF) -> None: ...
    @overload
    @staticmethod
    def Restrict(point: Point, rectangle: Rectangle) -> Point: ...
    @overload
    def Rotate(self, angle: float) -> None: ...
    @overload
    @staticmethod
    def Rotate(point: PointF, angle: float) -> PointF: ...
    @overload
    @X.setter
    def X(self, value: float) -> None: ...
    @overload
    @Y.setter
    def Y(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def UnitVectorAtAngle(angle: float) -> PointF: ...


class RadialGradientBrush(Brush):
    @overload
    def __init__(self, startColor: Color, endColor: Color, center: PointF, gradientOrigin: PointF, radius: SizeF): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Instantiator() -> Func: ...
    @overload
    @property
    def Transform(self) -> IMatrix: ...
    @overload
    @property
    def Wrap(self) -> GradientWrapMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ControlObject.setter
    def ControlObject(self, value: Object) -> None: ...
    @overload
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @overload
    @Wrap.setter
    def Wrap(self, value: GradientWrapMode) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Rectangle:
    @overload
    def __init__(self, size: Size): ...
    @overload
    def __init__(self, rectangle: RectangleF): ...
    @overload
    def __init__(self, start: Point, end: Point): ...
    @overload
    def __init__(self, location: Point, size: Size): ...
    @overload
    def __init__(self, x: int, y: int, width: int, height: int): ...
    Empty: Rectangle
    @overload
    def Align(self, gridSize: Size) -> None: ...
    @overload
    def Align(self, gridWidth: int, gridHeight: int) -> None: ...
    @overload
    @staticmethod
    def Align(rectangle: Rectangle, gridSize: Size) -> Rectangle: ...
    @overload
    @staticmethod
    def Align(rectangle: Rectangle, gridWidth: int, gridHeight: int) -> Rectangle: ...
    @overload
    @staticmethod
    def Ceiling(rectangle: RectangleF) -> Rectangle: ...
    @overload
    def Contains(self, point: Point) -> bool: ...
    @overload
    def Contains(self, rectangle: Rectangle) -> bool: ...
    @overload
    def Contains(self, x: int, y: int) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Rectangle) -> bool: ...
    @overload
    @staticmethod
    def FromCenter(center: Point, size: Size) -> Rectangle: ...
    @overload
    @staticmethod
    def FromSides(left: int, top: int, right: int, bottom: int) -> Rectangle: ...
    @overload
    @property
    def Bottom(self) -> int: ...
    @overload
    @property
    def BottomLeft(self) -> Point: ...
    @overload
    @property
    def BottomRight(self) -> Point: ...
    @overload
    @property
    def Center(self) -> Point: ...
    @overload
    @property
    def EndLocation(self) -> Point: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def InnerBottom(self) -> int: ...
    @overload
    @property
    def InnerBottomLeft(self) -> Point: ...
    @overload
    @property
    def InnerBottomRight(self) -> Point: ...
    @overload
    @property
    def InnerRight(self) -> int: ...
    @overload
    @property
    def InnerTopRight(self) -> Point: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    @property
    def IsZero(self) -> bool: ...
    @overload
    @property
    def Left(self) -> int: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def MiddleBottom(self) -> Point: ...
    @overload
    @property
    def MiddleLeft(self) -> Point: ...
    @overload
    @property
    def MiddleRight(self) -> Point: ...
    @overload
    @property
    def MiddleTop(self) -> Point: ...
    @overload
    @property
    def MiddleX(self) -> int: ...
    @overload
    @property
    def MiddleY(self) -> int: ...
    @overload
    @property
    def Right(self) -> int: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Top(self) -> int: ...
    @overload
    @property
    def TopLeft(self) -> Point: ...
    @overload
    @property
    def TopRight(self) -> Point: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def X(self) -> int: ...
    @overload
    @property
    def Y(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Inflate(self, size: Size) -> None: ...
    @overload
    @staticmethod
    def Inflate(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def Inflate(self, width: int, height: int) -> None: ...
    @overload
    @staticmethod
    def Inflate(rectangle: Rectangle, width: int, height: int) -> Rectangle: ...
    @overload
    def Inset(self, padding: Padding) -> None: ...
    @overload
    @staticmethod
    def Inset(rectangle: Rectangle, padding: Padding) -> Rectangle: ...
    @overload
    def Intersect(self, rectangle: Rectangle) -> None: ...
    @overload
    @staticmethod
    def Intersect(rect1: Rectangle, rect2: Rectangle) -> Rectangle: ...
    @overload
    def Intersects(self, rectangle: Rectangle) -> bool: ...
    @overload
    def Normalize(self) -> None: ...
    @overload
    def Offset(self, size: Size) -> None: ...
    @overload
    def Offset(self, point: Point) -> None: ...
    @overload
    @staticmethod
    def Offset(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    @staticmethod
    def Offset(rectangle: Rectangle, point: Point) -> Rectangle: ...
    @overload
    def Offset(self, x: int, y: int) -> None: ...
    @overload
    @staticmethod
    def Offset(rectangle: Rectangle, x: int, y: int) -> Rectangle: ...
    @overload
    def __add__(rectangle: Rectangle, offset: Point) -> Rectangle: ...
    @overload
    def __add__(rectangle: Rectangle, offset: Size) -> Rectangle: ...
    @overload
    def __add__(rectangle: Rectangle, padding: Padding) -> Rectangle: ...
    @overload
    def __truediv__(rectangle: Rectangle, factor: int) -> Rectangle: ...
    @overload
    def __truediv__(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def __eq__(rect1: Rectangle, rect2: Rectangle) -> bool: ...
    @overload
    def op_Explicit(rectangle: RectangleF) -> Rectangle: ...
    @overload
    def __ne__(rect1: Rectangle, rect2: Rectangle) -> bool: ...
    @overload
    def __mul__(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    def __mul__(rectangle: Rectangle, factor: int) -> Rectangle: ...
    @overload
    def __sub__(rectangle: Rectangle, padding: Padding) -> Rectangle: ...
    @overload
    def __sub__(rectangle: Rectangle, offset: Point) -> Rectangle: ...
    @overload
    def __sub__(rectangle: Rectangle, offset: Size) -> Rectangle: ...
    @overload
    def Restrict(self, size: Size) -> None: ...
    @overload
    def Restrict(self, rectangle: Rectangle) -> None: ...
    @overload
    def Restrict(self, location: Point, size: Size) -> None: ...
    @overload
    @staticmethod
    def Restrict(rectangle: Rectangle, restrict: Rectangle) -> Rectangle: ...
    @overload
    @staticmethod
    def Restrict(rectangle: Rectangle, size: Size) -> Rectangle: ...
    @overload
    @staticmethod
    def Round(rectangle: RectangleF) -> Rectangle: ...
    @overload
    @Bottom.setter
    def Bottom(self, value: int) -> None: ...
    @overload
    @BottomLeft.setter
    def BottomLeft(self, value: Point) -> None: ...
    @overload
    @BottomRight.setter
    def BottomRight(self, value: Point) -> None: ...
    @overload
    @Center.setter
    def Center(self, value: Point) -> None: ...
    @overload
    @EndLocation.setter
    def EndLocation(self, value: Point) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: int) -> None: ...
    @overload
    @InnerBottom.setter
    def InnerBottom(self, value: int) -> None: ...
    @overload
    @InnerBottomLeft.setter
    def InnerBottomLeft(self, value: Point) -> None: ...
    @overload
    @InnerBottomRight.setter
    def InnerBottomRight(self, value: Point) -> None: ...
    @overload
    @InnerRight.setter
    def InnerRight(self, value: int) -> None: ...
    @overload
    @InnerTopRight.setter
    def InnerTopRight(self, value: Point) -> None: ...
    @overload
    @Left.setter
    def Left(self, value: int) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: Point) -> None: ...
    @overload
    @MiddleBottom.setter
    def MiddleBottom(self, value: Point) -> None: ...
    @overload
    @MiddleLeft.setter
    def MiddleLeft(self, value: Point) -> None: ...
    @overload
    @MiddleRight.setter
    def MiddleRight(self, value: Point) -> None: ...
    @overload
    @MiddleTop.setter
    def MiddleTop(self, value: Point) -> None: ...
    @overload
    @MiddleX.setter
    def MiddleX(self, value: int) -> None: ...
    @overload
    @MiddleY.setter
    def MiddleY(self, value: int) -> None: ...
    @overload
    @Right.setter
    def Right(self, value: int) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @overload
    @Top.setter
    def Top(self, value: int) -> None: ...
    @overload
    @TopLeft.setter
    def TopLeft(self, value: Point) -> None: ...
    @overload
    @TopRight.setter
    def TopRight(self, value: Point) -> None: ...
    @overload
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    @X.setter
    def X(self, value: int) -> None: ...
    @overload
    @Y.setter
    def Y(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Truncate(rectangle: RectangleF) -> Rectangle: ...
    @overload
    def Union(self, rectangle: Rectangle) -> None: ...
    @overload
    @staticmethod
    def Union(rect1: Rectangle, rect2: Rectangle) -> Rectangle: ...


class RectangleF:
    @overload
    def __init__(self, rectangle: Rectangle): ...
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, start: PointF, end: PointF): ...
    @overload
    def __init__(self, location: PointF, size: SizeF): ...
    @overload
    def __init__(self, x: float, y: float, width: float, height: float): ...
    Empty: RectangleF
    @overload
    def Align(self, gridSize: SizeF) -> None: ...
    @overload
    def Align(self, gridWidth: float, gridHeight: float) -> None: ...
    @overload
    @staticmethod
    def Align(rectangle: RectangleF, gridSize: SizeF) -> RectangleF: ...
    @overload
    @staticmethod
    def Align(rectangle: RectangleF, gridWidth: float, gridHeight: float) -> RectangleF: ...
    @overload
    def Contains(self, point: PointF) -> bool: ...
    @overload
    def Contains(self, rectangle: RectangleF) -> bool: ...
    @overload
    def Contains(self, x: float, y: float) -> bool: ...
    @overload
    @staticmethod
    def Distance(rect: RectangleF, point: PointF) -> SizeF: ...
    @overload
    @staticmethod
    def Distance(rect1: RectangleF, rect2: RectangleF) -> SizeF: ...
    @overload
    def Equals(self, other: RectangleF) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromCenter(center: PointF, size: SizeF) -> RectangleF: ...
    @overload
    @staticmethod
    def FromSides(left: float, top: float, right: float, bottom: float) -> RectangleF: ...
    @overload
    @property
    def Bottom(self) -> float: ...
    @overload
    @property
    def BottomLeft(self) -> PointF: ...
    @overload
    @property
    def BottomRight(self) -> PointF: ...
    @overload
    @property
    def Center(self) -> PointF: ...
    @overload
    @property
    def EndLocation(self) -> PointF: ...
    @overload
    @property
    def Height(self) -> float: ...
    @overload
    @property
    def InnerBottom(self) -> float: ...
    @overload
    @property
    def InnerBottomLeft(self) -> PointF: ...
    @overload
    @property
    def InnerBottomRight(self) -> PointF: ...
    @overload
    @property
    def InnerRight(self) -> float: ...
    @overload
    @property
    def InnerTopRight(self) -> PointF: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    @property
    def IsZero(self) -> bool: ...
    @overload
    @property
    def Left(self) -> float: ...
    @overload
    @property
    def Location(self) -> PointF: ...
    @overload
    @property
    def MiddleBottom(self) -> PointF: ...
    @overload
    @property
    def MiddleLeft(self) -> PointF: ...
    @overload
    @property
    def MiddleRight(self) -> PointF: ...
    @overload
    @property
    def MiddleTop(self) -> PointF: ...
    @overload
    @property
    def MiddleX(self) -> float: ...
    @overload
    @property
    def MiddleY(self) -> float: ...
    @overload
    @property
    def Right(self) -> float: ...
    @overload
    @property
    def Size(self) -> SizeF: ...
    @overload
    @property
    def Top(self) -> float: ...
    @overload
    @property
    def TopLeft(self) -> PointF: ...
    @overload
    @property
    def TopRight(self) -> PointF: ...
    @overload
    @property
    def Width(self) -> float: ...
    @overload
    @property
    def X(self) -> float: ...
    @overload
    @property
    def Y(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Inflate(self, size: SizeF) -> None: ...
    @overload
    @staticmethod
    def Inflate(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def Inflate(self, width: float, height: float) -> None: ...
    @overload
    @staticmethod
    def Inflate(rectangle: RectangleF, width: float, height: float) -> RectangleF: ...
    @overload
    def Inset(self, padding: PaddingF) -> None: ...
    @overload
    @staticmethod
    def Inset(rectangle: RectangleF, padding: PaddingF) -> RectangleF: ...
    @overload
    def Intersect(self, rectangle: RectangleF) -> None: ...
    @overload
    @staticmethod
    def Intersect(rect1: RectangleF, rect2: RectangleF) -> RectangleF: ...
    @overload
    def Intersects(self, rectangle: RectangleF) -> bool: ...
    @overload
    def Normalize(self) -> None: ...
    @overload
    def Offset(self, point: PointF) -> None: ...
    @overload
    def Offset(self, size: SizeF) -> None: ...
    @overload
    @staticmethod
    def Offset(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    @staticmethod
    def Offset(rectangle: RectangleF, point: PointF) -> RectangleF: ...
    @overload
    def Offset(self, x: float, y: float) -> None: ...
    @overload
    @staticmethod
    def Offset(rectangle: RectangleF, x: float, y: float) -> RectangleF: ...
    @overload
    def __add__(rectangle: RectangleF, padding: PaddingF) -> RectangleF: ...
    @overload
    def __add__(rectangle: RectangleF, offset: SizeF) -> RectangleF: ...
    @overload
    def __add__(rectangle: RectangleF, offset: PointF) -> RectangleF: ...
    @overload
    def __truediv__(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def __truediv__(rectangle: RectangleF, factor: float) -> RectangleF: ...
    @overload
    def __eq__(rect1: RectangleF, rect2: RectangleF) -> bool: ...
    @overload
    def op_Implicit(rectangle: Rectangle) -> RectangleF: ...
    @overload
    def __ne__(rect1: RectangleF, rect2: RectangleF) -> bool: ...
    @overload
    def __mul__(rectangle: RectangleF, factor: float) -> RectangleF: ...
    @overload
    def __mul__(rectangle: RectangleF, size: SizeF) -> RectangleF: ...
    @overload
    def __sub__(rectangle: RectangleF, padding: PaddingF) -> RectangleF: ...
    @overload
    def __sub__(rectangle: RectangleF, offset: SizeF) -> RectangleF: ...
    @overload
    def __sub__(rectangle: RectangleF, offset: PointF) -> RectangleF: ...
    @overload
    def Restrict(self, rectangle: RectangleF) -> None: ...
    @overload
    def Restrict(self, size: SizeF) -> None: ...
    @overload
    @staticmethod
    def Restrict(rectangle: Rectangle, restrict: Rectangle) -> Rectangle: ...
    @overload
    def Restrict(self, point: PointF, size: SizeF) -> None: ...
    @overload
    @Bottom.setter
    def Bottom(self, value: float) -> None: ...
    @overload
    @BottomLeft.setter
    def BottomLeft(self, value: PointF) -> None: ...
    @overload
    @BottomRight.setter
    def BottomRight(self, value: PointF) -> None: ...
    @overload
    @Center.setter
    def Center(self, value: PointF) -> None: ...
    @overload
    @EndLocation.setter
    def EndLocation(self, value: PointF) -> None: ...
    @overload
    @Height.setter
    def Height(self, value: float) -> None: ...
    @overload
    @InnerBottom.setter
    def InnerBottom(self, value: float) -> None: ...
    @overload
    @InnerBottomLeft.setter
    def InnerBottomLeft(self, value: PointF) -> None: ...
    @overload
    @InnerBottomRight.setter
    def InnerBottomRight(self, value: PointF) -> None: ...
    @overload
    @InnerRight.setter
    def InnerRight(self, value: float) -> None: ...
    @overload
    @InnerTopRight.setter
    def InnerTopRight(self, value: PointF) -> None: ...
    @overload
    @Left.setter
    def Left(self, value: float) -> None: ...
    @overload
    @Location.setter
    def Location(self, value: PointF) -> None: ...
    @overload
    @MiddleBottom.setter
    def MiddleBottom(self, value: PointF) -> None: ...
    @overload
    @MiddleLeft.setter
    def MiddleLeft(self, value: PointF) -> None: ...
    @overload
    @MiddleRight.setter
    def MiddleRight(self, value: PointF) -> None: ...
    @overload
    @MiddleTop.setter
    def MiddleTop(self, value: PointF) -> None: ...
    @overload
    @MiddleX.setter
    def MiddleX(self, value: float) -> None: ...
    @overload
    @MiddleY.setter
    def MiddleY(self, value: float) -> None: ...
    @overload
    @Right.setter
    def Right(self, value: float) -> None: ...
    @overload
    @Size.setter
    def Size(self, value: SizeF) -> None: ...
    @overload
    @Top.setter
    def Top(self, value: float) -> None: ...
    @overload
    @TopLeft.setter
    def TopLeft(self, value: PointF) -> None: ...
    @overload
    @TopRight.setter
    def TopRight(self, value: PointF) -> None: ...
    @overload
    @Width.setter
    def Width(self, value: float) -> None: ...
    @overload
    @X.setter
    def X(self, value: float) -> None: ...
    @overload
    @Y.setter
    def Y(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Union(self, rectangle: RectangleF) -> None: ...
    @overload
    @staticmethod
    def Union(rect1: RectangleF, rect2: RectangleF) -> RectangleF: ...


class Region(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Exclude(self, rectangle: Rectangle) -> None: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Reset(self) -> None: ...
    @overload
    @ID.setter
    def ID(self, value: str) -> None: ...
    @overload
    def Set(self, rectangle: Rectangle) -> None: ...
    @overload
    @Style.setter
    def Style(self, value: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class Size:
    @overload
    def __init__(self, point: Point): ...
    @overload
    def __init__(self, size: SizeF): ...
    @overload
    def __init__(self, width: int, height: int): ...
    Empty: Size
    MaxValue: Size
    MinValue: Size
    @overload
    @staticmethod
    def Abs(size: Size) -> Size: ...
    @overload
    @staticmethod
    def Ceiling(size: SizeF) -> Size: ...
    @overload
    def Contains(self, point: Point) -> bool: ...
    @overload
    def Contains(self, x: int, y: int) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: Size) -> bool: ...
    @overload
    def FitTo(self, constraint: Size) -> Size: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    @property
    def IsZero(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Max(size1: Size, size2: Size) -> Size: ...
    @overload
    @staticmethod
    def Min(size1: Size, size2: Size) -> Size: ...
    @overload
    def __add__(size: Size, value: int) -> Size: ...
    @overload
    def __add__(size1: Size, size2: Size) -> Size: ...
    @overload
    def __add__(size: Size, point: Point) -> Size: ...
    @overload
    def __truediv__(size1: Size, size2: Size) -> Size: ...
    @overload
    def __truediv__(size: Size, factor: int) -> Size: ...
    @overload
    def __eq__(size1: Size, size2: Size) -> bool: ...
    @overload
    def op_Explicit(size: SizeF) -> Size: ...
    @overload
    def op_Explicit(point: Point) -> Size: ...
    @overload
    def __ne__(size1: Size, size2: Size) -> bool: ...
    @overload
    def __rmul__(size: Size, factor: int) -> Size: ...
    @overload
    def __mul__(size: Size, factor: float) -> SizeF: ...
    @overload
    def __mul__(size1: Size, size2: Size) -> Size: ...
    @overload
    def __mul__(size: Size, factor: int) -> Size: ...
    @overload
    def __sub__(size1: Size, size2: Size) -> Size: ...
    @overload
    def __sub__(size: Size, point: Point) -> Size: ...
    @overload
    def __sub__(size: Size, value: int) -> Size: ...
    @overload
    def __neg__(size: Size) -> Size: ...
    @overload
    @staticmethod
    def Round(size: SizeF) -> Size: ...
    @overload
    @Height.setter
    def Height(self, value: int) -> None: ...
    @overload
    @Width.setter
    def Width(self, value: int) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def Truncate(size: SizeF) -> Size: ...


class SizeF:
    @overload
    def __init__(self, point: PointF): ...
    @overload
    def __init__(self, width: float, height: float): ...
    Empty: SizeF
    MaxValue: SizeF
    MinValue: SizeF
    PositiveInfinity: SizeF
    NegativeInfinity: SizeF
    @overload
    @staticmethod
    def Abs(size: SizeF) -> SizeF: ...
    @overload
    def Contains(self, point: PointF) -> bool: ...
    @overload
    def Contains(self, x: float, y: float) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: SizeF) -> bool: ...
    @overload
    def FitTo(self, constraint: SizeF) -> SizeF: ...
    @overload
    @property
    def Height(self) -> float: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    @property
    def IsZero(self) -> bool: ...
    @overload
    @property
    def Width(self) -> float: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Max(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    @staticmethod
    def Min(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __add__(size: SizeF, value: float) -> SizeF: ...
    @overload
    def __add__(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __truediv__(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __truediv__(size: SizeF, factor: float) -> SizeF: ...
    @overload
    def __eq__(size1: SizeF, size2: SizeF) -> bool: ...
    @overload
    def op_Explicit(point: PointF) -> SizeF: ...
    @overload
    def op_Implicit(size: Size) -> SizeF: ...
    @overload
    def __ne__(size1: SizeF, size2: SizeF) -> bool: ...
    @overload
    def __rmul__(size: SizeF, factor: float) -> SizeF: ...
    @overload
    def __mul__(size: SizeF, factor: float) -> SizeF: ...
    @overload
    def __mul__(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __sub__(size1: SizeF, size2: SizeF) -> SizeF: ...
    @overload
    def __sub__(size: SizeF, value: float) -> SizeF: ...
    @overload
    def __neg__(size: SizeF) -> SizeF: ...
    @overload
    @Height.setter
    def Height(self, value: float) -> None: ...
    @overload
    @Width.setter
    def Width(self, value: float) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SolidBrush(Brush):
    @overload
    def __init__(self, color: Color): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Color(self) -> Color: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Instantiator() -> Func: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @overload
    @ControlObject.setter
    def ControlObject(self, value: Object) -> None: ...
    @overload
    def ToString(self) -> str: ...


class SystemColors:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Control() -> Color: ...
    @overload
    @property
    def ControlBackground() -> Color: ...
    @overload
    @property
    def ControlText() -> Color: ...
    @overload
    @property
    def DisabledText() -> Color: ...
    @overload
    @property
    def Highlight() -> Color: ...
    @overload
    @property
    def HighlightText() -> Color: ...
    @overload
    @property
    def LinkText() -> Color: ...
    @overload
    @property
    def Selection() -> Color: ...
    @overload
    @property
    def SelectionText() -> Color: ...
    @overload
    @property
    def WindowBackground() -> Color: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class SystemFont(Enum):
    Default = 0
    Bold = 1
    Label = 2
    TitleBar = 3
    ToolTip = 4
    MenuBar = 5
    Menu = 6
    Message = 7
    Palette = 8
    StatusBar = 9
    User = 10


class SystemFonts:
    @overload
    @staticmethod
    def Bold(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Cached(systemFont: SystemFont, size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    @staticmethod
    def Default(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Label(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Menu(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def MenuBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Message(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def Palette(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def StatusBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def TitleBar(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    @staticmethod
    def ToolTip(size: Nullable, decoration: FontDecoration) -> Font: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def User(size: Nullable, decoration: FontDecoration) -> Font: ...


class SystemIcons:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def Get(type: SystemIconType, size: SystemIconSize) -> Icon: ...
    @overload
    @staticmethod
    def GetFileIcon(fileName: str, size: SystemIconSize) -> Icon: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class SystemIconSize(Enum):
    Large = 0
    Small = 1


class SystemIconType(Enum):
    OpenDirectory = 0
    CloseDirectory = 1
    Question = 2
    Error = 3
    Information = 4
    Warning = 5


class TextureBrush(Brush):
    @overload
    def __init__(self, image: Image, opacity: float): ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Instantiator() -> Func: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def Transform(self) -> IMatrix: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @ControlObject.setter
    def ControlObject(self, value: Object) -> None: ...
    @overload
    @Opacity.setter
    def Opacity(self, value: float) -> None: ...
    @overload
    @Transform.setter
    def Transform(self, value: IMatrix) -> None: ...
    @overload
    def ToString(self) -> str: ...
