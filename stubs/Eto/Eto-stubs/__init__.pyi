from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import Drawing
import Forms
import IO
import Threading

__all__ = ['Drawing', 'Forms', 'IO', 'Threading']


class AttachableMemberIdentifier:
    @overload
    def __init__(self, declaringType: Type, memberName: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: AttachableMemberIdentifier) -> bool: ...
    @overload
    @property
    def DeclaringType(self) -> Type: ...
    @overload
    @property
    def MemberName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def __eq__(left: AttachableMemberIdentifier, right: AttachableMemberIdentifier) -> bool: ...
    @overload
    def __ne__(left: AttachableMemberIdentifier, right: AttachableMemberIdentifier) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class AutoInitializeAttribute:
    @overload
    def __init__(self, initialize: bool): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Initialize(self) -> bool: ...
    @overload
    @property
    def TypeId(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: Object) -> bool: ...
    @overload
    def ToString(self) -> str: ...




class ContentPropertyAttribute:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def TypeId(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: Object) -> bool: ...
    @overload
    def ToString(self) -> str: ...




class DefaultStyleProvider:
    @overload
    def __init__(self): ...
    @overload
    def Add(self, style: str, handler: Action) -> None: ...
    @overload
    def add_StyleWidget(self, value: Action) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Inherit(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleWidget(self, value: Action) -> None: ...
    @overload
    @Inherit.setter
    def Inherit(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...






class EtoEnvironment:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Is64BitProcess() -> bool: ...
    @overload
    @property
    def Platform() -> OperatingSystemPlatform: ...
    @overload
    @staticmethod
    def GetFolderPath(folder: EtoSpecialFolder) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class EtoMemberIdentifier(AttachableMemberIdentifier):
    @overload
    def __init__(self, declaringType: Type, memberName: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Equals(self, other: AttachableMemberIdentifier) -> bool: ...
    @overload
    @property
    def DeclaringType(self) -> Type: ...
    @overload
    @property
    def MemberName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class EtoSpecialFolder(Enum):
    ApplicationSettings = 0
    ApplicationResources = 1
    Documents = 2
    EntryExecutable = 3
    Downloads = 4


class ExportHandlerAttribute(PlatformExtensionAttribute):
    @overload
    def __init__(self, widgetType: Type, handlerType: Type): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def HandlerType(self) -> Type: ...
    @overload
    @property
    def PlatformID(self) -> str: ...
    @overload
    @property
    def TypeId(self) -> Object: ...
    @overload
    @property
    def WidgetType(self) -> Type: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: Object) -> bool: ...
    @overload
    def Register(self, platform: Platform) -> None: ...
    @overload
    @PlatformID.setter
    def PlatformID(self) -> MutableSequence[str]: ...
    @overload
    def Supports(self, platform: Platform) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class ExportInitializerAttribute(PlatformExtensionAttribute):
    @overload
    def __init__(self, initializerType: Type): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def InitializerType(self) -> Type: ...
    @overload
    @property
    def PlatformID(self) -> str: ...
    @overload
    @property
    def TypeId(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: Object) -> bool: ...
    @overload
    def Register(self, platform: Platform) -> None: ...
    @overload
    @PlatformID.setter
    def PlatformID(self) -> MutableSequence[str]: ...
    @overload
    def Supports(self, platform: Platform) -> bool: ...
    @overload
    def ToString(self) -> str: ...




class FileAction(Enum):
    OpenFile = 0
    SaveFile = 1
    SelectFolder = 2


class HandlerAttribute:
    @overload
    def __init__(self, type: Type): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Type(self) -> Type: ...
    @overload
    @property
    def TypeId(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: Object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class HandlerCreatedEventArgs:
    @overload
    def __init__(self, instance: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Instance(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class ICallback:
    pass


class ICallbackSource:
    @overload
    @property
    def Callback(self) -> Object: ...


class IControlObjectSource:
    @overload
    @property
    def ControlObject(self) -> Object: ...


class IHandler:
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Widget(self) -> Widget: ...
    @overload
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Initialize(self) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Widget.setter
    def Widget(self) -> MutableSequence[Widget]: ...


class IHandler:
    @overload
    def GetFolderPath(self, folder: EtoSpecialFolder) -> str: ...


class IHandlerSource:
    @overload
    @property
    def Handler(self) -> Object: ...


class IPlatformInitializer:
    @overload
    def Initialize(self, platform: Platform) -> None: ...


class IStyleProvider:
    @overload
    def ApplyCascadingStyle(self, container: Object, widget: Object, style: str) -> None: ...
    @overload
    def ApplyDefault(self, widget: Object) -> None: ...
    @overload
    def ApplyStyle(self, widget: Object, style: str) -> None: ...
    @overload
    @property
    def Inherit(self) -> bool: ...


class NamespaceInfo:
    @overload
    def __init__(self, ns: str): ...
    @overload
    def __init__(self, ns: str, assembly: Assembly): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindResource(self) -> Stream: ...
    @overload
    def FindResource(self, resourceName: str) -> Stream: ...
    @overload
    def FindType(self, typeName: str) -> Type: ...
    @overload
    @property
    def Assembly(self) -> Assembly: ...
    @overload
    @property
    def Namespace(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Assembly.setter
    def Assembly(self) -> MutableSequence[Assembly]: ...
    @overload
    def ToString(self) -> str: ...


class OperatingSystemPlatform:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def IsLinux(self) -> bool: ...
    @overload
    @property
    def IsMac(self) -> bool: ...
    @overload
    @property
    def IsMono(self) -> bool: ...
    @overload
    @property
    def IsNetCore(self) -> bool: ...
    @overload
    @property
    def IsUnix(self) -> bool: ...
    @overload
    @property
    def IsWindows(self) -> bool: ...
    @overload
    @property
    def IsWinRT(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class Platform:
    @overload
    def add_HandlerCreated(self, value: EventHandler) -> None: ...
    @overload
    def Add(self, instantiator: Func) -> None: ...
    @overload
    def Add(self, type: Type, instantiator: Func) -> None: ...
    @overload
    def add_WidgetCreated(self, value: EventHandler) -> None: ...
    @overload
    def Cache(self, cacheKey: Object) -> Dictionary: ...
    @overload
    def Create(self) -> T: ...
    @overload
    def Create(self, type: Type) -> Object: ...
    @overload
    def CreateShared(self) -> T: ...
    @overload
    def CreateShared(self, type: Type) -> Object: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Find(self) -> Func: ...
    @overload
    def Find(self, type: Type) -> Func: ...
    @overload
    @property
    def AllowReinitialize() -> bool: ...
    @overload
    @property
    def Context(self) -> IDisposable: ...
    @overload
    @property
    def Detect() -> Platform: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Instance() -> Platform: ...
    @overload
    @property
    def IsAndroid(self) -> bool: ...
    @overload
    @property
    def IsDesktop(self) -> bool: ...
    @overload
    @property
    def IsGtk(self) -> bool: ...
    @overload
    @property
    def IsIos(self) -> bool: ...
    @overload
    @property
    def IsMac(self) -> bool: ...
    @overload
    @property
    def IsMobile(self) -> bool: ...
    @overload
    @property
    def IsValid(self) -> bool: ...
    @overload
    @property
    def IsWinForms(self) -> bool: ...
    @overload
    @property
    def IsWpf(self) -> bool: ...
    @overload
    @staticmethod
    def Get(generatorType: str) -> Platform: ...
    @overload
    @property
    def SupportedFeatures(self) -> PlatformFeatures: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Initialize(platformType: str) -> None: ...
    @overload
    @staticmethod
    def Initialize(platform: Platform) -> None: ...
    @overload
    def Invoke(self, action: Action) -> None: ...
    @overload
    def Invoke(self, action: Func) -> T: ...
    @overload
    def LoadAssembly(self, assembly: Assembly) -> None: ...
    @overload
    def LoadAssembly(self, assemblyName: str) -> None: ...
    @overload
    def remove_HandlerCreated(self, value: EventHandler) -> None: ...
    @overload
    def remove_WidgetCreated(self, value: EventHandler) -> None: ...
    @overload
    @AllowReinitialize.setter
    def AllowReinitialize() -> None: ...
    @overload
    def Supports(self) -> bool: ...
    @overload
    def Supports(self, type: Type) -> bool: ...
    @overload
    def ThreadStart(self) -> IDisposable: ...
    @overload
    def ToString(self) -> str: ...


class PlatformExtensionAttribute:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def PlatformID(self) -> str: ...
    @overload
    @property
    def TypeId(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: Object) -> bool: ...
    @overload
    def Register(self, platform: Platform) -> None: ...
    @overload
    @PlatformID.setter
    def PlatformID(self) -> MutableSequence[str]: ...
    @overload
    def Supports(self, platform: Platform) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class PlatformFeatures(Enum):
    # None = 0
    CustomCellSupportsControlView = 1
    DrawableWithTransparentContent = 2
    TabIndexWithCustomContainers = 4


class Platforms:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class PropertyStore:
    @overload
    def __init__(self, parent: Object): ...
    def __iter__(self) -> Iterator[KeyValuePair]: ...
    @overload
    def Add(self, key: Object, value: Object) -> None: ...
    @overload
    def AddEvent(self, key: Object, value: Delegate) -> None: ...
    @overload
    def AddHandlerEvent(self, key: str, value: Delegate) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def ContainsKey(self, key: Object) -> bool: ...
    @overload
    def ContainsValue(self, value: Object) -> bool: ...
    @overload
    def Create(self, key: Object) -> T: ...
    @overload
    def Create(self, key: Object, create: Func) -> T: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Comparer(self) -> IEqualityComparer: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[Object]: ...
    @overload
    @property
    def Keys(self) -> KeyCollection: ...
    @overload
    @property
    def Parent(self) -> Object: ...
    @overload
    def Get(self, key: Object, defaultValue: T) -> T: ...
    @overload
    def Get(self, key: Object, defaultValue: Func) -> T: ...
    @overload
    @property
    def Values(self) -> ValueCollection: ...
    @overload
    def GetCommand(self, key: Object) -> ICommand: ...
    @overload
    def GetEnumerator(self) -> Enumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnDeserialization(self, sender: Object) -> None: ...
    @overload
    def Remove(self, key: Object) -> bool: ...
    @overload
    def RemoveEvent(self, key: Object, value: Delegate) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[Object]: ...
    @overload
    def Set(self, key: Object, value: T, defaultValue: T) -> None: ...
    @overload
    def Set(self, key: Object, value: T, propertyChanged: Action, defaultValue: T) -> bool: ...
    @overload
    def Set(self, key: Object, value: T, propertyChanged: PropertyChangedEventHandler, defaultValue: T, propertyName: str) -> bool: ...
    @overload
    def SetCommand(self, key: Object, value: ICommand, setEnabled: Action, addExecute: Action, removeExecute: Action, getParameter: Func) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def TriggerEvent(self, key: Object, sender: Object, args: T) -> None: ...
    @overload
    def TryGetValue(self, key: Object) -> Tuple[bool, Object]: ...
    @overload
    def TrySet(self, key: Object, value: T, defaultValue: T) -> bool: ...
    @overload
    def UpdateCommandCanExecute(self, key: Object) -> None: ...


class RuntimeNamePropertyAttribute:
    @overload
    def __init__(self, name: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def TypeId(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsDefaultAttribute(self) -> bool: ...
    @overload
    def Match(self, obj: Object) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class Style:
    @overload
    @staticmethod
    def Add(style: str, handler: StyleWidgetHandler) -> None: ...
    @overload
    @staticmethod
    def Add(style: str, styleHandler: StyleHandler) -> None: ...
    @overload
    @staticmethod
    def add_StyleWidget(value: Action) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Provider() -> IStyleProvider: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def remove_StyleWidget(value: Action) -> None: ...
    @overload
    @Provider.setter
    def Provider() -> None: ...
    @overload
    def ToString(self) -> str: ...






class UnhandledExceptionEventArgs:
    @overload
    def __init__(self, exception: Object, isTerminating: bool): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ExceptionObject(self) -> Object: ...
    @overload
    @property
    def IsTerminating(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class Widget:
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class WidgetCreatedEventArgs:
    @overload
    def __init__(self, instance: Widget): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Instance(self) -> Widget: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...






