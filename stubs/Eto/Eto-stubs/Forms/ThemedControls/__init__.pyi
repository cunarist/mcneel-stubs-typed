from typing import Tuple, Iterable, Iterator, overload
from enum import Enum



from ...Drawing import Image
from .. import ICallback
class ThemedAboutDialogHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Dialog: ...
    @property
    def Copyright(self) -> str: ...
    @property
    def Designers(self) -> Iterable[str]: ...
    @property
    def Developers(self) -> Iterable[str]: ...
    @property
    def Documenters(self) -> Iterable[str]: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @property
    def License(self) -> str: ...
    @property
    def Logo(self) -> Image: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def ProgramDescription(self) -> str: ...
    @property
    def ProgramName(self) -> str: ...
    @property
    def Title(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @property
    def Website(self) -> Uri: ...
    @property
    def WebsiteLabel(self) -> str: ...
    @property
    def Widget(self) -> AboutDialog: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    @Control.setter
    def Control(self, value: Dialog) -> None: ...
    @Copyright.setter
    def Copyright(self, value: str) -> None: ...
    @Designers.setter
    def Designers(self, value: Iterable[str]) -> None: ...
    @Developers.setter
    def Developers(self, value: Iterable[str]) -> None: ...
    @Documenters.setter
    def Documenters(self, value: Iterable[str]) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @License.setter
    def License(self, value: str) -> None: ...
    @Logo.setter
    def Logo(self, value: Image) -> None: ...
    @ProgramDescription.setter
    def ProgramDescription(self, value: str) -> None: ...
    @ProgramName.setter
    def ProgramName(self, value: str) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @Version.setter
    def Version(self, value: str) -> None: ...
    @Website.setter
    def Website(self, value: Uri) -> None: ...
    @WebsiteLabel.setter
    def WebsiteLabel(self, value: str) -> None: ...
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    def ToString(self) -> str: ...


from ...Drawing import Image
class ThemedButtonSegmentedItemHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> ToggleButton: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Widget(self) -> ButtonSegmentedItem: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    @Control.setter
    def Control(self, value: ToggleButton) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Padding
from ...Drawing import Size
from .. import IStyleProvider
from .. import DefaultStyleProvider
from ...Drawing import Rectangle
from ...Drawing import SizeF
from ...Drawing import Color
from ...Drawing import PointF
from ...Drawing import RectangleF
from ...Drawing import Point
from ...Drawing import Image
from .. import Widget
from .. import Platform
from .. import PropertyStore
class ThemedCollectionEditor(Panel):
    def __init__(self): ...
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    def add_DragDrop(self, value: EventHandler) -> None: ...
    def add_DragEnter(self, value: EventHandler) -> None: ...
    def add_DragLeave(self, value: EventHandler) -> None: ...
    def add_DragOver(self, value: EventHandler) -> None: ...
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    def add_GotFocus(self, value: EventHandler) -> None: ...
    def add_KeyDown(self, value: EventHandler) -> None: ...
    def add_KeyUp(self, value: EventHandler) -> None: ...
    def add_Load(self, value: EventHandler) -> None: ...
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    def add_LostFocus(self, value: EventHandler) -> None: ...
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    def add_MouseDown(self, value: EventHandler) -> None: ...
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: EventHandler) -> None: ...
    def add_MouseUp(self, value: EventHandler) -> None: ...
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    def add_PreLoad(self, value: EventHandler) -> None: ...
    def add_Shown(self, value: EventHandler) -> None: ...
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    def add_TextInput(self, value: EventHandler) -> None: ...
    def add_UnLoad(self, value: EventHandler) -> None: ...
    def AttachNative(self) -> None: ...
    def Detach(self) -> None: ...
    def DetachNative(self) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Children(self) -> Iterable[Control]: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataContext(self) -> Object: ...
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def ElementType(self) -> Type: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def ExtraContent(self) -> Control: ...
    @property
    def Handler(self) -> Object: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsAttached(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsSuspended(self) -> bool: ...
    @property
    def IsVisualControl(self) -> bool: ...
    @property
    def Loaded(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def LogicalParent(self) -> Container: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Container: ...
    @property
    def Parent(self) -> Widget: ...
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @property
    def ParentWindow(self) -> Window: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def VisualParent(self) -> Container: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    def remove_DragOver(self, value: EventHandler) -> None: ...
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    def remove_Load(self, value: EventHandler) -> None: ...
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    def remove_Shown(self, value: EventHandler) -> None: ...
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    def remove_TextInput(self, value: EventHandler) -> None: ...
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    def RemoveAll(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DataContext.setter
    def DataContext(self, value: Object) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @ElementType.setter
    def ElementType(self, value: Type) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ExtraContent.setter
    def ExtraContent(self, value: Control) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @StyleProvider.setter
    def StyleProvider(self, value: IStyleProvider) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...
    def Unbind(self) -> None: ...
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ...Drawing import Color
from ...Drawing import Size
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedCollectionEditorHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> ThemedCollectionEditor: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @property
    def ElementType(self) -> Type: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> CollectionEditor: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: ThemedCollectionEditor) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DataStore.setter
    def DataStore(self, value: Iterable[Object]) -> None: ...
    @ElementType.setter
    def ElementType(self, value: Type) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Color
from ...Drawing import Size
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedColorPickerHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowAlpha(self) -> bool: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Color(self) -> Color: ...
    @property
    def Control(self) -> Control: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> ColorPicker: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowAlpha.setter
    def AllowAlpha(self, value: bool) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Color.setter
    def Color(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Control) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Padding
from ...Drawing import Font
from ...Drawing import Size
from ...Drawing import Color
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedDocumentControlHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AllowReordering(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Control(self) -> TableLayout: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def TabPadding(self) -> Padding: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> DocumentControl: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPage(self, index: int) -> DocumentPage: ...
    def GetPageCount(self) -> int: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    def InsertPage(self, index: int, page: DocumentPage) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def RemovePage(self, index: int) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AllowReordering.setter
    def AllowReordering(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Control.setter
    def Control(self, value: TableLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @TabPadding.setter
    def TabPadding(self, value: Padding) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Image
from ...Drawing import Size
from ...Drawing import Padding
from ...Drawing import Color
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
class ThemedDocumentPageHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Closable(self) -> bool: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def Control(self) -> Panel: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> DocumentPage: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Closable.setter
    def Closable(self, value: bool) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Control.setter
    def Control(self, value: Panel) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Padding
from ...Drawing import Size
from ...Drawing import Color
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedExpanderHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def CollapsedButtonText(self) -> str: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def Control(self) -> StackLayout: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Expanded(self) -> bool: ...
    @property
    def ExpandedButtonText(self) -> str: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Header(self) -> Control: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> Expander: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @CollapsedButtonText.setter
    def CollapsedButtonText(self, value: str) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Control.setter
    def Control(self, value: StackLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Expanded.setter
    def Expanded(self, value: bool) -> None: ...
    @ExpandedButtonText.setter
    def ExpandedButtonText(self, value: str) -> None: ...
    @Header.setter
    def Header(self, value: Control) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from .. import FileAction
from ...Drawing import Color
from ...Drawing import Size
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedFilePickerHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def ClearFilters(self) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> StackLayout: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def CurrentFilterIndex(self) -> int: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FileAction(self) -> FileAction: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Title(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> FilePicker: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    def InsertFilter(self, index: int, filter: FileFilter) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def RemoveFilter(self, index: int) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: StackLayout) -> None: ...
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self, value: int) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @FileAction.setter
    def FileAction(self, value: FileAction) -> None: ...
    @FilePath.setter
    def FilePath(self, value: str) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Title.setter
    def Title(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Font
from ...Drawing import Color
from ...Drawing import Size
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedFontPickerHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Button: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Value(self) -> Font: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> FontPicker: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Button) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Value.setter
    def Value(self, value: Font) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Image
class ThemedMenuSegmentedItemHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def CanSelect(self) -> bool: ...
    @property
    def Control(self) -> ToggleButton: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @property
    def Image(self) -> Image: ...
    @property
    def Menu(self) -> ContextMenu: ...
    @property
    def MenuDelay(self) -> TimeSpan: ...
    @property
    def MenuIndicator(self) -> str: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Selected(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def Widget(self) -> MenuSegmentedItem: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    @CanSelect.setter
    def CanSelect(self, value: bool) -> None: ...
    @Control.setter
    def Control(self, value: ToggleButton) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Image.setter
    def Image(self, value: Image) -> None: ...
    @Menu.setter
    def Menu(self, value: ContextMenu) -> None: ...
    @MenuDelay.setter
    def MenuDelay(self, value: TimeSpan) -> None: ...
    @MenuIndicator.setter
    def MenuIndicator(self, value: str) -> None: ...
    @Selected.setter
    def Selected(self, value: bool) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Padding
from ...Drawing import Size
from .. import IStyleProvider
from .. import DefaultStyleProvider
from ...Drawing import Rectangle
from ...Drawing import SizeF
from ...Drawing import Color
from ...Drawing import PointF
from ...Drawing import RectangleF
from ...Drawing import Point
from ...Drawing import Image
from .. import Widget
from .. import Platform
from .. import PropertyStore
class ThemedPropertyGrid(Panel):
    def __init__(self): ...
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    def add_DragDrop(self, value: EventHandler) -> None: ...
    def add_DragEnter(self, value: EventHandler) -> None: ...
    def add_DragLeave(self, value: EventHandler) -> None: ...
    def add_DragOver(self, value: EventHandler) -> None: ...
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    def add_GotFocus(self, value: EventHandler) -> None: ...
    def add_KeyDown(self, value: EventHandler) -> None: ...
    def add_KeyUp(self, value: EventHandler) -> None: ...
    def add_Load(self, value: EventHandler) -> None: ...
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    def add_LostFocus(self, value: EventHandler) -> None: ...
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    def add_MouseDown(self, value: EventHandler) -> None: ...
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    def add_MouseMove(self, value: EventHandler) -> None: ...
    def add_MouseUp(self, value: EventHandler) -> None: ...
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    def add_PreLoad(self, value: EventHandler) -> None: ...
    def add_PropertyValueChanged(self, value: EventHandler) -> None: ...
    def add_ShowCategoriesChanged(self, value: EventHandler) -> None: ...
    def add_Shown(self, value: EventHandler) -> None: ...
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    def add_TextInput(self, value: EventHandler) -> None: ...
    def add_UnLoad(self, value: EventHandler) -> None: ...
    def AttachNative(self) -> None: ...
    def CreateCellValueBinding(self) -> IndirectBinding: ...
    def Detach(self) -> None: ...
    def DetachNative(self) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Bindings(self) -> BindingCollection: ...
    @property
    def Bounds(self) -> Rectangle: ...
    @property
    def Children(self) -> Iterable[Control]: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Content(self) -> Control: ...
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Controls(self) -> Iterable[Control]: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DataContext(self) -> Object: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Handler(self) -> Object: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def IsAttached(self) -> bool: ...
    @property
    def IsDisposed(self) -> bool: ...
    @property
    def IsSuspended(self) -> bool: ...
    @property
    def IsVisualControl(self) -> bool: ...
    @property
    def Loaded(self) -> bool: ...
    @property
    def Location(self) -> Point: ...
    @property
    def LogicalParent(self) -> Container: ...
    @property
    def MinimumSize(self) -> Size: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Padding(self) -> Padding: ...
    @property
    def Parent(self) -> Widget: ...
    @property
    def Parent(self) -> Container: ...
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @property
    def ParentWindow(self) -> Window: ...
    @property
    def Platform(self) -> Platform: ...
    @property
    def Properties(self) -> PropertyStore: ...
    @property
    def PropertyCellTypes(self) -> Iterable[PropertyCellType]: ...
    @property
    def SelectedObject(self) -> Object: ...
    @property
    def SelectedObjects(self) -> Iterable[Object]: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Style(self) -> str: ...
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Tag(self) -> Object: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def UseValueTypeDefaults(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def VisualParent(self) -> Container: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    def Refresh(self) -> None: ...
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    def remove_DragOver(self, value: EventHandler) -> None: ...
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    def remove_Load(self, value: EventHandler) -> None: ...
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    def remove_PropertyValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    def remove_ShowCategoriesChanged(self, value: EventHandler) -> None: ...
    def remove_Shown(self, value: EventHandler) -> None: ...
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    def remove_TextInput(self, value: EventHandler) -> None: ...
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    def RemoveAll(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Content.setter
    def Content(self, value: Control) -> None: ...
    @ContextMenu.setter
    def ContextMenu(self, value: ContextMenu) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DataContext.setter
    def DataContext(self, value: Object) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @MinimumSize.setter
    def MinimumSize(self, value: Size) -> None: ...
    @Padding.setter
    def Padding(self, value: Padding) -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: Object) -> None: ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: Iterable[Object]) -> None: ...
    @ShowCategories.setter
    def ShowCategories(self, value: bool) -> None: ...
    @ShowDescription.setter
    def ShowDescription(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Style.setter
    def Style(self, value: str) -> None: ...
    @StyleProvider.setter
    def StyleProvider(self, value: IStyleProvider) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Tag.setter
    def Tag(self, value: Object) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @UseValueTypeDefaults.setter
    def UseValueTypeDefaults(self, value: bool) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...
    def Unbind(self) -> None: ...
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ...Drawing import Color
from ...Drawing import Size
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedPropertyGridHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> ThemedPropertyGrid: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def SelectedObject(self) -> Object: ...
    @property
    def SelectedObjects(self) -> Iterable[Object]: ...
    @property
    def ShowCategories(self) -> bool: ...
    @property
    def ShowDescription(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> PropertyGrid: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def Refresh(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: ThemedPropertyGrid) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @SelectedObject.setter
    def SelectedObject(self, value: Object) -> None: ...
    @SelectedObjects.setter
    def SelectedObjects(self, value: Iterable[Object]) -> None: ...
    @ShowCategories.setter
    def ShowCategories(self, value: bool) -> None: ...
    @ShowDescription.setter
    def ShowDescription(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import SizeF
from ...Drawing import Color
from ...Drawing import Size
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedSegmentedButtonHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def ClearItems(self) -> None: ...
    def ClearSelection(self) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Panel: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def SelectedIndex(self) -> int: ...
    @property
    def SelectedIndexes(self) -> Iterable[int]: ...
    @property
    def SelectionMode(self) -> SegmentedSelectionMode: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Spacing(self) -> int: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> SegmentedButton: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    def InsertItem(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def RemoveItem(self, index: int, item: SegmentedItem) -> None: ...
    def ResumeLayout(self) -> None: ...
    def SelectAll(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Panel) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @SelectedIndex.setter
    def SelectedIndex(self, value: int) -> None: ...
    @SelectedIndexes.setter
    def SelectedIndexes(self, value: Iterable[int]) -> None: ...
    @SelectionMode.setter
    def SelectionMode(self, value: SegmentedSelectionMode) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Spacing.setter
    def Spacing(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetItem(self, index: int, item: SegmentedItem) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...




class ThemedSpinnerDirection(Enum):
    Clockwise = 1
    CounterClockwise = -1


from ...Drawing import Color
from ...Drawing import PenLineCap
from ...Drawing import Size
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedSpinnerHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Drawable: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Direction(self) -> ThemedSpinnerDirection: ...
    @property
    def DisabledAlpha(self) -> Single: ...
    @property
    def ElementColor(self) -> Color: ...
    @property
    def ElementSize(self) -> Single: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Increment(self) -> Single: ...
    @property
    def LineCap(self) -> PenLineCap: ...
    @property
    def LineThickness(self) -> Single: ...
    @property
    def Location(self) -> Point: ...
    @property
    def Mode(self) -> ThemedSpinnerMode: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def NumberOfElements(self) -> int: ...
    @property
    def NumberOfVisibleElements(self) -> int: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Speed(self) -> float: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> Spinner: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Drawable) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Direction.setter
    def Direction(self, value: ThemedSpinnerDirection) -> None: ...
    @DisabledAlpha.setter
    def DisabledAlpha(self, value: Single) -> None: ...
    @ElementColor.setter
    def ElementColor(self, value: Color) -> None: ...
    @ElementSize.setter
    def ElementSize(self, value: Single) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Increment.setter
    def Increment(self, value: Single) -> None: ...
    @LineCap.setter
    def LineCap(self, value: PenLineCap) -> None: ...
    @LineThickness.setter
    def LineThickness(self, value: Single) -> None: ...
    @Mode.setter
    def Mode(self, value: ThemedSpinnerMode) -> None: ...
    @NumberOfElements.setter
    def NumberOfElements(self, value: int) -> None: ...
    @NumberOfVisibleElements.setter
    def NumberOfVisibleElements(self, value: int) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @Speed.setter
    def Speed(self, value: float) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


class ThemedSpinnerMode(Enum):
    Line = 0
    Circle = 1


from ...Drawing import Size
from ...Drawing import Color
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedSplitterHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def ClientSize(self) -> Size: ...
    @property
    def Control(self) -> TableLayout: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def FixedPanel(self) -> SplitterFixedPanel: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def Panel1(self) -> Control: ...
    @property
    def Panel1MinimumSize(self) -> int: ...
    @property
    def Panel2(self) -> Control: ...
    @property
    def Panel2MinimumSize(self) -> int: ...
    @property
    def Position(self) -> int: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def RecurseToChildren(self) -> bool: ...
    @property
    def RelativePosition(self) -> float: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Splitter(self) -> Panel: ...
    @property
    def SplitterWidth(self) -> int: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> Splitter: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @ClientSize.setter
    def ClientSize(self, value: Size) -> None: ...
    @Control.setter
    def Control(self, value: TableLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @FixedPanel.setter
    def FixedPanel(self, value: SplitterFixedPanel) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Panel1.setter
    def Panel1(self, value: Control) -> None: ...
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self, value: int) -> None: ...
    @Panel2.setter
    def Panel2(self, value: Control) -> None: ...
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self, value: int) -> None: ...
    @Position.setter
    def Position(self, value: int) -> None: ...
    @RelativePosition.setter
    def RelativePosition(self, value: float) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @SplitterWidth.setter
    def SplitterWidth(self, value: int) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Font
from ...Drawing import Color
from ...Drawing import Size
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedStepperHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def Control(self) -> Panel: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def DownText(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def Orientation(self) -> Orientation: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def UpText(self) -> str: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> Stepper: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @Control.setter
    def Control(self, value: Panel) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @DownText.setter
    def DownText(self, value: str) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @Orientation.setter
    def Orientation(self, value: Orientation) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @UpText.setter
    def UpText(self, value: str) -> None: ...
    @ValidDirection.setter
    def ValidDirection(self, value: StepperValidDirections) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...


from ...Drawing import Font
from ...Drawing import Color
from ...Drawing import Size
from ...Drawing import SizeF
from ...Drawing import Rectangle
from ...Drawing import PointF
from ...Drawing import Point
from ...Drawing import Image
class ThemedTextStepperHandler:
    def __init__(self): ...
    def AttachEvent(self, id: str) -> None: ...
    def Dispose(self) -> None: ...
    def DoDragDrop(self, data: DataObject, allowedAction: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Focus(self) -> None: ...
    @property
    def AllowDrop(self) -> bool: ...
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @property
    def BackgroundColor(self) -> Color: ...
    @property
    def Callback(self) -> ICallback: ...
    @property
    def CaretIndex(self) -> int: ...
    @property
    def Control(self) -> TableLayout: ...
    @property
    def ControlObject(self) -> Object: ...
    @property
    def Cursor(self) -> Cursor: ...
    @property
    def Enabled(self) -> bool: ...
    @property
    def Font(self) -> Font: ...
    @property
    def HasControl(self) -> bool: ...
    @property
    def HasFocus(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def ID(self) -> str: ...
    @property
    def Location(self) -> Point: ...
    @property
    def MaxLength(self) -> int: ...
    @property
    def NativeHandle(self) -> IntPtr: ...
    @property
    def PlaceholderText(self) -> str: ...
    @property
    def PropagateLoadEvents(self) -> bool: ...
    @property
    def ReadOnly(self) -> bool: ...
    @property
    def Selection(self) -> Range: ...
    @property
    def ShowBorder(self) -> bool: ...
    @property
    def ShowStepper(self) -> bool: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Stepper(self) -> Stepper: ...
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @property
    def TabIndex(self) -> int: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @property
    def TextBox(self) -> TextBox: ...
    @property
    def TextColor(self) -> Color: ...
    @property
    def ToolTip(self) -> str: ...
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @property
    def Visible(self) -> bool: ...
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @property
    def Widget(self) -> TextStepper: ...
    @property
    def Width(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def GetNativeParentWindow(self) -> Window: ...
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    def GetType(self) -> Type: ...
    def HandleEvent(self, id: str, defaultEvent: bool) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    def IsEventHandled(self, id: str) -> bool: ...
    def MapPlatformCommand(self, systemAction: str, action: Command) -> None: ...
    def OnLoad(self, e: EventArgs) -> None: ...
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    def OnPreLoad(self, e: EventArgs) -> None: ...
    def OnUnLoad(self, e: EventArgs) -> None: ...
    def PointFromScreen(self, point: PointF) -> PointF: ...
    def PointToScreen(self, point: PointF) -> PointF: ...
    def Print(self) -> None: ...
    def ResumeLayout(self) -> None: ...
    def SelectAll(self) -> None: ...
    @AllowDrop.setter
    def AllowDrop(self, value: bool) -> None: ...
    @AutoSelectMode.setter
    def AutoSelectMode(self, value: AutoSelectMode) -> None: ...
    @BackgroundColor.setter
    def BackgroundColor(self, value: Color) -> None: ...
    @CaretIndex.setter
    def CaretIndex(self, value: int) -> None: ...
    @Control.setter
    def Control(self, value: TableLayout) -> None: ...
    @Cursor.setter
    def Cursor(self, value: Cursor) -> None: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @Font.setter
    def Font(self, value: Font) -> None: ...
    @Height.setter
    def Height(self, value: int) -> None: ...
    @ID.setter
    def ID(self, value: str) -> None: ...
    @MaxLength.setter
    def MaxLength(self, value: int) -> None: ...
    @PlaceholderText.setter
    def PlaceholderText(self, value: str) -> None: ...
    @ReadOnly.setter
    def ReadOnly(self, value: bool) -> None: ...
    @Selection.setter
    def Selection(self, value: Range) -> None: ...
    @ShowBorder.setter
    def ShowBorder(self, value: bool) -> None: ...
    @ShowStepper.setter
    def ShowStepper(self, value: bool) -> None: ...
    @Size.setter
    def Size(self, value: Size) -> None: ...
    @TabIndex.setter
    def TabIndex(self, value: int) -> None: ...
    @Text.setter
    def Text(self, value: str) -> None: ...
    @TextAlignment.setter
    def TextAlignment(self, value: TextAlignment) -> None: ...
    @TextColor.setter
    def TextColor(self, value: Color) -> None: ...
    @ToolTip.setter
    def ToolTip(self, value: str) -> None: ...
    @ValidDirection.setter
    def ValidDirection(self, value: StepperValidDirections) -> None: ...
    @Visible.setter
    def Visible(self, value: bool) -> None: ...
    @Width.setter
    def Width(self, value: int) -> None: ...
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    def SuspendLayout(self) -> None: ...
    def ToString(self) -> str: ...
