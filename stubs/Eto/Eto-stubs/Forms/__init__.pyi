from typing import overload, Tuple, Iterable, Iterator, Sequence, MutableSequence
from enum import Enum

import ThemedControls

__all__ = ['ThemedControls']


from ..Drawing import Image
class AboutDialog(CommonDialog):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, assembly: Assembly): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Copyright(self) -> str: ...
    @overload
    @property
    def Designers(self) -> Iterable[str]: ...
    @overload
    @property
    def Developers(self) -> Iterable[str]: ...
    @overload
    @property
    def Documenters(self) -> Iterable[str]: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def License(self) -> str: ...
    @overload
    @property
    def Logo(self) -> Image: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def ProgramDescription(self) -> str: ...
    @overload
    @property
    def ProgramName(self) -> str: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def Version(self) -> str: ...
    @overload
    @property
    def Website(self) -> Uri: ...
    @overload
    @property
    def WebsiteLabel(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Copyright.setter
    def Copyright(self) -> MutableSequence[str]: ...
    @overload
    @Designers.setter
    def Designers(self) -> MutableSequence[Iterable[str]]: ...
    @overload
    @Developers.setter
    def Developers(self) -> MutableSequence[Iterable[str]]: ...
    @overload
    @Documenters.setter
    def Documenters(self) -> MutableSequence[Iterable[str]]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @License.setter
    def License(self) -> MutableSequence[str]: ...
    @overload
    @Logo.setter
    def Logo(self) -> MutableSequence[Image]: ...
    @overload
    @ProgramDescription.setter
    def ProgramDescription(self) -> MutableSequence[str]: ...
    @overload
    @ProgramName.setter
    def ProgramName(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @Version.setter
    def Version(self) -> MutableSequence[str]: ...
    @overload
    @Website.setter
    def Website(self) -> MutableSequence[Uri]: ...
    @overload
    @WebsiteLabel.setter
    def WebsiteLabel(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...




class Application(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, platformType: str): ...
    @overload
    def __init__(self, platform: Platform): ...
    @overload
    def add_Initialized(self, value: EventHandler) -> None: ...
    @overload
    def add_IsActiveChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LocalizeString(self, value: EventHandler) -> None: ...
    @overload
    def add_NotificationActivated(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Terminating(self, value: EventHandler) -> None: ...
    @overload
    def add_UnhandledException(self, value: EventHandler) -> None: ...
    @overload
    def AsyncInvoke(self, action: Action) -> None: ...
    @overload
    def Attach(self, context: Object) -> Application: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def EnsureUIThread(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AlternateModifier(self) -> Keys: ...
    @overload
    @property
    def BadgeLabel(self) -> str: ...
    @overload
    @property
    def CommonModifier(self) -> Keys: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Instance() -> Application: ...
    @overload
    @property
    def IsActive(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def MainForm(self) -> Form: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def QuitIsSupported(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def UIThreadCheckMode(self) -> UIThreadCheckMode: ...
    @overload
    @property
    def Windows(self) -> Iterable[Window]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invoke(self, func: Func) -> T: ...
    @overload
    def Invoke(self, action: Action) -> None: ...
    @overload
    def InvokeAsync(self, func: Func) -> Task: ...
    @overload
    def InvokeAsync(self, action: Action) -> Task: ...
    @overload
    def Localize(self, source: Object, text: str) -> str: ...
    @overload
    def Open(self, url: str) -> None: ...
    @overload
    def Quit(self) -> None: ...
    @overload
    def remove_Initialized(self, value: EventHandler) -> None: ...
    @overload
    def remove_IsActiveChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocalizeString(self, value: EventHandler) -> None: ...
    @overload
    def remove_NotificationActivated(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Terminating(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnhandledException(self, value: EventHandler) -> None: ...
    @overload
    def Restart(self) -> None: ...
    @overload
    def Run(self) -> None: ...
    @overload
    def Run(self, mainForm: Form) -> None: ...
    @overload
    def Run(self, dialog: Dialog) -> None: ...
    @overload
    def RunIteration(self) -> None: ...
    @overload
    @BadgeLabel.setter
    def BadgeLabel(self) -> MutableSequence[str]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MainForm.setter
    def MainForm(self) -> MutableSequence[Form]: ...
    @overload
    @Name.setter
    def Name(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @UIThreadCheckMode.setter
    def UIThreadCheckMode(self) -> MutableSequence[UIThreadCheckMode]: ...
    @overload
    def ToString(self) -> str: ...


class AutoSelectMode(Enum):
    OnFocus = 0
    Never = 1
    Always = 2




class BindableExtensions:
    @overload
    @staticmethod
    def Bind(bindable: IBindable, widgetPropertyName: str, sourceBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(bindable: IBindable, controlBinding: IndirectBinding, valueBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(control: TWidget, controlProperty: Expression, sourceBinding: DirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(bindable: IBindable, propertyName: str, source: Object, sourcePropertyName: str, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(control: TWidget, controlProperty: Expression, source: TSource, sourceProperty: Expression, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(control: TWidget, controlProperty: Expression, source: TSource, sourceBinding: IndirectBinding, mode: DualBindingMode) -> DualBinding: ...
    @overload
    @staticmethod
    def Bind(bindable: IBindable, controlBinding: IndirectBinding, objectValue: Object, objectBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    @staticmethod
    def BindDataContext(control: TWidget, controlProperty: Expression, sourceProperty: Expression, mode: DualBindingMode, defaultControlValue: TValue, defaultContextValue: TValue) -> DualBinding: ...
    @overload
    @staticmethod
    def BindDataContext(control: TWidget, controlProperty: Expression, sourceBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: TValue, defaultContextValue: TValue) -> DualBinding: ...
    @overload
    @staticmethod
    def BindDataContext(bindable: IBindable, controlPropertyName: str, dataContextPropertyName: str, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    @staticmethod
    def BindDataContext(bindable: IBindable, controlBinding: IndirectBinding, dataContextBinding: IndirectBinding, mode: DualBindingMode, defaultControlValue: T, defaultContextValue: T) -> DualBinding: ...
    @overload
    @staticmethod
    def DefaultIfNull(binding: BindableBinding, defaultValue: Nullable) -> BindableBinding: ...
    @overload
    @staticmethod
    def DefaultIfNull(binding: BindableBinding, defaultValue: TValue) -> BindableBinding: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Inverse(binding: BindableBinding) -> BindableBinding: ...
    @overload
    @staticmethod
    def Inverse(binding: BindableBinding) -> BindableBinding: ...
    @overload
    @staticmethod
    def Inverse(binding: DirectBinding) -> DirectBinding: ...
    @overload
    @staticmethod
    def Inverse(binding: DirectBinding) -> DirectBinding: ...
    @overload
    def ToString(self) -> str: ...


class BindableWidget(Widget):
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class Binding:
    @overload
    def add_Changed(self, value: EventHandler) -> None: ...
    @overload
    def add_Changing(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def AddPropertyEvent(obj: T, propertyExpression: Expression, eh: EventHandler) -> None: ...
    @overload
    @staticmethod
    def AddPropertyEvent(obj: Object, propertyName: str, eh: EventHandler) -> None: ...
    @overload
    @staticmethod
    def Delegate(getValue: Func, setValue: Action, addChangeEvent: Action, removeChangeEvent: Action) -> DirectBinding: ...
    @overload
    @staticmethod
    def Delegate(getValue: Func, setValue: Action, addChangeEvent: Action, removeChangeEvent: Action, defaultGetValue: TValue, defaultSetValue: TValue) -> IndirectBinding: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def ExecuteCommand(dataContext: Object, commandExpression: Expression, parameter: Object) -> None: ...
    @overload
    @staticmethod
    def ExecuteCommand(dataContext: Object, commandBinding: IndirectBinding, parameter: Object) -> None: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Property(propertyName: str) -> IndirectBinding: ...
    @overload
    @staticmethod
    def Property(propertyExpression: Expression) -> IndirectBinding: ...
    @overload
    @staticmethod
    def Property(model: T, propertyExpression: Expression) -> DirectBinding: ...
    @overload
    @staticmethod
    def Property(propertyName: str, ignoreCase: bool) -> IndirectBinding: ...
    @overload
    def remove_Changed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Changing(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def RemovePropertyEvent(obj: Object, eh: EventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def Update(self, mode: BindingUpdateMode) -> None: ...


class BindingChangedEventArgs:
    @overload
    def __init__(self, value: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Value(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class BindingChangingEventArgs:
    @overload
    def __init__(self, value: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def Value(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[Object]: ...
    @overload
    def ToString(self) -> str: ...


class BindingCollection:
    @overload
    def __init__(self): ...
    def __iter__(self) -> Iterator[IBinding]: ...
    def __getitem__(self, index: int) -> IBinding: ...
    def __setitem__(self, index: int, value: IBinding): ...
    @overload
    def Add(self, item: IBinding) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: IBinding) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[IBinding], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: IBinding) -> int: ...
    @overload
    def Insert(self, index: int, item: IBinding) -> None: ...
    @overload
    def Remove(self, item: IBinding) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def Update(self, mode: BindingUpdateMode) -> None: ...


class BindingExtensions:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def WhenLostFocus(binding: BindableBinding) -> BindableBinding: ...


class BindingUpdateMode(Enum):
    Source = 0
    Destination = 1


class BorderType(Enum):
    Bezel = 0
    Line = 1
    # None = 2


from ..Drawing import Image
from ..Drawing import Size
from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
class Button(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: EventHandler): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def ImagePosition(self) -> ButtonImagePosition: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PerformClick(self) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @ImagePosition.setter
    def ImagePosition(self) -> MutableSequence[ButtonImagePosition]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class ButtonImagePosition(Enum):
    Left = 0
    Right = 1
    Above = 2
    Below = 3
    Overlay = 4


from ..Drawing import Image
class ButtonMenuItem(MenuItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: EventHandler): ...
    @overload
    def __init__(self, command: Command): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validate(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Items(self) -> MenuItemCollection: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Trim(self) -> bool: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PerformClick(self) -> None: ...
    @overload
    def PerformValidate(self) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validate(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Trim.setter
    def Trim(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class ButtonSegmentedItem(SegmentedItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: Command): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> SegmentedButton: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Selected(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Selected.setter
    def Selected(self) -> MutableSequence[bool]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class ButtonToolItem(ToolItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, click: EventHandler): ...
    @overload
    def __init__(self, command: Command): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnClick(self, e: EventArgs) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Calendar(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedDateChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedRangeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaxDate(self) -> DateTime: ...
    @overload
    @property
    def MinDate(self) -> DateTime: ...
    @overload
    @property
    def Mode(self) -> CalendarMode: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedDate(self) -> DateTime: ...
    @overload
    @property
    def SelectedRange(self) -> Range: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedDateChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedRangeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaxDate.setter
    def MaxDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @MinDate.setter
    def MinDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @Mode.setter
    def Mode(self) -> MutableSequence[CalendarMode]: ...
    @overload
    @SelectedDate.setter
    def SelectedDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @SelectedRange.setter
    def SelectedRange(self) -> MutableSequence[Range]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class CalendarMode(Enum):
    Single = 0
    Range = 1


class Cell(Widget):
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
class CellEventArgs:
    @overload
    def __init__(self, row: int, item: Object, cellState: CellStates): ...
    @overload
    def __init__(self, grid: Grid, cell: Cell, row: int, item: Object, cellState: CellStates): ...
    @overload
    def __init__(self, grid: Grid, cell: Cell, row: int, column: int, item: Object, cellState: CellStates, control: Control): ...
    @overload
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cell(self) -> Cell: ...
    @overload
    @property
    def CellState(self) -> CellStates: ...
    @overload
    @property
    def CellTextColor(self) -> Color: ...
    @overload
    @property
    def Column(self) -> int: ...
    @overload
    @property
    def Control(self) -> Control: ...
    @overload
    @property
    def Grid(self) -> Grid: ...
    @overload
    @property
    def GridColumn(self) -> GridColumn: ...
    @overload
    @property
    def Handled(self) -> bool: ...
    @overload
    @property
    def IsEditing(self) -> bool: ...
    @overload
    @property
    def IsSelected(self) -> bool: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def Row(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> None: ...
    @overload
    @Handled.setter
    def Handled(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Graphics
from ..Drawing import RectangleF
class CellPaintEventArgs(PaintEventArgs):
    @overload
    def __init__(self, graphics: Graphics, clipRectangle: RectangleF, cellState: CellStates, item: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CellState(self) -> CellStates: ...
    @overload
    @property
    def ClipRectangle(self) -> RectangleF: ...
    @overload
    @property
    def Graphics(self) -> Graphics: ...
    @overload
    @property
    def IsEditing(self) -> bool: ...
    @overload
    @property
    def IsSelected(self) -> bool: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class CellStates(Enum):
    # None = 0
    Selected = 1
    Editing = 2


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class CheckBox(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Checked(self) -> Nullable: ...
    @overload
    @property
    def CheckedBinding(self) -> BindableBinding: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ThreeState(self) -> bool: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[Nullable]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ThreeState.setter
    def ThreeState(self) -> MutableSequence[bool]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class CheckBoxCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, column: int): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Binding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Binding.setter
    def Binding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
from ..Drawing import Size
from ..Drawing import Padding
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class CheckBoxList(Panel):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedKeysChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedValuesChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Items(self) -> ListItemCollection: ...
    @overload
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ItemToolTipBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Orientation(self) -> Orientation: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedKeys(self) -> Iterable[str]: ...
    @overload
    @property
    def SelectedKeysBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedValues(self) -> Iterable[Object]: ...
    @overload
    @property
    def SelectedValuesBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Spacing(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_SelectedKeysChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedValuesChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ItemKeyBinding.setter
    def ItemKeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemTextBinding.setter
    def ItemTextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemToolTipBinding.setter
    def ItemToolTipBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[Orientation]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @SelectedKeys.setter
    def SelectedKeys(self) -> MutableSequence[Iterable[str]]: ...
    @overload
    @SelectedValues.setter
    def SelectedValues(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class CheckCommand(Command):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: EventHandler): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Executed(self, value: EventHandler) -> None: ...
    @overload
    def CreateMenuItem(self) -> MenuItem: ...
    @overload
    def CreateToolItem(self) -> ToolItem: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Execute(self) -> None: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DelegatedCommand(self) -> ICommand: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def MenuText(self) -> str: ...
    @overload
    @property
    def Parent(self) -> IBindable: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolBarText(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Executed(self, value: EventHandler) -> None: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DelegatedCommand.setter
    def DelegatedCommand(self) -> MutableSequence[ICommand]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @MenuText.setter
    def MenuText(self) -> MutableSequence[str]: ...
    @overload
    @Parent.setter
    def Parent(self) -> MutableSequence[IBindable]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolBarText.setter
    def ToolBarText(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class CheckMenuItem(MenuItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validate(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PerformClick(self) -> None: ...
    @overload
    def PerformValidate(self) -> None: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validate(self, value: EventHandler) -> None: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class CheckToolItem(ToolItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnCheckedChanged(self, e: EventArgs) -> None: ...
    @overload
    def OnClick(self, e: EventArgs) -> None: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class Clipboard(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, type: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ContainsHtml(self) -> bool: ...
    @overload
    @property
    def ContainsImage(self) -> bool: ...
    @overload
    @property
    def ContainsText(self) -> bool: ...
    @overload
    @property
    def ContainsUris(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Html(self) -> str: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Instance() -> Clipboard: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Types(self) -> Iterable[str]: ...
    @overload
    @property
    def Uris(self) -> Iterable[Uri]: ...
    @overload
    def GetData(self, type: str) -> Iterable[Byte]: ...
    @overload
    def GetDataStream(self, type: str) -> Stream: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObject(self, type: str) -> T: ...
    @overload
    def GetObject(self, type: str) -> Object: ...
    @overload
    def GetString(self, type: str) -> str: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Html.setter
    def Html(self) -> MutableSequence[str]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @Uris.setter
    def Uris(self) -> MutableSequence[Iterable[Uri]]: ...
    @overload
    def SetData(self, value: Iterable[Byte], type: str) -> None: ...
    @overload
    def SetDataStream(self, stream: Stream, type: str) -> None: ...
    @overload
    def SetObject(self, value: Object, type: str) -> None: ...
    @overload
    def SetString(self, value: str, type: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class CollectionEditor(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def ElementType(self) -> Type: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @ElementType.setter
    def ElementType(self) -> MutableSequence[Type]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Color
class ColorDialog(CommonDialog):
    @overload
    def __init__(self): ...
    @overload
    def add_ColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AllowAlpha(self) -> bool: ...
    @overload
    @property
    def Color(self) -> Color: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_ColorChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @AllowAlpha.setter
    def AllowAlpha(self) -> MutableSequence[bool]: ...
    @overload
    @Color.setter
    def Color(self) -> MutableSequence[Color]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class ColorPicker(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowAlpha(self) -> bool: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Value(self) -> Color: ...
    @overload
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowAlpha.setter
    def AllowAlpha(self) -> MutableSequence[bool]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[Color]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...




from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class ComboBox(DropDown):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_DropDownClosed(self, value: EventHandler) -> None: ...
    @overload
    def add_DropDownOpening(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormatItem(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoComplete(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def ItemImageBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Items(self) -> ListItemCollection: ...
    @overload
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedKey(self) -> str: ...
    @overload
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedValue(self) -> Object: ...
    @overload
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_DropDownClosed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DropDownOpening(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormatItem(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoComplete.setter
    def AutoComplete(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ItemImageBinding.setter
    def ItemImageBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemKeyBinding.setter
    def ItemKeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemTextBinding.setter
    def ItemTextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @KeyBinding.setter
    def KeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedKey.setter
    def SelectedKey(self) -> MutableSequence[str]: ...
    @overload
    @SelectedValue.setter
    def SelectedValue(self) -> MutableSequence[Object]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextBinding.setter
    def TextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class ComboBoxCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, column: int): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Binding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ComboKeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ComboTextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Binding.setter
    def Binding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ComboKeyBinding.setter
    def ComboKeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ComboTextBinding.setter
    def ComboTextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Image
class Command:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: EventHandler): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Executed(self, value: EventHandler) -> None: ...
    @overload
    def CreateMenuItem(self) -> MenuItem: ...
    @overload
    def CreateToolItem(self) -> ToolItem: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Execute(self) -> None: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DelegatedCommand(self) -> ICommand: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def MenuText(self) -> str: ...
    @overload
    @property
    def Parent(self) -> IBindable: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolBarText(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(command: Command) -> ToolItem: ...
    @overload
    def op_Implicit(command: Command) -> MenuItem: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Executed(self, value: EventHandler) -> None: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DelegatedCommand.setter
    def DelegatedCommand(self) -> MutableSequence[ICommand]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @MenuText.setter
    def MenuText(self) -> MutableSequence[str]: ...
    @overload
    @Parent.setter
    def Parent(self) -> MutableSequence[IBindable]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolBarText.setter
    def ToolBarText(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class CommonControl(Control):
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class CommonDialog(Widget):
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Container(Control):
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import PointF
class ContextMenu(Menu):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[MenuItem]): ...
    @overload
    def __init__(self, items: Iterable[MenuItem]): ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Opening(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Items(self) -> MenuItemCollection: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Trim(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Opening(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Trim.setter
    def Trim(self) -> MutableSequence[bool]: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def Show(self, location: PointF) -> None: ...
    @overload
    def Show(self, relativeTo: Control) -> None: ...
    @overload
    def Show(self, relativeTo: Control, location: Nullable) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Control(BindableWidget):
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def op_Implicit(image: Image) -> Control: ...
    @overload
    def op_Implicit(labelText: str) -> Control: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Bitmap
from ..Drawing import PointF
from ..Drawing import Icon
class Cursor(Widget):
    @overload
    def __init__(self, type: CursorType): ...
    @overload
    def __init__(self, fileName: str): ...
    @overload
    def __init__(self, stream: Stream): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def __init__(self, image: Bitmap, hotspot: PointF): ...
    @overload
    def __init__(self, image: Icon, hotspot: PointF): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, assembly: Assembly) -> Cursor: ...
    @overload
    @staticmethod
    def FromResource(resourceName: str, type: Type) -> Cursor: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class Cursors:
    @overload
    @staticmethod
    def Cached(type: CursorType) -> Cursor: ...
    @overload
    @staticmethod
    def ClearCache() -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Arrow() -> Cursor: ...
    @overload
    @property
    def Crosshair() -> Cursor: ...
    @overload
    @property
    def Default() -> Cursor: ...
    @overload
    @property
    def HorizontalSplit() -> Cursor: ...
    @overload
    @property
    def IBeam() -> Cursor: ...
    @overload
    @property
    def Move() -> Cursor: ...
    @overload
    @property
    def Pointer() -> Cursor: ...
    @overload
    @property
    def SizeAll() -> Cursor: ...
    @overload
    @property
    def SizeBottom() -> Cursor: ...
    @overload
    @property
    def SizeBottomLeft() -> Cursor: ...
    @overload
    @property
    def SizeBottomRight() -> Cursor: ...
    @overload
    @property
    def SizeLeft() -> Cursor: ...
    @overload
    @property
    def SizeRight() -> Cursor: ...
    @overload
    @property
    def SizeTop() -> Cursor: ...
    @overload
    @property
    def SizeTopLeft() -> Cursor: ...
    @overload
    @property
    def SizeTopRight() -> Cursor: ...
    @overload
    @property
    def VerticalSplit() -> Cursor: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class CursorType(Enum):
    Default = 0
    Arrow = 1
    Crosshair = 2
    Pointer = 3
    Move = 4
    IBeam = 5
    VerticalSplit = 6
    HorizontalSplit = 7
    SizeAll = 8
    SizeLeft = 9
    SizeTop = 10
    SizeRight = 11
    SizeBottom = 12
    SizeTopLeft = 13
    SizeTopRight = 14
    SizeBottomLeft = 15
    SizeBottomRight = 16


class CustomCell(Cell):
    @overload
    def __init__(self): ...
    @overload
    def add_BeginEdit(self, value: EventHandler) -> None: ...
    @overload
    def add_CancelEdit(self, value: EventHandler) -> None: ...
    @overload
    def add_CommitEdit(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @staticmethod
    def Create() -> CustomCell: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ConfigureCell(self) -> Action: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def CreateCell(self) -> Func: ...
    @overload
    @property
    def GetIdentifier(self) -> Func: ...
    @overload
    @property
    def GetPreferredWidth(self) -> Func: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportsControlView() -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_BeginEdit(self, value: EventHandler) -> None: ...
    @overload
    def remove_CancelEdit(self, value: EventHandler) -> None: ...
    @overload
    def remove_CommitEdit(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ConfigureCell.setter
    def ConfigureCell(self) -> MutableSequence[Action]: ...
    @overload
    @CreateCell.setter
    def CreateCell(self) -> MutableSequence[Func]: ...
    @overload
    @GetIdentifier.setter
    def GetIdentifier(self) -> MutableSequence[Func]: ...
    @overload
    @GetPreferredWidth.setter
    def GetPreferredWidth(self) -> MutableSequence[Func]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class DataFormats:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Color() -> str: ...
    @overload
    @property
    def Html() -> str: ...
    @overload
    @property
    def Text() -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Image
class DataObject(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, type: str) -> bool: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ContainsHtml(self) -> bool: ...
    @overload
    @property
    def ContainsImage(self) -> bool: ...
    @overload
    @property
    def ContainsText(self) -> bool: ...
    @overload
    @property
    def ContainsUris(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Html(self) -> str: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Types(self) -> Iterable[str]: ...
    @overload
    @property
    def Uris(self) -> Iterable[Uri]: ...
    @overload
    def GetData(self, type: str) -> Iterable[Byte]: ...
    @overload
    def GetDataStream(self, type: str) -> Stream: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObject(self, type: str) -> Object: ...
    @overload
    def GetObject(self, type: str) -> T: ...
    @overload
    def GetString(self, type: str) -> str: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Html.setter
    def Html(self) -> MutableSequence[str]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @Uris.setter
    def Uris(self) -> MutableSequence[Iterable[Uri]]: ...
    @overload
    def SetData(self, value: Iterable[Byte], type: str) -> None: ...
    @overload
    def SetDataStream(self, stream: Stream, type: str) -> None: ...
    @overload
    def SetObject(self, value: Object, type: str) -> None: ...
    @overload
    def SetString(self, value: str, type: str) -> None: ...
    @overload
    def ToString(self) -> str: ...




class DataStoreExtensions:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def GetExpandedRowCount(store: IDataStore, index: int) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetRowOfIndexPath(store: IDataStore, indexPath: Iterable[int]) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...




from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class DateTimePicker(CommonControl):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaxDate(self) -> DateTime: ...
    @overload
    @property
    def MinDate(self) -> DateTime: ...
    @overload
    @property
    def Mode(self) -> DateTimePickerMode: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Value(self) -> Nullable: ...
    @overload
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaxDate.setter
    def MaxDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @MinDate.setter
    def MinDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @Mode.setter
    def Mode(self) -> MutableSequence[DateTimePickerMode]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[Nullable]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class DateTimePickerMode(Enum):
    Date = 1
    Time = 2
    DateTime = 3






from ..Drawing import Point
from ..Drawing import Rectangle
from ..Drawing import Icon
from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Image
class Dialog(Window):
    @overload
    def __init__(self): ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AbortButton(self) -> Button: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DefaultButton(self) -> Button: ...
    @overload
    @property
    def DisplayMode(self) -> DialogDisplayMode: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def LogicalPixelSize(self) -> Single: ...
    @overload
    @property
    def Maximizable(self) -> bool: ...
    @overload
    @property
    def Menu(self) -> MenuBar: ...
    @overload
    @property
    def Minimizable(self) -> bool: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def NegativeButtons(self) -> Collection: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def Owner(self) -> Window: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def PositiveButtons(self) -> Collection: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Resizable(self) -> bool: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Screen(self) -> Screen: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def ToolBar(self) -> ToolBar: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Topmost(self) -> bool: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowState(self) -> WindowState: ...
    @overload
    @property
    def WindowStyle(self) -> WindowStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def Maximize(self) -> None: ...
    @overload
    def Minimize(self) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AbortButton.setter
    def AbortButton(self) -> MutableSequence[Button]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Bounds.setter
    def Bounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DefaultButton.setter
    def DefaultButton(self) -> MutableSequence[Button]: ...
    @overload
    @DisplayMode.setter
    def DisplayMode(self) -> MutableSequence[DialogDisplayMode]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @Icon.setter
    def Icon(self) -> MutableSequence[Icon]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Location.setter
    def Location(self) -> MutableSequence[Point]: ...
    @overload
    @Maximizable.setter
    def Maximizable(self) -> MutableSequence[bool]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[MenuBar]: ...
    @overload
    @Minimizable.setter
    def Minimizable(self) -> MutableSequence[bool]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self) -> MutableSequence[bool]: ...
    @overload
    @Opacity.setter
    def Opacity(self) -> MutableSequence[float]: ...
    @overload
    @Owner.setter
    def Owner(self) -> MutableSequence[Window]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Resizable.setter
    def Resizable(self) -> MutableSequence[bool]: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @ToolBar.setter
    def ToolBar(self) -> MutableSequence[ToolBar]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Topmost.setter
    def Topmost(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @WindowState.setter
    def WindowState(self) -> MutableSequence[WindowState]: ...
    @overload
    @WindowStyle.setter
    def WindowStyle(self) -> MutableSequence[WindowStyle]: ...
    @overload
    def ShowModal(self) -> None: ...
    @overload
    def ShowModal(self, owner: Control) -> None: ...
    @overload
    def ShowModalAsync(self) -> Task: ...
    @overload
    def ShowModalAsync(self, owner: Control) -> Task: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...




class DialogDisplayMode(Enum):
    Default = 0
    Attached = 1
    Separate = 2
    Navigation = 4


class DialogResult(Enum):
    # None = 0
    Ok = 1
    Cancel = 2
    Yes = 3
    No = 4
    Abort = 5
    Ignore = 6
    Retry = 7




class DockPosition(Enum):
    Top = 0
    Left = 1
    Right = 2
    Bottom = 3


from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class DocumentControl(Container):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PageClosed(self, value: EventHandler) -> None: ...
    @overload
    def add_PageReordered(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AllowReordering(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Pages(self) -> Iterable[DocumentPage]: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedPage(self) -> DocumentPage: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PageClosed(self, value: EventHandler) -> None: ...
    @overload
    def remove_PageReordered(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AllowReordering.setter
    def AllowReordering(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedPage.setter
    def SelectedPage(self) -> MutableSequence[DocumentPage]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
class DocumentPage(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, padding: Nullable): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Closable(self) -> bool: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Closable.setter
    def Closable(self) -> MutableSequence[bool]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class DocumentPageEventArgs:
    @overload
    def __init__(self, page: DocumentPage): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Page(self) -> DocumentPage: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class DocumentPageReorderEventArgs(DocumentPageEventArgs):
    @overload
    def __init__(self, page: DocumentPage, oldIndex: int, newIndex: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def NewIndex(self) -> int: ...
    @overload
    @property
    def OldIndex(self) -> int: ...
    @overload
    @property
    def Page(self) -> DocumentPage: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class DragEffects(Enum):
    # None = 0
    Copy = 1
    Move = 2
    Link = 4
    All = 7


from ..Drawing import PointF
class DragEventArgs:
    @overload
    def __init__(self, source: Control, data: DataObject, allowedEffects: DragEffects, location: PointF, modifiers: Keys, buttons: MouseButtons, controlObject: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AllowedEffects(self) -> DragEffects: ...
    @overload
    @property
    def Buttons(self) -> MouseButtons: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Data(self) -> DataObject: ...
    @overload
    @property
    def Effects(self) -> DragEffects: ...
    @overload
    @property
    def Location(self) -> PointF: ...
    @overload
    @property
    def Modifiers(self) -> Keys: ...
    @overload
    @property
    def Source(self) -> Control: ...
    @overload
    @property
    def SupportsDropDescription(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Effects.setter
    def Effects(self) -> MutableSequence[DragEffects]: ...
    @overload
    def SetDropDescription(self, format: str, inner: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Graphics
from ..Drawing import Rectangle
from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Drawable(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, largeCanvas: bool): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def SupportsCreateGraphics(self) -> bool: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CanFocus.setter
    def CanFocus(self) -> MutableSequence[bool]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def Update(self, region: Rectangle) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class DrawableCell(Cell):
    @overload
    def __init__(self): ...
    @overload
    def add_Paint(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_Paint(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class DropDown(ListControl):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_DropDownClosed(self, value: EventHandler) -> None: ...
    @overload
    def add_DropDownOpening(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FormatItem(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def ItemImageBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Items(self) -> ListItemCollection: ...
    @overload
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedKey(self) -> str: ...
    @overload
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedValue(self) -> Object: ...
    @overload
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_DropDownClosed(self, value: EventHandler) -> None: ...
    @overload
    def remove_DropDownOpening(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FormatItem(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ItemImageBinding.setter
    def ItemImageBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemKeyBinding.setter
    def ItemKeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemTextBinding.setter
    def ItemTextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @KeyBinding.setter
    def KeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedKey.setter
    def SelectedKey(self) -> MutableSequence[str]: ...
    @overload
    @SelectedValue.setter
    def SelectedValue(self) -> MutableSequence[Object]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @TextBinding.setter
    def TextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Font
class DropDownFormatEventArgs:
    @overload
    def __init__(self, item: Object, row: int, font: Font): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def IsFontSet(self) -> bool: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def Row(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    def ToString(self) -> str: ...




class DualBindingMode(Enum):
    OneWay = 0
    TwoWay = 1
    OneWayToSource = 2
    OneTime = 3
    Manual = 4


class DynamicControl(DynamicItem):
    @overload
    def __init__(self): ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @overload
    def Create(self, layout: DynamicLayout, parent: TableLayout, x: int, y: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Control(self) -> Control: ...
    @overload
    @property
    def XScale(self) -> Nullable: ...
    @overload
    @property
    def YScale(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Control.setter
    def Control(self) -> MutableSequence[Control]: ...
    @overload
    @XScale.setter
    def XScale(self) -> MutableSequence[Nullable]: ...
    @overload
    @YScale.setter
    def YScale(self) -> MutableSequence[Nullable]: ...
    @overload
    def ToString(self) -> str: ...


class DynamicGroup(DynamicTable):
    @overload
    def __init__(self): ...
    @overload
    def Add(self, item: DynamicItem) -> None: ...
    @overload
    def AddRow(self, row: DynamicRow) -> None: ...
    @overload
    def AddRow(self, item: DynamicItem) -> None: ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @overload
    def Create(self, layout: DynamicLayout, parent: TableLayout, x: int, y: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def GroupBox(self) -> GroupBox: ...
    @overload
    @property
    def Padding(self) -> Nullable: ...
    @overload
    @property
    def Parent(self) -> DynamicTable: ...
    @overload
    @property
    def Rows(self) -> Collection: ...
    @overload
    @property
    def Spacing(self) -> Nullable: ...
    @overload
    @property
    def Table(self) -> TableLayout: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def XScale(self) -> Nullable: ...
    @overload
    @property
    def YScale(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Nullable]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[Nullable]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @XScale.setter
    def XScale(self) -> MutableSequence[Nullable]: ...
    @overload
    @YScale.setter
    def YScale(self) -> MutableSequence[Nullable]: ...
    @overload
    def ToString(self) -> str: ...


class DynamicItem:
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @overload
    def Create(self, layout: DynamicLayout, parent: TableLayout, x: int, y: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def XScale(self) -> Nullable: ...
    @overload
    @property
    def YScale(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(control: Control) -> DynamicItem: ...
    @overload
    def op_Implicit(label: str) -> DynamicItem: ...
    @overload
    @XScale.setter
    def XScale(self) -> MutableSequence[Nullable]: ...
    @overload
    @YScale.setter
    def YScale(self) -> MutableSequence[Nullable]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class DynamicLayout(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rows: Iterable[DynamicRow]): ...
    @overload
    def __init__(self, rows: Iterable[DynamicRow]): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Add(self, control: Control, xscale: Nullable, yscale: Nullable) -> DynamicControl: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AddAutoSized(self, control: Control, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable, centered: bool) -> None: ...
    @overload
    def AddCentered(self, control: Control, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable, horizontalCenter: bool, verticalCenter: bool) -> None: ...
    @overload
    def AddColumn(self, controls: Iterable[Control]) -> None: ...
    @overload
    def AddRange(self, controls: Iterable[Control]) -> None: ...
    @overload
    def AddRange(self, controls: Iterable[Control]) -> None: ...
    @overload
    def AddRow(self, controls: Iterable[Control]) -> DynamicRow: ...
    @overload
    def AddSeparateColumn(self, controls: Iterable[Control]) -> DynamicTable: ...
    @overload
    def AddSeparateColumn(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable, controls: Iterable[Control]) -> DynamicTable: ...
    @overload
    def AddSeparateRow(self, controls: Iterable[Control]) -> DynamicRow: ...
    @overload
    def AddSeparateRow(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable, controls: Iterable[Control]) -> DynamicRow: ...
    @overload
    def AddSpace(self, xscale: Nullable, yscale: Nullable) -> DynamicControl: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BeginCentered(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> None: ...
    @overload
    def BeginGroup(self, title: str, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> DynamicGroup: ...
    @overload
    def BeginHorizontal(self, yscale: Nullable) -> DynamicRow: ...
    @overload
    def BeginScrollable(self, border: BorderType, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> DynamicScrollable: ...
    @overload
    def BeginVertical(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> DynamicTable: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Create(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def EndBeginHorizontal(self, yscale: Nullable) -> DynamicRow: ...
    @overload
    def EndBeginVertical(self, padding: Nullable, spacing: Nullable, xscale: Nullable, yscale: Nullable) -> DynamicTable: ...
    @overload
    def EndCentered(self) -> None: ...
    @overload
    def EndGroup(self) -> None: ...
    @overload
    def EndHorizontal(self) -> None: ...
    @overload
    def EndScrollable(self) -> None: ...
    @overload
    def EndVertical(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DefaultPadding(self) -> Nullable: ...
    @overload
    @property
    def DefaultSpacing(self) -> Nullable: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsCreated(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Padding(self) -> Nullable: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Rows(self) -> Collection: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Spacing(self) -> Nullable: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DefaultPadding.setter
    def DefaultPadding(self) -> MutableSequence[Nullable]: ...
    @overload
    @DefaultSpacing.setter
    def DefaultSpacing(self) -> MutableSequence[Nullable]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Nullable]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[Nullable]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class DynamicRow:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[DynamicItem]): ...
    @overload
    def __init__(self, items: Iterable[DynamicItem]): ...
    @overload
    def __init__(self, controls: Iterable[Control], xscale: Nullable, yscale: Nullable): ...
    def __iter__(self) -> Iterator[DynamicItem]: ...
    def __getitem__(self, index: int) -> DynamicItem: ...
    def __setitem__(self, index: int, value: DynamicItem): ...
    @overload
    def Add(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Add(self, items: Iterable[DynamicItem]) -> None: ...
    @overload
    def Add(self, items: Iterable[DynamicItem]) -> None: ...
    @overload
    def Add(self, item: DynamicItem) -> None: ...
    @overload
    def Add(self, controls: Iterable[Control], xscale: Nullable, yscale: Nullable) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: DynamicItem) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[DynamicItem], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    @property
    def Items(self) -> Collection: ...
    @overload
    @property
    def Table(self) -> DynamicTable: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: DynamicItem) -> int: ...
    @overload
    def Insert(self, index: int, item: DynamicItem) -> None: ...
    @overload
    def op_Implicit(control: Control) -> DynamicRow: ...
    @overload
    def Remove(self, item: DynamicItem) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


class DynamicScrollable(DynamicTable):
    @overload
    def __init__(self): ...
    @overload
    def Add(self, item: DynamicItem) -> None: ...
    @overload
    def AddRow(self, row: DynamicRow) -> None: ...
    @overload
    def AddRow(self, item: DynamicItem) -> None: ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @overload
    def Create(self, layout: DynamicLayout, parent: TableLayout, x: int, y: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Border(self) -> BorderType: ...
    @overload
    @property
    def Padding(self) -> Nullable: ...
    @overload
    @property
    def Parent(self) -> DynamicTable: ...
    @overload
    @property
    def Rows(self) -> Collection: ...
    @overload
    @property
    def Scrollable(self) -> Scrollable: ...
    @overload
    @property
    def Spacing(self) -> Nullable: ...
    @overload
    @property
    def Table(self) -> TableLayout: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def XScale(self) -> Nullable: ...
    @overload
    @property
    def YScale(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Border.setter
    def Border(self) -> MutableSequence[BorderType]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Nullable]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[Nullable]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @XScale.setter
    def XScale(self) -> MutableSequence[Nullable]: ...
    @overload
    @YScale.setter
    def YScale(self) -> MutableSequence[Nullable]: ...
    @overload
    def ToString(self) -> str: ...


class DynamicTable(DynamicItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, rows: Iterable[DynamicRow]): ...
    @overload
    def __init__(self, rows: Iterable[DynamicRow]): ...
    @overload
    def Add(self, item: DynamicItem) -> None: ...
    @overload
    def AddRow(self, item: DynamicItem) -> None: ...
    @overload
    def AddRow(self, row: DynamicRow) -> None: ...
    @overload
    def Create(self, layout: DynamicLayout) -> Control: ...
    @overload
    def Create(self, layout: DynamicLayout, parent: TableLayout, x: int, y: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Padding(self) -> Nullable: ...
    @overload
    @property
    def Parent(self) -> DynamicTable: ...
    @overload
    @property
    def Rows(self) -> Collection: ...
    @overload
    @property
    def Spacing(self) -> Nullable: ...
    @overload
    @property
    def Table(self) -> TableLayout: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def XScale(self) -> Nullable: ...
    @overload
    @property
    def YScale(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Nullable]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[Nullable]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @XScale.setter
    def XScale(self) -> MutableSequence[Nullable]: ...
    @overload
    @YScale.setter
    def YScale(self) -> MutableSequence[Nullable]: ...
    @overload
    def ToString(self) -> str: ...








from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Expander(Panel):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ExpandedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Expanded(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Header(self) -> Control: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ExpandedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Expanded.setter
    def Expanded(self) -> MutableSequence[bool]: ...
    @overload
    @Header.setter
    def Header(self) -> MutableSequence[Control]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class FileDialog(CommonDialog):
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CheckFileExists(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def CurrentFilter(self) -> FileFilter: ...
    @overload
    @property
    def CurrentFilterIndex(self) -> int: ...
    @overload
    @property
    def Directory(self) -> Uri: ...
    @overload
    @property
    def FileName(self) -> str: ...
    @overload
    @property
    def Filters(self) -> Collection: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @CheckFileExists.setter
    def CheckFileExists(self) -> MutableSequence[bool]: ...
    @overload
    @CurrentFilter.setter
    def CurrentFilter(self) -> MutableSequence[FileFilter]: ...
    @overload
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self) -> MutableSequence[int]: ...
    @overload
    @Directory.setter
    def Directory(self) -> MutableSequence[Uri]: ...
    @overload
    @FileName.setter
    def FileName(self) -> MutableSequence[str]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


class FileFilter:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, name: str, extensions: Iterable[str]): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Extensions(self) -> Iterable[str]: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(filter: str) -> FileFilter: ...
    @overload
    @Extensions.setter
    def Extensions(self) -> MutableSequence[Iterable[str]]: ...
    @overload
    @Name.setter
    def Name(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class FilePicker(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_FilePathChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def CurrentFilter(self) -> FileFilter: ...
    @overload
    @property
    def CurrentFilterIndex(self) -> int: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def FileAction(self) -> FileAction: ...
    @overload
    @property
    def FilePath(self) -> str: ...
    @overload
    @property
    def Filters(self) -> Collection: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_FilePathChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CurrentFilter.setter
    def CurrentFilter(self) -> MutableSequence[FileFilter]: ...
    @overload
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self) -> MutableSequence[int]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @FileAction.setter
    def FileAction(self) -> MutableSequence[FileAction]: ...
    @overload
    @FilePath.setter
    def FilePath(self) -> MutableSequence[str]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...




class FixedMaskedTextProvider:
    @overload
    def __init__(self, mask: str, culture: CultureInfo, allowPromptAsInput: bool, restrictToAscii: bool): ...
    @overload
    def Clear(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @overload
    def Delete(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @overload
    @property
    def AsciiOnly(self) -> bool: ...
    @overload
    @property
    def AutoAdvance(self) -> bool: ...
    @overload
    @property
    def Culture(self) -> CultureInfo: ...
    @overload
    @property
    def DisplayText(self) -> str: ...
    @overload
    @property
    def EditPositions(self) -> Iterable[int]: ...
    @overload
    @property
    def IncludeLiterals(self) -> bool: ...
    @overload
    @property
    def IncludePrompt(self) -> bool: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    @property
    def IsPassword(self) -> bool: ...
    @overload
    @property
    def Mask(self) -> str: ...
    @overload
    @property
    def MaskCompleted(self) -> bool: ...
    @overload
    @property
    def MaskFull(self) -> bool: ...
    @overload
    @property
    def PasswordChar(self) -> Char: ...
    @overload
    @property
    def PromptChar(self) -> Char: ...
    @overload
    @property
    def SkipLiterals(self) -> bool: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Insert(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @overload
    def Replace(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @overload
    @AutoAdvance.setter
    def AutoAdvance(self) -> MutableSequence[bool]: ...
    @overload
    @IncludeLiterals.setter
    def IncludeLiterals(self) -> MutableSequence[bool]: ...
    @overload
    @IncludePrompt.setter
    def IncludePrompt(self) -> MutableSequence[bool]: ...
    @overload
    @IsPassword.setter
    def IsPassword(self) -> MutableSequence[bool]: ...
    @overload
    @PasswordChar.setter
    def PasswordChar(self) -> MutableSequence[Char]: ...
    @overload
    @PromptChar.setter
    def PromptChar(self) -> MutableSequence[Char]: ...
    @overload
    @SkipLiterals.setter
    def SkipLiterals(self) -> MutableSequence[bool]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...




from ..Drawing import Point
from ..Drawing import Rectangle
from ..Drawing import Icon
from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Image
class FloatingForm(Form):
    @overload
    def __init__(self): ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def LogicalPixelSize(self) -> Single: ...
    @overload
    @property
    def Maximizable(self) -> bool: ...
    @overload
    @property
    def Menu(self) -> MenuBar: ...
    @overload
    @property
    def Minimizable(self) -> bool: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def Owner(self) -> Window: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Resizable(self) -> bool: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Screen(self) -> Screen: ...
    @overload
    @property
    def ShowActivated(self) -> bool: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def ToolBar(self) -> ToolBar: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Topmost(self) -> bool: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowState(self) -> WindowState: ...
    @overload
    @property
    def WindowStyle(self) -> WindowStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def Maximize(self) -> None: ...
    @overload
    def Minimize(self) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Bounds.setter
    def Bounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    @CanFocus.setter
    def CanFocus(self) -> MutableSequence[bool]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @Icon.setter
    def Icon(self) -> MutableSequence[Icon]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Location.setter
    def Location(self) -> MutableSequence[Point]: ...
    @overload
    @Maximizable.setter
    def Maximizable(self) -> MutableSequence[bool]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[MenuBar]: ...
    @overload
    @Minimizable.setter
    def Minimizable(self) -> MutableSequence[bool]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self) -> MutableSequence[bool]: ...
    @overload
    @Opacity.setter
    def Opacity(self) -> MutableSequence[float]: ...
    @overload
    @Owner.setter
    def Owner(self) -> MutableSequence[Window]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Resizable.setter
    def Resizable(self) -> MutableSequence[bool]: ...
    @overload
    @ShowActivated.setter
    def ShowActivated(self) -> MutableSequence[bool]: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @ToolBar.setter
    def ToolBar(self) -> MutableSequence[ToolBar]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Topmost.setter
    def Topmost(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @WindowState.setter
    def WindowState(self) -> MutableSequence[WindowState]: ...
    @overload
    @WindowStyle.setter
    def WindowStyle(self) -> MutableSequence[WindowStyle]: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Font
class FontDialog(CommonDialog):
    @overload
    def __init__(self): ...
    @overload
    def add_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_FontChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class FontPicker(Control):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, font: Font): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Value(self) -> Font: ...
    @overload
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[Font]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Point
from ..Drawing import Rectangle
from ..Drawing import Icon
from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Image
class Form(Window):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def LogicalPixelSize(self) -> Single: ...
    @overload
    @property
    def Maximizable(self) -> bool: ...
    @overload
    @property
    def Menu(self) -> MenuBar: ...
    @overload
    @property
    def Minimizable(self) -> bool: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def Owner(self) -> Window: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Resizable(self) -> bool: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Screen(self) -> Screen: ...
    @overload
    @property
    def ShowActivated(self) -> bool: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def ToolBar(self) -> ToolBar: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Topmost(self) -> bool: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowState(self) -> WindowState: ...
    @overload
    @property
    def WindowStyle(self) -> WindowStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def Maximize(self) -> None: ...
    @overload
    def Minimize(self) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Bounds.setter
    def Bounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    @CanFocus.setter
    def CanFocus(self) -> MutableSequence[bool]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @Icon.setter
    def Icon(self) -> MutableSequence[Icon]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Location.setter
    def Location(self) -> MutableSequence[Point]: ...
    @overload
    @Maximizable.setter
    def Maximizable(self) -> MutableSequence[bool]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[MenuBar]: ...
    @overload
    @Minimizable.setter
    def Minimizable(self) -> MutableSequence[bool]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self) -> MutableSequence[bool]: ...
    @overload
    @Opacity.setter
    def Opacity(self) -> MutableSequence[float]: ...
    @overload
    @Owner.setter
    def Owner(self) -> MutableSequence[Window]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Resizable.setter
    def Resizable(self) -> MutableSequence[bool]: ...
    @overload
    @ShowActivated.setter
    def ShowActivated(self) -> MutableSequence[bool]: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @ToolBar.setter
    def ToolBar(self) -> MutableSequence[ToolBar]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Topmost.setter
    def Topmost(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @WindowState.setter
    def WindowState(self) -> MutableSequence[WindowState]: ...
    @overload
    @WindowStyle.setter
    def WindowStyle(self) -> MutableSequence[WindowStyle]: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Grid(Control):
    @overload
    def add_CellClick(self, value: EventHandler) -> None: ...
    @overload
    def add_CellDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_CellEdited(self, value: EventHandler) -> None: ...
    @overload
    def add_CellEditing(self, value: EventHandler) -> None: ...
    @overload
    def add_CellFormatting(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnHeaderClick(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnOrderChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnWidthChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedRowsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BeginEdit(self, row: int, column: int) -> None: ...
    @overload
    def CancelEdit(self) -> bool: ...
    @overload
    def CommitEdit(self) -> bool: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowColumnReordering(self) -> bool: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AllowEmptySelection(self) -> bool: ...
    @overload
    @property
    def AllowMultipleSelection(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Border(self) -> BorderType: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Columns(self) -> GridColumnCollection: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def GridLines(self) -> GridLines: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsEditing(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def RowHeight(self) -> int: ...
    @overload
    @property
    def SelectedItem(self) -> Object: ...
    @overload
    @property
    def SelectedItemBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @overload
    @property
    def SelectedRow(self) -> int: ...
    @overload
    @property
    def SelectedRows(self) -> Iterable[int]: ...
    @overload
    @property
    def ShowHeader(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_CellClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellEdited(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellEditing(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellFormatting(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnHeaderClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnOrderChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnWidthChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedRowsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ScrollToRow(self, row: int) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    def SelectRow(self, row: int) -> None: ...
    @overload
    @AllowColumnReordering.setter
    def AllowColumnReordering(self) -> MutableSequence[bool]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AllowEmptySelection.setter
    def AllowEmptySelection(self) -> MutableSequence[bool]: ...
    @overload
    @AllowMultipleSelection.setter
    def AllowMultipleSelection(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Border.setter
    def Border(self) -> MutableSequence[BorderType]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @GridLines.setter
    def GridLines(self) -> MutableSequence[GridLines]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @RowHeight.setter
    def RowHeight(self) -> MutableSequence[int]: ...
    @overload
    @SelectedRow.setter
    def SelectedRow(self) -> MutableSequence[int]: ...
    @overload
    @SelectedRows.setter
    def SelectedRows(self) -> MutableSequence[Iterable[int]]: ...
    @overload
    @ShowHeader.setter
    def ShowHeader(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UnselectAll(self) -> None: ...
    @overload
    def UnselectRow(self, row: int) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class GridCell:
    @overload
    def __init__(self, column: GridColumn, columnIndex: int, rowIndex: int, type: GridCellType, item: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Column(self) -> GridColumn: ...
    @overload
    @property
    def ColumnIndex(self) -> int: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def RowIndex(self) -> int: ...
    @overload
    @property
    def Type(self) -> GridCellType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Font
from ..Drawing import Color
class GridCellFormatEventArgs:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Column(self) -> GridColumn: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def ForegroundColor(self) -> Color: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def Row(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @ForegroundColor.setter
    def ForegroundColor(self) -> MutableSequence[Color]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import PointF
from ..Drawing import SizeF
class GridCellMouseEventArgs(MouseEventArgs):
    @overload
    def __init__(self, gridColumn: GridColumn, row: int, column: int, item: Object, buttons: MouseButtons, modifiers: Keys, location: PointF, delta: Nullable, pressure: Single): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Buttons(self) -> MouseButtons: ...
    @overload
    @property
    def Column(self) -> int: ...
    @overload
    @property
    def Delta(self) -> SizeF: ...
    @overload
    @property
    def GridColumn(self) -> GridColumn: ...
    @overload
    @property
    def Handled(self) -> bool: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def Location(self) -> PointF: ...
    @overload
    @property
    def Modifiers(self) -> Keys: ...
    @overload
    @property
    def Pressure(self) -> Single: ...
    @overload
    @property
    def Row(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Handled.setter
    def Handled(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class GridCellType(Enum):
    # None = 0
    Data = 1
    ColumnHeader = 2


class GridColumn(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataCell(self) -> Cell: ...
    @overload
    @property
    def DisplayIndex(self) -> int: ...
    @overload
    @property
    def Editable(self) -> bool: ...
    @overload
    @property
    def Expand(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HeaderText(self) -> str: ...
    @overload
    @property
    def HeaderTextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def MaxWidth(self) -> int: ...
    @overload
    @property
    def MinWidth(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Resizable(self) -> bool: ...
    @overload
    @property
    def Sortable(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @DataCell.setter
    def DataCell(self) -> MutableSequence[Cell]: ...
    @overload
    @DisplayIndex.setter
    def DisplayIndex(self) -> MutableSequence[int]: ...
    @overload
    @Editable.setter
    def Editable(self) -> MutableSequence[bool]: ...
    @overload
    @Expand.setter
    def Expand(self) -> MutableSequence[bool]: ...
    @overload
    @HeaderText.setter
    def HeaderText(self) -> MutableSequence[str]: ...
    @overload
    @HeaderTextAlignment.setter
    def HeaderTextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaxWidth.setter
    def MaxWidth(self) -> MutableSequence[int]: ...
    @overload
    @MinWidth.setter
    def MinWidth(self) -> MutableSequence[int]: ...
    @overload
    @Resizable.setter
    def Resizable(self) -> MutableSequence[bool]: ...
    @overload
    @Sortable.setter
    def Sortable(self) -> MutableSequence[bool]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


class GridColumnCollection:
    @overload
    def __init__(self): ...
    def __iter__(self) -> Iterator[GridColumn]: ...
    def __getitem__(self, index: int) -> GridColumn: ...
    def __setitem__(self, index: int, value: GridColumn): ...
    @overload
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Add(self, item: GridColumn) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: GridColumn) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[GridColumn], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: GridColumn) -> int: ...
    @overload
    def Insert(self, index: int, item: GridColumn) -> None: ...
    @overload
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    @overload
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Remove(self, item: GridColumn) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


class GridColumnEventArgs:
    @overload
    def __init__(self, column: GridColumn): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Column(self) -> GridColumn: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class GridDragPosition(Enum):
    Over = 0
    Before = 1
    After = 2


class GridItem:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Iterable[Object]): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Values(self) -> Iterable[Object]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetValue(self, column: int) -> Object: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Values.setter
    def Values(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    def SetValue(self, column: int, value: Object) -> None: ...
    @overload
    def ToString(self) -> str: ...


class GridLines(Enum):
    # None = 0
    Horizontal = 1
    Vertical = 2
    Both = 3


from ..Drawing import PointF
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class GridView(Grid):
    @overload
    def __init__(self): ...
    @overload
    def add_CellClick(self, value: EventHandler) -> None: ...
    @overload
    def add_CellDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_CellEdited(self, value: EventHandler) -> None: ...
    @overload
    def add_CellEditing(self, value: EventHandler) -> None: ...
    @overload
    def add_CellFormatting(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnHeaderClick(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnOrderChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnWidthChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedRowsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BeginEdit(self, row: int, column: int) -> None: ...
    @overload
    def CancelEdit(self) -> bool: ...
    @overload
    def CommitEdit(self) -> bool: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowColumnReordering(self) -> bool: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AllowEmptySelection(self) -> bool: ...
    @overload
    @property
    def AllowMultipleSelection(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Border(self) -> BorderType: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CanDeleteItem(self) -> Func: ...
    @overload
    @property
    def Columns(self) -> GridColumnCollection: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def DeleteConfirmationTitle(self) -> Func: ...
    @overload
    @property
    def DeleteItemHandler(self) -> Func: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def GridLines(self) -> GridLines: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsEditing(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def RowHeight(self) -> int: ...
    @overload
    @property
    def SelectedItem(self) -> Object: ...
    @overload
    @property
    def SelectedItemBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @overload
    @property
    def SelectedRow(self) -> int: ...
    @overload
    @property
    def SelectedRows(self) -> Iterable[int]: ...
    @overload
    @property
    def SelectionPreserver(self) -> ISelectionPreserver: ...
    @overload
    @property
    def ShowCellBorders(self) -> bool: ...
    @overload
    @property
    def ShowHeader(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetCellAt(self, location: PointF) -> GridCell: ...
    @overload
    def GetDragInfo(self, args: DragEventArgs) -> GridViewDragInfo: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def ReloadData(self, range: Range) -> None: ...
    @overload
    def ReloadData(self, rows: Iterable[int]) -> None: ...
    @overload
    def ReloadData(self, row: int) -> None: ...
    @overload
    def remove_CellClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellEdited(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellEditing(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellFormatting(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnHeaderClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnOrderChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnWidthChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedRowsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ScrollToRow(self, row: int) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    def SelectRow(self, row: int) -> None: ...
    @overload
    @AllowColumnReordering.setter
    def AllowColumnReordering(self) -> MutableSequence[bool]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AllowEmptySelection.setter
    def AllowEmptySelection(self) -> MutableSequence[bool]: ...
    @overload
    @AllowMultipleSelection.setter
    def AllowMultipleSelection(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Border.setter
    def Border(self) -> MutableSequence[BorderType]: ...
    @overload
    @CanDeleteItem.setter
    def CanDeleteItem(self) -> MutableSequence[Func]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @DeleteConfirmationTitle.setter
    def DeleteConfirmationTitle(self) -> MutableSequence[Func]: ...
    @overload
    @DeleteItemHandler.setter
    def DeleteItemHandler(self) -> MutableSequence[Func]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @GridLines.setter
    def GridLines(self) -> MutableSequence[GridLines]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @RowHeight.setter
    def RowHeight(self) -> MutableSequence[int]: ...
    @overload
    @SelectedRow.setter
    def SelectedRow(self) -> MutableSequence[int]: ...
    @overload
    @SelectedRows.setter
    def SelectedRows(self) -> MutableSequence[Iterable[int]]: ...
    @overload
    @ShowCellBorders.setter
    def ShowCellBorders(self) -> MutableSequence[bool]: ...
    @overload
    @ShowHeader.setter
    def ShowHeader(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UnselectAll(self) -> None: ...
    @overload
    def UnselectRow(self, row: int) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...




class GridViewCellEventArgs:
    @overload
    def __init__(self, gridColumn: GridColumn, row: int, column: int, item: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Column(self) -> int: ...
    @overload
    @property
    def GridColumn(self) -> GridColumn: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def Row(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class GridViewDragInfo:
    @overload
    def __init__(self, control: GridView, item: Object, index: int, position: GridDragPosition): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Control(self) -> GridView: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def InsertIndex(self) -> int: ...
    @overload
    @property
    def IsChanged(self) -> bool: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def Position(self) -> GridDragPosition: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def RestrictToInsert(self) -> None: ...
    @overload
    def RestrictToOver(self) -> None: ...
    @overload
    @Index.setter
    def Index(self) -> MutableSequence[int]: ...
    @overload
    @Position.setter
    def Position(self) -> MutableSequence[GridDragPosition]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Font
from ..Drawing import Color
from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class GroupBox(Panel):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class HorizontalAlignment(Enum):
    Left = 0
    Center = 1
    Right = 2
    Stretch = 3


class IBindable:
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...


class IBindableWidgetContainer:
    @overload
    @property
    def Children(self) -> Iterable[BindableWidget]: ...


class IBinding:
    @overload
    def Unbind(self) -> None: ...
    @overload
    def Update(self, mode: BindingUpdateMode) -> None: ...


class ICallback:
    @overload
    def OnValueChanged(self, widget: Slider, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnStep(self, widget: TextStepper, e: StepperEventArgs) -> None: ...


class ICallback:
    @overload
    def OnCheckedChanged(self, widget: ToggleButton, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnActivated(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    @overload
    def OnCollapsed(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    @overload
    def OnCollapsing(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    @overload
    def OnExpanded(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    @overload
    def OnExpanding(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    @overload
    def OnLabelEdited(self, widget: TreeView, e: TreeViewItemEditEventArgs) -> None: ...
    @overload
    def OnLabelEditing(self, widget: TreeView, e: TreeViewItemCancelEventArgs) -> None: ...
    @overload
    def OnNodeMouseClick(self, widget: TreeView, e: TreeViewItemEventArgs) -> None: ...
    @overload
    def OnSelectionChanged(self, widget: TreeView, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnActivated(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    @overload
    def OnCollapsed(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    @overload
    def OnCollapsing(self, widget: TreeGridView, e: TreeGridViewItemCancelEventArgs) -> None: ...
    @overload
    def OnExpanded(self, widget: TreeGridView, e: TreeGridViewItemEventArgs) -> None: ...
    @overload
    def OnExpanding(self, widget: TreeGridView, e: TreeGridViewItemCancelEventArgs) -> None: ...
    @overload
    def OnSelectedItemChanged(self, widget: TreeGridView, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnDocumentLoaded(self, widget: WebView, e: WebViewLoadedEventArgs) -> None: ...
    @overload
    def OnDocumentLoading(self, widget: WebView, e: WebViewLoadingEventArgs) -> None: ...
    @overload
    def OnDocumentTitleChanged(self, widget: WebView, e: WebViewTitleEventArgs) -> None: ...
    @overload
    def OnNavigated(self, widget: WebView, e: WebViewLoadedEventArgs) -> None: ...
    @overload
    def OnOpenNewWindow(self, widget: WebView, e: WebViewNewWindowEventArgs) -> None: ...


class ICallback:
    @overload
    def OnInitialized(self, widget: Application, e: EventArgs) -> None: ...
    @overload
    def OnIsActiveChanged(self, wiget: Application, e: EventArgs) -> None: ...
    @overload
    def OnNotificationActivated(self, wiget: Application, e: NotificationEventArgs) -> None: ...
    @overload
    def OnTerminating(self, widget: Application, e: CancelEventArgs) -> None: ...
    @overload
    def OnUnhandledException(self, widget: Application, e: UnhandledExceptionEventArgs) -> None: ...


class ICallback:
    @overload
    def OnClosed(self, widget: Window, e: EventArgs) -> None: ...
    @overload
    def OnClosing(self, widget: Window, e: CancelEventArgs) -> None: ...
    @overload
    def OnLocationChanged(self, widget: Window, e: EventArgs) -> None: ...
    @overload
    def OnLogicalPixelSizeChanged(self, widget: Window, e: EventArgs) -> None: ...
    @overload
    def OnWindowStateChanged(self, widget: Window, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnCellClick(self, widget: Grid, e: GridCellMouseEventArgs) -> None: ...
    @overload
    def OnCellDoubleClick(self, widget: Grid, e: GridCellMouseEventArgs) -> None: ...
    @overload
    def OnCellEdited(self, widget: Grid, e: GridViewCellEventArgs) -> None: ...
    @overload
    def OnCellEditing(self, widget: Grid, e: GridViewCellEventArgs) -> None: ...
    @overload
    def OnCellFormatting(self, widget: Grid, e: GridCellFormatEventArgs) -> None: ...
    @overload
    def OnColumnHeaderClick(self, widget: Grid, e: GridColumnEventArgs) -> None: ...
    @overload
    def OnColumnOrderChanged(self, widget: Grid, e: GridColumnEventArgs) -> None: ...
    @overload
    def OnColumnWidthChanged(self, widget: Grid, e: GridColumnEventArgs) -> None: ...
    @overload
    def OnSelectionChanged(self, widget: Grid, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnClick(self, widget: LinkButton, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnTextChanged(self, widget: TextControl, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnActivated(self, widget: ListBox, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnCaretIndexChanged(self, widget: TextArea, e: EventArgs) -> None: ...
    @overload
    def OnSelectionChanged(self, widget: TextArea, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnValueChanged(self, widget: NumericStepper, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnSelectedIndexChanged(self, widget: TabControl, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnPropertyValueChanged(self, widget: PropertyGrid, e: PropertyValueChangedEventArgs) -> None: ...


class ICallback:
    @overload
    def OnStep(self, widget: Stepper, e: StepperEventArgs) -> None: ...


class ICallback:
    @overload
    def OnCheckedChanged(self, widget: RadioButton, e: EventArgs) -> None: ...
    @overload
    def OnClick(self, widget: RadioButton, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnScroll(self, widget: Scrollable, e: ScrollEventArgs) -> None: ...


class ICallback:
    @overload
    def OnFontChanged(self, widget: FontDialog, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnPositionChangeCompleted(self, widget: Splitter, e: EventArgs) -> None: ...
    @overload
    def OnPositionChanged(self, widget: Splitter, e: EventArgs) -> None: ...
    @overload
    def OnPositionChangeStarted(self, widget: Splitter, e: EventArgs) -> None: ...
    @overload
    def OnPositionChanging(self, widget: Splitter, e: SplitterPositionChangingEventArgs) -> None: ...


class ICallback:
    @overload
    def OnSelectedIndexChanged(self, widget: ListControl, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnItemRemoved(self, widget: Navigation, e: NavigationItemEventArgs) -> None: ...
    @overload
    def OnItemShown(self, widget: Navigation, e: NavigationItemEventArgs) -> None: ...


class ICallback:
    @overload
    def OnTextChanging(self, widget: TextBox, e: TextChangingEventArgs) -> None: ...


class ICallback:
    @overload
    def OnValueChanged(self, widget: FontPicker, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnClosed(self, widget: ContextMenu, e: EventArgs) -> None: ...
    @overload
    def OnClosing(self, widget: ContextMenu, e: EventArgs) -> None: ...
    @overload
    def OnOpening(self, widget: ContextMenu, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnClick(self, widget: Button, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnPrinted(self, widget: PrintDocument, e: EventArgs) -> None: ...
    @overload
    def OnPrinting(self, widget: PrintDocument, e: EventArgs) -> None: ...
    @overload
    def OnPrintPage(self, widget: PrintDocument, e: PrintPageEventArgs) -> None: ...


class ICallback:
    @overload
    def OnColorChanged(self, widget: ColorPicker, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnSelectedDateChanged(self, widget: Calendar, e: EventArgs) -> None: ...
    @overload
    def OnSelectedRangeChanged(self, widget: Calendar, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnTextChanged(self, widget: ComboBox, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnElapsed(self, widget: UITimer, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnDragDrop(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnDragEnter(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnDragLeave(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnDragOver(self, widget: Control, e: DragEventArgs) -> None: ...
    @overload
    def OnEnabledChanged(self, widget: Control, e: EventArgs) -> None: ...
    @overload
    def OnGotFocus(self, widget: Control, e: EventArgs) -> None: ...
    @overload
    def OnKeyDown(self, widget: Control, e: KeyEventArgs) -> None: ...
    @overload
    def OnKeyUp(self, widget: Control, e: KeyEventArgs) -> None: ...
    @overload
    def OnLostFocus(self, widget: Control, e: EventArgs) -> None: ...
    @overload
    def OnMouseDoubleClick(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseDown(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseEnter(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseLeave(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseMove(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseUp(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnMouseWheel(self, widget: Control, e: MouseEventArgs) -> None: ...
    @overload
    def OnShown(self, widget: Control, e: EventArgs) -> None: ...
    @overload
    def OnSizeChanged(self, widget: Control, e: EventArgs) -> None: ...
    @overload
    def OnTextInput(self, widget: Control, e: TextInputEventArgs) -> None: ...


class ICallback:
    @overload
    def OnValueChanged(self, widget: DateTimePicker, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnPageClosed(self, widget: DocumentControl, e: DocumentPageEventArgs) -> None: ...
    @overload
    def OnPageReordered(self, widget: DocumentControl, e: DocumentPageReorderEventArgs) -> None: ...
    @overload
    def OnSelectedIndexChanged(self, widget: DocumentControl, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnClosed(self, widget: SubMenuItem, e: EventArgs) -> None: ...
    @overload
    def OnClosing(self, widget: SubMenuItem, e: EventArgs) -> None: ...
    @overload
    def OnOpening(self, widget: SubMenuItem, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnBeginEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    @overload
    def OnCancelEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    @overload
    def OnCommitEdit(self, widget: CustomCell, args: CellEventArgs) -> None: ...
    @overload
    def OnConfigureCell(self, widget: CustomCell, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreateCell(self, widget: CustomCell, args: CellEventArgs) -> Control: ...
    @overload
    def OnGetIdentifier(self, widget: CustomCell, args: CellEventArgs) -> str: ...
    @overload
    def OnGetPreferredWidth(self, widget: CustomCell, args: CellEventArgs) -> Single: ...
    @overload
    def OnPaint(self, widget: CustomCell, args: CellPaintEventArgs) -> None: ...


class ICallback:
    @overload
    def OnCheckedChanged(self, widget: RadioMenuItem, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnPaint(self, widget: Drawable, e: PaintEventArgs) -> None: ...


class ICallback:
    @overload
    def OnClick(self, widget: MenuItem, e: EventArgs) -> None: ...
    @overload
    def OnValidate(self, widget: MenuItem, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnDropDownClosed(self, widget: DropDown, e: EventArgs) -> None: ...
    @overload
    def OnDropDownOpening(self, widget: DropDown, e: EventArgs) -> None: ...
    @overload
    def OnFormatItem(self, widget: DropDown, e: DropDownFormatEventArgs) -> None: ...


class ICallback:
    @overload
    def OnExpandedChanged(self, widget: Expander, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnPaint(self, widget: DrawableCell, e: DrawableCellPaintEventArgs) -> None: ...


class ICallback:
    @overload
    def OnCheckedChanged(self, widget: CheckBox, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnActivated(self, widget: TrayIndicator, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnItemClicked(self, widget: SegmentedButton, e: SegmentedItemClickEventArgs) -> None: ...
    @overload
    def OnSelectedIndexesChanged(self, widget: SegmentedButton, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnFilePathChanged(self, widget: FilePicker, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnCheckedChanged(self, widget: CheckMenuItem, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnColorChanged(self, widget: ColorDialog, e: EventArgs) -> None: ...


class ICallback:
    @overload
    def OnClick(self, widget: SegmentedItem, e: EventArgs) -> None: ...
    @overload
    def OnSelectedChanged(self, widget: SegmentedItem, e: EventArgs) -> None: ...


class IColumnItem:
    @overload
    def GetValue(self, column: int) -> Object: ...
    @overload
    def SetValue(self, column: int, value: Object) -> None: ...


class ICommandItem:
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...


class IContextMenuHost:
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...


from ..Drawing import Image
class IDataObject:
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, type: str) -> bool: ...
    @overload
    @property
    def ContainsHtml(self) -> bool: ...
    @overload
    @property
    def ContainsImage(self) -> bool: ...
    @overload
    @property
    def ContainsText(self) -> bool: ...
    @overload
    @property
    def ContainsUris(self) -> bool: ...
    @overload
    @property
    def Html(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Types(self) -> Iterable[str]: ...
    @overload
    @property
    def Uris(self) -> Iterable[Uri]: ...
    @overload
    def GetData(self, type: str) -> Iterable[Byte]: ...
    @overload
    def GetObject(self, type: str) -> T: ...
    @overload
    def GetString(self, type: str) -> str: ...
    @overload
    @Html.setter
    def Html(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @Uris.setter
    def Uris(self) -> MutableSequence[Iterable[Uri]]: ...
    @overload
    def SetData(self, value: Iterable[Byte], type: str) -> None: ...
    @overload
    def SetObject(self, value: Object, type: str) -> None: ...
    @overload
    def SetString(self, value: str, type: str) -> None: ...




class IHandler:
    @overload
    def Pop(self) -> None: ...
    @overload
    def Push(self, item: INavigationItem) -> None: ...


from ..Drawing import ImageInterpolation
class IHandler:
    @overload
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @overload
    @ImageInterpolation.setter
    def ImageInterpolation(self) -> MutableSequence[ImageInterpolation]: ...


class IHandler:
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...


class IHandler:
    @overload
    def TryGetObject(self, type: str) -> Tuple[bool, Object]: ...
    @overload
    def TrySetObject(self, value: Object, type: str) -> bool: ...


from ..Drawing import Image
from ..Drawing import Size
class IHandler:
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def ImagePosition(self) -> ButtonImagePosition: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @ImagePosition.setter
    def ImagePosition(self) -> MutableSequence[ButtonImagePosition]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...


from ..Drawing import Color
class IHandler:
    @overload
    @property
    def AllowAlpha(self) -> bool: ...
    @overload
    @property
    def Color(self) -> Color: ...
    @overload
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @overload
    @AllowAlpha.setter
    def AllowAlpha(self) -> MutableSequence[bool]: ...
    @overload
    @Color.setter
    def Color(self) -> MutableSequence[Color]: ...


class IHandler:
    @overload
    @property
    def MaxDate(self) -> DateTime: ...
    @overload
    @property
    def MinDate(self) -> DateTime: ...
    @overload
    @property
    def Mode(self) -> CalendarMode: ...
    @overload
    @property
    def SelectedDate(self) -> DateTime: ...
    @overload
    @property
    def SelectedRange(self) -> Range: ...
    @overload
    @MaxDate.setter
    def MaxDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @MinDate.setter
    def MinDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @Mode.setter
    def Mode(self) -> MutableSequence[CalendarMode]: ...
    @overload
    @SelectedDate.setter
    def SelectedDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @SelectedRange.setter
    def SelectedRange(self) -> MutableSequence[Range]: ...


class IHandler:
    pass


class IHandler:
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @VerticalAlignment.setter
    def VerticalAlignment(self) -> MutableSequence[VerticalAlignment]: ...


class IHandler:
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...


class IHandler:
    pass


from ..Drawing import ImageInterpolation
class IHandler:
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @ImageInterpolation.setter
    def ImageInterpolation(self) -> MutableSequence[ImageInterpolation]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @VerticalAlignment.setter
    def VerticalAlignment(self) -> MutableSequence[VerticalAlignment]: ...


class IHandler:
    pass


class IHandler:
    pass


from ..Drawing import Font
class IHandler:
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...


class IHandler:
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def ElementType(self) -> Type: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @ElementType.setter
    def ElementType(self) -> MutableSequence[Type]: ...


from ..Drawing import Font
class IHandler:
    @overload
    @property
    def Value(self) -> Font: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[Font]: ...


class IHandler:
    @overload
    def BeginEdit(self, row: int, column: int) -> None: ...
    @overload
    def CancelEdit(self) -> bool: ...
    @overload
    def CommitEdit(self) -> bool: ...
    @overload
    @property
    def AllowColumnReordering(self) -> bool: ...
    @overload
    @property
    def AllowEmptySelection(self) -> bool: ...
    @overload
    @property
    def AllowMultipleSelection(self) -> bool: ...
    @overload
    @property
    def Border(self) -> BorderType: ...
    @overload
    @property
    def GridLines(self) -> GridLines: ...
    @overload
    @property
    def IsEditing(self) -> bool: ...
    @overload
    @property
    def RowHeight(self) -> int: ...
    @overload
    @property
    def SelectedRows(self) -> Iterable[int]: ...
    @overload
    @property
    def ShowHeader(self) -> bool: ...
    @overload
    def ScrollToRow(self, row: int) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    def SelectRow(self, row: int) -> None: ...
    @overload
    @AllowColumnReordering.setter
    def AllowColumnReordering(self) -> MutableSequence[bool]: ...
    @overload
    @AllowEmptySelection.setter
    def AllowEmptySelection(self) -> MutableSequence[bool]: ...
    @overload
    @AllowMultipleSelection.setter
    def AllowMultipleSelection(self) -> MutableSequence[bool]: ...
    @overload
    @Border.setter
    def Border(self) -> MutableSequence[BorderType]: ...
    @overload
    @GridLines.setter
    def GridLines(self) -> MutableSequence[GridLines]: ...
    @overload
    @RowHeight.setter
    def RowHeight(self) -> MutableSequence[int]: ...
    @overload
    @SelectedRows.setter
    def SelectedRows(self) -> MutableSequence[Iterable[int]]: ...
    @overload
    @ShowHeader.setter
    def ShowHeader(self) -> MutableSequence[bool]: ...
    @overload
    def UnselectAll(self) -> None: ...
    @overload
    def UnselectRow(self, row: int) -> None: ...


class IHandler:
    @overload
    def ClearFilters(self) -> None: ...
    @overload
    @property
    def CurrentFilterIndex(self) -> int: ...
    @overload
    @property
    def FileAction(self) -> FileAction: ...
    @overload
    @property
    def FilePath(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def InsertFilter(self, index: int, filter: FileFilter) -> None: ...
    @overload
    def RemoveFilter(self, index: int) -> None: ...
    @overload
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self) -> MutableSequence[int]: ...
    @overload
    @FileAction.setter
    def FileAction(self) -> MutableSequence[FileAction]: ...
    @overload
    @FilePath.setter
    def FilePath(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...


class IHandler:
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def DataCell(self) -> Cell: ...
    @overload
    @property
    def DisplayIndex(self) -> int: ...
    @overload
    @property
    def Editable(self) -> bool: ...
    @overload
    @property
    def Expand(self) -> bool: ...
    @overload
    @property
    def HeaderText(self) -> str: ...
    @overload
    @property
    def HeaderTextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def MaxWidth(self) -> int: ...
    @overload
    @property
    def MinWidth(self) -> int: ...
    @overload
    @property
    def Resizable(self) -> bool: ...
    @overload
    @property
    def Sortable(self) -> bool: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @DataCell.setter
    def DataCell(self) -> MutableSequence[Cell]: ...
    @overload
    @DisplayIndex.setter
    def DisplayIndex(self) -> MutableSequence[int]: ...
    @overload
    @Editable.setter
    def Editable(self) -> MutableSequence[bool]: ...
    @overload
    @Expand.setter
    def Expand(self) -> MutableSequence[bool]: ...
    @overload
    @HeaderText.setter
    def HeaderText(self) -> MutableSequence[str]: ...
    @overload
    @HeaderTextAlignment.setter
    def HeaderTextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @MaxWidth.setter
    def MaxWidth(self) -> MutableSequence[int]: ...
    @overload
    @MinWidth.setter
    def MinWidth(self) -> MutableSequence[int]: ...
    @overload
    @Resizable.setter
    def Resizable(self) -> MutableSequence[bool]: ...
    @overload
    @Sortable.setter
    def Sortable(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...


from ..Drawing import PointF
class IHandler:
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @overload
    def GetCellAt(self, location: PointF) -> GridCell: ...
    @overload
    def GetDragInfo(self, args: DragEventArgs) -> GridViewDragInfo: ...
    @overload
    def ReloadData(self, rows: Iterable[int]) -> None: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...


from ..Drawing import Font
from ..Drawing import Color
class IHandler:
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...


from ..Drawing import Point
from ..Drawing import Icon
from ..Drawing import Rectangle
class IHandler:
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalPixelSize(self) -> Single: ...
    @overload
    @property
    def Maximizable(self) -> bool: ...
    @overload
    @property
    def Menu(self) -> MenuBar: ...
    @overload
    @property
    def Minimizable(self) -> bool: ...
    @overload
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def Resizable(self) -> bool: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Screen(self) -> Screen: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def ToolBar(self) -> ToolBar: ...
    @overload
    @property
    def Topmost(self) -> bool: ...
    @overload
    @property
    def WindowState(self) -> WindowState: ...
    @overload
    @property
    def WindowStyle(self) -> WindowStyle: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @Icon.setter
    def Icon(self) -> MutableSequence[Icon]: ...
    @overload
    @Location.setter
    def Location(self) -> MutableSequence[Point]: ...
    @overload
    @Maximizable.setter
    def Maximizable(self) -> MutableSequence[bool]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[MenuBar]: ...
    @overload
    @Minimizable.setter
    def Minimizable(self) -> MutableSequence[bool]: ...
    @overload
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self) -> MutableSequence[bool]: ...
    @overload
    @Opacity.setter
    def Opacity(self) -> MutableSequence[float]: ...
    @overload
    @Resizable.setter
    def Resizable(self) -> MutableSequence[bool]: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self) -> MutableSequence[bool]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @ToolBar.setter
    def ToolBar(self) -> MutableSequence[ToolBar]: ...
    @overload
    @Topmost.setter
    def Topmost(self) -> MutableSequence[bool]: ...
    @overload
    @WindowState.setter
    def WindowState(self) -> MutableSequence[WindowState]: ...
    @overload
    @WindowStyle.setter
    def WindowStyle(self) -> MutableSequence[WindowStyle]: ...
    @overload
    def SetOwner(self, owner: Window) -> None: ...


from ..Drawing import Image
class IHandler:
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...


class IHandler:
    @overload
    @property
    def Expanded(self) -> bool: ...
    @overload
    @property
    def Header(self) -> Control: ...
    @overload
    @Expanded.setter
    def Expanded(self) -> MutableSequence[bool]: ...
    @overload
    @Header.setter
    def Header(self) -> MutableSequence[Control]: ...


class IHandler:
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @overload
    @property
    def Wrap(self) -> WrapMode: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @VerticalAlignment.setter
    def VerticalAlignment(self) -> MutableSequence[VerticalAlignment]: ...
    @overload
    @Wrap.setter
    def Wrap(self) -> MutableSequence[WrapMode]: ...


class IHandler:
    @overload
    @property
    def Checked(self) -> Nullable: ...
    @overload
    @property
    def ThreeState(self) -> bool: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[Nullable]: ...
    @overload
    @ThreeState.setter
    def ThreeState(self) -> MutableSequence[bool]: ...


from ..Drawing import Size
class IHandler:
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def RecurseToChildren(self) -> bool: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...


from ..Drawing import Color
class IHandler:
    @overload
    @property
    def DisabledTextColor(self) -> Color: ...
    @overload
    @DisabledTextColor.setter
    def DisabledTextColor(self) -> MutableSequence[Color]: ...


from ..Drawing import Rectangle
from ..Drawing import Graphics
class IHandler:
    @overload
    def Create(self) -> None: ...
    @overload
    def Create(self, largeCanvas: bool) -> None: ...
    @overload
    def CreateGraphics(self) -> Graphics: ...
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def SupportsCreateGraphics(self) -> bool: ...
    @overload
    @CanFocus.setter
    def CanFocus(self) -> MutableSequence[bool]: ...
    @overload
    def Update(self, region: Rectangle) -> None: ...


from ..Drawing import Image
class IHandler:
    @overload
    @property
    def Closable(self) -> bool: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @Closable.setter
    def Closable(self) -> MutableSequence[bool]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...


class IHandler:
    pass


class IHandler:
    @overload
    @property
    def AllowReordering(self) -> bool: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    def GetPage(self, index: int) -> DocumentPage: ...
    @overload
    def GetPageCount(self) -> int: ...
    @overload
    def InsertPage(self, index: int, page: DocumentPage) -> None: ...
    @overload
    def RemovePage(self, index: int) -> None: ...
    @overload
    @AllowReordering.setter
    def AllowReordering(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...


from ..Drawing import Color
class IHandler:
    @overload
    @property
    def MaxDate(self) -> DateTime: ...
    @overload
    @property
    def MinDate(self) -> DateTime: ...
    @overload
    @property
    def Mode(self) -> DateTimePickerMode: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def Value(self) -> Nullable: ...
    @overload
    @MaxDate.setter
    def MaxDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @MinDate.setter
    def MinDate(self) -> MutableSequence[DateTime]: ...
    @overload
    @Mode.setter
    def Mode(self) -> MutableSequence[DateTimePickerMode]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[Nullable]: ...


from ..Drawing import Color
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import PointF
from ..Drawing import Point
from ..Drawing import Image
from ..Drawing import SizeF
class IHandler:
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetNativeParentWindow(self) -> Window: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnLoadComplete(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SetParent(self, oldParent: Container, newParent: Container) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...


class IHandler:
    @overload
    @property
    def AutoComplete(self) -> bool: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @AutoComplete.setter
    def AutoComplete(self) -> MutableSequence[bool]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...


from ..Drawing import Color
class IHandler:
    @overload
    @property
    def AllowAlpha(self) -> bool: ...
    @overload
    @property
    def Color(self) -> Color: ...
    @overload
    @property
    def SupportsAllowAlpha(self) -> bool: ...
    @overload
    @AllowAlpha.setter
    def AllowAlpha(self) -> MutableSequence[bool]: ...
    @overload
    @Color.setter
    def Color(self) -> MutableSequence[Color]: ...


from ..Drawing import Color
class IHandler:
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @ItemKeyBinding.setter
    def ItemKeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemTextBinding.setter
    def ItemTextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...


class IHandler:
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    def AsyncInvoke(self, action: Action) -> None: ...
    @overload
    def Attach(self, context: Object) -> None: ...
    @overload
    @property
    def AlternateModifier(self) -> Keys: ...
    @overload
    @property
    def BadgeLabel(self) -> str: ...
    @overload
    @property
    def CommonModifier(self) -> Keys: ...
    @overload
    @property
    def IsActive(self) -> bool: ...
    @overload
    @property
    def QuitIsSupported(self) -> bool: ...
    @overload
    def Invoke(self, action: Action) -> None: ...
    @overload
    def OnMainFormChanged(self) -> None: ...
    @overload
    def Open(self, url: str) -> None: ...
    @overload
    def Quit(self) -> None: ...
    @overload
    def Restart(self) -> None: ...
    @overload
    def Run(self) -> None: ...
    @overload
    def RunIteration(self) -> None: ...
    @overload
    @BadgeLabel.setter
    def BadgeLabel(self) -> MutableSequence[str]: ...


class IHandler:
    @overload
    def ExecuteScript(self, script: str) -> str: ...
    @overload
    def ExecuteScriptAsync(self, script: str) -> Task: ...
    @overload
    @property
    def BrowserContextMenuEnabled(self) -> bool: ...
    @overload
    @property
    def CanGoBack(self) -> bool: ...
    @overload
    @property
    def CanGoForward(self) -> bool: ...
    @overload
    @property
    def DocumentTitle(self) -> str: ...
    @overload
    @property
    def Url(self) -> Uri: ...
    @overload
    def GoBack(self) -> None: ...
    @overload
    def GoForward(self) -> None: ...
    @overload
    def LoadHtml(self, html: str, baseUri: Uri) -> None: ...
    @overload
    def Reload(self) -> None: ...
    @overload
    @BrowserContextMenuEnabled.setter
    def BrowserContextMenuEnabled(self) -> MutableSequence[bool]: ...
    @overload
    @Url.setter
    def Url(self) -> MutableSequence[Uri]: ...
    @overload
    def ShowPrintDialog(self) -> None: ...
    @overload
    def Stop(self) -> None: ...


from ..Drawing import Padding
from ..Drawing import Size
class IHandler:
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...


class IHandler:
    @overload
    @property
    def FilePath(self) -> str: ...
    @overload
    @FilePath.setter
    def FilePath(self) -> MutableSequence[str]: ...


class IHandler:
    @overload
    @property
    def Filenames(self) -> Iterable[str]: ...
    @overload
    @property
    def MultiSelect(self) -> bool: ...
    @overload
    @MultiSelect.setter
    def MultiSelect(self) -> MutableSequence[bool]: ...


from ..Drawing import Image
class IHandler:
    @overload
    @property
    def ContentImage(self) -> Image: ...
    @overload
    @property
    def Message(self) -> str: ...
    @overload
    @property
    def RequiresTrayIndicator(self) -> bool: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def UserData(self) -> str: ...
    @overload
    @ContentImage.setter
    def ContentImage(self) -> MutableSequence[Image]: ...
    @overload
    @Message.setter
    def Message(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @UserData.setter
    def UserData(self) -> MutableSequence[str]: ...
    @overload
    def Show(self, indicator: TrayIndicator) -> None: ...


from ..Drawing import PointF
class IHandler:
    @overload
    @property
    def Buttons(self) -> MouseButtons: ...
    @overload
    @property
    def Position(self) -> PointF: ...
    @overload
    @Position.setter
    def Position(self) -> MutableSequence[PointF]: ...
    @overload
    def SetCursor(self, cursor: Cursor) -> None: ...


class IHandler:
    @overload
    @property
    def Buttons(self) -> MessageBoxButtons: ...
    @overload
    @property
    def Caption(self) -> str: ...
    @overload
    @property
    def DefaultButton(self) -> MessageBoxDefaultButton: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Type(self) -> MessageBoxType: ...
    @overload
    @Buttons.setter
    def Buttons(self) -> MutableSequence[MessageBoxButtons]: ...
    @overload
    @Caption.setter
    def Caption(self) -> MutableSequence[str]: ...
    @overload
    @DefaultButton.setter
    def DefaultButton(self) -> MutableSequence[MessageBoxDefaultButton]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @Type.setter
    def Type(self) -> MutableSequence[MessageBoxType]: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...


class IHandler:
    pass


class IHandler:
    pass


class IHandler:
    @overload
    def Create(self, controller: RadioMenuItem) -> None: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...


from ..Drawing import RectangleF
class IHandler:
    @overload
    @property
    def PrintableArea(self) -> RectangleF: ...


class IHandler:
    @overload
    def CreateFromCommand(self, command: Command) -> None: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    def Show(self, relativeTo: Control, location: Nullable) -> None: ...


class IHandler:
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...


from ..Drawing import Image
class IHandler:
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...


class IHandler:
    @overload
    def Create(self, mask: str, culture: CultureInfo, allowPromptAsInput: bool, restrictToAscii: bool) -> None: ...
    @overload
    @property
    def AllowPromptAsInput(self) -> bool: ...
    @overload
    @property
    def AsciiOnly(self) -> bool: ...
    @overload
    @property
    def AutoAdvance(self) -> bool: ...
    @overload
    @property
    def Culture(self) -> CultureInfo: ...
    @overload
    @property
    def IncludeLiterals(self) -> bool: ...
    @overload
    @property
    def IncludePrompt(self) -> bool: ...
    @overload
    @property
    def IsPassword(self) -> bool: ...
    @overload
    @property
    def Mask(self) -> str: ...
    @overload
    @property
    def MaskFull(self) -> bool: ...
    @overload
    @property
    def PasswordChar(self) -> Char: ...
    @overload
    @property
    def PromptChar(self) -> Char: ...
    @overload
    @property
    def SkipLiterals(self) -> bool: ...
    @overload
    @AutoAdvance.setter
    def AutoAdvance(self) -> MutableSequence[bool]: ...
    @overload
    @IncludeLiterals.setter
    def IncludeLiterals(self) -> MutableSequence[bool]: ...
    @overload
    @IncludePrompt.setter
    def IncludePrompt(self) -> MutableSequence[bool]: ...
    @overload
    @IsPassword.setter
    def IsPassword(self) -> MutableSequence[bool]: ...
    @overload
    @PasswordChar.setter
    def PasswordChar(self) -> MutableSequence[Char]: ...
    @overload
    @PromptChar.setter
    def PromptChar(self) -> MutableSequence[Char]: ...
    @overload
    @SkipLiterals.setter
    def SkipLiterals(self) -> MutableSequence[bool]: ...


from ..Drawing import Color
class IHandler:
    @overload
    @property
    def CultureInfo(self) -> CultureInfo: ...
    @overload
    @property
    def DecimalPlaces(self) -> int: ...
    @overload
    @property
    def FormatString(self) -> str: ...
    @overload
    @property
    def Increment(self) -> float: ...
    @overload
    @property
    def MaximumDecimalPlaces(self) -> int: ...
    @overload
    @property
    def MaxValue(self) -> float: ...
    @overload
    @property
    def MinValue(self) -> float: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def Value(self) -> float: ...
    @overload
    @property
    def Wrap(self) -> bool: ...
    @overload
    @CultureInfo.setter
    def CultureInfo(self) -> MutableSequence[CultureInfo]: ...
    @overload
    @DecimalPlaces.setter
    def DecimalPlaces(self) -> MutableSequence[int]: ...
    @overload
    @FormatString.setter
    def FormatString(self) -> MutableSequence[str]: ...
    @overload
    @Increment.setter
    def Increment(self) -> MutableSequence[float]: ...
    @overload
    @MaximumDecimalPlaces.setter
    def MaximumDecimalPlaces(self) -> MutableSequence[int]: ...
    @overload
    @MaxValue.setter
    def MaxValue(self) -> MutableSequence[float]: ...
    @overload
    @MinValue.setter
    def MinValue(self) -> MutableSequence[float]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[float]: ...
    @overload
    @Wrap.setter
    def Wrap(self) -> MutableSequence[bool]: ...


class IHandler:
    pass


class IHandler:
    @overload
    def Update(self) -> None: ...


class IHandler:
    @overload
    @property
    def Modifiers(self) -> Keys: ...
    @overload
    @property
    def SupportedLockKeys(self) -> Iterable[Keys]: ...
    @overload
    def IsKeyLocked(self, key: Keys) -> bool: ...


class IHandler:
    @overload
    def CreateLegacySystemMenu(self) -> None: ...
    @overload
    def CreateSystemMenu(self) -> None: ...
    @overload
    @property
    def ApplicationMenu(self) -> ButtonMenuItem: ...
    @overload
    @property
    def HelpMenu(self) -> ButtonMenuItem: ...
    @overload
    def GetSystemCommands(self) -> Iterable[Command]: ...
    @overload
    def SetAboutItem(self, item: MenuItem) -> None: ...
    @overload
    def SetQuitItem(self, item: MenuItem) -> None: ...


class IHandler:
    @overload
    @property
    def CanFocus(self) -> bool: ...
    @overload
    @property
    def ShowActivated(self) -> bool: ...
    @overload
    @CanFocus.setter
    def CanFocus(self) -> MutableSequence[bool]: ...
    @overload
    @ShowActivated.setter
    def ShowActivated(self) -> MutableSequence[bool]: ...
    @overload
    def Show(self) -> None: ...


class IHandler:
    @overload
    @property
    def AllowPageRange(self) -> bool: ...
    @overload
    @property
    def AllowSelection(self) -> bool: ...
    @overload
    @property
    def Document(self) -> PrintDocument: ...
    @overload
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @overload
    @AllowPageRange.setter
    def AllowPageRange(self) -> MutableSequence[bool]: ...
    @overload
    @AllowSelection.setter
    def AllowSelection(self) -> MutableSequence[bool]: ...
    @overload
    @Document.setter
    def Document(self) -> MutableSequence[PrintDocument]: ...
    @overload
    @PrintSettings.setter
    def PrintSettings(self) -> MutableSequence[PrintSettings]: ...


class IHandler:
    @overload
    @property
    def Document(self) -> PrintDocument: ...
    @overload
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @overload
    @Document.setter
    def Document(self) -> MutableSequence[PrintDocument]: ...
    @overload
    @PrintSettings.setter
    def PrintSettings(self) -> MutableSequence[PrintSettings]: ...


class IHandler:
    @overload
    @property
    def Interval(self) -> float: ...
    @overload
    @Interval.setter
    def Interval(self) -> MutableSequence[float]: ...
    @overload
    def Start(self) -> None: ...
    @overload
    def Stop(self) -> None: ...


from ..Drawing import Image
class IHandler:
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Menu(self) -> ContextMenu: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...


from ..Drawing import Image
class IHandler:
    @overload
    def CreateFromCommand(self, command: Command) -> None: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    def AddButton(self, button: ToolItem, index: int) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    @property
    def Dock(self) -> ToolBarDock: ...
    @overload
    @property
    def TextAlign(self) -> ToolBarTextAlign: ...
    @overload
    def RemoveButton(self, button: ToolItem, index: int) -> None: ...
    @overload
    @Dock.setter
    def Dock(self) -> MutableSequence[ToolBarDock]: ...
    @overload
    @TextAlign.setter
    def TextAlign(self) -> MutableSequence[ToolBarTextAlign]: ...


class IHandler:
    @overload
    def OnLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnPreLoad(self, e: EventArgs) -> None: ...
    @overload
    def OnUnLoad(self, e: EventArgs) -> None: ...


class IHandler:
    @overload
    @property
    def Type(self) -> SeparatorToolItemType: ...
    @overload
    @Type.setter
    def Type(self) -> MutableSequence[SeparatorToolItemType]: ...


class IHandler:
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    def Create(self) -> None: ...
    @overload
    def Create(self, control: Control) -> None: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def PageCount(self) -> int: ...
    @overload
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @overload
    def Print(self) -> None: ...
    @overload
    @Name.setter
    def Name(self) -> MutableSequence[str]: ...
    @overload
    @PageCount.setter
    def PageCount(self) -> MutableSequence[int]: ...
    @overload
    @PrintSettings.setter
    def PrintSettings(self) -> MutableSequence[PrintSettings]: ...


class IHandler:
    pass


class IHandler:
    @overload
    @property
    def Directory(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @Directory.setter
    def Directory(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...


from ..Drawing import Image
class IHandler:
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Selected(self) -> bool: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Selected.setter
    def Selected(self) -> MutableSequence[bool]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...


class IHandler:
    @overload
    def ClearItems(self) -> None: ...
    @overload
    def ClearSelection(self) -> None: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexes(self) -> Iterable[int]: ...
    @overload
    @property
    def SelectionMode(self) -> SegmentedSelectionMode: ...
    @overload
    def InsertItem(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def RemoveItem(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedIndexes.setter
    def SelectedIndexes(self) -> MutableSequence[Iterable[int]]: ...
    @overload
    @SelectionMode.setter
    def SelectionMode(self) -> MutableSequence[SegmentedSelectionMode]: ...
    @overload
    def SetItem(self, index: int, item: SegmentedItem) -> None: ...


class IHandler:
    @overload
    @property
    def CanSelect(self) -> bool: ...
    @overload
    @property
    def Menu(self) -> ContextMenu: ...
    @overload
    @CanSelect.setter
    def CanSelect(self) -> MutableSequence[bool]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[ContextMenu]: ...


class IHandler:
    pass


from ..Drawing import RectangleF
from ..Drawing import Image
class IHandler:
    @overload
    @property
    def BitsPerPixel(self) -> int: ...
    @overload
    @property
    def Bounds(self) -> RectangleF: ...
    @overload
    @property
    def IsPrimary(self) -> bool: ...
    @overload
    @property
    def RealScale(self) -> Single: ...
    @overload
    @property
    def Scale(self) -> Single: ...
    @overload
    @property
    def WorkingArea(self) -> RectangleF: ...
    @overload
    def GetImage(self, rect: RectangleF) -> Image: ...


class IHandler:
    pass


class IHandler:
    @overload
    @property
    def Collate(self) -> bool: ...
    @overload
    @property
    def Copies(self) -> int: ...
    @overload
    @property
    def MaximumPageRange(self) -> Range: ...
    @overload
    @property
    def Orientation(self) -> PageOrientation: ...
    @overload
    @property
    def PrintSelection(self) -> PrintSelection: ...
    @overload
    @property
    def Reverse(self) -> bool: ...
    @overload
    @property
    def SelectedPageRange(self) -> Range: ...
    @overload
    @Collate.setter
    def Collate(self) -> MutableSequence[bool]: ...
    @overload
    @Copies.setter
    def Copies(self) -> MutableSequence[int]: ...
    @overload
    @MaximumPageRange.setter
    def MaximumPageRange(self) -> MutableSequence[Range]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[PageOrientation]: ...
    @overload
    @PrintSelection.setter
    def PrintSelection(self) -> MutableSequence[PrintSelection]: ...
    @overload
    @Reverse.setter
    def Reverse(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedPageRange.setter
    def SelectedPageRange(self) -> MutableSequence[Range]: ...


class IHandler:
    @overload
    def SetProgress(self, state: TaskbarProgressState, progress: Single) -> None: ...


from ..Drawing import Font
class IHandler:
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...


from ..Drawing import Size
from ..Drawing import Padding
class IHandler:
    @overload
    def CreateControl(self, columns: int, rows: int) -> None: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Spacing(self) -> Size: ...
    @overload
    def GetColumnScale(self, column: int) -> bool: ...
    @overload
    def GetRowScale(self, row: int) -> bool: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[Size]: ...
    @overload
    def SetColumnScale(self, column: int, scale: bool) -> None: ...
    @overload
    def SetRowScale(self, row: int, scale: bool) -> None: ...


class IHandler:
    pass


class IHandler:
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def MaxLength(self) -> int: ...
    @overload
    @property
    def PlaceholderText(self) -> str: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @MaxLength.setter
    def MaxLength(self) -> MutableSequence[int]: ...
    @overload
    @PlaceholderText.setter
    def PlaceholderText(self) -> MutableSequence[str]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...


class IHandler:
    @overload
    def Append(self, text: str, scrollToCursor: bool) -> None: ...
    @overload
    @property
    def AcceptsReturn(self) -> bool: ...
    @overload
    @property
    def AcceptsTab(self) -> bool: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def SelectedText(self) -> str: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def SpellCheck(self) -> bool: ...
    @overload
    @property
    def SpellCheckIsSupported(self) -> bool: ...
    @overload
    @property
    def SupportedTextReplacements(self) -> TextReplacements: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextReplacements(self) -> TextReplacements: ...
    @overload
    @property
    def Wrap(self) -> bool: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AcceptsReturn.setter
    def AcceptsReturn(self) -> MutableSequence[bool]: ...
    @overload
    @AcceptsTab.setter
    def AcceptsTab(self) -> MutableSequence[bool]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedText.setter
    def SelectedText(self) -> MutableSequence[str]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @SpellCheck.setter
    def SpellCheck(self) -> MutableSequence[bool]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextReplacements.setter
    def TextReplacements(self) -> MutableSequence[TextReplacements]: ...
    @overload
    @Wrap.setter
    def Wrap(self) -> MutableSequence[bool]: ...


from ..Drawing import Image
class IHandler:
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...


class IHandler:
    @overload
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @overload
    @ValidDirection.setter
    def ValidDirection(self) -> MutableSequence[StepperValidDirections]: ...


class IHandler:
    @overload
    @property
    def MaxLength(self) -> int: ...
    @overload
    @property
    def PasswordChar(self) -> Char: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @MaxLength.setter
    def MaxLength(self) -> MutableSequence[int]: ...
    @overload
    @PasswordChar.setter
    def PasswordChar(self) -> MutableSequence[Char]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    @property
    def FixedPanel(self) -> SplitterFixedPanel: ...
    @overload
    @property
    def Orientation(self) -> Orientation: ...
    @overload
    @property
    def Panel1(self) -> Control: ...
    @overload
    @property
    def Panel1MinimumSize(self) -> int: ...
    @overload
    @property
    def Panel2(self) -> Control: ...
    @overload
    @property
    def Panel2MinimumSize(self) -> int: ...
    @overload
    @property
    def Position(self) -> int: ...
    @overload
    @property
    def RelativePosition(self) -> float: ...
    @overload
    @property
    def SplitterWidth(self) -> int: ...
    @overload
    @FixedPanel.setter
    def FixedPanel(self) -> MutableSequence[SplitterFixedPanel]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[Orientation]: ...
    @overload
    @Panel1.setter
    def Panel1(self) -> MutableSequence[Control]: ...
    @overload
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self) -> MutableSequence[int]: ...
    @overload
    @Panel2.setter
    def Panel2(self) -> MutableSequence[Control]: ...
    @overload
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self) -> MutableSequence[int]: ...
    @overload
    @Position.setter
    def Position(self) -> MutableSequence[int]: ...
    @overload
    @RelativePosition.setter
    def RelativePosition(self) -> MutableSequence[float]: ...
    @overload
    @SplitterWidth.setter
    def SplitterWidth(self) -> MutableSequence[int]: ...


from ..Drawing import Color
class IHandler:
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...


class IHandler:
    pass


class IHandler:
    pass


from ..Drawing import Point
from ..Drawing import Size
from ..Drawing import Rectangle
class IHandler:
    @overload
    @property
    def Border(self) -> BorderType: ...
    @overload
    @property
    def ExpandContentHeight(self) -> bool: ...
    @overload
    @property
    def ExpandContentWidth(self) -> bool: ...
    @overload
    @property
    def MaximumZoom(self) -> Single: ...
    @overload
    @property
    def MinimumZoom(self) -> Single: ...
    @overload
    @property
    def ScrollPosition(self) -> Point: ...
    @overload
    @property
    def ScrollSize(self) -> Size: ...
    @overload
    @property
    def VisibleRect(self) -> Rectangle: ...
    @overload
    @property
    def Zoom(self) -> Single: ...
    @overload
    @Border.setter
    def Border(self) -> MutableSequence[BorderType]: ...
    @overload
    @ExpandContentHeight.setter
    def ExpandContentHeight(self) -> MutableSequence[bool]: ...
    @overload
    @ExpandContentWidth.setter
    def ExpandContentWidth(self) -> MutableSequence[bool]: ...
    @overload
    @MaximumZoom.setter
    def MaximumZoom(self) -> MutableSequence[Single]: ...
    @overload
    @MinimumZoom.setter
    def MinimumZoom(self) -> MutableSequence[Single]: ...
    @overload
    @ScrollPosition.setter
    def ScrollPosition(self) -> MutableSequence[Point]: ...
    @overload
    @ScrollSize.setter
    def ScrollSize(self) -> MutableSequence[Size]: ...
    @overload
    @Zoom.setter
    def Zoom(self) -> MutableSequence[Single]: ...
    @overload
    def UpdateScrollSizes(self) -> None: ...


class IHandler:
    @overload
    @property
    def Indeterminate(self) -> bool: ...
    @overload
    @property
    def MaxValue(self) -> int: ...
    @overload
    @property
    def MinValue(self) -> int: ...
    @overload
    @property
    def Value(self) -> int: ...
    @overload
    @Indeterminate.setter
    def Indeterminate(self) -> MutableSequence[bool]: ...
    @overload
    @MaxValue.setter
    def MaxValue(self) -> MutableSequence[int]: ...
    @overload
    @MinValue.setter
    def MinValue(self) -> MutableSequence[int]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[int]: ...


from ..Drawing import Font
from ..Drawing import Color
from ..Drawing import FontFamily
from ..Drawing import FontTypeface
class IHandler:
    @overload
    @property
    def Buffer(self) -> ITextBuffer: ...
    @overload
    @property
    def SelectionBackground(self) -> Color: ...
    @overload
    @property
    def SelectionBold(self) -> bool: ...
    @overload
    @property
    def SelectionFamily(self) -> FontFamily: ...
    @overload
    @property
    def SelectionFont(self) -> Font: ...
    @overload
    @property
    def SelectionForeground(self) -> Color: ...
    @overload
    @property
    def SelectionItalic(self) -> bool: ...
    @overload
    @property
    def SelectionStrikethrough(self) -> bool: ...
    @overload
    @property
    def SelectionTypeface(self) -> FontTypeface: ...
    @overload
    @property
    def SelectionUnderline(self) -> bool: ...
    @overload
    @SelectionBackground.setter
    def SelectionBackground(self) -> MutableSequence[Color]: ...
    @overload
    @SelectionBold.setter
    def SelectionBold(self) -> MutableSequence[bool]: ...
    @overload
    @SelectionFamily.setter
    def SelectionFamily(self) -> MutableSequence[FontFamily]: ...
    @overload
    @SelectionFont.setter
    def SelectionFont(self) -> MutableSequence[Font]: ...
    @overload
    @SelectionForeground.setter
    def SelectionForeground(self) -> MutableSequence[Color]: ...
    @overload
    @SelectionItalic.setter
    def SelectionItalic(self) -> MutableSequence[bool]: ...
    @overload
    @SelectionStrikethrough.setter
    def SelectionStrikethrough(self) -> MutableSequence[bool]: ...
    @overload
    @SelectionTypeface.setter
    def SelectionTypeface(self) -> MutableSequence[FontTypeface]: ...
    @overload
    @SelectionUnderline.setter
    def SelectionUnderline(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    def Create(self, controller: RadioButton) -> None: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    @property
    def SelectedObject(self) -> Object: ...
    @overload
    @property
    def SelectedObjects(self) -> Iterable[Object]: ...
    @overload
    @property
    def ShowCategories(self) -> bool: ...
    @overload
    @property
    def ShowDescription(self) -> bool: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    @SelectedObject.setter
    def SelectedObject(self) -> MutableSequence[Object]: ...
    @overload
    @SelectedObjects.setter
    def SelectedObjects(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @ShowCategories.setter
    def ShowCategories(self) -> MutableSequence[bool]: ...
    @overload
    @ShowDescription.setter
    def ShowDescription(self) -> MutableSequence[bool]: ...


class IHandler:
    @overload
    @property
    def MaxValue(self) -> int: ...
    @overload
    @property
    def MinValue(self) -> int: ...
    @overload
    @property
    def Orientation(self) -> Orientation: ...
    @overload
    @property
    def SnapToTick(self) -> bool: ...
    @overload
    @property
    def TickFrequency(self) -> int: ...
    @overload
    @property
    def Value(self) -> int: ...
    @overload
    @MaxValue.setter
    def MaxValue(self) -> MutableSequence[int]: ...
    @overload
    @MinValue.setter
    def MinValue(self) -> MutableSequence[int]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[Orientation]: ...
    @overload
    @SnapToTick.setter
    def SnapToTick(self) -> MutableSequence[bool]: ...
    @overload
    @TickFrequency.setter
    def TickFrequency(self) -> MutableSequence[int]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[int]: ...


class IHandler:
    @overload
    @property
    def ShowStepper(self) -> bool: ...
    @overload
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @overload
    @ShowStepper.setter
    def ShowStepper(self) -> MutableSequence[bool]: ...
    @overload
    @ValidDirection.setter
    def ValidDirection(self) -> MutableSequence[StepperValidDirections]: ...


class IHandler:
    @overload
    def ClearTabs(self) -> None: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def TabPosition(self) -> DockPosition: ...
    @overload
    def InsertTab(self, index: int, page: TabPage) -> None: ...
    @overload
    def RemoveTab(self, index: int, page: TabPage) -> None: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @TabPosition.setter
    def TabPosition(self) -> MutableSequence[DockPosition]: ...


from ..Drawing import PointF
class IHandler:
    @overload
    @property
    def DataStore(self) -> ITreeGridStore: ...
    @overload
    @property
    def SelectedItem(self) -> ITreeGridItem: ...
    @overload
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @overload
    def GetCellAt(self, location: PointF) -> TreeGridCell: ...
    @overload
    def GetDragInfo(self, args: DragEventArgs) -> TreeGridViewDragInfo: ...
    @overload
    def ReloadData(self) -> None: ...
    @overload
    def ReloadItem(self, item: ITreeGridItem, reloadChildren: bool) -> None: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[ITreeGridStore]: ...
    @overload
    @SelectedItem.setter
    def SelectedItem(self) -> MutableSequence[ITreeGridItem]: ...


class IHandler:
    @overload
    def ClearFilters(self) -> None: ...
    @overload
    @property
    def CheckFileExists(self) -> bool: ...
    @overload
    @property
    def CurrentFilterIndex(self) -> int: ...
    @overload
    @property
    def Directory(self) -> Uri: ...
    @overload
    @property
    def FileName(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def InsertFilter(self, index: int, filter: FileFilter) -> None: ...
    @overload
    def RemoveFilter(self, index: int) -> None: ...
    @overload
    @CheckFileExists.setter
    def CheckFileExists(self) -> MutableSequence[bool]: ...
    @overload
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self) -> MutableSequence[int]: ...
    @overload
    @Directory.setter
    def Directory(self) -> MutableSequence[Uri]: ...
    @overload
    @FileName.setter
    def FileName(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...


class IHandler:
    @overload
    @property
    def AbortButton(self) -> Button: ...
    @overload
    @property
    def DefaultButton(self) -> Button: ...
    @overload
    @property
    def DisplayMode(self) -> DialogDisplayMode: ...
    @overload
    def InsertDialogButton(self, positive: bool, index: int, item: Button) -> None: ...
    @overload
    def RemoveDialogButton(self, positive: bool, index: int, item: Button) -> None: ...
    @overload
    @AbortButton.setter
    def AbortButton(self) -> MutableSequence[Button]: ...
    @overload
    @DefaultButton.setter
    def DefaultButton(self) -> MutableSequence[Button]: ...
    @overload
    @DisplayMode.setter
    def DisplayMode(self) -> MutableSequence[DialogDisplayMode]: ...
    @overload
    def ShowModal(self) -> None: ...
    @overload
    def ShowModalAsync(self) -> Task: ...


class IHandler:
    @overload
    def TryGetObject(self, type: str) -> Tuple[bool, Object]: ...
    @overload
    def TrySetObject(self, value: Object, type: str) -> bool: ...


class IHandler:
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...


from ..Drawing import Image
from ..Drawing import PointF
class IHandler:
    @overload
    def Create(self, type: CursorType) -> None: ...
    @overload
    def Create(self, fileName: str) -> None: ...
    @overload
    def Create(self, stream: Stream) -> None: ...
    @overload
    def Create(self, image: Image, hotspot: PointF) -> None: ...


class IHandler:
    @overload
    @property
    def Color(self) -> str: ...
    @overload
    @property
    def Html(self) -> str: ...
    @overload
    @property
    def Text(self) -> str: ...


from ..Drawing import PointF
from ..Drawing import Color
class IHandler:
    @overload
    @property
    def DataStore(self) -> ITreeStore: ...
    @overload
    @property
    def LabelEdit(self) -> bool: ...
    @overload
    @property
    def SelectedItem(self) -> ITreeItem: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    def GetNodeAt(self, point: PointF) -> ITreeItem: ...
    @overload
    def RefreshData(self) -> None: ...
    @overload
    def RefreshItem(self, item: ITreeItem) -> None: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[ITreeStore]: ...
    @overload
    @LabelEdit.setter
    def LabelEdit(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedItem.setter
    def SelectedItem(self) -> MutableSequence[ITreeItem]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...


from ..Drawing import Image
class IHandler:
    @overload
    @property
    def Copyright(self) -> str: ...
    @overload
    @property
    def Designers(self) -> Iterable[str]: ...
    @overload
    @property
    def Developers(self) -> Iterable[str]: ...
    @overload
    @property
    def Documenters(self) -> Iterable[str]: ...
    @overload
    @property
    def License(self) -> str: ...
    @overload
    @property
    def Logo(self) -> Image: ...
    @overload
    @property
    def ProgramDescription(self) -> str: ...
    @overload
    @property
    def ProgramName(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def Version(self) -> str: ...
    @overload
    @property
    def Website(self) -> Uri: ...
    @overload
    @property
    def WebsiteLabel(self) -> str: ...
    @overload
    @Copyright.setter
    def Copyright(self) -> MutableSequence[str]: ...
    @overload
    @Designers.setter
    def Designers(self) -> MutableSequence[Iterable[str]]: ...
    @overload
    @Developers.setter
    def Developers(self) -> MutableSequence[Iterable[str]]: ...
    @overload
    @Documenters.setter
    def Documenters(self) -> MutableSequence[Iterable[str]]: ...
    @overload
    @License.setter
    def License(self) -> MutableSequence[str]: ...
    @overload
    @Logo.setter
    def Logo(self) -> MutableSequence[Image]: ...
    @overload
    @ProgramDescription.setter
    def ProgramDescription(self) -> MutableSequence[str]: ...
    @overload
    @ProgramName.setter
    def ProgramName(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @Version.setter
    def Version(self) -> MutableSequence[str]: ...
    @overload
    @Website.setter
    def Website(self) -> MutableSequence[Uri]: ...
    @overload
    @WebsiteLabel.setter
    def WebsiteLabel(self) -> MutableSequence[str]: ...


from ..Drawing import Image
class IImageListItem:
    @overload
    @property
    def Image(self) -> Image: ...




class IKeyboardInputSource:
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...


class IListItem:
    @overload
    @property
    def Key(self) -> str: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...


from ..Drawing import Image
class ImageListItem(ListItem):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Key(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Key.setter
    def Key(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import ImageInterpolation
class ImageTextCell(Cell):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, imageProperty: str, textProperty: str): ...
    @overload
    def __init__(self, imageColumn: int, textColumn: int): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def ImageBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ImageBinding.setter
    def ImageBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ImageInterpolation.setter
    def ImageInterpolation(self) -> MutableSequence[ImageInterpolation]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextBinding.setter
    def TextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @VerticalAlignment.setter
    def VerticalAlignment(self) -> MutableSequence[VerticalAlignment]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Image
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
class ImageView(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import ImageInterpolation
class ImageViewCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, column: int): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Binding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def ImageInterpolation(self) -> ImageInterpolation: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Binding.setter
    def Binding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ImageInterpolation.setter
    def ImageInterpolation(self) -> MutableSequence[ImageInterpolation]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class IMaskedTextProvider:
    @overload
    def Clear(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @overload
    def Delete(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @overload
    @property
    def DisplayText(self) -> str: ...
    @overload
    @property
    def EditPositions(self) -> Iterable[int]: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    @property
    def MaskCompleted(self) -> bool: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def Insert(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @overload
    def Replace(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...




class IMouseInputSource:
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...


class INavigationItem:
    @overload
    @property
    def Content(self) -> Control: ...




class InsertKeyMode(Enum):
    Insert = 0
    Overwrite = 1
    Toggle = 2


class IPositionalLayoutHandler:
    @overload
    def Add(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Move(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Remove(self, control: Control) -> None: ...


class IScreensHandler:
    @overload
    @property
    def PrimaryScreen(self) -> Screen: ...
    @overload
    @property
    def Screens(self) -> Iterable[Screen]: ...






class ISelectionPreserver:
    @overload
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @overload
    @SelectedItems.setter
    def SelectedItems(self) -> MutableSequence[Iterable[Object]]: ...


class ISubmenu:
    @overload
    @property
    def Items(self) -> MenuItemCollection: ...
    @overload
    @property
    def Trim(self) -> bool: ...


class ISubmenuHandler:
    @overload
    def AddMenu(self, index: int, item: MenuItem) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def RemoveMenu(self, item: MenuItem) -> None: ...


from ..Drawing import Font
from ..Drawing import Color
from ..Drawing import FontFamily
class ITextBuffer:
    @overload
    def Clear(self) -> None: ...
    @overload
    def Delete(self, range: Range) -> None: ...
    @overload
    @property
    def SupportedFormats(self) -> Iterable[RichTextAreaFormat]: ...
    @overload
    def Insert(self, position: int, text: str) -> None: ...
    @overload
    def Load(self, stream: Stream, format: RichTextAreaFormat) -> None: ...
    @overload
    def Save(self, stream: Stream, format: RichTextAreaFormat) -> None: ...
    @overload
    def SetBackground(self, range: Range, color: Color) -> None: ...
    @overload
    def SetBold(self, range: Range, bold: bool) -> None: ...
    @overload
    def SetFamily(self, range: Range, family: FontFamily) -> None: ...
    @overload
    def SetFont(self, range: Range, font: Font) -> None: ...
    @overload
    def SetForeground(self, range: Range, color: Color) -> None: ...
    @overload
    def SetItalic(self, range: Range, italic: bool) -> None: ...
    @overload
    def SetStrikethrough(self, range: Range, strikethrough: bool) -> None: ...
    @overload
    def SetUnderline(self, range: Range, underline: bool) -> None: ...


class ITreeGridItem:
    pass






class ITreeItem:
    pass




class ITreeStore:
    pass




class IValueConverter:
    @overload
    def Convert(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...
    @overload
    def ConvertBack(self, value: Object, targetType: Type, parameter: Object, culture: CultureInfo) -> Object: ...


from ..Drawing import PointF
class IWindowHandler:
    @overload
    def FromPoint(self, point: PointF) -> Window: ...


class Keyboard:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Modifiers() -> Keys: ...
    @overload
    @property
    def SupportedLockKeys() -> Iterable[Keys]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def IsKeyLocked(key: Keys) -> bool: ...
    @overload
    def ToString(self) -> str: ...


class KeyEventArgs:
    @overload
    def __init__(self, keyData: Keys, keyEventType: KeyEventType, keyChar: Nullable): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Alt(self) -> bool: ...
    @overload
    @property
    def Application(self) -> bool: ...
    @overload
    @property
    def Control(self) -> bool: ...
    @overload
    @property
    def Handled(self) -> bool: ...
    @overload
    @property
    def IsChar(self) -> bool: ...
    @overload
    @property
    def Key(self) -> Keys: ...
    @overload
    @property
    def KeyChar(self) -> Char: ...
    @overload
    @property
    def KeyData(self) -> Keys: ...
    @overload
    @property
    def KeyEventType(self) -> KeyEventType: ...
    @overload
    @property
    def Modifiers(self) -> Keys: ...
    @overload
    @property
    def Shift(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IsKeyDown(self, key: Keys, modifier: Nullable) -> bool: ...
    @overload
    def IsKeyUp(self, key: Keys, modifier: Nullable) -> bool: ...
    @overload
    @Handled.setter
    def Handled(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class KeyEventType(Enum):
    KeyDown = 0
    KeyUp = 1


class Keys(Enum):
    # None = 0
    A = 1
    B = 2
    C = 3
    D = 4
    E = 5
    F = 6
    G = 7
    H = 8
    I = 9
    J = 10
    K = 11
    L = 12
    M = 13
    N = 14
    O = 15
    P = 16
    Q = 17
    R = 18
    S = 19
    T = 20
    U = 21
    V = 22
    W = 23
    X = 24
    Y = 25
    Z = 26
    F1 = 27
    F2 = 28
    F3 = 29
    F4 = 30
    F5 = 31
    F6 = 32
    F7 = 33
    F8 = 34
    F9 = 35
    F10 = 36
    F11 = 37
    F12 = 38
    D0 = 39
    D1 = 40
    D2 = 41
    D3 = 42
    D4 = 43
    D5 = 44
    D6 = 45
    D7 = 46
    D8 = 47
    D9 = 48
    Minus = 49
    Grave = 51
    Insert = 52
    Home = 53
    PageUp = 54
    PageDown = 55
    Delete = 56
    End = 57
    Divide = 58
    Decimal = 59
    Backspace = 60
    Up = 61
    Down = 62
    Left = 63
    Right = 64
    Tab = 65
    Space = 66
    CapsLock = 67
    ScrollLock = 68
    PrintScreen = 69
    NumberLock = 70
    Enter = 71
    Escape = 72
    Multiply = 73
    Add = 74
    Subtract = 75
    Help = 76
    Pause = 77
    Clear = 78
    KeypadEqual = 79
    Menu = 80
    Backslash = 81
    Plus = 85
    Equal = 85
    Semicolon = 86
    Quote = 87
    Comma = 88
    Period = 89
    Slash = 96
    ForwardSlash = 96
    RightBracket = 97
    LeftBracket = 98
    ContextMenu = 99
    Keypad0 = 112
    Keypad1 = 113
    Keypad2 = 114
    Keypad3 = 115
    Keypad4 = 116
    Keypad5 = 117
    Keypad6 = 118
    Keypad7 = 119
    Keypad8 = 120
    Keypad9 = 121
    LeftShift = 122
    RightShift = 123
    LeftControl = 124
    RightControl = 125
    LeftAlt = 126
    RightAlt = 127
    LeftApplication = 128
    RightApplication = 129
    F13 = 130
    F14 = 131
    F15 = 132
    F16 = 133
    F17 = 134
    F18 = 135
    F19 = 136
    F20 = 137
    F21 = 138
    F22 = 139
    F23 = 140
    F24 = 141
    KeyMask = 4095
    Shift = 4096
    Alt = 8192
    Control = 16384
    Application = 32768
    ModifierMask = 61440


class KeysExtensions:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def ToShortcutString(key: Keys, separator: str) -> str: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Label(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HorizontalAlign(self) -> HorizontalAlign: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def VerticalAlign(self) -> VerticalAlign: ...
    @overload
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def Wrap(self) -> WrapMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @HorizontalAlign.setter
    def HorizontalAlign(self) -> MutableSequence[HorizontalAlign]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @VerticalAlign.setter
    def VerticalAlign(self) -> MutableSequence[VerticalAlign]: ...
    @overload
    @VerticalAlignment.setter
    def VerticalAlignment(self) -> MutableSequence[VerticalAlignment]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @Wrap.setter
    def Wrap(self) -> MutableSequence[WrapMode]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Layout(Container):
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BeginInit(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def EndInit(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class LinkButton(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DisabledTextColor(self) -> Color: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DisabledTextColor.setter
    def DisabledTextColor(self) -> MutableSequence[Color]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class ListBox(ListControl):
    @overload
    def __init__(self): ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def ImageBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def ItemImageBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Items(self) -> ListItemCollection: ...
    @overload
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedKey(self) -> str: ...
    @overload
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedValue(self) -> Object: ...
    @overload
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ImageBinding.setter
    def ImageBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemImageBinding.setter
    def ItemImageBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemKeyBinding.setter
    def ItemKeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemTextBinding.setter
    def ItemTextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @KeyBinding.setter
    def KeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedKey.setter
    def SelectedKey(self) -> MutableSequence[str]: ...
    @overload
    @SelectedValue.setter
    def SelectedValue(self) -> MutableSequence[Object]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @TextBinding.setter
    def TextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class ListControl(CommonControl):
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Items(self) -> ListItemCollection: ...
    @overload
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedKey(self) -> str: ...
    @overload
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedValue(self) -> Object: ...
    @overload
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ItemKeyBinding.setter
    def ItemKeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemTextBinding.setter
    def ItemTextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @KeyBinding.setter
    def KeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedKey.setter
    def SelectedKey(self) -> MutableSequence[str]: ...
    @overload
    @SelectedValue.setter
    def SelectedValue(self) -> MutableSequence[Object]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @TextBinding.setter
    def TextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class ListItem:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Key(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(text: str) -> ListItem: ...
    @overload
    @Key.setter
    def Key(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class ListItemCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, collection: Iterable[IListItem]): ...
    def __iter__(self) -> Iterator[IListItem]: ...
    def __getitem__(self, index: int) -> IListItem: ...
    def __setitem__(self, index: int, value: IListItem): ...
    @overload
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Add(self, text: str) -> None: ...
    @overload
    def Add(self, item: IListItem) -> None: ...
    @overload
    def Add(self, text: str, key: str) -> None: ...
    @overload
    def AddRange(self, items: Iterable[IListItem]) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: IListItem) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[IListItem], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: IListItem) -> int: ...
    @overload
    def Insert(self, index: int, item: IListItem) -> None: ...
    @overload
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    @overload
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Remove(self, item: IListItem) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def ToString(self) -> str: ...


class LocalizeEventArgs:
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def LocalizedText(self) -> str: ...
    @overload
    @property
    def Source(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @LocalizedText.setter
    def LocalizedText(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class MaskedTextBox(TextBox):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IMaskedTextProvider): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def InsertMode(self) -> InsertKeyMode: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsOverwrite(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaskCompleted(self) -> bool: ...
    @overload
    @property
    def MaxLength(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def PlaceholderText(self) -> str: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Provider(self) -> IMaskedTextProvider: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def SelectedText(self) -> str: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def ShowPlaceholderWhenEmpty(self) -> bool: ...
    @overload
    @property
    def ShowPromptMode(self) -> ShowPromptMode: ...
    @overload
    @property
    def ShowPromptOnFocus(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @InsertMode.setter
    def InsertMode(self) -> MutableSequence[InsertKeyMode]: ...
    @overload
    @MaxLength.setter
    def MaxLength(self) -> MutableSequence[int]: ...
    @overload
    @PlaceholderText.setter
    def PlaceholderText(self) -> MutableSequence[str]: ...
    @overload
    @Provider.setter
    def Provider(self) -> MutableSequence[IMaskedTextProvider]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedText.setter
    def SelectedText(self) -> MutableSequence[str]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @ShowPlaceholderWhenEmpty.setter
    def ShowPlaceholderWhenEmpty(self) -> MutableSequence[bool]: ...
    @overload
    @ShowPromptMode.setter
    def ShowPromptMode(self) -> MutableSequence[ShowPromptMode]: ...
    @overload
    @ShowPromptOnFocus.setter
    def ShowPromptOnFocus(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...




from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class MaskedTextStepper(TextStepper):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, provider: IMaskedTextProvider): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Step(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def InsertMode(self) -> InsertKeyMode: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsOverwrite(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaskCompleted(self) -> bool: ...
    @overload
    @property
    def MaxLength(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def PlaceholderText(self) -> str: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Provider(self) -> IMaskedTextProvider: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def SelectedText(self) -> str: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def ShowPlaceholderWhenEmpty(self) -> bool: ...
    @overload
    @property
    def ShowPromptMode(self) -> ShowPromptMode: ...
    @overload
    @property
    def ShowPromptOnFocus(self) -> bool: ...
    @overload
    @property
    def ShowStepper(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Step(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @InsertMode.setter
    def InsertMode(self) -> MutableSequence[InsertKeyMode]: ...
    @overload
    @MaxLength.setter
    def MaxLength(self) -> MutableSequence[int]: ...
    @overload
    @PlaceholderText.setter
    def PlaceholderText(self) -> MutableSequence[str]: ...
    @overload
    @Provider.setter
    def Provider(self) -> MutableSequence[IMaskedTextProvider]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedText.setter
    def SelectedText(self) -> MutableSequence[str]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @ShowPlaceholderWhenEmpty.setter
    def ShowPlaceholderWhenEmpty(self) -> MutableSequence[bool]: ...
    @overload
    @ShowPromptMode.setter
    def ShowPromptMode(self) -> MutableSequence[ShowPromptMode]: ...
    @overload
    @ShowPromptOnFocus.setter
    def ShowPromptOnFocus(self) -> MutableSequence[bool]: ...
    @overload
    @ShowStepper.setter
    def ShowStepper(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @ValidDirection.setter
    def ValidDirection(self) -> MutableSequence[StepperValidDirections]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...




class Menu(BindableWidget):
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class MenuBar(Menu):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[MenuItem]): ...
    @overload
    def __init__(self, items: Iterable[MenuItem]): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def AboutItem(self) -> MenuItem: ...
    @overload
    @property
    def ApplicationItems(self) -> MenuItemCollection: ...
    @overload
    @property
    def ApplicationMenu(self) -> ButtonMenuItem: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HelpItems(self) -> MenuItemCollection: ...
    @overload
    @property
    def HelpMenu(self) -> ButtonMenuItem: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IncludeSystemItems(self) -> MenuBarSystemItems: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Items(self) -> MenuItemCollection: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def QuitItem(self) -> MenuItem: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SystemCommands(self) -> Collection: ...
    @overload
    @property
    def Trim(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @AboutItem.setter
    def AboutItem(self) -> MutableSequence[MenuItem]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @IncludeSystemItems.setter
    def IncludeSystemItems(self) -> MutableSequence[MenuBarSystemItems]: ...
    @overload
    @QuitItem.setter
    def QuitItem(self) -> MutableSequence[MenuItem]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Trim.setter
    def Trim(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class MenuBarSystemItems(Enum):
    # None = 0
    Common = 1
    Quit = 4
    All = 5


class MenuItem(Menu):
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validate(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PerformClick(self) -> None: ...
    @overload
    def PerformValidate(self) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validate(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class MenuItemCollection:
    def __iter__(self) -> Iterator[MenuItem]: ...
    def __getitem__(self, index: int) -> MenuItem: ...
    def __setitem__(self, index: int, value: MenuItem): ...
    @overload
    def Add(self, item: MenuItem) -> None: ...
    @overload
    def Add(self, item: MenuItem) -> None: ...
    @overload
    def Add(self, command: Command, order: int) -> MenuItem: ...
    @overload
    def AddRange(self, items: Iterable[MenuItem]) -> None: ...
    @overload
    def AddRange(self, commands: Iterable[Command], order: int) -> None: ...
    @overload
    def AddSeparator(self, order: int) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: MenuItem) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[MenuItem], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetSubmenu(self, submenuText: str, order: int, plaintextMatch: bool, create: bool) -> ButtonMenuItem: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: MenuItem) -> int: ...
    @overload
    def Insert(self, index: int, item: MenuItem) -> None: ...
    @overload
    def Remove(self, item: MenuItem) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Trim(self) -> None: ...


from ..Drawing import Image
class MenuSegmentedItem(SegmentedItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: Command): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def CanSelect(self) -> bool: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Menu(self) -> ContextMenu: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> SegmentedButton: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Selected(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @CanSelect.setter
    def CanSelect(self) -> MutableSequence[bool]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Selected.setter
    def Selected(self) -> MutableSequence[bool]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class MessageBox:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Show(text: str, type: MessageBoxType) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, type: MessageBoxType) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(parent: Control, text: str, type: MessageBoxType) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(parent: Control, text: str, caption: str, type: MessageBoxType) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, buttons: MessageBoxButtons, type: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(text: str, caption: str, buttons: MessageBoxButtons, type: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(parent: Control, text: str, buttons: MessageBoxButtons, type: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    @staticmethod
    def Show(parent: Control, text: str, caption: str, buttons: MessageBoxButtons, type: MessageBoxType, defaultButton: MessageBoxDefaultButton) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


class MessageBoxButtons(Enum):
    OK = 0
    OKCancel = 1
    YesNo = 2
    YesNoCancel = 3


class MessageBoxDefaultButton(Enum):
    Default = 0
    OK = 1
    Yes = 1
    No = 2
    Cancel = 3


class MessageBoxType(Enum):
    Information = 0
    Warning = 1
    Error = 2
    Question = 3


from ..Drawing import PointF
class Mouse:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Buttons() -> MouseButtons: ...
    @overload
    @property
    def IsSupported() -> bool: ...
    @overload
    @property
    def Position() -> PointF: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def IsAnyButtonPressed(buttons: MouseButtons) -> bool: ...
    @overload
    @Position.setter
    def Position() -> None: ...
    @overload
    @staticmethod
    def SetCursor(cursor: Cursor) -> None: ...
    @overload
    def ToString(self) -> str: ...


class MouseButtons(Enum):
    # None = 0
    Primary = 1
    Alternate = 2
    Middle = 4


from ..Drawing import PointF
from ..Drawing import SizeF
class MouseEventArgs:
    @overload
    def __init__(self, buttons: MouseButtons, modifiers: Keys, location: PointF, delta: Nullable, pressure: Single): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Buttons(self) -> MouseButtons: ...
    @overload
    @property
    def Delta(self) -> SizeF: ...
    @overload
    @property
    def Handled(self) -> bool: ...
    @overload
    @property
    def Location(self) -> PointF: ...
    @overload
    @property
    def Modifiers(self) -> Keys: ...
    @overload
    @property
    def Pressure(self) -> Single: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Handled.setter
    def Handled(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Navigation(Container):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, item: INavigationItem): ...
    @overload
    def __init__(self, content: Control, title: str): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_ItemRemoved(self, value: EventHandler) -> None: ...
    @overload
    def add_ItemShown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSupported() -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Pop(self) -> None: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def Push(self, item: INavigationItem) -> None: ...
    @overload
    def Push(self, content: Control, title: str) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_ItemRemoved(self, value: EventHandler) -> None: ...
    @overload
    def remove_ItemShown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class NavigationItem(ListItem):
    @overload
    def __init__(self): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def Key(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @Key.setter
    def Key(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class NavigationItemEventArgs:
    @overload
    def __init__(self, item: INavigationItem): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Item(self) -> INavigationItem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Icon
from ..Drawing import Image
class Notification(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ContentImage(self) -> Image: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Message(self) -> str: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def RequiresTrayIndicator(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def UserData(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ContentImage.setter
    def ContentImage(self) -> MutableSequence[Image]: ...
    @overload
    @Icon.setter
    def Icon(self) -> MutableSequence[Icon]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Message.setter
    def Message(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @UserData.setter
    def UserData(self) -> MutableSequence[str]: ...
    @overload
    def Show(self, indicator: TrayIndicator) -> None: ...
    @overload
    def ToString(self) -> str: ...


class NotificationEventArgs:
    @overload
    def __init__(self, id: str, userData: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def UserData(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...




class NumericMaskedTextProvider(VariableMaskedTextProvider):
    @overload
    def __init__(self): ...
    @overload
    def Clear(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @overload
    def Delete(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AllowDecimal(self) -> bool: ...
    @overload
    @property
    def AllowSign(self) -> bool: ...
    @overload
    @property
    def AltDecimalCharacters(self) -> Iterable[Char]: ...
    @overload
    @property
    def Culture(self) -> CultureInfo: ...
    @overload
    @property
    def DecimalCharacter(self) -> Char: ...
    @overload
    @property
    def DisplayText(self) -> str: ...
    @overload
    @property
    def EditPositions(self) -> Iterable[int]: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    @property
    def MaskCompleted(self) -> bool: ...
    @overload
    @property
    def SignCharacters(self) -> Iterable[Char]: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def Validate(self) -> Func: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Insert(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @overload
    def Replace(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @overload
    @AllowDecimal.setter
    def AllowDecimal(self) -> MutableSequence[bool]: ...
    @overload
    @AllowSign.setter
    def AllowSign(self) -> MutableSequence[bool]: ...
    @overload
    @AltDecimalCharacters.setter
    def AltDecimalCharacters(self) -> MutableSequence[Iterable[Char]]: ...
    @overload
    @Culture.setter
    def Culture(self) -> MutableSequence[CultureInfo]: ...
    @overload
    @DecimalCharacter.setter
    def DecimalCharacter(self) -> MutableSequence[Char]: ...
    @overload
    @SignCharacters.setter
    def SignCharacters(self) -> MutableSequence[Iterable[Char]]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @Validate.setter
    def Validate(self) -> MutableSequence[Func]: ...
    @overload
    def ToString(self) -> str: ...






from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class NumericStepper(CommonControl):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def CultureInfo(self) -> CultureInfo: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DecimalPlaces(self) -> int: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def FormatString(self) -> str: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Increment(self) -> float: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaximumDecimalPlaces(self) -> int: ...
    @overload
    @property
    def MaxValue(self) -> float: ...
    @overload
    @property
    def MinValue(self) -> float: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Value(self) -> float: ...
    @overload
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def Wrap(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CultureInfo.setter
    def CultureInfo(self) -> MutableSequence[CultureInfo]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DecimalPlaces.setter
    def DecimalPlaces(self) -> MutableSequence[int]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @FormatString.setter
    def FormatString(self) -> MutableSequence[str]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Increment.setter
    def Increment(self) -> MutableSequence[float]: ...
    @overload
    @MaximumDecimalPlaces.setter
    def MaximumDecimalPlaces(self) -> MutableSequence[int]: ...
    @overload
    @MaxValue.setter
    def MaxValue(self) -> MutableSequence[float]: ...
    @overload
    @MinValue.setter
    def MinValue(self) -> MutableSequence[float]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[float]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @Wrap.setter
    def Wrap(self) -> MutableSequence[bool]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...






class OpenFileDialog(FileDialog):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CheckFileExists(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def CurrentFilter(self) -> FileFilter: ...
    @overload
    @property
    def CurrentFilterIndex(self) -> int: ...
    @overload
    @property
    def Directory(self) -> Uri: ...
    @overload
    @property
    def FileName(self) -> str: ...
    @overload
    @property
    def Filenames(self) -> Iterable[str]: ...
    @overload
    @property
    def Filters(self) -> Collection: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def MultiSelect(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @CheckFileExists.setter
    def CheckFileExists(self) -> MutableSequence[bool]: ...
    @overload
    @CurrentFilter.setter
    def CurrentFilter(self) -> MutableSequence[FileFilter]: ...
    @overload
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self) -> MutableSequence[int]: ...
    @overload
    @Directory.setter
    def Directory(self) -> MutableSequence[Uri]: ...
    @overload
    @FileName.setter
    def FileName(self) -> MutableSequence[str]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MultiSelect.setter
    def MultiSelect(self) -> MutableSequence[bool]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


class OpenWithDialog(CommonDialog):
    @overload
    def __init__(self, filepath: str): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


class Orientation(Enum):
    Horizontal = 0
    Vertical = 1


class PageOrientation(Enum):
    Portrait = 0
    Landscape = 1


from ..Drawing import RectangleF
class PageSettings(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def PrintableArea(self) -> RectangleF: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Graphics
from ..Drawing import RectangleF
class PaintEventArgs:
    @overload
    def __init__(self, graphics: Graphics, clipRectangle: RectangleF): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ClipRectangle(self) -> RectangleF: ...
    @overload
    @property
    def Graphics(self) -> Graphics: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Panel(Container):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class PasswordBox(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaxLength(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def PasswordChar(self) -> Char: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaxLength.setter
    def MaxLength(self) -> MutableSequence[int]: ...
    @overload
    @PasswordChar.setter
    def PasswordChar(self) -> MutableSequence[Char]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Point
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Image
class PixelLayout(Layout):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Add(self, control: Control, location: Point) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BeginInit(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def EndInit(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Contents(self) -> List: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetLocation(control: Control) -> Point: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def Move(self, control: Control, location: Point) -> None: ...
    @overload
    def Move(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @staticmethod
    def SetLocation(control: Control, value: Point) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class PrintDialog(CommonDialog):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AllowPageRange(self) -> bool: ...
    @overload
    @property
    def AllowSelection(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @AllowPageRange.setter
    def AllowPageRange(self) -> MutableSequence[bool]: ...
    @overload
    @AllowSelection.setter
    def AllowSelection(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @PrintSettings.setter
    def PrintSettings(self) -> MutableSequence[PrintSettings]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control, document: PrintDocument) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


class PrintDocument(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control): ...
    @overload
    def add_Printed(self, value: EventHandler) -> None: ...
    @overload
    def add_Printing(self, value: EventHandler) -> None: ...
    @overload
    def add_PrintPage(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Name(self) -> str: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def PageCount(self) -> int: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def remove_Printed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Printing(self, value: EventHandler) -> None: ...
    @overload
    def remove_PrintPage(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Name.setter
    def Name(self) -> MutableSequence[str]: ...
    @overload
    @PageCount.setter
    def PageCount(self) -> MutableSequence[int]: ...
    @overload
    @PrintSettings.setter
    def PrintSettings(self) -> MutableSequence[PrintSettings]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Graphics
from ..Drawing import SizeF
class PrintPageEventArgs:
    @overload
    def __init__(self, graphics: Graphics, pageSize: SizeF, currentPage: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CurrentPage(self) -> int: ...
    @overload
    @property
    def Graphics(self) -> Graphics: ...
    @overload
    @property
    def PageSize(self) -> SizeF: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class PrintPreviewDialog(CommonDialog):
    @overload
    def __init__(self, document: PrintDocument): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Document(self) -> PrintDocument: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def PrintSettings(self) -> PrintSettings: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @PrintSettings.setter
    def PrintSettings(self) -> MutableSequence[PrintSettings]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


class PrintSelection(Enum):
    AllPages = 0
    Selection = 1
    SelectedPages = 2


class PrintSettings(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Collate(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Copies(self) -> int: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def MaximumPageRange(self) -> Range: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Orientation(self) -> PageOrientation: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def PrintSelection(self) -> PrintSelection: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Reverse(self) -> bool: ...
    @overload
    @property
    def SelectedPageRange(self) -> Range: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Collate.setter
    def Collate(self) -> MutableSequence[bool]: ...
    @overload
    @Copies.setter
    def Copies(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaximumPageRange.setter
    def MaximumPageRange(self) -> MutableSequence[Range]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[PageOrientation]: ...
    @overload
    @PrintSelection.setter
    def PrintSelection(self) -> MutableSequence[PrintSelection]: ...
    @overload
    @Reverse.setter
    def Reverse(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedPageRange.setter
    def SelectedPageRange(self) -> MutableSequence[Range]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class ProgressBar(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Indeterminate(self) -> bool: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaxValue(self) -> int: ...
    @overload
    @property
    def MinValue(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Value(self) -> int: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Indeterminate.setter
    def Indeterminate(self) -> MutableSequence[bool]: ...
    @overload
    @MaxValue.setter
    def MaxValue(self) -> MutableSequence[int]: ...
    @overload
    @MinValue.setter
    def MinValue(self) -> MutableSequence[int]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[int]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class ProgressCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, column: int): ...
    @overload
    def __init__(self, property: str, ignoreCase: bool): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Binding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Binding.setter
    def Binding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...




class PropertyCell(CustomCell):
    @overload
    def __init__(self): ...
    @overload
    def add_BeginEdit(self, value: EventHandler) -> None: ...
    @overload
    def add_CancelEdit(self, value: EventHandler) -> None: ...
    @overload
    def add_CommitEdit(self, value: EventHandler) -> None: ...
    @overload
    def add_Paint(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ConfigureCell(self) -> Action: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def CreateCell(self) -> Func: ...
    @overload
    @property
    def GetIdentifier(self) -> Func: ...
    @overload
    @property
    def GetPreferredWidth(self) -> Func: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def TypeBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Types(self) -> Iterable[PropertyCellType]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_BeginEdit(self, value: EventHandler) -> None: ...
    @overload
    def remove_CancelEdit(self, value: EventHandler) -> None: ...
    @overload
    def remove_CommitEdit(self, value: EventHandler) -> None: ...
    @overload
    def remove_Paint(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ConfigureCell.setter
    def ConfigureCell(self) -> MutableSequence[Action]: ...
    @overload
    @CreateCell.setter
    def CreateCell(self) -> MutableSequence[Func]: ...
    @overload
    @GetIdentifier.setter
    def GetIdentifier(self) -> MutableSequence[Func]: ...
    @overload
    @GetPreferredWidth.setter
    def GetPreferredWidth(self) -> MutableSequence[Func]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TypeBinding.setter
    def TypeBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    def ToString(self) -> str: ...


class PropertyCellType:
    @overload
    def CanDisplay(self, itemType: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Identifier(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...




class PropertyCellTypeBoolean:
    @overload
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Identifier(self) -> str: ...
    @overload
    @property
    def ItemBinding(self) -> IndirectBinding: ...
    @overload
    @property
    def ItemThreeStateBinding(self) -> IndirectBinding: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @overload
    @ItemBinding.setter
    def ItemBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    @ItemThreeStateBinding.setter
    def ItemThreeStateBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    def ToString(self) -> str: ...


class PropertyCellTypeColor:
    @overload
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def HexEditable(self) -> bool: ...
    @overload
    @property
    def Identifier(self) -> str: ...
    @overload
    @property
    def ItemBinding(self) -> IndirectBinding: ...
    @overload
    @property
    def ShowAlpha(self) -> bool: ...
    @overload
    @property
    def ShowHex(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @overload
    @HexEditable.setter
    def HexEditable(self) -> MutableSequence[bool]: ...
    @overload
    @ItemBinding.setter
    def ItemBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    @ShowAlpha.setter
    def ShowAlpha(self) -> MutableSequence[bool]: ...
    @overload
    @ShowHex.setter
    def ShowHex(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class PropertyCellTypeDateTime:
    @overload
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Identifier(self) -> str: ...
    @overload
    @property
    def ItemBinding(self) -> IndirectBinding: ...
    @overload
    @property
    def Mode(self) -> DateTimePickerMode: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @overload
    @ItemBinding.setter
    def ItemBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    @Mode.setter
    def Mode(self) -> MutableSequence[DateTimePickerMode]: ...
    @overload
    def ToString(self) -> str: ...


class PropertyCellTypeDropDown:
    @overload
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Identifier(self) -> str: ...
    @overload
    @property
    def ItemBinding(self) -> IndirectBinding: ...
    @overload
    @property
    def ItemKeyBinding(self) -> IndirectBinding: ...
    @overload
    @property
    def ItemsBinding(self) -> IndirectBinding: ...
    @overload
    @property
    def ItemTextBinding(self) -> IndirectBinding: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @overload
    @ItemBinding.setter
    def ItemBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    @ItemKeyBinding.setter
    def ItemKeyBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    @ItemsBinding.setter
    def ItemsBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    @ItemTextBinding.setter
    def ItemTextBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    def ToString(self) -> str: ...


class PropertyCellTypeEnum:
    @overload
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Identifier(self) -> str: ...
    @overload
    @property
    def ItemBinding(self) -> IndirectBinding: ...
    @overload
    @property
    def ItemTypeBinding(self) -> IndirectBinding: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @overload
    @ItemBinding.setter
    def ItemBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    @ItemTypeBinding.setter
    def ItemTypeBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    def ToString(self) -> str: ...




class PropertyCellTypeNumber:
    @overload
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Identifier(self) -> str: ...
    @overload
    @property
    def ItemBinding(self) -> IndirectBinding: ...
    @overload
    @property
    def ItemTypeBinding(self) -> IndirectBinding: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @overload
    @ItemBinding.setter
    def ItemBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    @ItemTypeBinding.setter
    def ItemTypeBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    def ToString(self) -> str: ...




class PropertyCellTypeString:
    @overload
    def __init__(self): ...
    @overload
    def CanDisplay(self, itemType: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Identifier(self) -> str: ...
    @overload
    @property
    def ItemBinding(self) -> IndirectBinding: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnConfigure(self, args: CellEventArgs, control: Control) -> None: ...
    @overload
    def OnCreate(self, args: CellEventArgs) -> Control: ...
    @overload
    def OnPaint(self, args: CellPaintEventArgs) -> None: ...
    @overload
    @ItemBinding.setter
    def ItemBinding(self) -> MutableSequence[IndirectBinding]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class PropertyGrid(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_PropertyValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedObject(self) -> Object: ...
    @overload
    @property
    def SelectedObjects(self) -> Iterable[Object]: ...
    @overload
    @property
    def ShowCategories(self) -> bool: ...
    @overload
    @property
    def ShowDescription(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def Refresh(self) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_PropertyValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @SelectedObject.setter
    def SelectedObject(self) -> MutableSequence[Object]: ...
    @overload
    @SelectedObjects.setter
    def SelectedObjects(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @ShowCategories.setter
    def ShowCategories(self) -> MutableSequence[bool]: ...
    @overload
    @ShowDescription.setter
    def ShowDescription(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class PropertyGridTypeEditor:
    @overload
    def CreateControl(self, args: CellEventArgs) -> Control: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PaintCell(self, args: CellPaintEventArgs) -> None: ...
    @overload
    def ToString(self) -> str: ...


class PropertyValueChangedEventArgs:
    @overload
    def __init__(self, propertyName: str, oldValue: Object, item: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def OldValue(self) -> Object: ...
    @overload
    @property
    def PropertyName(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class RadioButton(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, controller: RadioButton): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Color
from ..Drawing import Size
from ..Drawing import Padding
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class RadioButtonList(Panel):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> Iterable[Object]: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def ItemKeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Items(self) -> ListItemCollection: ...
    @overload
    @property
    def ItemTextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ItemToolTipBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def KeyBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Orientation(self) -> Orientation: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedKey(self) -> str: ...
    @overload
    @property
    def SelectedKeyBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedValue(self) -> Object: ...
    @overload
    @property
    def SelectedValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Spacing(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def TextBinding(self) -> IIndirectBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedKeyChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ItemKeyBinding.setter
    def ItemKeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemTextBinding.setter
    def ItemTextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ItemToolTipBinding.setter
    def ItemToolTipBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @KeyBinding.setter
    def KeyBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[Orientation]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedKey.setter
    def SelectedKey(self) -> MutableSequence[str]: ...
    @overload
    @SelectedValue.setter
    def SelectedValue(self) -> MutableSequence[Object]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @TextBinding.setter
    def TextBinding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class RadioCommand(CheckCommand):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, execute: EventHandler): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Executed(self, value: EventHandler) -> None: ...
    @overload
    def CreateMenuItem(self) -> MenuItem: ...
    @overload
    def CreateToolItem(self) -> ToolItem: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Execute(self) -> None: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def Controller(self) -> RadioCommand: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DelegatedCommand(self) -> ICommand: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def MenuText(self) -> str: ...
    @overload
    @property
    def Parent(self) -> IBindable: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolBarText(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Executed(self, value: EventHandler) -> None: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @Controller.setter
    def Controller(self) -> MutableSequence[RadioCommand]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DelegatedCommand.setter
    def DelegatedCommand(self) -> MutableSequence[ICommand]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @MenuText.setter
    def MenuText(self) -> MutableSequence[str]: ...
    @overload
    @Parent.setter
    def Parent(self) -> MutableSequence[IBindable]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolBarText.setter
    def ToolBarText(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class RadioMenuItem(MenuItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, controller: RadioMenuItem): ...
    @overload
    def __init__(self, command: RadioCommand, controller: RadioMenuItem): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validate(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PerformClick(self) -> None: ...
    @overload
    def PerformValidate(self) -> None: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validate(self, value: EventHandler) -> None: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class RadioToolItem(ToolItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, command: CheckCommand): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnCheckedChanged(self, e: EventArgs) -> None: ...
    @overload
    def OnClick(self, e: EventArgs) -> None: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class Range:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromLength(start: int, length: int) -> Range: ...
    @overload
    @staticmethod
    def FromLength(start: Int64, length: Int64) -> Range: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...




class RangeExtensions:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Interval(range: Range) -> TimeSpan: ...
    @overload
    @staticmethod
    def Length(range: Range) -> int: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def WithLength(range: Range, length: int) -> Range: ...


class RelayCommand:
    @overload
    def __init__(self, execute: Action): ...
    @overload
    def __init__(self, execute: Action, canExecute: Func): ...
    @overload
    def add_CanExecuteChanged(self, value: EventHandler) -> None: ...
    @overload
    def CanExecute(self, parameter: Object) -> bool: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def Execute(self, parameter: Object) -> None: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_CanExecuteChanged(self, value: EventHandler) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def UpdateCanExecute(self) -> None: ...








from ..Drawing import Font
from ..Drawing import Color
from ..Drawing import FontFamily
from ..Drawing import FontTypeface
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class RichTextArea(TextArea):
    @overload
    def __init__(self): ...
    @overload
    def add_CaretIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def Append(self, text: str, scrollToCursor: bool) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AcceptsReturn(self) -> bool: ...
    @overload
    @property
    def AcceptsTab(self) -> bool: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Buffer(self) -> ITextBuffer: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HorizontalAlign(self) -> HorizontalAlign: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def Rtf(self) -> str: ...
    @overload
    @property
    def SelectedText(self) -> str: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def SelectionBackground(self) -> Color: ...
    @overload
    @property
    def SelectionBold(self) -> bool: ...
    @overload
    @property
    def SelectionFamily(self) -> FontFamily: ...
    @overload
    @property
    def SelectionFont(self) -> Font: ...
    @overload
    @property
    def SelectionForeground(self) -> Color: ...
    @overload
    @property
    def SelectionItalic(self) -> bool: ...
    @overload
    @property
    def SelectionStrikethrough(self) -> bool: ...
    @overload
    @property
    def SelectionTypeface(self) -> FontTypeface: ...
    @overload
    @property
    def SelectionUnderline(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SpellCheck(self) -> bool: ...
    @overload
    @property
    def SpellCheckIsSupported(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def SupportedTextReplacements(self) -> TextReplacements: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def TextReplacements(self) -> TextReplacements: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def Wrap(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_CaretIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AcceptsReturn.setter
    def AcceptsReturn(self) -> MutableSequence[bool]: ...
    @overload
    @AcceptsTab.setter
    def AcceptsTab(self) -> MutableSequence[bool]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @HorizontalAlign.setter
    def HorizontalAlign(self) -> MutableSequence[HorizontalAlign]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @Rtf.setter
    def Rtf(self) -> MutableSequence[str]: ...
    @overload
    @SelectedText.setter
    def SelectedText(self) -> MutableSequence[str]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @SelectionBackground.setter
    def SelectionBackground(self) -> MutableSequence[Color]: ...
    @overload
    @SelectionBold.setter
    def SelectionBold(self) -> MutableSequence[bool]: ...
    @overload
    @SelectionFamily.setter
    def SelectionFamily(self) -> MutableSequence[FontFamily]: ...
    @overload
    @SelectionFont.setter
    def SelectionFont(self) -> MutableSequence[Font]: ...
    @overload
    @SelectionForeground.setter
    def SelectionForeground(self) -> MutableSequence[Color]: ...
    @overload
    @SelectionItalic.setter
    def SelectionItalic(self) -> MutableSequence[bool]: ...
    @overload
    @SelectionStrikethrough.setter
    def SelectionStrikethrough(self) -> MutableSequence[bool]: ...
    @overload
    @SelectionTypeface.setter
    def SelectionTypeface(self) -> MutableSequence[FontTypeface]: ...
    @overload
    @SelectionUnderline.setter
    def SelectionUnderline(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @SpellCheck.setter
    def SpellCheck(self) -> MutableSequence[bool]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @TextReplacements.setter
    def TextReplacements(self) -> MutableSequence[TextReplacements]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @Wrap.setter
    def Wrap(self) -> MutableSequence[bool]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class RichTextAreaFormat(Enum):
    Rtf = 0
    PlainText = 1


class SaveFileDialog(FileDialog):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def CheckFileExists(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def CurrentFilter(self) -> FileFilter: ...
    @overload
    @property
    def CurrentFilterIndex(self) -> int: ...
    @overload
    @property
    def Directory(self) -> Uri: ...
    @overload
    @property
    def FileName(self) -> str: ...
    @overload
    @property
    def Filters(self) -> Collection: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @CheckFileExists.setter
    def CheckFileExists(self) -> MutableSequence[bool]: ...
    @overload
    @CurrentFilter.setter
    def CurrentFilter(self) -> MutableSequence[FileFilter]: ...
    @overload
    @CurrentFilterIndex.setter
    def CurrentFilterIndex(self) -> MutableSequence[int]: ...
    @overload
    @Directory.setter
    def Directory(self) -> MutableSequence[Uri]: ...
    @overload
    @FileName.setter
    def FileName(self) -> MutableSequence[str]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import RectangleF
from ..Drawing import Image
from ..Drawing import PointF
class Screen(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, handler: IHandler): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def FromPoint(point: PointF) -> Screen: ...
    @overload
    @staticmethod
    def FromRectangle(rectangle: RectangleF) -> Screen: ...
    @overload
    @property
    def BitsPerPixel(self) -> int: ...
    @overload
    @property
    def Bounds(self) -> RectangleF: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DisplayBounds() -> RectangleF: ...
    @overload
    @property
    def DPI(self) -> Single: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsPrimary(self) -> bool: ...
    @overload
    @property
    def LogicalPixelSize(self) -> Single: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def PrimaryScreen() -> Screen: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def RealDPI(self) -> Single: ...
    @overload
    @property
    def RealScale(self) -> Single: ...
    @overload
    @property
    def Scale(self) -> Single: ...
    @overload
    @property
    def Screens() -> Iterable[Screen]: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def WorkingArea(self) -> RectangleF: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetImage(self, rect: RectangleF) -> Image: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Point
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import Padding
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Image
class Scrollable(Panel):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Scroll(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Border(self) -> BorderType: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def ExpandContentHeight(self) -> bool: ...
    @overload
    @property
    def ExpandContentWidth(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaximumZoom(self) -> Single: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def MinimumZoom(self) -> Single: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ScrollPosition(self) -> Point: ...
    @overload
    @property
    def ScrollSize(self) -> Size: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisibleRect(self) -> Rectangle: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def Zoom(self) -> Single: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Scroll(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Border.setter
    def Border(self) -> MutableSequence[BorderType]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ExpandContentHeight.setter
    def ExpandContentHeight(self) -> MutableSequence[bool]: ...
    @overload
    @ExpandContentWidth.setter
    def ExpandContentWidth(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaximumZoom.setter
    def MaximumZoom(self) -> MutableSequence[Single]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @MinimumZoom.setter
    def MinimumZoom(self) -> MutableSequence[Single]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @ScrollPosition.setter
    def ScrollPosition(self) -> MutableSequence[Point]: ...
    @overload
    @ScrollSize.setter
    def ScrollSize(self) -> MutableSequence[Size]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @Zoom.setter
    def Zoom(self) -> MutableSequence[Single]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...
    @overload
    def UpdateScrollSizes(self) -> None: ...


from ..Drawing import Point
class ScrollEventArgs:
    @overload
    def __init__(self, scrollPosition: Point): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ScrollPosition(self) -> Point: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class SearchBox(TextBox):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaxLength(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def PlaceholderText(self) -> str: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def SelectedText(self) -> str: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaxLength.setter
    def MaxLength(self) -> MutableSequence[int]: ...
    @overload
    @PlaceholderText.setter
    def PlaceholderText(self) -> MutableSequence[str]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedText.setter
    def SelectedText(self) -> MutableSequence[str]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class SegmentedButton(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_ItemClick(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexesChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedItemChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def ClearSelection(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Items(self) -> SegmentedItemCollection: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexes(self) -> Iterable[int]: ...
    @overload
    @property
    def SelectedItem(self) -> SegmentedItem: ...
    @overload
    @property
    def SelectedItems(self) -> Iterable[SegmentedItem]: ...
    @overload
    @property
    def SelectionMode(self) -> SegmentedSelectionMode: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_ItemClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedIndexesChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedItemChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedIndexes.setter
    def SelectedIndexes(self) -> MutableSequence[Iterable[int]]: ...
    @overload
    @SelectedItem.setter
    def SelectedItem(self) -> MutableSequence[SegmentedItem]: ...
    @overload
    @SelectedItems.setter
    def SelectedItems(self) -> MutableSequence[Iterable[SegmentedItem]]: ...
    @overload
    @SelectionMode.setter
    def SelectionMode(self) -> MutableSequence[SegmentedSelectionMode]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class SegmentedItem(BindableWidget):
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> SegmentedButton: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Selected(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(image: Image) -> SegmentedItem: ...
    @overload
    def op_Implicit(command: Command) -> SegmentedItem: ...
    @overload
    def op_Implicit(text: str) -> SegmentedItem: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Selected.setter
    def Selected(self) -> MutableSequence[bool]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class SegmentedItemClickEventArgs:
    @overload
    def __init__(self, item: SegmentedItem, index: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Index(self) -> int: ...
    @overload
    @property
    def Item(self) -> SegmentedItem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class SegmentedItemCollection:
    def __iter__(self) -> Iterator[SegmentedItem]: ...
    def __getitem__(self, index: int) -> SegmentedItem: ...
    def __setitem__(self, index: int, value: SegmentedItem): ...
    @overload
    def Add(self, item: SegmentedItem) -> None: ...
    @overload
    def AddRange(self, items: Iterable[SegmentedItem]) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: SegmentedItem) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[SegmentedItem], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: SegmentedItem) -> int: ...
    @overload
    def Insert(self, index: int, item: SegmentedItem) -> None: ...
    @overload
    def Remove(self, item: SegmentedItem) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


class SegmentedSelectionMode(Enum):
    # None = 0
    Single = 1
    Multiple = 2




class SelectFolderDialog(CommonDialog):
    @overload
    def __init__(self): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Directory(self) -> str: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Directory.setter
    def Directory(self) -> MutableSequence[str]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    def ShowDialog(self, parent: Window) -> DialogResult: ...
    @overload
    def ShowDialog(self, parent: Control) -> DialogResult: ...
    @overload
    def ToString(self) -> str: ...


class SeparatorMenuItem(MenuItem):
    @overload
    def __init__(self): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validate(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PerformClick(self) -> None: ...
    @overload
    def PerformValidate(self) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validate(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class SeparatorToolItem(ToolItem):
    @overload
    def __init__(self): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Type(self) -> SeparatorToolItemType: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnClick(self, e: EventArgs) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Type.setter
    def Type(self) -> MutableSequence[SeparatorToolItemType]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class SeparatorToolItemType(Enum):
    Divider = 0
    Space = 1
    FlexibleSpace = 2


class ShowPromptMode(Enum):
    Always = 0
    OnFocus = 1
    Never = 2




from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Slider(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaxValue(self) -> int: ...
    @overload
    @property
    def MinValue(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Orientation(self) -> Orientation: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SnapToTick(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def TickFrequency(self) -> int: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Value(self) -> int: ...
    @overload
    @property
    def ValueBinding(self) -> BindableBinding: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_ValueChanged(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaxValue.setter
    def MaxValue(self) -> MutableSequence[int]: ...
    @overload
    @MinValue.setter
    def MinValue(self) -> MutableSequence[int]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[Orientation]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @SnapToTick.setter
    def SnapToTick(self) -> MutableSequence[bool]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @TickFrequency.setter
    def TickFrequency(self) -> MutableSequence[int]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Value.setter
    def Value(self) -> MutableSequence[int]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Spinner(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Splitter(Container):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PositionChangeCompleted(self, value: EventHandler) -> None: ...
    @overload
    def add_PositionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PositionChangeStarted(self, value: EventHandler) -> None: ...
    @overload
    def add_PositionChanging(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def FixedPanel(self) -> SplitterFixedPanel: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSupported() -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Orientation(self) -> Orientation: ...
    @overload
    @property
    def Panel1(self) -> Control: ...
    @overload
    @property
    def Panel1MinimumSize(self) -> int: ...
    @overload
    @property
    def Panel2(self) -> Control: ...
    @overload
    @property
    def Panel2MinimumSize(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Position(self) -> int: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def RelativePosition(self) -> float: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SplitterWidth(self) -> int: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PositionChangeCompleted(self, value: EventHandler) -> None: ...
    @overload
    def remove_PositionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PositionChangeStarted(self, value: EventHandler) -> None: ...
    @overload
    def remove_PositionChanging(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @FixedPanel.setter
    def FixedPanel(self) -> MutableSequence[SplitterFixedPanel]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[Orientation]: ...
    @overload
    @Panel1.setter
    def Panel1(self) -> MutableSequence[Control]: ...
    @overload
    @Panel1MinimumSize.setter
    def Panel1MinimumSize(self) -> MutableSequence[int]: ...
    @overload
    @Panel2.setter
    def Panel2(self) -> MutableSequence[Control]: ...
    @overload
    @Panel2MinimumSize.setter
    def Panel2MinimumSize(self) -> MutableSequence[int]: ...
    @overload
    @Position.setter
    def Position(self) -> MutableSequence[int]: ...
    @overload
    @RelativePosition.setter
    def RelativePosition(self) -> MutableSequence[float]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @SplitterWidth.setter
    def SplitterWidth(self) -> MutableSequence[int]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class SplitterFixedPanel(Enum):
    Panel1 = 0
    Panel2 = 1
    # None = 2


class SplitterPositionChangingEventArgs:
    @overload
    def __init__(self, newPosition: int): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def NewPosition(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class StackLayout(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[StackLayoutItem]): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AlignLabels(self) -> bool: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HorizontalContentAlignment(self) -> HorizontalAlignment: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Items(self) -> Collection: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Orientation(self) -> Orientation: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Spacing(self) -> int: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def VerticalContentAlignment(self) -> VerticalAlignment: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AlignLabels.setter
    def AlignLabels(self) -> MutableSequence[bool]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @HorizontalContentAlignment.setter
    def HorizontalContentAlignment(self) -> MutableSequence[HorizontalAlignment]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Orientation.setter
    def Orientation(self) -> MutableSequence[Orientation]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[int]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @VerticalContentAlignment.setter
    def VerticalContentAlignment(self) -> MutableSequence[VerticalAlignment]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class StackLayoutItem:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, expand: bool): ...
    @overload
    def __init__(self, control: Control, alignment: Nullable, expand: bool): ...
    @overload
    def __init__(self, control: Control, alignment: Nullable, expand: bool): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Control(self) -> Control: ...
    @overload
    @property
    def Expand(self) -> bool: ...
    @overload
    @property
    def HorizontalAlignment(self) -> Nullable: ...
    @overload
    @property
    def VerticalAlignment(self) -> Nullable: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(control: Control) -> StackLayoutItem: ...
    @overload
    def op_Implicit(labelText: str) -> StackLayoutItem: ...
    @overload
    def op_Implicit(image: Image) -> StackLayoutItem: ...
    @overload
    @Control.setter
    def Control(self) -> MutableSequence[Control]: ...
    @overload
    @Expand.setter
    def Expand(self) -> MutableSequence[bool]: ...
    @overload
    @HorizontalAlignment.setter
    def HorizontalAlignment(self) -> MutableSequence[Nullable]: ...
    @overload
    @VerticalAlignment.setter
    def VerticalAlignment(self) -> MutableSequence[Nullable]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class Stepper(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Step(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Step(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @ValidDirection.setter
    def ValidDirection(self) -> MutableSequence[StepperValidDirections]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class StepperDirection(Enum):
    Up = 0
    Down = 1


class StepperEventArgs:
    @overload
    def __init__(self, direction: StepperDirection): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Direction(self) -> StepperDirection: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class StepperValidDirections(Enum):
    # None = 0
    Up = 1
    Down = 2
    Both = 3


class SubmenuExtensions:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @staticmethod
    def GetChildren(submenu: ISubmenu) -> Iterable[MenuItem]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Image
class SubMenuItem(ButtonMenuItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[MenuItem]): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Opening(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Validate(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Items(self) -> MenuItemCollection: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Shortcut(self) -> Keys: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Trim(self) -> bool: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def PerformClick(self) -> None: ...
    @overload
    def PerformValidate(self) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Opening(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Validate(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Shortcut.setter
    def Shortcut(self) -> MutableSequence[Keys]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Trim.setter
    def Trim(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class TabControl(Container):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Pages(self) -> Collection: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def SelectedIndex(self) -> int: ...
    @overload
    @property
    def SelectedIndexBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedPage(self) -> TabPage: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def TabPosition(self) -> DockPosition: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def remove_SelectedIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @SelectedIndex.setter
    def SelectedIndex(self) -> MutableSequence[int]: ...
    @overload
    @SelectedPage.setter
    def SelectedPage(self) -> MutableSequence[TabPage]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @TabPosition.setter
    def TabPosition(self) -> MutableSequence[DockPosition]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class TableCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, scaleWidth: bool): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Control(self) -> Control: ...
    @overload
    @property
    def ScaleWidth(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(control: Control) -> TableCell: ...
    @overload
    def op_Implicit(items: Iterable[TableCell]) -> TableCell: ...
    @overload
    def op_Implicit(rows: Iterable[TableRow]) -> TableCell: ...
    @overload
    def op_Implicit(labelText: str) -> TableCell: ...
    @overload
    def op_Implicit(image: Image) -> TableCell: ...
    @overload
    @Control.setter
    def Control(self) -> MutableSequence[Control]: ...
    @overload
    @ScaleWidth.setter
    def ScaleWidth(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Size
from ..Drawing import Point
from ..Drawing import Padding
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Image
class TableLayout(Layout):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, dimensions: Size): ...
    @overload
    def __init__(self, rows: Iterable[TableRow]): ...
    @overload
    def __init__(self, rows: Iterable[TableRow]): ...
    @overload
    def __init__(self, columns: int, rows: int): ...
    @overload
    def __init__(self, yscale: bool, rows: Iterable[TableRow]): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Add(self, control: Control, location: Point) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def Add(self, control: Control, x: int, y: int, xscale: bool, yscale: bool) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    @staticmethod
    def AutoSized(control: Control, padding: Nullable, centered: bool) -> TableLayout: ...
    @overload
    def BeginInit(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def EndInit(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Dimensions(self) -> Size: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Rows(self) -> Collection: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Spacing(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetColumnScale(self, column: int) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetRowScale(self, row: int) -> bool: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def Horizontal(cells: Iterable[TableCell]) -> TableLayout: ...
    @overload
    @staticmethod
    def Horizontal(spacing: int, cells: Iterable[TableCell]) -> TableLayout: ...
    @overload
    @staticmethod
    def HorizontalScaled(cells: Iterable[TableCell]) -> TableLayout: ...
    @overload
    @staticmethod
    def HorizontalScaled(spacing: int, cells: Iterable[TableCell]) -> TableLayout: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def Move(self, control: Control, location: Point) -> None: ...
    @overload
    def Move(self, control: Control, x: int, y: int) -> None: ...
    @overload
    def op_Implicit(rows: Iterable[TableRow]) -> TableLayout: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Spacing.setter
    def Spacing(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SetColumnScale(self, column: int, scale: bool) -> None: ...
    @overload
    def SetRowScale(self, row: int, scale: bool) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def Update(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Image
class TableRow:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, cells: Iterable[TableCell]): ...
    @overload
    def __init__(self, cells: Iterable[TableCell]): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cells(self) -> Collection: ...
    @overload
    @property
    def ScaleHeight(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def op_Implicit(control: Control) -> TableRow: ...
    @overload
    def op_Implicit(cells: Iterable[TableCell]) -> TableRow: ...
    @overload
    def op_Implicit(labelText: str) -> TableRow: ...
    @overload
    def op_Implicit(image: Image) -> TableRow: ...
    @overload
    def op_Implicit(row: TableRow) -> Control: ...
    @overload
    def op_Implicit(row: TableRow) -> TableCell: ...
    @overload
    @staticmethod
    def Scaled(cells: Iterable[TableCell]) -> TableRow: ...
    @overload
    @staticmethod
    def Scaled(cells: Iterable[TableCell]) -> TableRow: ...
    @overload
    @Cells.setter
    def Cells(self) -> MutableSequence[Collection]: ...
    @overload
    @ScaleHeight.setter
    def ScaleHeight(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Image
from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
class TabPage(Panel):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, control: Control, padding: Nullable): ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class Taskbar:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def SetProgress(state: TaskbarProgressState, progress: Single) -> None: ...
    @overload
    def ToString(self) -> str: ...


class TaskbarProgressState(Enum):
    # None = 0
    Progress = 1
    Indeterminate = 2
    Error = 3
    Paused = 4


class TextAlignment(Enum):
    Left = 0
    Center = 1
    Right = 2


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class TextArea(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def add_CaretIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def Append(self, text: str, scrollToCursor: bool) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AcceptsReturn(self) -> bool: ...
    @overload
    @property
    def AcceptsTab(self) -> bool: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def HorizontalAlign(self) -> HorizontalAlign: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def SelectedText(self) -> str: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def SpellCheck(self) -> bool: ...
    @overload
    @property
    def SpellCheckIsSupported(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def SupportedTextReplacements(self) -> TextReplacements: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def TextReplacements(self) -> TextReplacements: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def Wrap(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_CaretIndexChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AcceptsReturn.setter
    def AcceptsReturn(self) -> MutableSequence[bool]: ...
    @overload
    @AcceptsTab.setter
    def AcceptsTab(self) -> MutableSequence[bool]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @HorizontalAlign.setter
    def HorizontalAlign(self) -> MutableSequence[HorizontalAlign]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedText.setter
    def SelectedText(self) -> MutableSequence[str]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @SpellCheck.setter
    def SpellCheck(self) -> MutableSequence[bool]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @TextReplacements.setter
    def TextReplacements(self) -> MutableSequence[TextReplacements]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @Wrap.setter
    def Wrap(self) -> MutableSequence[bool]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class TextBox(TextControl):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaxLength(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def PlaceholderText(self) -> str: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def SelectedText(self) -> str: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaxLength.setter
    def MaxLength(self) -> MutableSequence[int]: ...
    @overload
    @PlaceholderText.setter
    def PlaceholderText(self) -> MutableSequence[str]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedText.setter
    def SelectedText(self) -> MutableSequence[str]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class TextBoxCell:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, property: str): ...
    @overload
    def __init__(self, column: int): ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def Binding(self) -> IIndirectBinding: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def VerticalAlignment(self) -> VerticalAlignment: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @Binding.setter
    def Binding(self) -> MutableSequence[IIndirectBinding]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @VerticalAlignment.setter
    def VerticalAlignment(self) -> MutableSequence[VerticalAlignment]: ...
    @overload
    def ToString(self) -> str: ...


class TextBufferExtensions:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    @staticmethod
    def GetRtf(buffer: ITextBuffer) -> str: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @staticmethod
    def SetRtf(buffer: ITextBuffer, rtf: str) -> None: ...
    @overload
    def ToString(self) -> str: ...


class TextChangingEventArgs:
    @overload
    def __init__(self, text: str, range: Range, fromUser: bool): ...
    @overload
    def __init__(self, oldText: str, newText: str, fromUser: bool): ...
    @overload
    def __init__(self, text: str, range: Range, oldText: str, fromUser: bool): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def FromUser(self) -> bool: ...
    @overload
    @property
    def NewText(self) -> str: ...
    @overload
    @property
    def OldText(self) -> str: ...
    @overload
    @property
    def Range(self) -> Range: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class TextControl(CommonControl):
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class TextInputEventArgs:
    @overload
    def __init__(self, text: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class TextReplacements(Enum):
    # None = 0
    Text = 1
    Quote = 2
    Dash = 4
    Spelling = 8
    All = 15


from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class TextStepper(TextBox):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Step(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSelectMode(self) -> AutoSelectMode: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def CaretIndex(self) -> int: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MaxLength(self) -> int: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def PlaceholderText(self) -> str: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def ReadOnly(self) -> bool: ...
    @overload
    @property
    def SelectedText(self) -> str: ...
    @overload
    @property
    def Selection(self) -> Range: ...
    @overload
    @property
    def ShowBorder(self) -> bool: ...
    @overload
    @property
    def ShowStepper(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextAlignment(self) -> TextAlignment: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def ValidDirection(self) -> StepperValidDirections: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Step(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanging(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSelectMode.setter
    def AutoSelectMode(self) -> MutableSequence[AutoSelectMode]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @CaretIndex.setter
    def CaretIndex(self) -> MutableSequence[int]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @MaxLength.setter
    def MaxLength(self) -> MutableSequence[int]: ...
    @overload
    @PlaceholderText.setter
    def PlaceholderText(self) -> MutableSequence[str]: ...
    @overload
    @ReadOnly.setter
    def ReadOnly(self) -> MutableSequence[bool]: ...
    @overload
    @SelectedText.setter
    def SelectedText(self) -> MutableSequence[str]: ...
    @overload
    @Selection.setter
    def Selection(self) -> MutableSequence[Range]: ...
    @overload
    @ShowBorder.setter
    def ShowBorder(self) -> MutableSequence[bool]: ...
    @overload
    @ShowStepper.setter
    def ShowStepper(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextAlignment.setter
    def TextAlignment(self) -> MutableSequence[TextAlignment]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @ValidDirection.setter
    def ValidDirection(self) -> MutableSequence[StepperValidDirections]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...






from ..Drawing import Image
from ..Drawing import Size
from ..Drawing import Color
from ..Drawing import Font
from ..Drawing import Rectangle
from ..Drawing import SizeF
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
class ToggleButton(Button):
    @overload
    def __init__(self): ...
    @overload
    def add_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Checked(self) -> bool: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Font(self) -> Font: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def ImagePosition(self) -> ButtonImagePosition: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def TextBinding(self) -> BindableBinding: ...
    @overload
    @property
    def TextColor(self) -> Color: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PerformClick(self) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_CheckedChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Checked.setter
    def Checked(self) -> MutableSequence[bool]: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Font.setter
    def Font(self) -> MutableSequence[Font]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @ImagePosition.setter
    def ImagePosition(self) -> MutableSequence[ButtonImagePosition]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @TextColor.setter
    def TextColor(self) -> MutableSequence[Color]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class Tool(BindableWidget):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class ToolBar(Tool):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Dock(self) -> ToolBarDock: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Items(self) -> ToolItemCollection: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def TextAlign(self) -> ToolBarTextAlign: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Dock.setter
    def Dock(self) -> MutableSequence[ToolBarDock]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TextAlign.setter
    def TextAlign(self) -> MutableSequence[ToolBarTextAlign]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class ToolBarDock(Enum):
    Top = 0
    Bottom = 1


class ToolBarTextAlign(Enum):
    Right = 0
    Underneath = 1


from ..Drawing import Image
class ToolItem(Tool):
    @overload
    def add_Click(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Command(self) -> ICommand: ...
    @overload
    @property
    def CommandParameter(self) -> Object: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Order(self) -> int: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def OnClick(self, e: EventArgs) -> None: ...
    @overload
    def remove_Click(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Command.setter
    def Command(self) -> MutableSequence[ICommand]: ...
    @overload
    @CommandParameter.setter
    def CommandParameter(self) -> MutableSequence[Object]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Order.setter
    def Order(self) -> MutableSequence[int]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class ToolItemCollection:
    def __iter__(self) -> Iterator[ToolItem]: ...
    def __getitem__(self, index: int) -> ToolItem: ...
    def __setitem__(self, index: int, value: ToolItem): ...
    @overload
    def Add(self, item: ToolItem) -> None: ...
    @overload
    def Add(self, item: ToolItem) -> None: ...
    @overload
    def Add(self, command: Command, order: int) -> None: ...
    @overload
    def AddRange(self, items: Iterable[ToolItem]) -> None: ...
    @overload
    def AddRange(self, commands: Iterable[Command], order: int) -> None: ...
    @overload
    def AddSeparator(self, order: int, type: SeparatorToolItemType) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: ToolItem) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ToolItem], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: ToolItem) -> int: ...
    @overload
    def Insert(self, index: int, item: ToolItem) -> None: ...
    @overload
    def Remove(self, item: ToolItem) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Icon
from ..Drawing import Image
class TrayIndicator(Widget):
    @overload
    def __init__(self): ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def Menu(self) -> ContextMenu: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Hide(self) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @Icon.setter
    def Icon(self) -> MutableSequence[Icon]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    def Show(self) -> None: ...
    @overload
    def ToString(self) -> str: ...


class TreeGridCell:
    @overload
    def __init__(self, column: GridColumn, columnIndex: int, type: GridCellType, item: Object): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Column(self) -> GridColumn: ...
    @overload
    @property
    def ColumnIndex(self) -> int: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def Type(self) -> GridCellType: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class TreeGridItem(GridItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, values: Iterable[Object]): ...
    @overload
    def __init__(self, children: Iterable[ITreeGridItem], values: Iterable[Object]): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Children(self) -> TreeGridItemCollection: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Expandable(self) -> bool: ...
    @overload
    @property
    def Expanded(self) -> bool: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    @property
    def Parent(self) -> ITreeGridItem: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Values(self) -> Iterable[Object]: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetValue(self, column: int) -> Object: ...
    @overload
    @Expanded.setter
    def Expanded(self) -> MutableSequence[bool]: ...
    @overload
    @Parent.setter
    def Parent(self) -> MutableSequence[ITreeGridItem]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Values.setter
    def Values(self) -> MutableSequence[Iterable[Object]]: ...
    @overload
    def SetValue(self, column: int, value: Object) -> None: ...
    @overload
    def ToString(self) -> str: ...


class TreeGridItemCollection:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, items: Iterable[ITreeGridItem]): ...
    def __iter__(self) -> Iterator[ITreeGridItem]: ...
    def __getitem__(self, index: int) -> ITreeGridItem: ...
    def __setitem__(self, index: int, value: ITreeGridItem): ...
    @overload
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Add(self, item: ITreeGridItem) -> None: ...
    @overload
    def AddRange(self, items: Iterable[ITreeGridItem]) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: ITreeGridItem) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ITreeGridItem], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: ITreeGridItem) -> int: ...
    @overload
    def Insert(self, index: int, item: ITreeGridItem) -> None: ...
    @overload
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    @overload
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Remove(self, item: ITreeGridItem) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import PointF
from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class TreeGridView(Grid):
    @overload
    def __init__(self): ...
    @overload
    def add_Activated(self, value: EventHandler) -> None: ...
    @overload
    def add_CellClick(self, value: EventHandler) -> None: ...
    @overload
    def add_CellDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_CellEdited(self, value: EventHandler) -> None: ...
    @overload
    def add_CellEditing(self, value: EventHandler) -> None: ...
    @overload
    def add_CellFormatting(self, value: EventHandler) -> None: ...
    @overload
    def add_Collapsed(self, value: EventHandler) -> None: ...
    @overload
    def add_Collapsing(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnHeaderClick(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnOrderChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_ColumnWidthChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Expanded(self, value: EventHandler) -> None: ...
    @overload
    def add_Expanding(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedItemChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectedRowsChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BeginEdit(self, row: int, column: int) -> None: ...
    @overload
    def CancelEdit(self) -> bool: ...
    @overload
    def CommitEdit(self) -> bool: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowColumnReordering(self) -> bool: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AllowEmptySelection(self) -> bool: ...
    @overload
    @property
    def AllowMultipleSelection(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Border(self) -> BorderType: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Columns(self) -> GridColumnCollection: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DataStore(self) -> ITreeGridStore: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def GridLines(self) -> GridLines: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsEditing(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def RowHeight(self) -> int: ...
    @overload
    @property
    def SelectedItem(self) -> ITreeGridItem: ...
    @overload
    @property
    def SelectedItem(self) -> Object: ...
    @overload
    @property
    def SelectedItemBinding(self) -> BindableBinding: ...
    @overload
    @property
    def SelectedItems(self) -> Iterable[Object]: ...
    @overload
    @property
    def SelectedRow(self) -> int: ...
    @overload
    @property
    def SelectedRows(self) -> Iterable[int]: ...
    @overload
    @property
    def ShowHeader(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetCellAt(self, location: PointF) -> TreeGridCell: ...
    @overload
    def GetDragInfo(self, args: DragEventArgs) -> TreeGridViewDragInfo: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def ReloadData(self) -> None: ...
    @overload
    def ReloadItem(self, item: ITreeGridItem) -> None: ...
    @overload
    def ReloadItem(self, item: ITreeGridItem, reloadChildren: bool) -> None: ...
    @overload
    def remove_Activated(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellEdited(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellEditing(self, value: EventHandler) -> None: ...
    @overload
    def remove_CellFormatting(self, value: EventHandler) -> None: ...
    @overload
    def remove_Collapsed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Collapsing(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnHeaderClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnOrderChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_ColumnWidthChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Expanded(self, value: EventHandler) -> None: ...
    @overload
    def remove_Expanding(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedItemChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedItemsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectedRowsChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_SelectionChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def ScrollToRow(self, row: int) -> None: ...
    @overload
    def SelectAll(self) -> None: ...
    @overload
    def SelectRow(self, row: int) -> None: ...
    @overload
    @AllowColumnReordering.setter
    def AllowColumnReordering(self) -> MutableSequence[bool]: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AllowEmptySelection.setter
    def AllowEmptySelection(self) -> MutableSequence[bool]: ...
    @overload
    @AllowMultipleSelection.setter
    def AllowMultipleSelection(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Border.setter
    def Border(self) -> MutableSequence[BorderType]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @DataStore.setter
    def DataStore(self) -> MutableSequence[ITreeGridStore]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @GridLines.setter
    def GridLines(self) -> MutableSequence[GridLines]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @RowHeight.setter
    def RowHeight(self) -> MutableSequence[int]: ...
    @overload
    @SelectedItem.setter
    def SelectedItem(self) -> MutableSequence[ITreeGridItem]: ...
    @overload
    @SelectedRow.setter
    def SelectedRow(self) -> MutableSequence[int]: ...
    @overload
    @SelectedRows.setter
    def SelectedRows(self) -> MutableSequence[Iterable[int]]: ...
    @overload
    @ShowHeader.setter
    def ShowHeader(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UnselectAll(self) -> None: ...
    @overload
    def UnselectRow(self, row: int) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class TreeGridViewDragInfo:
    @overload
    def __init__(self, control: TreeGridView, parent: Object, item: Object, childIndex: Nullable, position: GridDragPosition): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ChildIndex(self) -> int: ...
    @overload
    @property
    def Control(self) -> TreeGridView: ...
    @overload
    @property
    def InsertIndex(self) -> int: ...
    @overload
    @property
    def IsChanged(self) -> bool: ...
    @overload
    @property
    def Item(self) -> Object: ...
    @overload
    @property
    def Parent(self) -> Object: ...
    @overload
    @property
    def Position(self) -> GridDragPosition: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def RestrictToInsert(self) -> None: ...
    @overload
    def RestrictToNode(self, item: Object, childLevels: int) -> bool: ...
    @overload
    def RestrictToOver(self) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[Object]: ...
    @overload
    @Parent.setter
    def Parent(self) -> MutableSequence[Object]: ...
    @overload
    @Position.setter
    def Position(self) -> MutableSequence[GridDragPosition]: ...
    @overload
    def ToString(self) -> str: ...


class TreeGridViewItemCancelEventArgs:
    @overload
    def __init__(self, item: ITreeGridItem): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def Item(self) -> ITreeGridItem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class TreeGridViewItemEventArgs:
    @overload
    def __init__(self, item: ITreeGridItem): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Item(self) -> ITreeGridItem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


from ..Drawing import Image
class TreeItem(ImageListItem):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, children: Iterable[ITreeItem]): ...
    @overload
    def __init__(self, children: Iterable[ITreeItem]): ...
    @overload
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Children(self) -> TreeItemCollection: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Expandable(self) -> bool: ...
    @overload
    @property
    def Expanded(self) -> bool: ...
    @overload
    @property
    def Image(self) -> Image: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    @property
    def Key(self) -> str: ...
    @overload
    @property
    def Parent(self) -> ITreeItem: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    @Expanded.setter
    def Expanded(self) -> MutableSequence[bool]: ...
    @overload
    @Image.setter
    def Image(self) -> MutableSequence[Image]: ...
    @overload
    @Key.setter
    def Key(self) -> MutableSequence[str]: ...
    @overload
    @Parent.setter
    def Parent(self) -> MutableSequence[ITreeItem]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class TreeItemCollection:
    @overload
    def __init__(self): ...
    def __iter__(self) -> Iterator[ITreeItem]: ...
    def __getitem__(self, index: int) -> ITreeItem: ...
    def __setitem__(self, index: int, value: ITreeItem): ...
    @overload
    def add_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Add(self, item: ITreeItem) -> None: ...
    @overload
    def AddRange(self, items: Iterable[ITreeItem]) -> None: ...
    @overload
    def Clear(self) -> None: ...
    @overload
    def Contains(self, item: ITreeItem) -> bool: ...
    @overload
    def CopyTo(self, array: Iterable[ITreeItem], index: int) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Count(self) -> int: ...
    @overload
    @property
    def Item(self) -> Sequence[int]: ...
    @overload
    def GetEnumerator(self) -> IEnumerator: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: ITreeItem) -> int: ...
    @overload
    def Insert(self, index: int, item: ITreeItem) -> None: ...
    @overload
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    @overload
    def remove_CollectionChanged(self, value: NotifyCollectionChangedEventHandler) -> None: ...
    @overload
    def Remove(self, item: ITreeItem) -> bool: ...
    @overload
    def RemoveAt(self, index: int) -> None: ...
    @overload
    @Item.setter
    def Item(self) -> MutableSequence[int]: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def ToString(self) -> str: ...


class TreeViewItemCancelEventArgs:
    @overload
    def __init__(self, item: ITreeItem): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def Item(self) -> ITreeItem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class TreeViewItemEditEventArgs(TreeViewItemCancelEventArgs):
    @overload
    def __init__(self, item: ITreeItem, label: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def Item(self) -> ITreeItem: ...
    @overload
    @property
    def Label(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    @Label.setter
    def Label(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class TreeViewItemEventArgs:
    @overload
    def __init__(self, item: ITreeItem): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Item(self) -> ITreeItem: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class UIThreadAccessException:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, message: str): ...
    @overload
    def __init__(self, message: str, inner: Exception): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Data(self) -> IDictionary: ...
    @overload
    @property
    def HelpLink(self) -> str: ...
    @overload
    @property
    def HResult(self) -> int: ...
    @overload
    @property
    def InnerException(self) -> Exception: ...
    @overload
    @property
    def Message(self) -> str: ...
    @overload
    @property
    def Source(self) -> str: ...
    @overload
    @property
    def StackTrace(self) -> str: ...
    @overload
    @property
    def TargetSite(self) -> MethodBase: ...
    @overload
    def GetBaseException(self) -> Exception: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @HelpLink.setter
    def HelpLink(self) -> MutableSequence[str]: ...
    @overload
    @Source.setter
    def Source(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class UIThreadCheckMode(Enum):
    # None = 0
    Warning = 1
    Error = 2


class UITimer(Widget):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, elapsedHandler: EventHandler): ...
    @overload
    def add_Elapsed(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def Interval(self) -> float: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Started(self) -> bool: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def remove_Elapsed(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Interval.setter
    def Interval(self) -> MutableSequence[float]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    def Start(self) -> None: ...
    @overload
    def Stop(self) -> None: ...
    @overload
    def ToString(self) -> str: ...




class VariableMaskedTextProvider:
    @overload
    def Clear(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @overload
    def Delete(self, position: int, length: int, forward: bool) -> Tuple[bool, int]: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def DisplayText(self) -> str: ...
    @overload
    @property
    def EditPositions(self) -> Iterable[int]: ...
    @overload
    @property
    def IsEmpty(self) -> bool: ...
    @overload
    @property
    def MaskCompleted(self) -> bool: ...
    @overload
    @property
    def Text(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Insert(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @overload
    def Replace(self, character: Char, position: int) -> Tuple[bool, int]: ...
    @overload
    @Text.setter
    def Text(self) -> MutableSequence[str]: ...
    @overload
    def ToString(self) -> str: ...


class VerticalAlignment(Enum):
    Top = 0
    Center = 1
    Bottom = 2
    Stretch = 3


from ..Drawing import Rectangle
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import PointF
from ..Drawing import RectangleF
from ..Drawing import Point
from ..Drawing import Image
class WebView(Control):
    @overload
    def __init__(self): ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DocumentLoaded(self, value: EventHandler) -> None: ...
    @overload
    def add_DocumentLoading(self, value: EventHandler) -> None: ...
    @overload
    def add_DocumentTitleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_Navigated(self, value: EventHandler) -> None: ...
    @overload
    def add_OpenNewWindow(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def ExecuteScript(self, script: str) -> str: ...
    @overload
    def ExecuteScriptAsync(self, script: str) -> Task: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def BrowserContextMenuEnabled(self) -> bool: ...
    @overload
    @property
    def CanGoBack(self) -> bool: ...
    @overload
    @property
    def CanGoForward(self) -> bool: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def DocumentTitle(self) -> str: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Url(self) -> Uri: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def GoBack(self) -> None: ...
    @overload
    def GoForward(self) -> None: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def LoadHtml(self, html: str, baseUri: Uri) -> None: ...
    @overload
    def LoadHtml(self, stream: Stream, baseUri: Uri) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def Reload(self) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DocumentLoaded(self, value: EventHandler) -> None: ...
    @overload
    def remove_DocumentLoading(self, value: EventHandler) -> None: ...
    @overload
    def remove_DocumentTitleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_Navigated(self, value: EventHandler) -> None: ...
    @overload
    def remove_OpenNewWindow(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @BrowserContextMenuEnabled.setter
    def BrowserContextMenuEnabled(self) -> MutableSequence[bool]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Url.setter
    def Url(self) -> MutableSequence[Uri]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    def ShowPrintDialog(self) -> None: ...
    @overload
    def Stop(self) -> None: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class WebViewLoadedEventArgs:
    @overload
    def __init__(self, uri: Uri): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Uri(self) -> Uri: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class WebViewLoadingEventArgs(WebViewLoadedEventArgs):
    @overload
    def __init__(self, uri: Uri, isMainFrame: bool): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def IsMainFrame(self) -> bool: ...
    @overload
    @property
    def Uri(self) -> Uri: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    @IsMainFrame.setter
    def IsMainFrame(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class WebViewNewWindowEventArgs(WebViewLoadingEventArgs):
    @overload
    def __init__(self, uri: Uri, newWindowName: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Cancel(self) -> bool: ...
    @overload
    @property
    def IsMainFrame(self) -> bool: ...
    @overload
    @property
    def NewWindowName(self) -> str: ...
    @overload
    @property
    def Uri(self) -> Uri: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    @Cancel.setter
    def Cancel(self) -> MutableSequence[bool]: ...
    @overload
    @IsMainFrame.setter
    def IsMainFrame(self) -> MutableSequence[bool]: ...
    @overload
    def ToString(self) -> str: ...


class WebViewTitleEventArgs:
    @overload
    def __init__(self, title: str): ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...


class WidgetExtensions:
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    @staticmethod
    def With(widget: T, action: Action) -> T: ...


from ..Drawing import PointF
from ..Drawing import Point
from ..Drawing import Rectangle
from ..Drawing import Icon
from ..Drawing import Padding
from ..Drawing import Size
from ..Drawing import SizeF
from ..Drawing import Color
from ..Drawing import RectangleF
from ..Drawing import Image
class Window(Panel):
    @overload
    def add_Closed(self, value: EventHandler) -> None: ...
    @overload
    def add_Closing(self, value: EventHandler) -> None: ...
    @overload
    def add_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def add_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def add_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def add_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def add_Load(self, value: EventHandler) -> None: ...
    @overload
    def add_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def add_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def add_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def add_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_Shown(self, value: EventHandler) -> None: ...
    @overload
    def add_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def add_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def add_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def add_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def AttachNative(self) -> None: ...
    @overload
    def BringToFront(self) -> None: ...
    @overload
    def Close(self) -> None: ...
    @overload
    def Detach(self) -> None: ...
    @overload
    def DetachNative(self) -> None: ...
    @overload
    def Dispose(self) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects) -> None: ...
    @overload
    def DoDragDrop(self, data: DataObject, allowedEffects: DragEffects, image: Image, cursorOffset: PointF) -> None: ...
    @overload
    def Equals(self, obj: Object) -> bool: ...
    @overload
    def FindChild(self, id: str) -> Control: ...
    @overload
    def FindChild(self, id: str) -> T: ...
    @overload
    def FindChild(self, type: Type, id: str) -> Control: ...
    @overload
    def FindParent(self, id: str) -> Container: ...
    @overload
    def FindParent(self, id: str) -> Widget: ...
    @overload
    def FindParent(self, id: str) -> T: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Widget: ...
    @overload
    def FindParent(self, type: Type, id: str) -> Container: ...
    @overload
    def Focus(self) -> None: ...
    @overload
    @staticmethod
    def FromPoint(point: PointF) -> Window: ...
    @overload
    @property
    def AllowDrop(self) -> bool: ...
    @overload
    @property
    def AutoSize(self) -> bool: ...
    @overload
    @property
    def BackgroundColor(self) -> Color: ...
    @overload
    @property
    def Bindings(self) -> BindingCollection: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Bounds(self) -> Rectangle: ...
    @overload
    @property
    def Children(self) -> Iterable[Control]: ...
    @overload
    @property
    def ClientSize(self) -> Size: ...
    @overload
    @property
    def Content(self) -> Control: ...
    @overload
    @property
    def ContextMenu(self) -> ContextMenu: ...
    @overload
    @property
    def ControlObject(self) -> Object: ...
    @overload
    @property
    def Controls(self) -> Iterable[Control]: ...
    @overload
    @property
    def Cursor(self) -> Cursor: ...
    @overload
    @property
    def DataContext(self) -> Object: ...
    @overload
    @property
    def Enabled(self) -> bool: ...
    @overload
    @property
    def Handler(self) -> Object: ...
    @overload
    @property
    def HasFocus(self) -> bool: ...
    @overload
    @property
    def Height(self) -> int: ...
    @overload
    @property
    def Icon(self) -> Icon: ...
    @overload
    @property
    def ID(self) -> str: ...
    @overload
    @property
    def IsAttached(self) -> bool: ...
    @overload
    @property
    def IsDisposed(self) -> bool: ...
    @overload
    @property
    def IsSuspended(self) -> bool: ...
    @overload
    @property
    def IsVisualControl(self) -> bool: ...
    @overload
    @property
    def Loaded(self) -> bool: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def Location(self) -> Point: ...
    @overload
    @property
    def LogicalParent(self) -> Container: ...
    @overload
    @property
    def LogicalPixelSize(self) -> Single: ...
    @overload
    @property
    def Maximizable(self) -> bool: ...
    @overload
    @property
    def Menu(self) -> MenuBar: ...
    @overload
    @property
    def Minimizable(self) -> bool: ...
    @overload
    @property
    def MinimumSize(self) -> Size: ...
    @overload
    @property
    def MovableByWindowBackground(self) -> bool: ...
    @overload
    @property
    def NativeHandle(self) -> IntPtr: ...
    @overload
    @property
    def Opacity(self) -> float: ...
    @overload
    @property
    def Owner(self) -> Window: ...
    @overload
    @property
    def Padding(self) -> Padding: ...
    @overload
    @property
    def Parent(self) -> Container: ...
    @overload
    @property
    def Parent(self) -> Widget: ...
    @overload
    @property
    def Parents(self) -> Iterable[Widget]: ...
    @overload
    @property
    def ParentWindow(self) -> Window: ...
    @overload
    @property
    def Platform(self) -> Platform: ...
    @overload
    @property
    def Properties(self) -> PropertyStore: ...
    @overload
    @property
    def Resizable(self) -> bool: ...
    @overload
    @property
    def RestoreBounds(self) -> Rectangle: ...
    @overload
    @property
    def Screen(self) -> Screen: ...
    @overload
    @property
    def ShowInTaskbar(self) -> bool: ...
    @overload
    @property
    def Size(self) -> Size: ...
    @overload
    @property
    def Style(self) -> str: ...
    @overload
    @property
    def StyleProvider(self) -> IStyleProvider: ...
    @overload
    @property
    def Styles(self) -> DefaultStyleProvider: ...
    @overload
    @property
    def SupportedPlatformCommands(self) -> Iterable[str]: ...
    @overload
    @property
    def TabIndex(self) -> int: ...
    @overload
    @property
    def Tag(self) -> Object: ...
    @overload
    @property
    def Title(self) -> str: ...
    @overload
    @property
    def ToolBar(self) -> ToolBar: ...
    @overload
    @property
    def ToolTip(self) -> str: ...
    @overload
    @property
    def Topmost(self) -> bool: ...
    @overload
    @property
    def Visible(self) -> bool: ...
    @overload
    @property
    def VisualChildren(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualControls(self) -> Iterable[Control]: ...
    @overload
    @property
    def VisualParent(self) -> Container: ...
    @overload
    @property
    def Width(self) -> int: ...
    @overload
    @property
    def WindowState(self) -> WindowState: ...
    @overload
    @property
    def WindowStyle(self) -> WindowStyle: ...
    @overload
    def GetHashCode(self) -> int: ...
    @overload
    def GetPreferredSize(self) -> SizeF: ...
    @overload
    def GetPreferredSize(self, availableSize: SizeF) -> SizeF: ...
    @overload
    def GetType(self) -> Type: ...
    @overload
    def Invalidate(self) -> None: ...
    @overload
    def Invalidate(self, invalidateChildren: bool) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle) -> None: ...
    @overload
    def Invalidate(self, rect: Rectangle, invalidateChildren: bool) -> None: ...
    @overload
    def MapPlatformCommand(self, systemCommand: str, command: Command) -> None: ...
    @overload
    def Maximize(self) -> None: ...
    @overload
    def Minimize(self) -> None: ...
    @overload
    def PointFromScreen(self, point: PointF) -> PointF: ...
    @overload
    def PointToScreen(self, point: PointF) -> PointF: ...
    @overload
    def Print(self) -> None: ...
    @overload
    def RectangleFromScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def RectangleToScreen(self, rect: RectangleF) -> RectangleF: ...
    @overload
    def remove_Closed(self, value: EventHandler) -> None: ...
    @overload
    def remove_Closing(self, value: EventHandler) -> None: ...
    @overload
    def remove_DataContextChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragDrop(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_DragOver(self, value: EventHandler) -> None: ...
    @overload
    def remove_EnabledChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_GotFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_KeyUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_Load(self, value: EventHandler) -> None: ...
    @overload
    def remove_LoadComplete(self, value: EventHandler) -> None: ...
    @overload
    def remove_LocationChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LogicalPixelSizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_LostFocus(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDoubleClick(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseDown(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseEnter(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseLeave(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseMove(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseUp(self, value: EventHandler) -> None: ...
    @overload
    def remove_MouseWheel(self, value: EventHandler) -> None: ...
    @overload
    def remove_OwnerChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_PreLoad(self, value: EventHandler) -> None: ...
    @overload
    def Remove(self, child: Control) -> None: ...
    @overload
    def Remove(self, controls: Iterable[Control]) -> None: ...
    @overload
    def remove_Shown(self, value: EventHandler) -> None: ...
    @overload
    def remove_SizeChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_StyleChanged(self, value: EventHandler) -> None: ...
    @overload
    def remove_TextInput(self, value: EventHandler) -> None: ...
    @overload
    def remove_UnLoad(self, value: EventHandler) -> None: ...
    @overload
    def remove_WindowStateChanged(self, value: EventHandler) -> None: ...
    @overload
    def RemoveAll(self) -> None: ...
    @overload
    def ResumeLayout(self) -> None: ...
    @overload
    def SendToBack(self) -> None: ...
    @overload
    @AllowDrop.setter
    def AllowDrop(self) -> MutableSequence[bool]: ...
    @overload
    @AutoSize.setter
    def AutoSize(self) -> MutableSequence[bool]: ...
    @overload
    @BackgroundColor.setter
    def BackgroundColor(self) -> MutableSequence[Color]: ...
    @overload
    @Bounds.setter
    def Bounds(self) -> MutableSequence[Rectangle]: ...
    @overload
    @ClientSize.setter
    def ClientSize(self) -> MutableSequence[Size]: ...
    @overload
    @Content.setter
    def Content(self) -> MutableSequence[Control]: ...
    @overload
    @ContextMenu.setter
    def ContextMenu(self) -> MutableSequence[ContextMenu]: ...
    @overload
    @Cursor.setter
    def Cursor(self) -> MutableSequence[Cursor]: ...
    @overload
    @DataContext.setter
    def DataContext(self) -> MutableSequence[Object]: ...
    @overload
    @Enabled.setter
    def Enabled(self) -> MutableSequence[bool]: ...
    @overload
    @Height.setter
    def Height(self) -> MutableSequence[int]: ...
    @overload
    @Icon.setter
    def Icon(self) -> MutableSequence[Icon]: ...
    @overload
    @ID.setter
    def ID(self) -> MutableSequence[str]: ...
    @overload
    @Location.setter
    def Location(self) -> MutableSequence[Point]: ...
    @overload
    @Maximizable.setter
    def Maximizable(self) -> MutableSequence[bool]: ...
    @overload
    @Menu.setter
    def Menu(self) -> MutableSequence[MenuBar]: ...
    @overload
    @Minimizable.setter
    def Minimizable(self) -> MutableSequence[bool]: ...
    @overload
    @MinimumSize.setter
    def MinimumSize(self) -> MutableSequence[Size]: ...
    @overload
    @MovableByWindowBackground.setter
    def MovableByWindowBackground(self) -> MutableSequence[bool]: ...
    @overload
    @Opacity.setter
    def Opacity(self) -> MutableSequence[float]: ...
    @overload
    @Owner.setter
    def Owner(self) -> MutableSequence[Window]: ...
    @overload
    @Padding.setter
    def Padding(self) -> MutableSequence[Padding]: ...
    @overload
    @Resizable.setter
    def Resizable(self) -> MutableSequence[bool]: ...
    @overload
    @ShowInTaskbar.setter
    def ShowInTaskbar(self) -> MutableSequence[bool]: ...
    @overload
    @Size.setter
    def Size(self) -> MutableSequence[Size]: ...
    @overload
    @Style.setter
    def Style(self) -> MutableSequence[str]: ...
    @overload
    @StyleProvider.setter
    def StyleProvider(self) -> MutableSequence[IStyleProvider]: ...
    @overload
    @TabIndex.setter
    def TabIndex(self) -> MutableSequence[int]: ...
    @overload
    @Tag.setter
    def Tag(self) -> MutableSequence[Object]: ...
    @overload
    @Title.setter
    def Title(self) -> MutableSequence[str]: ...
    @overload
    @ToolBar.setter
    def ToolBar(self) -> MutableSequence[ToolBar]: ...
    @overload
    @ToolTip.setter
    def ToolTip(self) -> MutableSequence[str]: ...
    @overload
    @Topmost.setter
    def Topmost(self) -> MutableSequence[bool]: ...
    @overload
    @Visible.setter
    def Visible(self) -> MutableSequence[bool]: ...
    @overload
    @Width.setter
    def Width(self) -> MutableSequence[int]: ...
    @overload
    @WindowState.setter
    def WindowState(self) -> MutableSequence[WindowState]: ...
    @overload
    @WindowStyle.setter
    def WindowStyle(self) -> MutableSequence[WindowStyle]: ...
    @overload
    def SuspendLayout(self) -> None: ...
    @overload
    def ToString(self) -> str: ...
    @overload
    def Unbind(self) -> None: ...
    @overload
    def UpdateBindings(self, mode: BindingUpdateMode) -> None: ...


class WindowState(Enum):
    Normal = 0
    Maximized = 1
    Minimized = 2


class WindowStyle(Enum):
    Default = 0
    # None = 1
    Utility = 2


class WrapMode(Enum):
    # None = 0
    Word = 1
    Character = 2
