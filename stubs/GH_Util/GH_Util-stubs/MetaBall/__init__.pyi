from typing import Tuple, Iterable, overload
from enum import Enum



class FieldSolver:
    def __init__(self, object: Object, method: IntPtr): ...
    def BeginInvoke(self, context: GH_Context, x: float, y: float, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def Clone(self) -> Object: ...
    def DynamicInvoke(self, args: Iterable[Object]) -> Object: ...
    def EndInvoke(self, result: IAsyncResult) -> float: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> Object: ...
    def GetHashCode(self) -> int: ...
    def GetInvocationList(self) -> Iterable[Delegate]: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetType(self) -> Type: ...
    def Invoke(self, context: GH_Context, x: float, y: float) -> float: ...
    def ToString(self) -> str: ...


class GH_CellInfo:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nX: int, nY: int): ...
    @overload
    def __init__(self, nX: int, nY: int, na: float, nb: float, nc: float, nd: float): ...
    def DetermineMask(self, threshold: float) -> None: ...
    def DetermineRealBox(self, accuracy: float) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Context:
    def __init__(self): ...
    @overload
    def AddParticle(self, particle_x: float, particle_y: float) -> None: ...
    @overload
    def AddParticle(self, particle_x: float, particle_y: float, particle_charge: float, particle_radius: float) -> None: ...
    @overload
    def AddParticle(self, particle_x: float, particle_y: float, particle_z: float, particle_charge: float, particle_radius: float) -> None: ...
    @overload
    def ClosestParticle(self, sample_x: float, sample_y: float) -> Tuple[int, float]: ...
    @overload
    def ClosestParticle(self, sample_x: float, sample_y: float, sample_z: float) -> Tuple[int, float]: ...
    def Equals(self, obj: Object) -> bool: ...
    @property
    def Accuracy(self) -> float: ...
    @property
    def Affinity(self) -> float: ...
    @property
    def ParticleCount(self) -> int: ...
    @property
    def SolverDelegate(self) -> FieldSolver: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    @staticmethod
    def InverseSquareSolver(context: GH_Context, x: float, y: float) -> float: ...
    def Particle(self, index: int) -> GH_Particle: ...
    def Potential(self, x: float, y: float) -> float: ...
    def RemoveParticle(self, index: int) -> None: ...
    @Accuracy.setter
    def Accuracy(self, value: float) -> None: ...
    @Affinity.setter
    def Affinity(self, value: float) -> None: ...
    @SolverDelegate.setter
    def SolverDelegate(self, value: FieldSolver) -> None: ...
    @staticmethod
    def SineFallOffSolver(context: GH_Context, x: float, y: float) -> float: ...
    @overload
    def SolveIsoSurfaces(self, threshold: float) -> List: ...
    @overload
    def SolveIsoSurfaces(self, threshold: float) -> Tuple[List, GH_2DSparseArray]: ...
    def ToString(self) -> str: ...


class GH_Direction(Enum):
    invalid = 0
    left = 1
    right = 2
    down = 3
    up = 4


class GH_IsoSurface:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, initial_capacity: int): ...
    def Add(self, item: GH_Vertex) -> None: ...
    def AddRange(self, collection: Iterable[GH_Vertex]) -> None: ...
    def AsReadOnly(self) -> ReadOnlyCollection: ...
    @overload
    def BinarySearch(self, item: GH_Vertex) -> int: ...
    @overload
    def BinarySearch(self, item: GH_Vertex, comparer: IComparer) -> int: ...
    @overload
    def BinarySearch(self, index: int, count: int, item: GH_Vertex, comparer: IComparer) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, item: GH_Vertex) -> bool: ...
    def ConvertAll(self, converter: Converter) -> List: ...
    @overload
    def CopyTo(self, array: Iterable[GH_Vertex]) -> None: ...
    @overload
    def CopyTo(self, array: Iterable[GH_Vertex], arrayIndex: int) -> None: ...
    @overload
    def CopyTo(self, index: int, array: Iterable[GH_Vertex], arrayIndex: int, count: int) -> None: ...
    def Equals(self, obj: Object) -> bool: ...
    def Exists(self, match: Predicate) -> bool: ...
    def Find(self, match: Predicate) -> GH_Vertex: ...
    def FindAll(self, match: Predicate) -> List: ...
    @overload
    def FindIndex(self, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def FindLast(self, match: Predicate) -> GH_Vertex: ...
    @overload
    def FindLastIndex(self, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, match: Predicate) -> int: ...
    @overload
    def FindLastIndex(self, startIndex: int, count: int, match: Predicate) -> int: ...
    def ForEach(self, action: Action) -> None: ...
    @property
    def Capacity(self) -> int: ...
    @property
    def Count(self) -> int: ...
    @property
    def IsClosed(self) -> bool: ...
    @property
    def Item(self, index: int) -> GH_Vertex: ...
    def GetEnumerator(self) -> Enumerator: ...
    def GetHashCode(self) -> int: ...
    def GetRange(self, index: int, count: int) -> List: ...
    def GetType(self) -> Type: ...
    @overload
    def IndexOf(self, item: GH_Vertex) -> int: ...
    @overload
    def IndexOf(self, item: GH_Vertex, index: int) -> int: ...
    @overload
    def IndexOf(self, item: GH_Vertex, index: int, count: int) -> int: ...
    def Insert(self, index: int, item: GH_Vertex) -> None: ...
    def InsertRange(self, index: int, collection: Iterable[GH_Vertex]) -> None: ...
    @overload
    def LastIndexOf(self, item: GH_Vertex) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_Vertex, index: int) -> int: ...
    @overload
    def LastIndexOf(self, item: GH_Vertex, index: int, count: int) -> int: ...
    def Remove(self, item: GH_Vertex) -> bool: ...
    def RemoveAll(self, match: Predicate) -> int: ...
    def RemoveAt(self, index: int) -> None: ...
    def RemoveRange(self, index: int, count: int) -> None: ...
    @overload
    def Reverse(self) -> None: ...
    @overload
    def Reverse(self, index: int, count: int) -> None: ...
    @Capacity.setter
    def Capacity(self, value: int) -> None: ...
    @Item.setter
    def Item(self, index: int, value: GH_Vertex) -> None: ...
    def Smooth(self) -> None: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: IComparer) -> None: ...
    @overload
    def Sort(self, comparison: Comparison) -> None: ...
    @overload
    def Sort(self, index: int, count: int, comparer: IComparer) -> None: ...
    def ToArray(self) -> Iterable[GH_Vertex]: ...
    def ToString(self) -> str: ...
    def TrimExcess(self) -> None: ...
    def TrueForAll(self, match: Predicate) -> bool: ...


class GH_Mask(Enum):
    _0000 = 0
    _0001 = 1
    _0010 = 2
    _0011 = 3
    _0100 = 4
    _0101 = 5
    _0110 = 6
    _0111 = 7
    _1000 = 8
    _1001 = 9
    _1010 = 10
    _1011 = 11
    _1100 = 12
    _1101 = 13
    _1110 = 14
    _1111 = 15


class GH_Particle:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, nx: float, ny: float, nz: float, nc: float, nr: float): ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def ToString(self) -> str: ...


class GH_Vertex:
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, pt: PointF): ...
    @overload
    def __init__(self, other: GH_Vertex): ...
    @overload
    def __init__(self, vx: float, vy: float): ...
    def Equals(self, obj: Object) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetType(self) -> Type: ...
    def __eq__(A: GH_Vertex, B: GH_Vertex) -> bool: ...
    def __ne__(A: GH_Vertex, B: GH_Vertex) -> bool: ...
    def ToString(self) -> str: ...
